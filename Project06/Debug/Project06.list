
Project06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a514  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800a6a8  0800a6a8  0001a6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd8  0800acd8  000204dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace0  0800ace0  000204dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004dc  20000000  0800ace8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000106a4  200004dc  0800b1c4  000204dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010b80  0800b1c4  00020b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b10  00000000  00000000  0002050c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ba  00000000  00000000  0003901c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  0003d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af09  00000000  00000000  0003eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001953e  00000000  00000000  000699e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b835  00000000  00000000  00082f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e75c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c44  00000000  00000000  0018e7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004dc 	.word	0x200004dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a68c 	.word	0x0800a68c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004e0 	.word	0x200004e0
 80001cc:	0800a68c 	.word	0x0800a68c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <get_frequency>:

#include "ADC.h"
#include <string.h>
#include "math.h"

void get_frequency(ADC_info_t *ADC_info, uint16_t *ADC_buffer) {
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	int i;
	int points = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
	uint8_t low = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
	uint16_t first_point_index, second_point_index;

	for (i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND) && points < 2; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e07d      	b.n	8000fc4 <get_frequency+0x114>
		// Get frequency for Sine and Triangle
		if (ADC_buffer[i] >= (ADC_info->maxv - MAX_VOLTAGE_BUFFER) && ADC_info->signal != Rectangle) {
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	889b      	ldrh	r3, [r3, #4]
 8000ed8:	3b0f      	subs	r3, #15
 8000eda:	429a      	cmp	r2, r3
 8000edc:	db2c      	blt.n	8000f38 <get_frequency+0x88>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d028      	beq.n	8000f38 <get_frequency+0x88>
			if (points%2 == 0) {
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <get_frequency+0x4c>
				first_point_index = i;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	81bb      	strh	r3, [r7, #12]
				points++;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	613b      	str	r3, [r7, #16]
			if (points%2 == 0) {
 8000efa:	e05f      	b.n	8000fbc <get_frequency+0x10c>
			}
			else if (points%2 != 0) {
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d05a      	beq.n	8000fbc <get_frequency+0x10c>
				if (i > first_point_index + POINT_DELAY) {
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dd55      	ble.n	8000fbc <get_frequency+0x10c>
					second_point_index = i;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	817b      	strh	r3, [r7, #10]
					ADC_info->samples = second_point_index - first_point_index;
 8000f14:	897a      	ldrh	r2, [r7, #10]
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	615a      	str	r2, [r3, #20]
					// Compute the frequency
					ADC_info->freq = (SAMPLES_PER_SECOND/ADC_info->samples);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	60da      	str	r2, [r3, #12]
					points++;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	3301      	adds	r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
			if (points%2 == 0) {
 8000f36:	e041      	b.n	8000fbc <get_frequency+0x10c>
				}
			}
		}
		// Get frequency for Rectangle
		else if (ADC_info->signal == Rectangle)  {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7a1b      	ldrb	r3, [r3, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d13e      	bne.n	8000fbe <get_frequency+0x10e>
			if (ADC_buffer[i] <= (ADC_info->minv + MAX_VOLTAGE_BUFFER)){
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	88db      	ldrh	r3, [r3, #6]
 8000f50:	330f      	adds	r3, #15
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dc01      	bgt.n	8000f5a <get_frequency+0xaa>
				low = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
			}
			if (ADC_buffer[i] == (ADC_info->maxv - MAX_VOLTAGE_BUFFER) && low == 1) {
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	3b0f      	subs	r3, #15
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d126      	bne.n	8000fbe <get_frequency+0x10e>
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d123      	bne.n	8000fbe <get_frequency+0x10e>
				if (points == 0) {
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d107      	bne.n	8000f8c <get_frequency+0xdc>
					first_point_index = i;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	81bb      	strh	r3, [r7, #12]
					points++;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
					low = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e018      	b.n	8000fbe <get_frequency+0x10e>
				}
				else if(points == 1){
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d115      	bne.n	8000fbe <get_frequency+0x10e>
					second_point_index = i;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	817b      	strh	r3, [r7, #10]
					points++;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
					ADC_info->samples = second_point_index - first_point_index;
 8000f9c:	897a      	ldrh	r2, [r7, #10]
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	615a      	str	r2, [r3, #20]
					// Compute the frequency
					ADC_info->freq = (SAMPLES_PER_SECOND/ADC_info->samples);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
					break;
 8000fb8:	bf00      	nop
				}
			}
		}
	}
}
 8000fba:	e030      	b.n	800101e <get_frequency+0x16e>
			if (points%2 == 0) {
 8000fbc:	bf00      	nop
	for (i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND) && points < 2; i++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	6978      	ldr	r0, [r7, #20]
 8000fc6:	f7ff faa5 	bl	8000514 <__aeabi_i2d>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	460d      	mov	r5, r1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fda:	ee17 0a90 	vmov	r0, s15
 8000fde:	f7ff faab 	bl	8000538 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4911      	ldr	r1, [pc, #68]	; (8001030 <get_frequency+0x180>)
 8000fec:	f7ff fc26 	bl	800083c <__aeabi_ddiv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	a30b      	add	r3, pc, #44	; (adr r3, 8001028 <get_frequency+0x178>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff faf3 	bl	80005e8 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff fd5f 	bl	8000acc <__aeabi_dcmplt>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <get_frequency+0x166>
}
 8001014:	e003      	b.n	800101e <get_frequency+0x16e>
	for (i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND) && points < 2; i++) {
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b01      	cmp	r3, #1
 800101a:	f77f af55 	ble.w	8000ec8 <get_frequency+0x18>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
 8001026:	bf00      	nop
 8001028:	00000000 	.word	0x00000000
 800102c:	40c38800 	.word	0x40c38800
 8001030:	408f4000 	.word	0x408f4000

08001034 <get_signal_type>:

void get_signal_type(ADC_info_t *ADC_info, int *buckets, uint16_t *ADC_buffer) {
 8001034:	b480      	push	{r7}
 8001036:	b08f      	sub	sp, #60	; 0x3c
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	int increment = 410;
 8001040:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8001044:	61fb      	str	r3, [r7, #28]
	int i = ADC_info->minv / increment;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	88db      	ldrh	r3, [r3, #6]
 800104a:	461a      	mov	r2, r3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
	int signal_points = 10000;
 8001054:	f242 7310 	movw	r3, #10000	; 0x2710
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
	int first = 0, second, third;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int first_slope, second_slope;
	uint8_t found = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

//	// Check for Rectangle wave
	if (buckets[i] > (buckets[i+1] + buckets[i+2] + buckets[i+3])) {
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	3301      	adds	r3, #1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	440b      	add	r3, r1
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	3302      	adds	r3, #2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	4403      	add	r3, r0
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4419      	add	r1, r3
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108a:	3303      	adds	r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	68b8      	ldr	r0, [r7, #8]
 8001090:	4403      	add	r3, r0
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	440b      	add	r3, r1
 8001096:	429a      	cmp	r2, r3
 8001098:	dd03      	ble.n	80010a2 <get_signal_type+0x6e>
		ADC_info->signal = Rectangle;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	721a      	strb	r2, [r3, #8]
		return;
 80010a0:	e081      	b.n	80011a6 <get_signal_type+0x172>
	}
	// Check for Sine and Triangle Wave
	else {
		// Check to see if the slop is linear (Triangle)
		for (i = 0; i < signal_points; i ++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
 80010a6:	e077      	b.n	8001198 <get_signal_type+0x164>
			// Get first point for both slopes slopes
			if (ADC_buffer[i] == ADC_info->maxv && signal_points == 10000) {
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	881a      	ldrh	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d10b      	bne.n	80010d2 <get_signal_type+0x9e>
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d106      	bne.n	80010d2 <get_signal_type+0x9e>
				signal_points = i + (ADC_info->samples);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ca:	4413      	add	r3, r2
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
				first = i;
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			// Find next two points along that slope
			if (first != 0) {
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d040      	beq.n	800115a <get_signal_type+0x126>
				if (i >= first + (signal_points/3)) {
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <get_signal_type+0x17c>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	17db      	asrs	r3, r3, #31
 80010e2:	1ad2      	subs	r2, r2, r3
 80010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e6:	4413      	add	r3, r2
 80010e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ea:	429a      	cmp	r2, r3
 80010ec:	db14      	blt.n	8001118 <get_signal_type+0xe4>
					second = i;
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	617b      	str	r3, [r7, #20]
					first_slope = abs((int)(((ADC_info->maxv - ADC_buffer[i])/(second - first))));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	1aca      	subs	r2, r1, r3
 8001104:	6979      	ldr	r1, [r7, #20]
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	1acb      	subs	r3, r1, r3
 800110a:	fb92 f3f3 	sdiv	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
 8001116:	e020      	b.n	800115a <get_signal_type+0x126>
				}
				else if (i >= first + (signal_points/2)) {
 8001118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111a:	0fda      	lsrs	r2, r3, #31
 800111c:	4413      	add	r3, r2
 800111e:	105b      	asrs	r3, r3, #1
 8001120:	461a      	mov	r2, r3
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	4413      	add	r3, r2
 8001126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001128:	429a      	cmp	r2, r3
 800112a:	db16      	blt.n	800115a <get_signal_type+0x126>
					third = i;
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	61bb      	str	r3, [r7, #24]
					second_slope = abs((int)((ADC_info->maxv - ADC_buffer[i])/(third - first)));
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	4619      	mov	r1, r3
 8001136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	1aca      	subs	r2, r1, r3
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001146:	1acb      	subs	r3, r1, r3
 8001148:	fb92 f3f3 	sdiv	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfb8      	it	lt
 8001150:	425b      	neglt	r3, r3
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
					found = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
			}

			// If slopes match it means linear or triangle, if not then non-linear or sine
			if (second_slope != first_slope && found == 1) {
 800115a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	429a      	cmp	r2, r3
 8001160:	d00f      	beq.n	8001182 <get_signal_type+0x14e>
 8001162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <get_signal_type+0x14e>
				if (second_slope != first_slope) { ADC_info->signal = Sine; break;}
 800116a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	429a      	cmp	r2, r3
 8001170:	d003      	beq.n	800117a <get_signal_type+0x146>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2202      	movs	r2, #2
 8001176:	721a      	strb	r2, [r3, #8]
 8001178:	e012      	b.n	80011a0 <get_signal_type+0x16c>
				else { ADC_info->signal = Arbitrary; break;}
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2203      	movs	r2, #3
 800117e:	721a      	strb	r2, [r3, #8]
 8001180:	e00e      	b.n	80011a0 <get_signal_type+0x16c>
			}
			else if (found == 1) {
 8001182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001186:	2b01      	cmp	r3, #1
 8001188:	d103      	bne.n	8001192 <get_signal_type+0x15e>
				ADC_info->signal = Triangle;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	721a      	strb	r2, [r3, #8]
				break;
 8001190:	e006      	b.n	80011a0 <get_signal_type+0x16c>
		for (i = 0; i < signal_points; i ++) {
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	3301      	adds	r3, #1
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
 8001198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119c:	429a      	cmp	r2, r3
 800119e:	db83      	blt.n	80010a8 <get_signal_type+0x74>
		}

	}

	// Unknown Wave
	ADC_info->signal = Arbitrary;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2203      	movs	r2, #3
 80011a4:	721a      	strb	r2, [r3, #8]
}
 80011a6:	373c      	adds	r7, #60	; 0x3c
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	55555556 	.word	0x55555556
 80011b4:	00000000 	.word	0x00000000

080011b8 <get_min_max>:

void get_min_max(ADC_info_t *ADC_info, uint16_t *ADC_buffer) {
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	int i;

	for(i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND); i++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e023      	b.n	8001210 <get_min_max+0x58>
		// Get min and max
		if (ADC_buffer[i] > ADC_info->maxv) {ADC_info->maxv = ADC_buffer[i];}
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	889b      	ldrh	r3, [r3, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d907      	bls.n	80011ea <get_min_max+0x32>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	809a      	strh	r2, [r3, #4]
 80011e8:	e00f      	b.n	800120a <get_min_max+0x52>
		else if (ADC_buffer[i] < ADC_info->minv) {ADC_info->minv = ADC_buffer[i];}
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d206      	bcs.n	800120a <get_min_max+0x52>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	4413      	add	r3, r2
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND); i++) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f7ff f97f 	bl	8000514 <__aeabi_i2d>
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001226:	ee17 0a90 	vmov	r0, s15
 800122a:	f7ff f985 	bl	8000538 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	4910      	ldr	r1, [pc, #64]	; (8001278 <get_min_max+0xc0>)
 8001238:	f7ff fb00 	bl	800083c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	a30a      	add	r3, pc, #40	; (adr r3, 8001270 <get_min_max+0xb8>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f9cd 	bl	80005e8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f7ff fc39 	bl	8000acc <__aeabi_dcmplt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1b3      	bne.n	80011c8 <get_min_max+0x10>
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40c38800 	.word	0x40c38800
 8001278:	408f4000 	.word	0x408f4000
 800127c:	00000000 	.word	0x00000000

08001280 <get_buckets>:

void get_buckets(uint16_t *ADC_buffer, int *buckets, ADC_info_t *ADC_info) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int i;

	for(i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND); i++) {
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e092      	b.n	80013b8 <get_buckets+0x138>
		// Put results into Buckets
		if (ADC_buffer[i] < 411) { buckets[0]++; }
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80012a0:	d805      	bhi.n	80012ae <get_buckets+0x2e>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e081      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 821) {  buckets[1]++; }
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80012bc:	d805      	bhi.n	80012ca <get_buckets+0x4a>
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3304      	adds	r3, #4
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	3201      	adds	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e073      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 1230) {  buckets[2]++; }
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	f240 42cd 	movw	r2, #1229	; 0x4cd
 80012d8:	4293      	cmp	r3, r2
 80012da:	d805      	bhi.n	80012e8 <get_buckets+0x68>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3308      	adds	r3, #8
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	3201      	adds	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e064      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 1640) {  buckets[3]++; }
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	f5b3 6fcd 	cmp.w	r3, #1640	; 0x668
 80012f6:	d205      	bcs.n	8001304 <get_buckets+0x84>
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	330c      	adds	r3, #12
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	3201      	adds	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e056      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 2050) {  buckets[4]++; }
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f640 0201 	movw	r2, #2049	; 0x801
 8001312:	4293      	cmp	r3, r2
 8001314:	d805      	bhi.n	8001322 <get_buckets+0xa2>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3310      	adds	r3, #16
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	3201      	adds	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e047      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 2460) {  buckets[5]++; }
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	f640 129b 	movw	r2, #2459	; 0x99b
 8001330:	4293      	cmp	r3, r2
 8001332:	d805      	bhi.n	8001340 <get_buckets+0xc0>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3314      	adds	r3, #20
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	3201      	adds	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e038      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 2870) {  buckets[6]++; }
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	f640 3235 	movw	r2, #2869	; 0xb35
 800134e:	4293      	cmp	r3, r2
 8001350:	d805      	bhi.n	800135e <get_buckets+0xde>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3318      	adds	r3, #24
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	3201      	adds	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e029      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 3280) {  buckets[7]++; }
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	f5b3 6f4d 	cmp.w	r3, #3280	; 0xcd0
 800136c:	d205      	bcs.n	800137a <get_buckets+0xfa>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	331c      	adds	r3, #28
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	3201      	adds	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e01b      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  < 3690) {  buckets[8]++; }
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	f640 6269 	movw	r2, #3689	; 0xe69
 8001388:	4293      	cmp	r3, r2
 800138a:	d805      	bhi.n	8001398 <get_buckets+0x118>
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3320      	adds	r3, #32
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	3201      	adds	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e00c      	b.n	80013b2 <get_buckets+0x132>
		else if (ADC_buffer[i]  <= 4095) {  buckets[9]++; }
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a6:	d204      	bcs.n	80013b2 <get_buckets+0x132>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3324      	adds	r3, #36	; 0x24
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	3201      	adds	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
	for(i = 0; i < ((1000.0/(float)ADC_info->read_period)*SAMPLES_PER_SECOND); i++) {
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff f8ab 	bl	8000514 <__aeabi_i2d>
 80013be:	4604      	mov	r4, r0
 80013c0:	460d      	mov	r5, r1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	ee17 0a90 	vmov	r0, s15
 80013d2:	f7ff f8b1 	bl	8000538 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	f04f 0000 	mov.w	r0, #0
 80013de:	4910      	ldr	r1, [pc, #64]	; (8001420 <get_buckets+0x1a0>)
 80013e0:	f7ff fa2c 	bl	800083c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	a30a      	add	r3, pc, #40	; (adr r3, 8001418 <get_buckets+0x198>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f8f9 	bl	80005e8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff fb65 	bl	8000acc <__aeabi_dcmplt>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f47f af44 	bne.w	8001292 <get_buckets+0x12>
	}
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bdb0      	pop	{r4, r5, r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	00000000 	.word	0x00000000
 800141c:	40c38800 	.word	0x40c38800
 8001420:	408f4000 	.word	0x408f4000

08001424 <get_user_input>:

void get_user_input(ADC_info_t *ADC_info) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b092      	sub	sp, #72	; 0x48
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	char entered[50];
	int cnt = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	647b      	str	r3, [r7, #68]	; 0x44

	// Get the user input
	get_line(entered, sizeof(entered));
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2132      	movs	r1, #50	; 0x32
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f9b0 	bl	800279c <get_line>
	// See if the Capture was inputted
	if (entered[0] == 'C' || entered[0] == 'c') {ADC_info->mode = capture; return;}
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	2b43      	cmp	r3, #67	; 0x43
 8001440:	d002      	beq.n	8001448 <get_user_input+0x24>
 8001442:	7b3b      	ldrb	r3, [r7, #12]
 8001444:	2b63      	cmp	r3, #99	; 0x63
 8001446:	d103      	bne.n	8001450 <get_user_input+0x2c>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	761a      	strb	r2, [r3, #24]
 800144e:	e02c      	b.n	80014aa <get_user_input+0x86>
	else {
		char * token = strtok(entered, " ");
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4916      	ldr	r1, [pc, #88]	; (80014b0 <get_user_input+0x8c>)
 8001456:	4618      	mov	r0, r3
 8001458:	f006 fe3e 	bl	80080d8 <strtok>
 800145c:	6438      	str	r0, [r7, #64]	; 0x40
		cnt++;
 800145e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001460:	3301      	adds	r3, #1
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
	    // loop through the string to extract all other tokens
	    while( token != NULL ) {
 8001464:	e016      	b.n	8001494 <get_user_input+0x70>
	    	switch(cnt) {
 8001466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001468:	2b03      	cmp	r3, #3
 800146a:	d00c      	beq.n	8001486 <get_user_input+0x62>
 800146c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146e:	2b03      	cmp	r3, #3
 8001470:	dc10      	bgt.n	8001494 <get_user_input+0x70>
 8001472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001474:	2b01      	cmp	r3, #1
 8001476:	d002      	beq.n	800147e <get_user_input+0x5a>
 8001478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147a:	2b02      	cmp	r3, #2
 800147c:	e00a      	b.n	8001494 <get_user_input+0x70>
	    	case 1:
	    		ADC_info->mode = replay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	761a      	strb	r2, [r3, #24]
	    		break;
 8001484:	e006      	b.n	8001494 <get_user_input+0x70>
	    	case 2:
	    		break;
	    	case 3:
	    		ADC_info->replay_length = atoi(token);
 8001486:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001488:	f006 fdc1 	bl	800800e <atoi>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	835a      	strh	r2, [r3, #26]
	    while( token != NULL ) {
 8001494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e5      	bne.n	8001466 <get_user_input+0x42>
	    	}
	    }
	    token = strtok(NULL, " ");
 800149a:	4905      	ldr	r1, [pc, #20]	; (80014b0 <get_user_input+0x8c>)
 800149c:	2000      	movs	r0, #0
 800149e:	f006 fe1b 	bl	80080d8 <strtok>
 80014a2:	6438      	str	r0, [r7, #64]	; 0x40
	    cnt++;
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	3301      	adds	r3, #1
 80014a8:	647b      	str	r3, [r7, #68]	; 0x44
	}
}
 80014aa:	3748      	adds	r7, #72	; 0x48
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800a6a8 	.word	0x0800a6a8

080014b4 <print_captured_info>:

void print_captured_info(ADC_info_t *ADC_info) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	; 0x40
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	// Printing
	char str[50];

	print(USART2,"Captured Signal Information:\r\n");
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <print_captured_info+0xe0>)
 80014be:	4836      	ldr	r0, [pc, #216]	; (8001598 <print_captured_info+0xe4>)
 80014c0:	f001 f9c5 	bl	800284e <print>
	print(USART2, "Signal Type: ");
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <print_captured_info+0xe8>)
 80014c6:	4834      	ldr	r0, [pc, #208]	; (8001598 <print_captured_info+0xe4>)
 80014c8:	f001 f9c1 	bl	800284e <print>
	switch(ADC_info->signal) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7a1b      	ldrb	r3, [r3, #8]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d81f      	bhi.n	8001514 <print_captured_info+0x60>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <print_captured_info+0x28>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014f7 	.word	0x080014f7
 80014e4:	08001501 	.word	0x08001501
 80014e8:	0800150b 	.word	0x0800150b
		case Rectangle:
			print(USART2, "Rectangle\r\n");
 80014ec:	492c      	ldr	r1, [pc, #176]	; (80015a0 <print_captured_info+0xec>)
 80014ee:	482a      	ldr	r0, [pc, #168]	; (8001598 <print_captured_info+0xe4>)
 80014f0:	f001 f9ad 	bl	800284e <print>
			break;
 80014f4:	e00e      	b.n	8001514 <print_captured_info+0x60>
		case Triangle:
			print(USART2, "Triangle\r\n");
 80014f6:	492b      	ldr	r1, [pc, #172]	; (80015a4 <print_captured_info+0xf0>)
 80014f8:	4827      	ldr	r0, [pc, #156]	; (8001598 <print_captured_info+0xe4>)
 80014fa:	f001 f9a8 	bl	800284e <print>
			break;
 80014fe:	e009      	b.n	8001514 <print_captured_info+0x60>
		case Sine:
			print(USART2, "Sine\r\n");
 8001500:	4929      	ldr	r1, [pc, #164]	; (80015a8 <print_captured_info+0xf4>)
 8001502:	4825      	ldr	r0, [pc, #148]	; (8001598 <print_captured_info+0xe4>)
 8001504:	f001 f9a3 	bl	800284e <print>
			break;
 8001508:	e004      	b.n	8001514 <print_captured_info+0x60>
		case Arbitrary:
			print(USART2, "Unknown\r\n");
 800150a:	4928      	ldr	r1, [pc, #160]	; (80015ac <print_captured_info+0xf8>)
 800150c:	4822      	ldr	r0, [pc, #136]	; (8001598 <print_captured_info+0xe4>)
 800150e:	f001 f99e 	bl	800284e <print>
			break;
 8001512:	bf00      	nop
	}
	sprintf(str, "Max Voltage: %d\r\n", (int)ADC_info->maxv);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	889b      	ldrh	r3, [r3, #4]
 8001518:	461a      	mov	r2, r3
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	4924      	ldr	r1, [pc, #144]	; (80015b0 <print_captured_info+0xfc>)
 8001520:	4618      	mov	r0, r3
 8001522:	f006 fdb9 	bl	8008098 <siprintf>
	print(USART2, str);
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4619      	mov	r1, r3
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <print_captured_info+0xe4>)
 800152e:	f001 f98e 	bl	800284e <print>
	sprintf(str, "Min Voltage: %d\r\n", (int)ADC_info->minv);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	461a      	mov	r2, r3
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	491d      	ldr	r1, [pc, #116]	; (80015b4 <print_captured_info+0x100>)
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fdaa 	bl	8008098 <siprintf>
	print(USART2, str);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <print_captured_info+0xe4>)
 800154c:	f001 f97f 	bl	800284e <print>
	sprintf(str, "Frequency: %d\r\n", (int)ADC_info->freq);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	461a      	mov	r2, r3
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4917      	ldr	r1, [pc, #92]	; (80015b8 <print_captured_info+0x104>)
 800155c:	4618      	mov	r0, r3
 800155e:	f006 fd9b 	bl	8008098 <siprintf>
	print(USART2, str);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <print_captured_info+0xe4>)
 800156a:	f001 f970 	bl	800284e <print>
	sprintf(str, "Number of samples in one period: %d\r\n", (int)ADC_info->samples);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	461a      	mov	r2, r3
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4910      	ldr	r1, [pc, #64]	; (80015bc <print_captured_info+0x108>)
 800157a:	4618      	mov	r0, r3
 800157c:	f006 fd8c 	bl	8008098 <siprintf>
	print(USART2, str);
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <print_captured_info+0xe4>)
 8001588:	f001 f961 	bl	800284e <print>
}
 800158c:	bf00      	nop
 800158e:	3740      	adds	r7, #64	; 0x40
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	0800a6ac 	.word	0x0800a6ac
 8001598:	40004400 	.word	0x40004400
 800159c:	0800a6cc 	.word	0x0800a6cc
 80015a0:	0800a6dc 	.word	0x0800a6dc
 80015a4:	0800a6e8 	.word	0x0800a6e8
 80015a8:	0800a6f4 	.word	0x0800a6f4
 80015ac:	0800a6fc 	.word	0x0800a6fc
 80015b0:	0800a708 	.word	0x0800a708
 80015b4:	0800a71c 	.word	0x0800a71c
 80015b8:	0800a730 	.word	0x0800a730
 80015bc:	0800a740 	.word	0x0800a740

080015c0 <ADC_capture>:


void ADC_capture(ADC_info_t *ADC_info, uint16_t *ADC_buffer) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	// ADC Variables
	uint32_t start_time = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t capture_performed = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	// "Buckets" for the ADC readings
	int buckets[10] = {0,0,0,0,0,0,0,0,0,0};
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	2228      	movs	r2, #40	; 0x28
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f006 fd53 	bl	8008088 <memset>

	while(1) {

		/* *** Start/Stop collecting ADC Data *** */
		if (ADC_info->mode == capture) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7e1b      	ldrb	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d115      	bne.n	8001616 <ADC_capture+0x56>
			// Get the start time
			start_time = TIM3->CNT;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <ADC_capture+0x108>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
			// Start capture
			HAL_ADC_Start_DMA(ADC_info->handle, (uint32_t *)ADC_buffer, ADC_BUFFER_SIZE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fd80 	bl	8003100 <HAL_ADC_Start_DMA>
			// Set mode to waiting
			capture_performed = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			ADC_info->mode = waiting;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	761a      	strb	r2, [r3, #24]
			// Print
			print(USART2, "Starting capture...\r\n");
 800160c:	492f      	ldr	r1, [pc, #188]	; (80016cc <ADC_capture+0x10c>)
 800160e:	4830      	ldr	r0, [pc, #192]	; (80016d0 <ADC_capture+0x110>)
 8001610:	f001 f91d 	bl	800284e <print>
 8001614:	e01b      	b.n	800164e <ADC_capture+0x8e>
		}
		// Wait the amount of time specified to capture
		else if (capture_performed == 1 && TIM5->CNT >= (start_time + (ADC_info->read_period*1000))) {
 8001616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800161a:	2b01      	cmp	r3, #1
 800161c:	d117      	bne.n	800164e <ADC_capture+0x8e>
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <ADC_capture+0x114>)
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800162a:	fb03 f101 	mul.w	r1, r3, r1
 800162e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001630:	440b      	add	r3, r1
 8001632:	429a      	cmp	r2, r3
 8001634:	d30b      	bcc.n	800164e <ADC_capture+0x8e>
			HAL_ADC_Stop_DMA(ADC_info->handle);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fe1c 	bl	8003278 <HAL_ADC_Stop_DMA>
			print(USART2, "Capture complete.\r\n");
 8001640:	4925      	ldr	r1, [pc, #148]	; (80016d8 <ADC_capture+0x118>)
 8001642:	4823      	ldr	r0, [pc, #140]	; (80016d0 <ADC_capture+0x110>)
 8001644:	f001 f903 	bl	800284e <print>
			ADC_info->mode = analyze;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	761a      	strb	r2, [r3, #24]
		}

		/* *** Analyze the Collected Data *** */
		if (ADC_info->mode == analyze) {
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d12b      	bne.n	80016ae <ADC_capture+0xee>
			// Get the results into buckets
			get_buckets(ADC_buffer, buckets, ADC_info);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4619      	mov	r1, r3
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f7ff fe0e 	bl	8001280 <get_buckets>
			// Get min and max values
			get_min_max(ADC_info, ADC_buffer);
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fda6 	bl	80011b8 <get_min_max>
			// Get the frequency
			get_frequency(ADC_info, ADC_buffer);
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fc1e 	bl	8000eb0 <get_frequency>
			// Get the Signal Type
			get_signal_type(ADC_info, buckets, ADC_buffer);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fcd9 	bl	8001034 <get_signal_type>
			// Print out the data from the capture
			print_captured_info(ADC_info);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff16 	bl	80014b4 <print_captured_info>
			// Change mode to waiting
			ADC_info->mode = waiting;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	761a      	strb	r2, [r3, #24]
			// Set capture performed to 0
			capture_performed = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			ADC_info->maxv = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	809a      	strh	r2, [r3, #4]
			ADC_info->minv = 4095;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f640 72ff 	movw	r2, #4095	; 0xfff
 80016a0:	80da      	strh	r2, [r3, #6]
			ADC_info->freq = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
			ADC_info->samples = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
		}

		/* *** Waiting on instruction *** */
		if (ADC_info->mode == waiting) {
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7e1b      	ldrb	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d195      	bne.n	80015e2 <ADC_capture+0x22>
			if (capture_performed == 0) {
 80016b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d191      	bne.n	80015e2 <ADC_capture+0x22>
				get_user_input(ADC_info);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff feb0 	bl	8001424 <get_user_input>
		if (ADC_info->mode == capture) {
 80016c4:	e78d      	b.n	80015e2 <ADC_capture+0x22>
 80016c6:	bf00      	nop
 80016c8:	40000400 	.word	0x40000400
 80016cc:	0800a768 	.word	0x0800a768
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40000c00 	.word	0x40000c00
 80016d8:	0800a780 	.word	0x0800a780
 80016dc:	00000000 	.word	0x00000000

080016e0 <start_DAC_signal>:
 */
#include "DAC.h"
#include <string.h>


void start_DAC_signal(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b09f      	sub	sp, #124	; 0x7c
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	char buffer[100];

	// Find the ARR of the wave
	TIM2->ARR = (BASE_CLOCK_SPEED/DAC_info->frequency)/(sizeof(wave_points)/2);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016f0:	a15d      	add	r1, pc, #372	; (adr r1, 8001868 <start_DAC_signal+0x188>)
 80016f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016f6:	f7ff f8a1 	bl	800083c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800170a:	f7ff f897 	bl	800083c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa27 	bl	8000b6c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	62e3      	str	r3, [r4, #44]	; 0x2c

	// Need to set the wave_points array
	switch (DAC_info->signal) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7a5b      	ldrb	r3, [r3, #9]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d81e      	bhi.n	8001768 <start_DAC_signal+0x88>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <start_DAC_signal+0x50>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001741 	.word	0x08001741
 8001734:	08001755 	.word	0x08001755
 8001738:	0800174b 	.word	0x0800174b
 800173c:	0800175f 	.word	0x0800175f
	case Rectangle:
		get_rectangle_wave(DAC_info, wave_points);
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f894 	bl	8001870 <get_rectangle_wave>
		break;
 8001748:	e00e      	b.n	8001768 <start_DAC_signal+0x88>
	case Sine:
		get_sine_wave(DAC_info, wave_points);
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f8c3 	bl	80018d8 <get_sine_wave>
		break;
 8001752:	e009      	b.n	8001768 <start_DAC_signal+0x88>
	case Triangle:
		get_triangle_wave(DAC_info, wave_points);
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f924 	bl	80019a4 <get_triangle_wave>
		break;
 800175c:	e004      	b.n	8001768 <start_DAC_signal+0x88>
	case Arbitrary:
		get_arbitrary_wave(DAC_info, wave_points);
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f975 	bl	8001a50 <get_arbitrary_wave>
		break;
 8001766:	bf00      	nop
	}

   // Print out signal information
   sprintf(buffer, "Starting waveform on Channel %d\r\nType: %d\r\n", DAC_info->channel, DAC_info->signal);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7a1b      	ldrb	r3, [r3, #8]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a5b      	ldrb	r3, [r3, #9]
 8001772:	f107 000c 	add.w	r0, r7, #12
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <start_DAC_signal+0x170>)
 8001778:	f006 fc8e 	bl	8008098 <siprintf>
   print(USART2, buffer);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	4834      	ldr	r0, [pc, #208]	; (8001854 <start_DAC_signal+0x174>)
 8001784:	f001 f863 	bl	800284e <print>
   sprintf(buffer, "Frequency: %d\r\n", (int)DAC_info->frequency);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9c3 	bl	8000b1c <__aeabi_d2iz>
 8001796:	4602      	mov	r2, r0
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	492e      	ldr	r1, [pc, #184]	; (8001858 <start_DAC_signal+0x178>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 fc7a 	bl	8008098 <siprintf>
   print(USART2, buffer);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	482a      	ldr	r0, [pc, #168]	; (8001854 <start_DAC_signal+0x174>)
 80017ac:	f001 f84f 	bl	800284e <print>
   sprintf(buffer, "DAC Output Rate: %d\r\n", (int)TIM2->ARR);
 80017b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	461a      	mov	r2, r3
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4927      	ldr	r1, [pc, #156]	; (800185c <start_DAC_signal+0x17c>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fc6a 	bl	8008098 <siprintf>
   print(USART2, buffer);
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	4619      	mov	r1, r3
 80017ca:	4822      	ldr	r0, [pc, #136]	; (8001854 <start_DAC_signal+0x174>)
 80017cc:	f001 f83f 	bl	800284e <print>
   sprintf(buffer, "Samples in Signal: %d\r\n", (int)WAVE_POINTS);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	4921      	ldr	r1, [pc, #132]	; (8001860 <start_DAC_signal+0x180>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 fc5c 	bl	8008098 <siprintf>
   print(USART2, buffer);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	481b      	ldr	r0, [pc, #108]	; (8001854 <start_DAC_signal+0x174>)
 80017e8:	f001 f831 	bl	800284e <print>
   sprintf(buffer, "DAC Codes, Max: %d, Min: %d\r\n", (int)DAC_info->maxv, (int)DAC_info->minv);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f107 000c 	add.w	r0, r7, #12
 80017fa:	491a      	ldr	r1, [pc, #104]	; (8001864 <start_DAC_signal+0x184>)
 80017fc:	f006 fc4c 	bl	8008098 <siprintf>
   print(USART2, buffer);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4813      	ldr	r0, [pc, #76]	; (8001854 <start_DAC_signal+0x174>)
 8001808:	f001 f821 	bl	800284e <print>

	// Start output to DAC
	if (DAC_info->channel == 1)  { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_1, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7a1b      	ldrb	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10a      	bne.n	800182a <start_DAC_signal+0x14a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6858      	ldr	r0, [r3, #4]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	2100      	movs	r1, #0
 8001824:	f002 fdd8 	bl	80043d8 <HAL_DAC_Start_DMA>
	else if (DAC_info->channel == 2) { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_2, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
}
 8001828:	e00d      	b.n	8001846 <start_DAC_signal+0x166>
	else if (DAC_info->channel == 2) { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_2, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a1b      	ldrb	r3, [r3, #8]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d109      	bne.n	8001846 <start_DAC_signal+0x166>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	2110      	movs	r1, #16
 8001842:	f002 fdc9 	bl	80043d8 <HAL_DAC_Start_DMA>
}
 8001846:	bf00      	nop
 8001848:	3774      	adds	r7, #116	; 0x74
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	0800a794 	.word	0x0800a794
 8001854:	40004400 	.word	0x40004400
 8001858:	0800a7c0 	.word	0x0800a7c0
 800185c:	0800a7d0 	.word	0x0800a7d0
 8001860:	0800a7e8 	.word	0x0800a7e8
 8001864:	0800a800 	.word	0x0800a800
 8001868:	00000000 	.word	0x00000000
 800186c:	419312d0 	.word	0x419312d0

08001870 <get_rectangle_wave>:

void get_rectangle_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < WAVE_POINTS; i ++) {
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e020      	b.n	80018c2 <get_rectangle_wave+0x52>
		if (i < (WAVE_POINTS/2)) {
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	dc0d      	bgt.n	80018a2 <get_rectangle_wave+0x32>
			wave_points[i] = (int)DAC_info->maxv ^ DAC_info->noise_bits;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001890:	ea82 0103 	eor.w	r1, r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	460a      	mov	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e00c      	b.n	80018bc <get_rectangle_wave+0x4c>
		}
		else {
			wave_points[i] = (int)DAC_info->minv ^ DAC_info->noise_bits;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80018ac:	ea82 0103 	eor.w	r1, r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < WAVE_POINTS; i ++) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2bff      	cmp	r3, #255	; 0xff
 80018c6:	dddb      	ble.n	8001880 <get_rectangle_wave+0x10>
		}
	}
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <get_sine_wave>:

void get_sine_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	int i = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]

	// Get all wave points for sin
	for (i = 0; i < WAVE_POINTS; i++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e04a      	b.n	8001982 <get_sine_wave+0xaa>
		wave_points[i] = (uint32_t)((sin((i * ((2.0*PI)/(double)WAVE_POINTS))) + 1.0) * (((double)DAC_info->maxv)/2.0));
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7fe fe11 	bl	8000514 <__aeabi_i2d>
 80018f2:	a32a      	add	r3, pc, #168	; (adr r3, 800199c <get_sine_wave+0xc4>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe76 	bl	80005e8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	ec43 2b17 	vmov	d7, r2, r3
 8001904:	eeb0 0a47 	vmov.f32	s0, s14
 8001908:	eef0 0a67 	vmov.f32	s1, s15
 800190c:	f007 fe74 	bl	80095f8 <sin>
 8001910:	ec51 0b10 	vmov	r0, r1, d0
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <get_sine_wave+0xc0>)
 800191a:	f7fe fcaf 	bl	800027c <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	461d      	mov	r5, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fde2 	bl	80004f4 <__aeabi_ui2d>
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001938:	f7fe ff80 	bl	800083c <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fe50 	bl	80005e8 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	18d4      	adds	r4, r2, r3
 8001958:	f7ff f908 	bl	8000b6c <__aeabi_d2uiz>
 800195c:	4603      	mov	r3, r0
 800195e:	6023      	str	r3, [r4, #0]
		wave_points[i] ^= DAC_info->noise_bits;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	4413      	add	r3, r2
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800196e:	4618      	mov	r0, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	440b      	add	r3, r1
 8001978:	4042      	eors	r2, r0
 800197a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < WAVE_POINTS; i++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2bff      	cmp	r3, #255	; 0xff
 8001986:	ddb1      	ble.n	80018ec <get_sine_wave+0x14>
	}

}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	3ff00000 	.word	0x3ff00000
 800199c:	4d12d84a 	.word	0x4d12d84a
 80019a0:	3f9921fb 	.word	0x3f9921fb

080019a4 <get_triangle_wave>:

void get_triangle_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	// Get the increment for adding to the voltage
	uint32_t increment = (DAC_info->maxv - DAC_info->minv) / ((WAVE_POINTS - 1)/2);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	1ad2      	subs	r2, r2, r3
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <get_triangle_wave+0xa8>)
 80019ba:	fba3 1302 	umull	r1, r3, r3, r2
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	0852      	lsrs	r2, r2, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	60fb      	str	r3, [r7, #12]
	uint32_t voltage = DAC_info->minv;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	617b      	str	r3, [r7, #20]
	int i = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]

	// Set the incline of the triangle
	wave_points[0] = voltage;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
	for (i = 1; i < (WAVE_POINTS/2); i++) {
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e010      	b.n	8001a00 <get_triangle_wave+0x5c>
		voltage += increment;
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
		wave_points[i] = voltage ^ DAC_info->noise_bits;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80019ea:	4619      	mov	r1, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	404a      	eors	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
	for (i = 1; i < (WAVE_POINTS/2); i++) {
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	3301      	adds	r3, #1
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b7f      	cmp	r3, #127	; 0x7f
 8001a04:	ddeb      	ble.n	80019de <get_triangle_wave+0x3a>
	}
	// Set the decline of the triangle
	wave_points[WAVE_POINTS/2] = voltage;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]
	for (i = ((WAVE_POINTS/2) + 1); i < WAVE_POINTS; i++) {
 8001a10:	2381      	movs	r3, #129	; 0x81
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	e010      	b.n	8001a38 <get_triangle_wave+0x94>
		voltage -= increment;
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
		wave_points[i] = voltage ^ DAC_info->noise_bits;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a22:	4619      	mov	r1, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	404a      	eors	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
	for (i = ((WAVE_POINTS/2) + 1); i < WAVE_POINTS; i++) {
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3301      	adds	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	ddeb      	ble.n	8001a16 <get_triangle_wave+0x72>
	}

}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	02040811 	.word	0x02040811

08001a50 <get_arbitrary_wave>:

void get_arbitrary_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	// Copy EKG contents over
	memcpy(wave_points, ekg, sizeof(ekg));
 8001a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5e:	4917      	ldr	r1, [pc, #92]	; (8001abc <get_arbitrary_wave+0x6c>)
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f006 fb03 	bl	800806c <memcpy>

	// Scale if need to
	if (DAC_info->maxv != MAX_DAC_OUTPUT || DAC_info->minv != MIN_DAC_OUTPUT) {
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d103      	bne.n	8001a7a <get_arbitrary_wave+0x2a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d003      	beq.n	8001a82 <get_arbitrary_wave+0x32>
		scale_wave_points(DAC_info, wave_points);
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f81f 	bl	8001ac0 <scale_wave_points>
	}

	for (int i = 0; i < WAVE_POINTS; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e010      	b.n	8001aaa <get_arbitrary_wave+0x5a>
		wave_points[i] ^= DAC_info->noise_bits;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001a96:	4618      	mov	r0, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	4042      	eors	r2, r0
 8001aa2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < WAVE_POINTS; i++) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	ddeb      	ble.n	8001a88 <get_arbitrary_wave+0x38>
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000

08001ac0 <scale_wave_points>:
	  cnt++;
   }
}


void scale_wave_points(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	double old_range = (MAX_DAC_OUTPUT - MIN_DAC_OUTPUT);
 8001aca:	a327      	add	r3, pc, #156	; (adr r3, 8001b68 <scale_wave_points+0xa8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double new_range = (DAC_info->maxv - DAC_info->minv);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fd08 	bl	80004f4 <__aeabi_ui2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for (int i = 0; i < WAVE_POINTS; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e032      	b.n	8001b58 <scale_wave_points+0x98>
	 	 wave_points[i] = ((((wave_points[i]) - MIN_DAC_OUTPUT) * new_range) / old_range) + DAC_info->minv;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fcf8 	bl	80004f4 <__aeabi_ui2d>
 8001b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b08:	f7fe fd6e 	bl	80005e8 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b18:	f7fe fe90 	bl	800083c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fce3 	bl	80004f4 <__aeabi_ui2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fba1 	bl	800027c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	18d4      	adds	r4, r2, r3
 8001b4a:	f7ff f80f 	bl	8000b6c <__aeabi_d2uiz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < WAVE_POINTS; i++) {
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	ddc9      	ble.n	8001af2 <scale_wave_points+0x32>
	}
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40affc00 	.word	0x40affc00

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b74:	f000 feaa 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b78:	f000 f84a 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7c:	f000 fabe 	bl	80020fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b80:	f000 fa96 	bl	80020b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b84:	f000 fa64 	bl	8002050 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001b88:	f000 f90c 	bl	8001da4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001b8c:	f000 f946 	bl	8001e1c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001b90:	f000 f890 	bl	8001cb4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001b94:	f000 f992 	bl	8001ebc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b98:	f000 fa08 	bl	8001fac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // Start the DAC Signal
  start_DAC_signal(&signal01, wave_points);
 8001b9c:	4917      	ldr	r1, [pc, #92]	; (8001bfc <main+0x8c>)
 8001b9e:	4818      	ldr	r0, [pc, #96]	; (8001c00 <main+0x90>)
 8001ba0:	f7ff fd9e 	bl	80016e0 <start_DAC_signal>
  // Start the ADC Capture
  ADC_capture(&adc_capture, ADC_buffer);
 8001ba4:	4917      	ldr	r1, [pc, #92]	; (8001c04 <main+0x94>)
 8001ba6:	4818      	ldr	r0, [pc, #96]	; (8001c08 <main+0x98>)
 8001ba8:	f7ff fd0a 	bl	80015c0 <ADC_capture>


  while (1)
  {
    /* USER CODE END WHILE */
	if (adc_capture.mode == replay) {
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <main+0x98>)
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d1fb      	bne.n	8001bac <main+0x3c>
		HAL_DAC_Stop_DMA(signal01.hdac, DAC_CHANNEL_1);
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <main+0x90>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fcd8 	bl	8004570 <HAL_DAC_Stop_DMA>
		// Set up the replay signal
		replay_signal.frequency = adc_capture.freq;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <main+0x98>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc95 	bl	80004f4 <__aeabi_ui2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	490f      	ldr	r1, [pc, #60]	; (8001c0c <main+0x9c>)
 8001bd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		replay_signal.maxv = adc_capture.maxv;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <main+0x98>)
 8001bd6:	889b      	ldrh	r3, [r3, #4]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <main+0x9c>)
 8001bdc:	61da      	str	r2, [r3, #28]
		replay_signal.minv = adc_capture.minv;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <main+0x98>)
 8001be0:	88db      	ldrh	r3, [r3, #6]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <main+0x9c>)
 8001be6:	619a      	str	r2, [r3, #24]
		replay_signal.signal = adc_capture.signal;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <main+0x98>)
 8001bea:	7a1a      	ldrb	r2, [r3, #8]
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <main+0x9c>)
 8001bee:	725a      	strb	r2, [r3, #9]
		// Replay the signal
		start_DAC_signal(&replay_signal, (uint32_t *)ADC_buffer);
 8001bf0:	4904      	ldr	r1, [pc, #16]	; (8001c04 <main+0x94>)
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <main+0x9c>)
 8001bf4:	f7ff fd74 	bl	80016e0 <start_DAC_signal>
	if (adc_capture.mode == replay) {
 8001bf8:	e7d8      	b.n	8001bac <main+0x3c>
 8001bfa:	bf00      	nop
 8001bfc:	20000768 	.word	0x20000768
 8001c00:	20000400 	.word	0x20000400
 8001c04:	20000b68 	.word	0x20000b68
 8001c08:	20000450 	.word	0x20000450
 8001c0c:	20000428 	.word	0x20000428

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b096      	sub	sp, #88	; 0x58
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fa32 	bl	8008088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c36:	f003 fa91 	bl	800515c <HAL_PWREx_ControlVoltageScaling>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c40:	f000 faae 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c44:	2302      	movs	r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c56:	2302      	movs	r3, #2
 8001c58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c62:	2307      	movs	r3, #7
 8001c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fac8 	bl	8005208 <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c7e:	f000 fa8f 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2303      	movs	r3, #3
 8001c88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fe90 	bl	80059c0 <HAL_RCC_ClockConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ca6:	f000 fa7b 	bl	80021a0 <Error_Handler>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3758      	adds	r7, #88	; 0x58
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <MX_ADC1_Init+0xe8>)
 8001cda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d16:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d3a:	4817      	ldr	r0, [pc, #92]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d3c:	f001 f88a 	bl	8002e54 <HAL_ADC_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001d46:	f000 fa2b 	bl	80021a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d56:	f002 f95b 	bl	8004010 <HAL_ADCEx_MultiModeConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001d60:	f000 fa1e 	bl	80021a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_ADC1_Init+0xec>)
 8001d66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d70:	237f      	movs	r3, #127	; 0x7f
 8001d72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d74:	2304      	movs	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_ADC1_Init+0xe4>)
 8001d82:	f001 faf9 	bl	8003378 <HAL_ADC_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001d8c:	f000 fa08 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200004f8 	.word	0x200004f8
 8001d9c:	50040000 	.word	0x50040000
 8001da0:	14f00020 	.word	0x14f00020

08001da4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2224      	movs	r2, #36	; 0x24
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 f969 	bl	8008088 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <MX_DAC1_Init+0x70>)
 8001db8:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_DAC1_Init+0x74>)
 8001dba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <MX_DAC1_Init+0x70>)
 8001dbe:	f002 fae8 	bl	8004392 <HAL_DAC_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001dc8:	f000 f9ea 	bl	80021a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001dd0:	2324      	movs	r3, #36	; 0x24
 8001dd2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <MX_DAC1_Init+0x70>)
 8001de8:	f002 fc25 	bl	8004636 <HAL_DAC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001df2:	f000 f9d5 	bl	80021a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_DAC1_Init+0x70>)
 8001dfe:	f002 fc1a 	bl	8004636 <HAL_DAC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001e08:	f000 f9ca 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200005a4 	.word	0x200005a4
 8001e18:	40007400 	.word	0x40007400

08001e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e50:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001e54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e62:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e64:	f004 fc8c 	bl	8006780 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e6e:	f000 f997 	bl	80021a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e80:	f004 feb4 	bl	8006bec <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e8a:	f000 f989 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001e9c:	f005 fb7a 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ea6:	f000 f97b 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM2_Init+0x9c>)
 8001eac:	f004 fcc0 	bl	8006830 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000600 	.word	0x20000600

08001ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <MX_TIM3_Init+0xec>)
 8001ef2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f02:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f14:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f16:	f004 fc33 	bl	8006780 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f20:	f000 f93e 	bl	80021a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f32:	f004 fe5b 	bl	8006bec <HAL_TIM_ConfigClockSource>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f3c:	f000 f930 	bl	80021a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f40:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f42:	f004 fcdd 	bl	8006900 <HAL_TIM_PWM_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f4c:	f000 f928 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f50:	2320      	movs	r3, #32
 8001f52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4811      	ldr	r0, [pc, #68]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f60:	f005 fb18 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f6a:	f000 f919 	bl	80021a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6e:	2360      	movs	r3, #96	; 0x60
 8001f70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f86:	f004 fd1d 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f90:	f000 f906 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM3_Init+0xe8>)
 8001f96:	f004 fc4b 	bl	8006830 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3738      	adds	r7, #56	; 0x38
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000064c 	.word	0x2000064c
 8001fa8:	40000400 	.word	0x40000400

08001fac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <MX_TIM5_Init+0xa0>)
 8001fce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fd2:	224f      	movs	r2, #79	; 0x4f
 8001fd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ff0:	4815      	ldr	r0, [pc, #84]	; (8002048 <MX_TIM5_Init+0x9c>)
 8001ff2:	f004 fbc5 	bl	8006780 <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ffc:	f000 f8d0 	bl	80021a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002004:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4619      	mov	r1, r3
 800200c:	480e      	ldr	r0, [pc, #56]	; (8002048 <MX_TIM5_Init+0x9c>)
 800200e:	f004 fded 	bl	8006bec <HAL_TIM_ConfigClockSource>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002018:	f000 f8c2 	bl	80021a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4807      	ldr	r0, [pc, #28]	; (8002048 <MX_TIM5_Init+0x9c>)
 800202a:	f005 fab3 	bl	8007594 <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002034:	f000 f8b4 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <MX_TIM5_Init+0x9c>)
 800203a:	f004 fbf9 	bl	8006830 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000698 	.word	0x20000698
 800204c:	40000c00 	.word	0x40000c00

08002050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <MX_USART2_UART_Init+0x5c>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002094:	f005 fb06 	bl	80076a4 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800209e:	f000 f87f 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200006e4 	.word	0x200006e4
 80020ac:	40004400 	.word	0x40004400

080020b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_DMA_Init+0x48>)
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	4a0f      	ldr	r2, [pc, #60]	; (80020f8 <MX_DMA_Init+0x48>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6493      	str	r3, [r2, #72]	; 0x48
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <MX_DMA_Init+0x48>)
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	200b      	movs	r0, #11
 80020d4:	f002 f927 	bl	8004326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020d8:	200b      	movs	r0, #11
 80020da:	f002 f940 	bl	800435e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	200d      	movs	r0, #13
 80020e4:	f002 f91f 	bl	8004326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020e8:	200d      	movs	r0, #13
 80020ea:	f002 f938 	bl	800435e <HAL_NVIC_EnableIRQ>

}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000

080020fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_GPIO_Init+0x9c>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_GPIO_Init+0x9c>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_GPIO_Init+0x9c>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002178:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4804      	ldr	r0, [pc, #16]	; (800219c <MX_GPIO_Init+0xa0>)
 800218a:	f002 fe2f 	bl	8004dec <HAL_GPIO_Init>

}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	48000800 	.word	0x48000800

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <Error_Handler+0x8>
	...

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_MspInit+0x44>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_MspInit+0x44>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6613      	str	r3, [r2, #96]	; 0x60
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_MspInit+0x44>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_MspInit+0x44>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <HAL_MspInit+0x44>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_MspInit+0x44>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0ac      	sub	sp, #176	; 0xb0
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	2288      	movs	r2, #136	; 0x88
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f005 ff37 	bl	8008088 <memset>
  if(hadc->Instance==ADC1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <HAL_ADC_MspInit+0x120>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d172      	bne.n	800230a <HAL_ADC_MspInit+0x116>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002228:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800222a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800222e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800223a:	2308      	movs	r3, #8
 800223c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800223e:	2307      	movs	r3, #7
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002246:	2302      	movs	r3, #2
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800224a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fdd7 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002260:	f7ff ff9e 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_ADC_MspInit+0x124>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_ADC_MspInit+0x124>)
 800226a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800226e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_ADC_MspInit+0x124>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_ADC_MspInit+0x124>)
 800227e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_ADC_MspInit+0x124>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_ADC_MspInit+0x124>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002294:	2301      	movs	r3, #1
 8002296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800229a:	230b      	movs	r3, #11
 800229c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f002 fd9c 	bl	8004dec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_ADC_MspInit+0x12c>)
 80022b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022e4:	2220      	movs	r2, #32
 80022e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <HAL_ADC_MspInit+0x128>)
 80022f0:	f002 fb46 	bl	8004980 <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80022fa:	f7ff ff51 	bl	80021a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <HAL_ADC_MspInit+0x128>)
 8002302:	64da      	str	r2, [r3, #76]	; 0x4c
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_ADC_MspInit+0x128>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	37b0      	adds	r7, #176	; 0xb0
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	50040000 	.word	0x50040000
 8002318:	40021000 	.word	0x40021000
 800231c:	2000055c 	.word	0x2000055c
 8002320:	40020008 	.word	0x40020008

08002324 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <HAL_DAC_MspInit+0xcc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d150      	bne.n	80023e8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 800234c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_DAC_MspInit+0xd0>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002376:	2330      	movs	r3, #48	; 0x30
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238c:	f002 fd2e 	bl	8004dec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <HAL_DAC_MspInit+0xd8>)
 8002394:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 8002398:	2206      	movs	r2, #6
 800239a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 800239e:	2210      	movs	r2, #16
 80023a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023c0:	2220      	movs	r2, #32
 80023c2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80023cc:	480a      	ldr	r0, [pc, #40]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023ce:	f002 fad7 	bl	8004980 <HAL_DMA_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80023d8:	f7ff fee2 	bl	80021a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_DAC_MspInit+0xd4>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40007400 	.word	0x40007400
 80023f4:	40021000 	.word	0x40021000
 80023f8:	200005b8 	.word	0x200005b8
 80023fc:	40020030 	.word	0x40020030

08002400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d10c      	bne.n	800242c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800242a:	e022      	b.n	8002472 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIM_Base_MspInit+0x84>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10c      	bne.n	8002450 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6593      	str	r3, [r2, #88]	; 0x58
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]
}
 800244e:	e010      	b.n	8002472 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_TIM_Base_MspInit+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10b      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_TIM_Base_MspInit+0x80>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000c00 	.word	0x40000c00

0800248c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0ac      	sub	sp, #176	; 0xb0
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2288      	movs	r2, #136	; 0x88
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f005 fdeb 	bl	8008088 <memset>
  if(huart->Instance==USART2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <HAL_UART_MspInit+0xb0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d13b      	bne.n	8002534 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024bc:	2302      	movs	r3, #2
 80024be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fc9d 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024d4:	f7ff fe64 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_UART_MspInit+0xb4>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002508:	230c      	movs	r3, #12
 800250a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002520:	2307      	movs	r3, #7
 8002522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800252a:	4619      	mov	r1, r3
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f002 fc5c 	bl	8004dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002534:	bf00      	nop
 8002536:	37b0      	adds	r7, #176	; 0xb0
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40004400 	.word	0x40004400
 8002540:	40021000 	.word	0x40021000

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 f9f8 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <DMA1_Channel1_IRQHandler+0x10>)
 800259e:	f002 fb45 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000055c 	.word	0x2000055c

080025ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <DMA1_Channel3_IRQHandler+0x10>)
 80025b2:	f002 fb3b 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200005b8 	.word	0x200005b8

080025c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
	return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_kill>:

int _kill(int pid, int sig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025da:	f005 fd1d 	bl	8008018 <__errno>
 80025de:	4603      	mov	r3, r0
 80025e0:	2216      	movs	r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
	return -1;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_exit>:

void _exit (int status)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ffe7 	bl	80025d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002602:	e7fe      	b.n	8002602 <_exit+0x12>

08002604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00a      	b.n	800262c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002616:	f3af 8000 	nop.w
 800261a:	4601      	mov	r1, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf0      	blt.n	8002616 <_read+0x12>
	}

return len;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e009      	b.n	8002664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbf1      	blt.n	8002650 <_write+0x12>
	}
	return len;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_close>:

int _close(int file)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
	return -1;
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269e:	605a      	str	r2, [r3, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_isatty>:

int _isatty(int file)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
	return 1;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
	return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002710:	f005 fc82 	bl	8008018 <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	220c      	movs	r2, #12
 8002718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	e009      	b.n	8002734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <_sbrk+0x64>)
 8002730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20018000 	.word	0x20018000
 8002740:	00000400 	.word	0x00000400
 8002744:	20010b68 	.word	0x20010b68
 8002748:	20010b80 	.word	0x20010b80

0800274c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <SystemInit+0x20>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <SystemInit+0x20>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <USART_Read>:
//	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
//	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
//}

// ***** MODIFIED TO NOT GET STUCK WAITING FOR INPUT *****
uint8_t USART_Read (USART_TypeDef * USARTx) {
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));
 8002778:	bf00      	nop
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f9      	beq.n	800277a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800278a:	b29b      	uxth	r3, r3
 800278c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <get_line>:

void get_line(char *buffer, int max_length) {
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	uint16_t count = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	81fb      	strh	r3, [r7, #14]

	do {
		// Get last entered Input
		buffer[count] = USART_Read(USART2);
 80027aa:	89fb      	ldrh	r3, [r7, #14]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	18d4      	adds	r4, r2, r3
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <get_line+0x4c>)
 80027b2:	f7ff ffdd 	bl	8002770 <USART_Read>
 80027b6:	4603      	mov	r3, r0
 80027b8:	7023      	strb	r3, [r4, #0]
		// Write it to the screen
		USART_Write(USART2, (uint8_t *)&buffer[count], 1);
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	2201      	movs	r2, #1
 80027c2:	4619      	mov	r1, r3
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <get_line+0x4c>)
 80027c6:	f000 f811 	bl	80027ec <USART_Write>
		// increase count so we know amount of characters inputed
		count++;
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	3301      	adds	r3, #1
 80027ce:	81fb      	strh	r3, [r7, #14]
	}
	// While we do no have an enter input
	while(buffer[count-1] != CARRAIGE_RETURN);
 80027d0:	89fb      	ldrh	r3, [r7, #14]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b0d      	cmp	r3, #13
 80027dc:	d1e5      	bne.n	80027aa <get_line+0xe>
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	40004400 	.word	0x40004400

080027ec <USART_Write>:


void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e010      	b.n	8002820 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 80027fe:	bf00      	nop
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f9      	beq.n	8002800 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	4413      	add	r3, r2
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8ea      	bhi.n	80027fe <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8002828:	bf00      	nop
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f9      	beq.n	800282a <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	61da      	str	r2, [r3, #28]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <print>:

void print(USART_TypeDef * USARTx, char *string) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
	uint32_t size = sprintf(string, string);
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	f005 fc1c 	bl	8008098 <siprintf>
 8002860:	4603      	mov	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]
	USART_Write(USARTx, (uint8_t *)string, size);
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffbf 	bl	80027ec <USART_Write>
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800287c:	f7ff ff66 	bl	800274c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002882:	490d      	ldr	r1, [pc, #52]	; (80028b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <LoopForever+0xe>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002898:	4c0a      	ldr	r4, [pc, #40]	; (80028c4 <LoopForever+0x16>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028a6:	f005 fbbd 	bl	8008024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028aa:	f7ff f961 	bl	8001b70 <main>

080028ae <LoopForever>:

LoopForever:
    b LoopForever
 80028ae:	e7fe      	b.n	80028ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	200004dc 	.word	0x200004dc
  ldr r2, =_sidata
 80028bc:	0800ace8 	.word	0x0800ace8
  ldr r2, =_sbss
 80028c0:	200004dc 	.word	0x200004dc
  ldr r4, =_ebss
 80028c4:	20010b80 	.word	0x20010b80

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_Init+0x3c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_Init+0x3c>)
 80028dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e2:	2003      	movs	r0, #3
 80028e4:	f001 fd14 	bl	8004310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e8:	200f      	movs	r0, #15
 80028ea:	f000 f80f 	bl	800290c <HAL_InitTick>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	e001      	b.n	80028fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028fa:	f7ff fc57 	bl	80021ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_InitTick+0x6c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d023      	beq.n	8002968 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_InitTick+0x70>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_InitTick+0x6c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f001 fd1f 	bl	800437a <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0f      	cmp	r3, #15
 8002946:	d809      	bhi.n	800295c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002948:	2200      	movs	r2, #0
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f001 fce9 	bl	8004326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_InitTick+0x74>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e007      	b.n	800296c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e004      	b.n	800296c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e001      	b.n	800296c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000474 	.word	0x20000474
 800297c:	2000046c 	.word	0x2000046c
 8002980:	20000470 	.word	0x20000470

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000474 	.word	0x20000474
 80029a8:	20010b6c 	.word	0x20010b6c

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20010b6c 	.word	0x20010b6c

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000474 	.word	0x20000474

08002a0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <LL_ADC_SetOffset+0x44>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	03fff000 	.word	0x03fff000

08002abc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	461a      	mov	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3330      	adds	r3, #48	; 0x30
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	211f      	movs	r1, #31
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	f003 011f 	and.w	r1, r3, #31
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3314      	adds	r3, #20
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0e5b      	lsrs	r3, r3, #25
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0d1b      	lsrs	r3, r3, #20
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2107      	movs	r1, #7
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	0d1b      	lsrs	r3, r3, #20
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	431a      	orrs	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	401a      	ands	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0318 	and.w	r3, r3, #24
 8002c16:	4908      	ldr	r1, [pc, #32]	; (8002c38 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c18:	40d9      	lsrs	r1, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	431a      	orrs	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	0007ffff 	.word	0x0007ffff

08002c3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 031f 	and.w	r3, r3, #31
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6093      	str	r3, [r2, #8]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c90:	d101      	bne.n	8002c96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce0:	d101      	bne.n	8002ce6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d30:	f043 0202 	orr.w	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <LL_ADC_IsEnabled+0x18>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <LL_ADC_IsEnabled+0x1a>
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_IsDisableOngoing+0x18>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_IsDisableOngoing+0x1a>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d101      	bne.n	8002e46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e136      	b.n	80030dc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff f9b9 	bl	80021f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fef1 	bl	8002c7c <LL_ADC_IsDeepPowerDownEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fed7 	bl	8002c58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff0c 	bl	8002ccc <LL_ADC_IsInternalRegulatorEnabled>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d115      	bne.n	8002ee6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fef0 	bl	8002ca4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec4:	4b87      	ldr	r3, [pc, #540]	; (80030e4 <HAL_ADC_Init+0x290>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	4a87      	ldr	r2, [pc, #540]	; (80030e8 <HAL_ADC_Init+0x294>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff feee 	bl	8002ccc <LL_ADC_IsInternalRegulatorEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff62 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 80cf 	bne.w	80030ca <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 80cb 	bne.w	80030ca <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f3c:	f043 0202 	orr.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fefb 	bl	8002d44 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f54:	4865      	ldr	r0, [pc, #404]	; (80030ec <HAL_ADC_Init+0x298>)
 8002f56:	f7ff fef5 	bl	8002d44 <LL_ADC_IsEnabled>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4864      	ldr	r0, [pc, #400]	; (80030f0 <HAL_ADC_Init+0x29c>)
 8002f5e:	f7ff fef1 	bl	8002d44 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	431c      	orrs	r4, r3
 8002f66:	4863      	ldr	r0, [pc, #396]	; (80030f4 <HAL_ADC_Init+0x2a0>)
 8002f68:	f7ff feec 	bl	8002d44 <LL_ADC_IsEnabled>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4323      	orrs	r3, r4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	485f      	ldr	r0, [pc, #380]	; (80030f8 <HAL_ADC_Init+0x2a4>)
 8002f7c:	f7ff fd46 	bl	8002a0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7e5b      	ldrb	r3, [r3, #25]
 8002f84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	045b      	lsls	r3, r3, #17
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_ADC_Init+0x2a8>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fef5 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8002ff6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff16 	bl	8002e2e <LL_ADC_INJ_IsConversionOngoing>
 8003002:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d13d      	bne.n	8003086 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d13a      	bne.n	8003086 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003014:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800301c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800302c:	f023 0302 	bic.w	r3, r3, #2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	69b9      	ldr	r1, [r7, #24]
 8003036:	430b      	orrs	r3, r1
 8003038:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003040:	2b01      	cmp	r3, #1
 8003042:	d118      	bne.n	8003076 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003060:	4311      	orrs	r1, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003066:	430a      	orrs	r2, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	611a      	str	r2, [r3, #16]
 8003074:	e007      	b.n	8003086 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10c      	bne.n	80030a8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f023 010f 	bic.w	r1, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e007      	b.n	80030b8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020f 	bic.w	r2, r2, #15
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f023 0303 	bic.w	r3, r3, #3
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
 80030c8:	e007      	b.n	80030da <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030da:	7ffb      	ldrb	r3, [r7, #31]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3724      	adds	r7, #36	; 0x24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	2000046c 	.word	0x2000046c
 80030e8:	053e2d63 	.word	0x053e2d63
 80030ec:	50040000 	.word	0x50040000
 80030f0:	50040100 	.word	0x50040100
 80030f4:	50040200 	.word	0x50040200
 80030f8:	50040300 	.word	0x50040300
 80030fc:	fff0c007 	.word	0xfff0c007

08003100 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800310c:	4853      	ldr	r0, [pc, #332]	; (800325c <HAL_ADC_Start_DMA+0x15c>)
 800310e:	f7ff fd95 	bl	8002c3c <LL_ADC_GetMultimode>
 8003112:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe61 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 8093 	bne.w	800324c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_ADC_Start_DMA+0x34>
 8003130:	2302      	movs	r3, #2
 8003132:	e08e      	b.n	8003252 <HAL_ADC_Start_DMA+0x152>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a47      	ldr	r2, [pc, #284]	; (8003260 <HAL_ADC_Start_DMA+0x160>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d008      	beq.n	8003158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d002      	beq.n	8003158 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d172      	bne.n	800323e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fdb9 	bl	8003cd0 <ADC_Enable>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d165      	bne.n	8003234 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a38      	ldr	r2, [pc, #224]	; (8003264 <HAL_ADC_Start_DMA+0x164>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d002      	beq.n	800318c <HAL_ADC_Start_DMA+0x8c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e000      	b.n	800318e <HAL_ADC_Start_DMA+0x8e>
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_ADC_Start_DMA+0x168>)
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4293      	cmp	r3, r2
 8003194:	d002      	beq.n	800319c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f023 0206 	bic.w	r2, r3, #6
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
 80031c0:	e002      	b.n	80031c8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	4a27      	ldr	r2, [pc, #156]	; (800326c <HAL_ADC_Start_DMA+0x16c>)
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	4a26      	ldr	r2, [pc, #152]	; (8003270 <HAL_ADC_Start_DMA+0x170>)
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_ADC_Start_DMA+0x174>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	221c      	movs	r2, #28
 80031e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0210 	orr.w	r2, r2, #16
 80031fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	4619      	mov	r1, r3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f001 fc66 	bl	8004af0 <HAL_DMA_Start_IT>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fdaf 	bl	8002d90 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003232:	e00d      	b.n	8003250 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800323c:	e008      	b.n	8003250 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800324a:	e001      	b.n	8003250 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	50040300 	.word	0x50040300
 8003260:	50040200 	.word	0x50040200
 8003264:	50040100 	.word	0x50040100
 8003268:	50040000 	.word	0x50040000
 800326c:	08003e9b 	.word	0x08003e9b
 8003270:	08003f73 	.word	0x08003f73
 8003274:	08003f8f 	.word	0x08003f8f

08003278 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADC_Stop_DMA+0x16>
 800328a:	2302      	movs	r3, #2
 800328c:	e051      	b.n	8003332 <HAL_ADC_Stop_DMA+0xba>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003296:	2103      	movs	r1, #3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fc5d 	bl	8003b58 <ADC_ConversionStop>
 800329e:	4603      	mov	r3, r0
 80032a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13f      	bne.n	8003328 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d10f      	bne.n	80032e6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fc70 	bl	8004bb0 <HAL_DMA_Abort>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0210 	bic.w	r2, r2, #16
 80032f4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fd6d 	bl	8003ddc <ADC_Disable>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e002      	b.n	800330e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fd67 	bl	8003ddc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b0b6      	sub	sp, #216	; 0xd8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x22>
 8003396:	2302      	movs	r3, #2
 8003398:	e3c7      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x7b2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fd1a 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 83a8 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d824      	bhi.n	8003406 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	3b02      	subs	r3, #2
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d81b      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x86>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <HAL_ADC_ConfigChannel+0x54>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033e5 	.word	0x080033e5
 80033d4:	080033ed 	.word	0x080033ed
 80033d8:	080033f5 	.word	0x080033f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	220c      	movs	r2, #12
 80033e0:	605a      	str	r2, [r3, #4]
          break;
 80033e2:	e011      	b.n	8003408 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2212      	movs	r2, #18
 80033e8:	605a      	str	r2, [r3, #4]
          break;
 80033ea:	e00d      	b.n	8003408 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2218      	movs	r2, #24
 80033f0:	605a      	str	r2, [r3, #4]
          break;
 80033f2:	e009      	b.n	8003408 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fa:	605a      	str	r2, [r3, #4]
          break;
 80033fc:	e004      	b.n	8003408 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2206      	movs	r2, #6
 8003402:	605a      	str	r2, [r3, #4]
          break;
 8003404:	e000      	b.n	8003408 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003406:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	f7ff fb95 	bl	8002b44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fcde 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8003424:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fcfe 	bl	8002e2e <LL_ADC_INJ_IsConversionOngoing>
 8003432:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003436:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 81a6 	bne.w	800378c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 81a1 	bne.w	800378c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	461a      	mov	r2, r3
 8003458:	f7ff fba0 	bl	8002b9c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d00a      	beq.n	8003494 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800348e:	f7ff faf1 	bl	8002a74 <LL_ADC_SetOffset>
 8003492:	e17b      	b.n	800378c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fb0e 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x148>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fb03 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	f003 021f 	and.w	r2, r3, #31
 80034be:	e01e      	b.n	80034fe <HAL_ADC_ConfigChannel+0x186>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff faf8 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e004      	b.n	80034fc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80034f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x19e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	e018      	b.n	8003548 <HAL_ADC_ConfigChannel+0x1d0>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800352a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800352e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003532:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e004      	b.n	8003548 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800353e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003548:	429a      	cmp	r2, r3
 800354a:	d106      	bne.n	800355a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fac7 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff faab 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003566:	4603      	mov	r3, r0
 8003568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x20e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff faa0 	bl	8002abc <LL_ADC_GetOffsetChannel>
 800357c:	4603      	mov	r3, r0
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	e01e      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x24c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fa95 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003592:	4603      	mov	r3, r0
 8003594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e004      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80035b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x264>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	e018      	b.n	800360e <HAL_ADC_ConfigChannel+0x296>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e004      	b.n	800360e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800360e:	429a      	cmp	r2, r3
 8003610:	d106      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2200      	movs	r2, #0
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fa64 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2102      	movs	r1, #2
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fa48 	bl	8002abc <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x2d4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fa3d 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	e01e      	b.n	800368a <HAL_ADC_ConfigChannel+0x312>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fa32 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800366a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800366e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e004      	b.n	8003688 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800367e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x32a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	e016      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x358>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80036c2:	2320      	movs	r3, #32
 80036c4:	e004      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80036c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d106      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	2102      	movs	r1, #2
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fa03 	bl	8002ae8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2103      	movs	r1, #3
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff f9e7 	bl	8002abc <LL_ADC_GetOffsetChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_ADC_ConfigChannel+0x396>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2103      	movs	r1, #3
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f9dc 	bl	8002abc <LL_ADC_GetOffsetChannel>
 8003704:	4603      	mov	r3, r0
 8003706:	0e9b      	lsrs	r3, r3, #26
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	e017      	b.n	800373e <HAL_ADC_ConfigChannel+0x3c6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2103      	movs	r1, #3
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff f9d1 	bl	8002abc <LL_ADC_GetOffsetChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003728:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800372a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003730:	2320      	movs	r3, #32
 8003732:	e003      	b.n	800373c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x3de>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0e9b      	lsrs	r3, r3, #26
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	e011      	b.n	800377a <HAL_ADC_ConfigChannel+0x402>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003766:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800376e:	2320      	movs	r3, #32
 8003770:	e003      	b.n	800377a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800377a:	429a      	cmp	r2, r3
 800377c:	d106      	bne.n	800378c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	2103      	movs	r1, #3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f9ae 	bl	8002ae8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fad7 	bl	8002d44 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 813f 	bne.w	8003a1c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f7ff fa22 	bl	8002bf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a8e      	ldr	r2, [pc, #568]	; (80039f0 <HAL_ADC_ConfigChannel+0x678>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f040 8130 	bne.w	8003a1c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x46c>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	3301      	adds	r3, #1
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	2b09      	cmp	r3, #9
 80037da:	bf94      	ite	ls
 80037dc:	2301      	movls	r3, #1
 80037de:	2300      	movhi	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e019      	b.n	8003818 <HAL_ADC_ConfigChannel+0x4a0>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	fa93 f3a3 	rbit	r3, r3
 80037f0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e003      	b.n	8003808 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	3301      	adds	r3, #1
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2b09      	cmp	r3, #9
 8003810:	bf94      	ite	ls
 8003812:	2301      	movls	r3, #1
 8003814:	2300      	movhi	r3, #0
 8003816:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003818:	2b00      	cmp	r3, #0
 800381a:	d079      	beq.n	8003910 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x4c0>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e9b      	lsrs	r3, r3, #26
 800382e:	3301      	adds	r3, #1
 8003830:	069b      	lsls	r3, r3, #26
 8003832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003836:	e015      	b.n	8003864 <HAL_ADC_ConfigChannel+0x4ec>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800384a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003850:	2320      	movs	r3, #32
 8003852:	e003      	b.n	800385c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	3301      	adds	r3, #1
 800385e:	069b      	lsls	r3, r3, #26
 8003860:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x50c>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	3301      	adds	r3, #1
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	e017      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x53c>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800389c:	2320      	movs	r3, #32
 800389e:	e003      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	ea42 0103 	orr.w	r1, r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_ADC_ConfigChannel+0x562>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	3301      	adds	r3, #1
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	051b      	lsls	r3, r3, #20
 80038d8:	e018      	b.n	800390c <HAL_ADC_ConfigChannel+0x594>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e003      	b.n	80038fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800390c:	430b      	orrs	r3, r1
 800390e:	e080      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_ADC_ConfigChannel+0x5b4>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	3301      	adds	r3, #1
 8003924:	069b      	lsls	r3, r3, #26
 8003926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392a:	e015      	b.n	8003958 <HAL_ADC_ConfigChannel+0x5e0>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003944:	2320      	movs	r3, #32
 8003946:	e003      	b.n	8003950 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	069b      	lsls	r3, r3, #26
 8003954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x600>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0e9b      	lsrs	r3, r3, #26
 800396a:	3301      	adds	r3, #1
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	e017      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x630>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	61fb      	str	r3, [r7, #28]
  return result;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e003      	b.n	800399c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	ea42 0103 	orr.w	r1, r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x65c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0e9b      	lsrs	r3, r3, #26
 80039be:	3301      	adds	r3, #1
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	3b1e      	subs	r3, #30
 80039cc:	051b      	lsls	r3, r3, #20
 80039ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039d2:	e01d      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x698>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	613b      	str	r3, [r7, #16]
  return result;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	e005      	b.n	80039fc <HAL_ADC_ConfigChannel+0x684>
 80039f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	4613      	mov	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4413      	add	r3, r2
 8003a08:	3b1e      	subs	r3, #30
 8003a0a:	051b      	lsls	r3, r3, #20
 8003a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a10:	430b      	orrs	r3, r1
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	4619      	mov	r1, r3
 8003a18:	f7ff f8c0 	bl	8002b9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d07a      	beq.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a28:	4843      	ldr	r0, [pc, #268]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a2a:	f7ff f815 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003a2e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <HAL_ADC_ConfigChannel+0x7c4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d12c      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d126      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0x6e4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d15d      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a64:	4619      	mov	r1, r3
 8003a66:	4834      	ldr	r0, [pc, #208]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a68:	f7fe ffe3 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <HAL_ADC_ConfigChannel+0x7d4>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a86:	e002      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a94:	e040      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d118      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x75a>
 8003aa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d112      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x748>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <HAL_ADC_ConfigChannel+0x7cc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d12d      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	4619      	mov	r1, r3
 8003aca:	481b      	ldr	r0, [pc, #108]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003acc:	f7fe ffb1 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad0:	e024      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d120      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11a      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <HAL_ADC_ConfigChannel+0x7c8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d115      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003afa:	4619      	mov	r1, r3
 8003afc:	480e      	ldr	r0, [pc, #56]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c0>)
 8003afe:	f7fe ff98 	bl	8002a32 <LL_ADC_SetCommonPathInternalCh>
 8003b02:	e00c      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b16:	e002      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	37d8      	adds	r7, #216	; 0xd8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	80080000 	.word	0x80080000
 8003b38:	50040300 	.word	0x50040300
 8003b3c:	c7520000 	.word	0xc7520000
 8003b40:	50040000 	.word	0x50040000
 8003b44:	50040200 	.word	0x50040200
 8003b48:	2000046c 	.word	0x2000046c
 8003b4c:	053e2d63 	.word	0x053e2d63
 8003b50:	cb840000 	.word	0xcb840000
 8003b54:	80000001 	.word	0x80000001

08003b58 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f936 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8003b74:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f957 	bl	8002e2e <LL_ADC_INJ_IsConversionOngoing>
 8003b80:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8098 	beq.w	8003cc0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02a      	beq.n	8003bf4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7e5b      	ldrb	r3, [r3, #25]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d126      	bne.n	8003bf4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	7e1b      	ldrb	r3, [r3, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d122      	bne.n	8003bf4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bb2:	e014      	b.n	8003bde <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <ADC_ConversionStop+0x174>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d90d      	bls.n	8003bd8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0210 	orr.w	r2, r3, #16
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f043 0201 	orr.w	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e074      	b.n	8003cc2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d1e3      	bne.n	8003bb4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2240      	movs	r2, #64	; 0x40
 8003bf2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d014      	beq.n	8003c24 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f8ee 	bl	8002de0 <LL_ADC_REG_IsConversionOngoing>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff f8ab 	bl	8002d6a <LL_ADC_IsDisableOngoing>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d104      	bne.n	8003c24 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f8ca 	bl	8002db8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d014      	beq.n	8003c54 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f8fd 	bl	8002e2e <LL_ADC_INJ_IsConversionOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f893 	bl	8002d6a <LL_ADC_IsDisableOngoing>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff f8d9 	bl	8002e06 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d005      	beq.n	8003c66 <ADC_ConversionStop+0x10e>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d105      	bne.n	8003c6c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c60:	230c      	movs	r3, #12
 8003c62:	617b      	str	r3, [r7, #20]
        break;
 8003c64:	e005      	b.n	8003c72 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c66:	2308      	movs	r3, #8
 8003c68:	617b      	str	r3, [r7, #20]
        break;
 8003c6a:	e002      	b.n	8003c72 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	617b      	str	r3, [r7, #20]
        break;
 8003c70:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c72:	f7fe fe9b 	bl	80029ac <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c78:	e01b      	b.n	8003cb2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c7a:	f7fe fe97 	bl	80029ac <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d914      	bls.n	8003cb2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	f043 0210 	orr.w	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e007      	b.n	8003cc2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1dc      	bne.n	8003c7a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	a33fffff 	.word	0xa33fffff

08003cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f82f 	bl	8002d44 <LL_ADC_IsEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d169      	bne.n	8003dc0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <ADC_Enable+0xfc>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e055      	b.n	8003dc2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe ffea 	bl	8002cf4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d20:	482b      	ldr	r0, [pc, #172]	; (8003dd0 <ADC_Enable+0x100>)
 8003d22:	f7fe fe99 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <ADC_Enable+0x104>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <ADC_Enable+0x108>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	099b      	lsrs	r3, r3, #6
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d4a:	e002      	b.n	8003d52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f9      	bne.n	8003d4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d58:	f7fe fe28 	bl	80029ac <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5e:	e028      	b.n	8003db2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe ffed 	bl	8002d44 <LL_ADC_IsEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe ffbd 	bl	8002cf4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d7a:	f7fe fe17 	bl	80029ac <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d914      	bls.n	8003db2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d00d      	beq.n	8003db2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f043 0210 	orr.w	r2, r3, #16
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e007      	b.n	8003dc2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d1cf      	bne.n	8003d60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	8000003f 	.word	0x8000003f
 8003dd0:	50040300 	.word	0x50040300
 8003dd4:	2000046c 	.word	0x2000046c
 8003dd8:	053e2d63 	.word	0x053e2d63

08003ddc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe ffbe 	bl	8002d6a <LL_ADC_IsDisableOngoing>
 8003dee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe ffa5 	bl	8002d44 <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d047      	beq.n	8003e90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d144      	bne.n	8003e90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030d 	and.w	r3, r3, #13
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10c      	bne.n	8003e2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe ff7f 	bl	8002d1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2203      	movs	r2, #3
 8003e24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e26:	f7fe fdc1 	bl	80029ac <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e2c:	e029      	b.n	8003e82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e023      	b.n	8003e92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e4a:	f7fe fdaf 	bl	80029ac <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d914      	bls.n	8003e82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f043 0210 	orr.w	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e007      	b.n	8003e92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1dc      	bne.n	8003e4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d14b      	bne.n	8003f4c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d021      	beq.n	8003f12 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fe23 	bl	8002b1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d032      	beq.n	8003f44 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12b      	bne.n	8003f44 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11f      	bne.n	8003f44 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f10:	e018      	b.n	8003f44 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff f9f8 	bl	800333a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f4a:	e00e      	b.n	8003f6a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fa02 	bl	8003362 <HAL_ADC_ErrorCallback>
}
 8003f5e:	e004      	b.n	8003f6a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff f9e4 	bl	800334e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f043 0204 	orr.w	r2, r3, #4
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff f9d4 	bl	8003362 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <LL_ADC_IsEnabled>:
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <LL_ADC_IsEnabled+0x18>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <LL_ADC_IsEnabled+0x1a>
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d101      	bne.n	8004000 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b09f      	sub	sp, #124	; 0x7c
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e093      	b.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004036:	2300      	movs	r3, #0
 8004038:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800403a:	2300      	movs	r3, #0
 800403c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a47      	ldr	r2, [pc, #284]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d102      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	e001      	b.n	8004052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e072      	b.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ffb8 	bl	8003fe8 <LL_ADC_REG_IsConversionOngoing>
 8004078:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ffb2 	bl	8003fe8 <LL_ADC_REG_IsConversionOngoing>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d154      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800408a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800408c:	2b00      	cmp	r3, #0
 800408e:	d151      	bne.n	8004134 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004092:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02c      	beq.n	80040f6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ae:	035b      	lsls	r3, r3, #13
 80040b0:	430b      	orrs	r3, r1
 80040b2:	431a      	orrs	r2, r3
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b8:	4829      	ldr	r0, [pc, #164]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040ba:	f7ff ff82 	bl	8003fc2 <LL_ADC_IsEnabled>
 80040be:	4604      	mov	r4, r0
 80040c0:	4828      	ldr	r0, [pc, #160]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040c2:	f7ff ff7e 	bl	8003fc2 <LL_ADC_IsEnabled>
 80040c6:	4603      	mov	r3, r0
 80040c8:	431c      	orrs	r4, r3
 80040ca:	4828      	ldr	r0, [pc, #160]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80040cc:	f7ff ff79 	bl	8003fc2 <LL_ADC_IsEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4323      	orrs	r3, r4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d137      	bne.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040e0:	f023 030f 	bic.w	r3, r3, #15
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	6811      	ldr	r1, [r2, #0]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f4:	e028      	b.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004102:	4817      	ldr	r0, [pc, #92]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004104:	f7ff ff5d 	bl	8003fc2 <LL_ADC_IsEnabled>
 8004108:	4604      	mov	r4, r0
 800410a:	4816      	ldr	r0, [pc, #88]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800410c:	f7ff ff59 	bl	8003fc2 <LL_ADC_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	431c      	orrs	r4, r3
 8004114:	4815      	ldr	r0, [pc, #84]	; (800416c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004116:	f7ff ff54 	bl	8003fc2 <LL_ADC_IsEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	4323      	orrs	r3, r4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d112      	bne.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800412a:	f023 030f 	bic.w	r3, r3, #15
 800412e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004130:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004132:	e009      	b.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004146:	e000      	b.n	800414a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004148:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004152:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004156:	4618      	mov	r0, r3
 8004158:	377c      	adds	r7, #124	; 0x7c
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	bf00      	nop
 8004160:	50040000 	.word	0x50040000
 8004164:	50040100 	.word	0x50040100
 8004168:	50040300 	.word	0x50040300
 800416c:	50040200 	.word	0x50040200

08004170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800418c:	4013      	ands	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	60d3      	str	r3, [r2, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <__NVIC_GetPriorityGrouping+0x18>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 0307 	and.w	r3, r3, #7
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db0b      	blt.n	80041fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <__NVIC_EnableIRQ+0x38>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2001      	movs	r0, #1
 80041f6:	fa00 f202 	lsl.w	r2, r0, r2
 80041fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000e100 	.word	0xe000e100

08004210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	2b00      	cmp	r3, #0
 8004222:	db0a      	blt.n	800423a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	490c      	ldr	r1, [pc, #48]	; (800425c <__NVIC_SetPriority+0x4c>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	0112      	lsls	r2, r2, #4
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	440b      	add	r3, r1
 8004234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004238:	e00a      	b.n	8004250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <__NVIC_SetPriority+0x50>)
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	3b04      	subs	r3, #4
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	440b      	add	r3, r1
 800424e:	761a      	strb	r2, [r3, #24]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000e100 	.word	0xe000e100
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f1c3 0307 	rsb	r3, r3, #7
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf28      	it	cs
 8004282:	2304      	movcs	r3, #4
 8004284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3304      	adds	r3, #4
 800428a:	2b06      	cmp	r3, #6
 800428c:	d902      	bls.n	8004294 <NVIC_EncodePriority+0x30>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3b03      	subs	r3, #3
 8004292:	e000      	b.n	8004296 <NVIC_EncodePriority+0x32>
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	401a      	ands	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43d9      	mvns	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	4313      	orrs	r3, r2
         );
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3724      	adds	r7, #36	; 0x24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042dc:	d301      	bcc.n	80042e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042de:	2301      	movs	r3, #1
 80042e0:	e00f      	b.n	8004302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <SysTick_Config+0x40>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ea:	210f      	movs	r1, #15
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	f7ff ff8e 	bl	8004210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <SysTick_Config+0x40>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <SysTick_Config+0x40>)
 80042fc:	2207      	movs	r2, #7
 80042fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	e000e010 	.word	0xe000e010

08004310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff29 	bl	8004170 <__NVIC_SetPriorityGrouping>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004338:	f7ff ff3e 	bl	80041b8 <__NVIC_GetPriorityGrouping>
 800433c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ff8e 	bl	8004264 <NVIC_EncodePriority>
 8004348:	4602      	mov	r2, r0
 800434a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff5d 	bl	8004210 <__NVIC_SetPriority>
}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff31 	bl	80041d4 <__NVIC_EnableIRQ>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ffa2 	bl	80042cc <SysTick_Config>
 8004388:	4603      	mov	r3, r0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e014      	b.n	80043ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fd ffb5 	bl	8002324 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	795b      	ldrb	r3, [r3, #5]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_DAC_Start_DMA+0x1e>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e0ab      	b.n	800454e <HAL_DAC_Start_DMA+0x176>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2202      	movs	r2, #2
 8004400:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d12f      	bne.n	8004468 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a52      	ldr	r2, [pc, #328]	; (8004558 <HAL_DAC_Start_DMA+0x180>)
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <HAL_DAC_Start_DMA+0x184>)
 8004416:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a50      	ldr	r2, [pc, #320]	; (8004560 <HAL_DAC_Start_DMA+0x188>)
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800442e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2b08      	cmp	r3, #8
 8004434:	d013      	beq.n	800445e <HAL_DAC_Start_DMA+0x86>
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d845      	bhi.n	80044c8 <HAL_DAC_Start_DMA+0xf0>
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_DAC_Start_DMA+0x72>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d005      	beq.n	8004454 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004448:	e03e      	b.n	80044c8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	613b      	str	r3, [r7, #16]
        break;
 8004452:	e03c      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	613b      	str	r3, [r7, #16]
        break;
 800445c:	e037      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3310      	adds	r3, #16
 8004464:	613b      	str	r3, [r7, #16]
        break;
 8004466:	e032      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <HAL_DAC_Start_DMA+0x18c>)
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <HAL_DAC_Start_DMA+0x190>)
 8004476:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_DAC_Start_DMA+0x194>)
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b08      	cmp	r3, #8
 8004494:	d013      	beq.n	80044be <HAL_DAC_Start_DMA+0xe6>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d817      	bhi.n	80044cc <HAL_DAC_Start_DMA+0xf4>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_DAC_Start_DMA+0xd2>
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d005      	beq.n	80044b4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80044a8:	e010      	b.n	80044cc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	613b      	str	r3, [r7, #16]
        break;
 80044b2:	e00c      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3318      	adds	r3, #24
 80044ba:	613b      	str	r3, [r7, #16]
        break;
 80044bc:	e007      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	331c      	adds	r3, #28
 80044c4:	613b      	str	r3, [r7, #16]
        break;
 80044c6:	e002      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80044cc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d111      	bne.n	80044f8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6898      	ldr	r0, [r3, #8]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	f000 faff 	bl	8004af0 <HAL_DMA_Start_IT>
 80044f2:	4603      	mov	r3, r0
 80044f4:	75fb      	strb	r3, [r7, #23]
 80044f6:	e010      	b.n	800451a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004506:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68d8      	ldr	r0, [r3, #12]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	f000 faed 	bl	8004af0 <HAL_DMA_Start_IT>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e005      	b.n	800454c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	0800486b 	.word	0x0800486b
 800455c:	0800488d 	.word	0x0800488d
 8004560:	080048a9 	.word	0x080048a9
 8004564:	08004913 	.word	0x08004913
 8004568:	08004935 	.word	0x08004935
 800456c:	08004951 	.word	0x08004951

08004570 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	400a      	ands	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2201      	movs	r2, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	400a      	ands	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 faf6 	bl	8004bb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e00c      	b.n	80045f0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fae8 	bl	8004bb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045ee:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b088      	sub	sp, #32
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	795b      	ldrb	r3, [r3, #5]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_DAC_ConfigChannel+0x1c>
 800464e:	2302      	movs	r3, #2
 8004650:	e107      	b.n	8004862 <HAL_DAC_ConfigChannel+0x22c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2202      	movs	r2, #2
 800465c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d174      	bne.n	8004750 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004666:	f7fe f9a1 	bl	80029ac <HAL_GetTick>
 800466a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d134      	bne.n	80046dc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004672:	e011      	b.n	8004698 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004674:	f7fe f99a 	bl	80029ac <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d90a      	bls.n	8004698 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f043 0208 	orr.w	r2, r3, #8
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2203      	movs	r2, #3
 8004692:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0e4      	b.n	8004862 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7fe f98c 	bl	80029c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	6992      	ldr	r2, [r2, #24]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
 80046b6:	e01e      	b.n	80046f6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046b8:	f7fe f978 	bl	80029ac <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d90a      	bls.n	80046dc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2203      	movs	r2, #3
 80046d6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0c2      	b.n	8004862 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	dbe8      	blt.n	80046b8 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fe f96c 	bl	80029c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	6992      	ldr	r2, [r2, #24]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	ea02 0103 	and.w	r1, r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	21ff      	movs	r1, #255	; 0xff
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	ea02 0103 	and.w	r1, r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	6a1a      	ldr	r2, [r3, #32]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11d      	bne.n	8004794 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	221f      	movs	r2, #31
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2207      	movs	r2, #7
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	f640 72fc 	movw	r2, #4092	; 0xffc
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	22c0      	movs	r2, #192	; 0xc0
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff febe 	bl	80045fa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	711a      	strb	r2, [r3, #4]
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff feb7 	bl	800460e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fead 	bl	8004622 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	711a      	strb	r2, [r3, #4]
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff ffd8 	bl	80048d6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	711a      	strb	r2, [r3, #4]
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ffd1 	bl	80048ea <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f043 0204 	orr.w	r2, r3, #4
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff ffc7 	bl	80048fe <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	711a      	strb	r2, [r3, #4]
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e098      	b.n	8004ac4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	4b4d      	ldr	r3, [pc, #308]	; (8004ad0 <HAL_DMA_Init+0x150>)
 800499a:	429a      	cmp	r2, r3
 800499c:	d80f      	bhi.n	80049be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b4b      	ldr	r3, [pc, #300]	; (8004ad4 <HAL_DMA_Init+0x154>)
 80049a6:	4413      	add	r3, r2
 80049a8:	4a4b      	ldr	r2, [pc, #300]	; (8004ad8 <HAL_DMA_Init+0x158>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a48      	ldr	r2, [pc, #288]	; (8004adc <HAL_DMA_Init+0x15c>)
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
 80049bc:	e00e      	b.n	80049dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4b46      	ldr	r3, [pc, #280]	; (8004ae0 <HAL_DMA_Init+0x160>)
 80049c6:	4413      	add	r3, r2
 80049c8:	4a43      	ldr	r2, [pc, #268]	; (8004ad8 <HAL_DMA_Init+0x158>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	009a      	lsls	r2, r3, #2
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a42      	ldr	r2, [pc, #264]	; (8004ae4 <HAL_DMA_Init+0x164>)
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a36:	d039      	beq.n	8004aac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4a27      	ldr	r2, [pc, #156]	; (8004adc <HAL_DMA_Init+0x15c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d11a      	bne.n	8004a78 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a42:	4b29      	ldr	r3, [pc, #164]	; (8004ae8 <HAL_DMA_Init+0x168>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f003 031c 	and.w	r3, r3, #28
 8004a4e:	210f      	movs	r1, #15
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	4924      	ldr	r1, [pc, #144]	; (8004ae8 <HAL_DMA_Init+0x168>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <HAL_DMA_Init+0x168>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f003 031c 	and.w	r3, r3, #28
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	491d      	ldr	r1, [pc, #116]	; (8004ae8 <HAL_DMA_Init+0x168>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
 8004a76:	e019      	b.n	8004aac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a78:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <HAL_DMA_Init+0x16c>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	f003 031c 	and.w	r3, r3, #28
 8004a84:	210f      	movs	r1, #15
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	4917      	ldr	r1, [pc, #92]	; (8004aec <HAL_DMA_Init+0x16c>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a92:	4b16      	ldr	r3, [pc, #88]	; (8004aec <HAL_DMA_Init+0x16c>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	f003 031c 	and.w	r3, r3, #28
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	4911      	ldr	r1, [pc, #68]	; (8004aec <HAL_DMA_Init+0x16c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40020407 	.word	0x40020407
 8004ad4:	bffdfff8 	.word	0xbffdfff8
 8004ad8:	cccccccd 	.word	0xcccccccd
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	bffdfbf8 	.word	0xbffdfbf8
 8004ae4:	40020400 	.word	0x40020400
 8004ae8:	400200a8 	.word	0x400200a8
 8004aec:	400204a8 	.word	0x400204a8

08004af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_Start_IT+0x20>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e04b      	b.n	8004ba8 <HAL_DMA_Start_IT+0xb8>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d13a      	bne.n	8004b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f91e 	bl	8004d8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 020e 	orr.w	r2, r2, #14
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e00f      	b.n	8004b88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0204 	bic.w	r2, r2, #4
 8004b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 020a 	orr.w	r2, r2, #10
 8004b86:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e005      	b.n	8004ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d008      	beq.n	8004bda <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e022      	b.n	8004c20 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 020e 	bic.w	r2, r2, #14
 8004be8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f003 021c 	and.w	r2, r3, #28
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2101      	movs	r1, #1
 8004c08:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f003 031c 	and.w	r3, r3, #28
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d026      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x7a>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d021      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f003 021c 	and.w	r2, r3, #28
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c92:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d071      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	e06c      	b.n	8004d80 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	f003 031c 	and.w	r3, r3, #28
 8004cae:	2202      	movs	r2, #2
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02e      	beq.n	8004d18 <HAL_DMA_IRQHandler+0xec>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d029      	beq.n	8004d18 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 020a 	bic.w	r2, r2, #10
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f003 021c 	and.w	r2, r3, #28
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d038      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d16:	e033      	b.n	8004d80 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f003 031c 	and.w	r3, r3, #28
 8004d20:	2208      	movs	r2, #8
 8004d22:	409a      	lsls	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02a      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x156>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d025      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 020e 	bic.w	r2, r2, #14
 8004d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f003 021c 	and.w	r2, r3, #28
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f202 	lsl.w	r2, r1, r2
 8004d58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
}
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	f003 021c 	and.w	r2, r3, #28
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f202 	lsl.w	r2, r1, r2
 8004daa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d108      	bne.n	8004dce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dcc:	e007      	b.n	8004dde <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dfa:	e17f      	b.n	80050fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8171 	beq.w	80050f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d005      	beq.n	8004e2c <HAL_GPIO_Init+0x40>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d130      	bne.n	8004e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2203      	movs	r2, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e62:	2201      	movs	r2, #1
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f003 0201 	and.w	r2, r3, #1
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d118      	bne.n	8004ecc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	f003 0201 	and.w	r2, r3, #1
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d017      	beq.n	8004f08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d123      	bne.n	8004f5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	08da      	lsrs	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3208      	adds	r2, #8
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	08da      	lsrs	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3208      	adds	r2, #8
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80ac 	beq.w	80050f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9e:	4b5f      	ldr	r3, [pc, #380]	; (800511c <HAL_GPIO_Init+0x330>)
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	4a5e      	ldr	r2, [pc, #376]	; (800511c <HAL_GPIO_Init+0x330>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8004faa:	4b5c      	ldr	r3, [pc, #368]	; (800511c <HAL_GPIO_Init+0x330>)
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fb6:	4a5a      	ldr	r2, [pc, #360]	; (8005120 <HAL_GPIO_Init+0x334>)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	220f      	movs	r2, #15
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fe0:	d025      	beq.n	800502e <HAL_GPIO_Init+0x242>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a4f      	ldr	r2, [pc, #316]	; (8005124 <HAL_GPIO_Init+0x338>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01f      	beq.n	800502a <HAL_GPIO_Init+0x23e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a4e      	ldr	r2, [pc, #312]	; (8005128 <HAL_GPIO_Init+0x33c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d019      	beq.n	8005026 <HAL_GPIO_Init+0x23a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a4d      	ldr	r2, [pc, #308]	; (800512c <HAL_GPIO_Init+0x340>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_GPIO_Init+0x236>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <HAL_GPIO_Init+0x344>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00d      	beq.n	800501e <HAL_GPIO_Init+0x232>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a4b      	ldr	r2, [pc, #300]	; (8005134 <HAL_GPIO_Init+0x348>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <HAL_GPIO_Init+0x22e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a4a      	ldr	r2, [pc, #296]	; (8005138 <HAL_GPIO_Init+0x34c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_GPIO_Init+0x22a>
 8005012:	2306      	movs	r3, #6
 8005014:	e00c      	b.n	8005030 <HAL_GPIO_Init+0x244>
 8005016:	2307      	movs	r3, #7
 8005018:	e00a      	b.n	8005030 <HAL_GPIO_Init+0x244>
 800501a:	2305      	movs	r3, #5
 800501c:	e008      	b.n	8005030 <HAL_GPIO_Init+0x244>
 800501e:	2304      	movs	r3, #4
 8005020:	e006      	b.n	8005030 <HAL_GPIO_Init+0x244>
 8005022:	2303      	movs	r3, #3
 8005024:	e004      	b.n	8005030 <HAL_GPIO_Init+0x244>
 8005026:	2302      	movs	r3, #2
 8005028:	e002      	b.n	8005030 <HAL_GPIO_Init+0x244>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_GPIO_Init+0x244>
 800502e:	2300      	movs	r3, #0
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	f002 0203 	and.w	r2, r2, #3
 8005036:	0092      	lsls	r2, r2, #2
 8005038:	4093      	lsls	r3, r2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005040:	4937      	ldr	r1, [pc, #220]	; (8005120 <HAL_GPIO_Init+0x334>)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	3302      	adds	r3, #2
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800504e:	4b3b      	ldr	r3, [pc, #236]	; (800513c <HAL_GPIO_Init+0x350>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	43db      	mvns	r3, r3
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4013      	ands	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005072:	4a32      	ldr	r2, [pc, #200]	; (800513c <HAL_GPIO_Init+0x350>)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005078:	4b30      	ldr	r3, [pc, #192]	; (800513c <HAL_GPIO_Init+0x350>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	43db      	mvns	r3, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4013      	ands	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <HAL_GPIO_Init+0x350>)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <HAL_GPIO_Init+0x350>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	43db      	mvns	r3, r3
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4013      	ands	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050c6:	4a1d      	ldr	r2, [pc, #116]	; (800513c <HAL_GPIO_Init+0x350>)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_GPIO_Init+0x350>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4013      	ands	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050f0:	4a12      	ldr	r2, [pc, #72]	; (800513c <HAL_GPIO_Init+0x350>)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	f47f ae78 	bne.w	8004dfc <HAL_GPIO_Init+0x10>
  }
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	40010000 	.word	0x40010000
 8005124:	48000400 	.word	0x48000400
 8005128:	48000800 	.word	0x48000800
 800512c:	48000c00 	.word	0x48000c00
 8005130:	48001000 	.word	0x48001000
 8005134:	48001400 	.word	0x48001400
 8005138:	48001800 	.word	0x48001800
 800513c:	40010400 	.word	0x40010400

08005140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <HAL_PWREx_GetVoltageRange+0x18>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40007000 	.word	0x40007000

0800515c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800516a:	d130      	bne.n	80051ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005178:	d038      	beq.n	80051ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005188:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2232      	movs	r2, #50	; 0x32
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0c9b      	lsrs	r3, r3, #18
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051a0:	e002      	b.n	80051a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051a8:	4b14      	ldr	r3, [pc, #80]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d102      	bne.n	80051bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f2      	bne.n	80051a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c8:	d110      	bne.n	80051ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e00f      	b.n	80051ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051da:	d007      	beq.n	80051ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051e4:	4a05      	ldr	r2, [pc, #20]	; (80051fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40007000 	.word	0x40007000
 8005200:	2000046c 	.word	0x2000046c
 8005204:	431bde83 	.word	0x431bde83

08005208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e3ca      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521a:	4b97      	ldr	r3, [pc, #604]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005224:	4b94      	ldr	r3, [pc, #592]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80e4 	beq.w	8005404 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <HAL_RCC_OscConfig+0x4a>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b0c      	cmp	r3, #12
 8005246:	f040 808b 	bne.w	8005360 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 8087 	bne.w	8005360 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005252:	4b89      	ldr	r3, [pc, #548]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_RCC_OscConfig+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e3a2      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	4b82      	ldr	r3, [pc, #520]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <HAL_RCC_OscConfig+0x7c>
 800527a:	4b7f      	ldr	r3, [pc, #508]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005282:	e005      	b.n	8005290 <HAL_RCC_OscConfig+0x88>
 8005284:	4b7c      	ldr	r3, [pc, #496]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005290:	4293      	cmp	r3, r2
 8005292:	d223      	bcs.n	80052dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fd55 	bl	8005d48 <RCC_SetFlashLatencyFromMSIRange>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e383      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052a8:	4b73      	ldr	r3, [pc, #460]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a72      	ldr	r2, [pc, #456]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052ae:	f043 0308 	orr.w	r3, r3, #8
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b70      	ldr	r3, [pc, #448]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	496d      	ldr	r1, [pc, #436]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c6:	4b6c      	ldr	r3, [pc, #432]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	4968      	ldr	r1, [pc, #416]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
 80052da:	e025      	b.n	8005328 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052dc:	4b66      	ldr	r3, [pc, #408]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052e2:	f043 0308 	orr.w	r3, r3, #8
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4b63      	ldr	r3, [pc, #396]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4960      	ldr	r1, [pc, #384]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052fa:	4b5f      	ldr	r3, [pc, #380]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	495b      	ldr	r1, [pc, #364]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800530a:	4313      	orrs	r3, r2
 800530c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fd15 	bl	8005d48 <RCC_SetFlashLatencyFromMSIRange>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e343      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005328:	f000 fc4a 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b52      	ldr	r3, [pc, #328]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	4950      	ldr	r1, [pc, #320]	; (800547c <HAL_RCC_OscConfig+0x274>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	4a4e      	ldr	r2, [pc, #312]	; (8005480 <HAL_RCC_OscConfig+0x278>)
 8005346:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005348:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <HAL_RCC_OscConfig+0x27c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd fadd 	bl	800290c <HAL_InitTick>
 8005352:	4603      	mov	r3, r0
 8005354:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d052      	beq.n	8005402 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	e327      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d032      	beq.n	80053ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005368:	4b43      	ldr	r3, [pc, #268]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a42      	ldr	r2, [pc, #264]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005374:	f7fd fb1a 	bl	80029ac <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800537c:	f7fd fb16 	bl	80029ac <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e310      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800538e:	4b3a      	ldr	r3, [pc, #232]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800539a:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a36      	ldr	r2, [pc, #216]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053a0:	f043 0308 	orr.w	r3, r3, #8
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	4931      	ldr	r1, [pc, #196]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053b8:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	492c      	ldr	r1, [pc, #176]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e01a      	b.n	8005404 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053ce:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a29      	ldr	r2, [pc, #164]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053da:	f7fd fae7 	bl	80029ac <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e2:	f7fd fae3 	bl	80029ac <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e2dd      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1da>
 8005400:	e000      	b.n	8005404 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005402:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d074      	beq.n	80054fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b08      	cmp	r3, #8
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x21a>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d10e      	bne.n	800543a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d10b      	bne.n	800543a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d064      	beq.n	80054f8 <HAL_RCC_OscConfig+0x2f0>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d160      	bne.n	80054f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e2ba      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005442:	d106      	bne.n	8005452 <HAL_RCC_OscConfig+0x24a>
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800544a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	e026      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545a:	d115      	bne.n	8005488 <HAL_RCC_OscConfig+0x280>
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a05      	ldr	r2, [pc, #20]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 8005462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a02      	ldr	r2, [pc, #8]	; (8005478 <HAL_RCC_OscConfig+0x270>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e014      	b.n	80054a0 <HAL_RCC_OscConfig+0x298>
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	0800a870 	.word	0x0800a870
 8005480:	2000046c 	.word	0x2000046c
 8005484:	20000470 	.word	0x20000470
 8005488:	4ba0      	ldr	r3, [pc, #640]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a9f      	ldr	r2, [pc, #636]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b9d      	ldr	r3, [pc, #628]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a9c      	ldr	r2, [pc, #624]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd fa80 	bl	80029ac <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fa7c 	bl	80029ac <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e276      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c2:	4b92      	ldr	r3, [pc, #584]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x2a8>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fd fa6c 	bl	80029ac <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fd fa68 	bl	80029ac <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e262      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ea:	4b88      	ldr	r3, [pc, #544]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x2d0>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d060      	beq.n	80055c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d005      	beq.n	8005518 <HAL_RCC_OscConfig+0x310>
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d119      	bne.n	8005546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d116      	bne.n	8005546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005518:	4b7c      	ldr	r3, [pc, #496]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_OscConfig+0x328>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e23f      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b76      	ldr	r3, [pc, #472]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	061b      	lsls	r3, r3, #24
 800553e:	4973      	ldr	r1, [pc, #460]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005540:	4313      	orrs	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005544:	e040      	b.n	80055c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d023      	beq.n	8005596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554e:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6e      	ldr	r2, [pc, #440]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fd fa27 	bl	80029ac <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005562:	f7fd fa23 	bl	80029ac <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e21d      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005574:	4b65      	ldr	r3, [pc, #404]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005580:	4b62      	ldr	r3, [pc, #392]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	495f      	ldr	r1, [pc, #380]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]
 8005594:	e018      	b.n	80055c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005596:	4b5d      	ldr	r3, [pc, #372]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5c      	ldr	r2, [pc, #368]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800559c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fd fa03 	bl	80029ac <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055aa:	f7fd f9ff 	bl	80029ac <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1f9      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055bc:	4b53      	ldr	r3, [pc, #332]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f0      	bne.n	80055aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03c      	beq.n	800564e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01c      	beq.n	8005616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055dc:	4b4b      	ldr	r3, [pc, #300]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e2:	4a4a      	ldr	r2, [pc, #296]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fd f9de 	bl	80029ac <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f4:	f7fd f9da 	bl	80029ac <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e1d4      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005606:	4b41      	ldr	r3, [pc, #260]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ef      	beq.n	80055f4 <HAL_RCC_OscConfig+0x3ec>
 8005614:	e01b      	b.n	800564e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005616:	4b3d      	ldr	r3, [pc, #244]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561c:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005626:	f7fd f9c1 	bl	80029ac <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562e:	f7fd f9bd 	bl	80029ac <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1b7      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005640:	4b32      	ldr	r3, [pc, #200]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1ef      	bne.n	800562e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80a6 	beq.w	80057a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566c:	4b27      	ldr	r3, [pc, #156]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	6593      	str	r3, [r2, #88]	; 0x58
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x504>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005684:	2301      	movs	r3, #1
 8005686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <HAL_RCC_OscConfig+0x508>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d118      	bne.n	80056c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005694:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <HAL_RCC_OscConfig+0x508>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <HAL_RCC_OscConfig+0x508>)
 800569a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a0:	f7fd f984 	bl	80029ac <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a8:	f7fd f980 	bl	80029ac <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e17a      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <HAL_RCC_OscConfig+0x508>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d108      	bne.n	80056e0 <HAL_RCC_OscConfig+0x4d8>
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	4a0d      	ldr	r2, [pc, #52]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056de:	e029      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b05      	cmp	r3, #5
 80056e6:	d115      	bne.n	8005714 <HAL_RCC_OscConfig+0x50c>
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	4a07      	ldr	r2, [pc, #28]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80056f0:	f043 0304 	orr.w	r3, r3, #4
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_RCC_OscConfig+0x504>)
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fe:	4a03      	ldr	r2, [pc, #12]	; (800570c <HAL_RCC_OscConfig+0x504>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005708:	e014      	b.n	8005734 <HAL_RCC_OscConfig+0x52c>
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
 8005710:	40007000 	.word	0x40007000
 8005714:	4b9c      	ldr	r3, [pc, #624]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	4a9b      	ldr	r2, [pc, #620]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005724:	4b98      	ldr	r3, [pc, #608]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	4a97      	ldr	r2, [pc, #604]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800572c:	f023 0304 	bic.w	r3, r3, #4
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d016      	beq.n	800576a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fd f936 	bl	80029ac <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005742:	e00a      	b.n	800575a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005744:	f7fd f932 	bl	80029ac <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e12a      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575a:	4b8b      	ldr	r3, [pc, #556]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ed      	beq.n	8005744 <HAL_RCC_OscConfig+0x53c>
 8005768:	e015      	b.n	8005796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576a:	f7fd f91f 	bl	80029ac <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005770:	e00a      	b.n	8005788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005772:	f7fd f91b 	bl	80029ac <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e113      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005788:	4b7f      	ldr	r3, [pc, #508]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ed      	bne.n	8005772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005796:	7ffb      	ldrb	r3, [r7, #31]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579c:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	4a79      	ldr	r2, [pc, #484]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80057a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80fe 	beq.w	80059ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	f040 80d0 	bne.w	800595c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80057bc:	4b72      	ldr	r3, [pc, #456]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f003 0203 	and.w	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d130      	bne.n	8005832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	3b01      	subs	r3, #1
 80057dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	429a      	cmp	r2, r3
 80057e0:	d127      	bne.n	8005832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d11f      	bne.n	8005832 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057fc:	2a07      	cmp	r2, #7
 80057fe:	bf14      	ite	ne
 8005800:	2201      	movne	r2, #1
 8005802:	2200      	moveq	r2, #0
 8005804:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005806:	4293      	cmp	r3, r2
 8005808:	d113      	bne.n	8005832 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	3b01      	subs	r3, #1
 8005818:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d109      	bne.n	8005832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	3b01      	subs	r3, #1
 800582c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d06e      	beq.n	8005910 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d069      	beq.n	800590c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005838:	4b53      	ldr	r3, [pc, #332]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005844:	4b50      	ldr	r3, [pc, #320]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0ad      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005854:	4b4c      	ldr	r3, [pc, #304]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4b      	ldr	r2, [pc, #300]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005860:	f7fd f8a4 	bl	80029ac <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7fd f8a0 	bl	80029ac <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e09a      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800587a:	4b43      	ldr	r3, [pc, #268]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005886:	4b40      	ldr	r3, [pc, #256]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	4b40      	ldr	r3, [pc, #256]	; (800598c <HAL_RCC_OscConfig+0x784>)
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005896:	3a01      	subs	r2, #1
 8005898:	0112      	lsls	r2, r2, #4
 800589a:	4311      	orrs	r1, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a0:	0212      	lsls	r2, r2, #8
 80058a2:	4311      	orrs	r1, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058a8:	0852      	lsrs	r2, r2, #1
 80058aa:	3a01      	subs	r2, #1
 80058ac:	0552      	lsls	r2, r2, #21
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058b4:	0852      	lsrs	r2, r2, #1
 80058b6:	3a01      	subs	r2, #1
 80058b8:	0652      	lsls	r2, r2, #25
 80058ba:	4311      	orrs	r1, r2
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058c0:	0912      	lsrs	r2, r2, #4
 80058c2:	0452      	lsls	r2, r2, #17
 80058c4:	430a      	orrs	r2, r1
 80058c6:	4930      	ldr	r1, [pc, #192]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058cc:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058e4:	f7fd f862 	bl	80029ac <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fd f85e 	bl	80029ac <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e058      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800590a:	e050      	b.n	80059ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e04f      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d148      	bne.n	80059ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005934:	f7fd f83a 	bl	80029ac <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fd f836 	bl	80029ac <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e030      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x734>
 800595a:	e028      	b.n	80059ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d023      	beq.n	80059aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a08      	ldr	r2, [pc, #32]	; (8005988 <HAL_RCC_OscConfig+0x780>)
 8005968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800596c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596e:	f7fd f81d 	bl	80029ac <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005974:	e00c      	b.n	8005990 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005976:	f7fd f819 	bl	80029ac <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d905      	bls.n	8005990 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e013      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
 8005988:	40021000 	.word	0x40021000
 800598c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_RCC_OscConfig+0x7b0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ec      	bne.n	8005976 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_RCC_OscConfig+0x7b0>)
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	4905      	ldr	r1, [pc, #20]	; (80059b8 <HAL_RCC_OscConfig+0x7b0>)
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_RCC_OscConfig+0x7b4>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60cb      	str	r3, [r1, #12]
 80059a8:	e001      	b.n	80059ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40021000 	.word	0x40021000
 80059bc:	feeefffc 	.word	0xfeeefffc

080059c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0e7      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d4:	4b75      	ldr	r3, [pc, #468]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d910      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b72      	ldr	r3, [pc, #456]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 0207 	bic.w	r2, r3, #7
 80059ea:	4970      	ldr	r1, [pc, #448]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b6e      	ldr	r3, [pc, #440]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0cf      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	4b66      	ldr	r3, [pc, #408]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d908      	bls.n	8005a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a20:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4960      	ldr	r1, [pc, #384]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d04c      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a46:	4b5a      	ldr	r3, [pc, #360]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d121      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0a6      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a5e:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d115      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e09a      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a76:	4b4e      	ldr	r3, [pc, #312]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e08e      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a86:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e086      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a96:	4b46      	ldr	r3, [pc, #280]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f023 0203 	bic.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4943      	ldr	r1, [pc, #268]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa8:	f7fc ff80 	bl	80029ac <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fc ff7c 	bl	80029ac <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e06e      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 020c 	and.w	r2, r3, #12
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d1eb      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d010      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d208      	bcs.n	8005b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af4:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	492b      	ldr	r1, [pc, #172]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d210      	bcs.n	8005b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f023 0207 	bic.w	r2, r3, #7
 8005b1c:	4923      	ldr	r1, [pc, #140]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_RCC_ClockConfig+0x1ec>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d001      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e036      	b.n	8005ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4918      	ldr	r1, [pc, #96]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4910      	ldr	r1, [pc, #64]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b74:	f000 f824 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	091b      	lsrs	r3, r3, #4
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	490b      	ldr	r1, [pc, #44]	; (8005bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8005b86:	5ccb      	ldrb	r3, [r1, r3]
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8005b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <HAL_RCC_ClockConfig+0x1fc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fc feb7 	bl	800290c <HAL_InitTick>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40022000 	.word	0x40022000
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	0800a870 	.word	0x0800a870
 8005bb8:	2000046c 	.word	0x2000046c
 8005bbc:	20000470 	.word	0x20000470

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b089      	sub	sp, #36	; 0x24
 8005bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bce:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd8:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b0c      	cmp	r3, #12
 8005bec:	d121      	bne.n	8005c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d11e      	bne.n	8005c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005bf4:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c06:	0a1b      	lsrs	r3, r3, #8
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e005      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10d      	bne.n	8005c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d102      	bne.n	8005c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	e004      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c44:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d134      	bne.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c4e:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d003      	beq.n	8005c6c <HAL_RCC_GetSysClockFreq+0xac>
 8005c64:	e005      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c68:	617b      	str	r3, [r7, #20]
      break;
 8005c6a:	e005      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c6c:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c6e:	617b      	str	r3, [r7, #20]
      break;
 8005c70:	e002      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	617b      	str	r3, [r7, #20]
      break;
 8005c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	3301      	adds	r3, #1
 8005c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c86:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	fb03 f202 	mul.w	r2, r3, r2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	0e5b      	lsrs	r3, r3, #25
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	3301      	adds	r3, #1
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3724      	adds	r7, #36	; 0x24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	0800a888 	.word	0x0800a888
 8005cd0:	00f42400 	.word	0x00f42400
 8005cd4:	007a1200 	.word	0x007a1200

08005cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <HAL_RCC_GetHCLKFreq+0x14>)
 8005cde:	681b      	ldr	r3, [r3, #0]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000046c 	.word	0x2000046c

08005cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cf4:	f7ff fff0 	bl	8005cd8 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4904      	ldr	r1, [pc, #16]	; (8005d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	0800a880 	.word	0x0800a880

08005d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d20:	f7ff ffda 	bl	8005cd8 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	0adb      	lsrs	r3, r3, #11
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4904      	ldr	r1, [pc, #16]	; (8005d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40021000 	.word	0x40021000
 8005d44:	0800a880 	.word	0x0800a880

08005d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d54:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d60:	f7ff f9ee 	bl	8005140 <HAL_PWREx_GetVoltageRange>
 8005d64:	6178      	str	r0, [r7, #20]
 8005d66:	e014      	b.n	8005d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	4a24      	ldr	r2, [pc, #144]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	6593      	str	r3, [r2, #88]	; 0x58
 8005d74:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d80:	f7ff f9de 	bl	8005140 <HAL_PWREx_GetVoltageRange>
 8005d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d86:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d10b      	bne.n	8005db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d919      	bls.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2ba0      	cmp	r3, #160	; 0xa0
 8005da4:	d902      	bls.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005da6:	2302      	movs	r3, #2
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	e013      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dac:	2301      	movs	r3, #1
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e010      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d902      	bls.n	8005dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005db8:	2303      	movs	r3, #3
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	e00a      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b80      	cmp	r3, #128	; 0x80
 8005dc2:	d102      	bne.n	8005dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e004      	b.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b70      	cmp	r3, #112	; 0x70
 8005dce:	d101      	bne.n	8005dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 0207 	bic.w	r2, r3, #7
 8005ddc:	4909      	ldr	r1, [pc, #36]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40021000 	.word	0x40021000
 8005e04:	40022000 	.word	0x40022000

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e10:	2300      	movs	r3, #0
 8005e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e14:	2300      	movs	r3, #0
 8005e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d041      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e2c:	d02a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e32:	d824      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e38:	d008      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e3e:	d81e      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e48:	d010      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e4a:	e018      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e4c:	4b86      	ldr	r3, [pc, #536]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a85      	ldr	r2, [pc, #532]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e58:	e015      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fabb 	bl	80063dc <RCCEx_PLLSAI1_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e6a:	e00c      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3320      	adds	r3, #32
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fba6 	bl	80065c4 <RCCEx_PLLSAI2_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	74fb      	strb	r3, [r7, #19]
      break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e86:	7cfb      	ldrb	r3, [r7, #19]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e8c:	4b76      	ldr	r3, [pc, #472]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9a:	4973      	ldr	r1, [pc, #460]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005ea2:	e001      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d041      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ebc:	d02a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ebe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ec2:	d824      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec8:	d008      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ece:	d81e      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ed8:	d010      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005eda:	e018      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005edc:	4b62      	ldr	r3, [pc, #392]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a61      	ldr	r2, [pc, #388]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ee8:	e015      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fa73 	bl	80063dc <RCCEx_PLLSAI1_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005efa:	e00c      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3320      	adds	r3, #32
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fb5e 	bl	80065c4 <RCCEx_PLLSAI2_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f0c:	e003      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	74fb      	strb	r3, [r7, #19]
      break;
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f16:	7cfb      	ldrb	r3, [r7, #19]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f1c:	4b52      	ldr	r3, [pc, #328]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2a:	494f      	ldr	r1, [pc, #316]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80a0 	beq.w	8006086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f46:	2300      	movs	r3, #0
 8005f48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f4a:	4b47      	ldr	r3, [pc, #284]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00d      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f60:	4b41      	ldr	r3, [pc, #260]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	4a40      	ldr	r2, [pc, #256]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6c:	4b3e      	ldr	r3, [pc, #248]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7c:	4b3b      	ldr	r3, [pc, #236]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a3a      	ldr	r2, [pc, #232]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f88:	f7fc fd10 	bl	80029ac <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f8e:	e009      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fc fd0c 	bl	80029ac <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d902      	bls.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005fa4:	4b31      	ldr	r3, [pc, #196]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0ef      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d15c      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb6:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01f      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d019      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	4a20      	ldr	r2, [pc, #128]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff6:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d016      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fc fccb 	bl	80029ac <HAL_GetTick>
 8006016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006018:	e00b      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fc fcc7 	bl	80029ac <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d902      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	74fb      	strb	r3, [r7, #19]
            break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ec      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10c      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006056:	4904      	ldr	r1, [pc, #16]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800605e:	e009      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	74bb      	strb	r3, [r7, #18]
 8006064:	e006      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000
 800606c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006074:	7c7b      	ldrb	r3, [r7, #17]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800607a:	4b9e      	ldr	r3, [pc, #632]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607e:	4a9d      	ldr	r2, [pc, #628]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006092:	4b98      	ldr	r3, [pc, #608]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f023 0203 	bic.w	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	4994      	ldr	r1, [pc, #592]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060b4:	4b8f      	ldr	r3, [pc, #572]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 020c 	bic.w	r2, r3, #12
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	498c      	ldr	r1, [pc, #560]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060d6:	4b87      	ldr	r3, [pc, #540]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	4983      	ldr	r1, [pc, #524]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060f8:	4b7e      	ldr	r3, [pc, #504]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	497b      	ldr	r1, [pc, #492]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800611a:	4b76      	ldr	r3, [pc, #472]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	4972      	ldr	r1, [pc, #456]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800613c:	4b6d      	ldr	r3, [pc, #436]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	496a      	ldr	r1, [pc, #424]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800615e:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616c:	4961      	ldr	r1, [pc, #388]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006180:	4b5c      	ldr	r3, [pc, #368]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618e:	4959      	ldr	r1, [pc, #356]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061a2:	4b54      	ldr	r3, [pc, #336]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	4950      	ldr	r1, [pc, #320]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061c4:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	4948      	ldr	r1, [pc, #288]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	493f      	ldr	r1, [pc, #252]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d028      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006208:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006216:	4937      	ldr	r1, [pc, #220]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006226:	d106      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006228:	4b32      	ldr	r3, [pc, #200]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a31      	ldr	r2, [pc, #196]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	e011      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800623a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800623e:	d10c      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f8c8 	bl	80063dc <RCCEx_PLLSAI1_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006250:	7cfb      	ldrb	r3, [r7, #19]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d028      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006266:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	491f      	ldr	r1, [pc, #124]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006286:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006290:	60d3      	str	r3, [r2, #12]
 8006292:	e011      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800629c:	d10c      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2101      	movs	r1, #1
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f899 	bl	80063dc <RCCEx_PLLSAI1_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80062b4:	7cfb      	ldrb	r3, [r7, #19]
 80062b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02b      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d2:	4908      	ldr	r1, [pc, #32]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062e2:	d109      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a02      	ldr	r2, [pc, #8]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ee:	60d3      	str	r3, [r2, #12]
 80062f0:	e014      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006300:	d10c      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	2101      	movs	r1, #1
 8006308:	4618      	mov	r0, r3
 800630a:	f000 f867 	bl	80063dc <RCCEx_PLLSAI1_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006312:	7cfb      	ldrb	r3, [r7, #19]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006318:	7cfb      	ldrb	r3, [r7, #19]
 800631a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02f      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006336:	4928      	ldr	r1, [pc, #160]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006346:	d10d      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f844 	bl	80063dc <RCCEx_PLLSAI1_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	74bb      	strb	r3, [r7, #18]
 8006362:	e011      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636c:	d10c      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3320      	adds	r3, #32
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f925 	bl	80065c4 <RCCEx_PLLSAI2_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800637e:	7cfb      	ldrb	r3, [r7, #19]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006394:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a2:	490d      	ldr	r1, [pc, #52]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c6:	4904      	ldr	r1, [pc, #16]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40021000 	.word	0x40021000

080063dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063ea:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d018      	beq.n	8006428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063f6:	4b72      	ldr	r3, [pc, #456]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0203 	and.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d10d      	bne.n	8006422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
       ||
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800640e:	4b6c      	ldr	r3, [pc, #432]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
       ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d047      	beq.n	80064b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	e044      	b.n	80064b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d018      	beq.n	8006462 <RCCEx_PLLSAI1_Config+0x86>
 8006430:	2b03      	cmp	r3, #3
 8006432:	d825      	bhi.n	8006480 <RCCEx_PLLSAI1_Config+0xa4>
 8006434:	2b01      	cmp	r3, #1
 8006436:	d002      	beq.n	800643e <RCCEx_PLLSAI1_Config+0x62>
 8006438:	2b02      	cmp	r3, #2
 800643a:	d009      	beq.n	8006450 <RCCEx_PLLSAI1_Config+0x74>
 800643c:	e020      	b.n	8006480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800643e:	4b60      	ldr	r3, [pc, #384]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11d      	bne.n	8006486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800644e:	e01a      	b.n	8006486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006450:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006460:	e013      	b.n	800648a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006462:	4b57      	ldr	r3, [pc, #348]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10f      	bne.n	800648e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800647e:	e006      	b.n	800648e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e004      	b.n	8006490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800648e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006496:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	430b      	orrs	r3, r1
 80064ac:	4944      	ldr	r1, [pc, #272]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d17d      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064b8:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c4:	f7fc fa72 	bl	80029ac <HAL_GetTick>
 80064c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ca:	e009      	b.n	80064e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064cc:	f7fc fa6e 	bl	80029ac <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d902      	bls.n	80064e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	73fb      	strb	r3, [r7, #15]
        break;
 80064de:	e005      	b.n	80064ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064e0:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1ef      	bne.n	80064cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d160      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d111      	bne.n	800651c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064f8:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6892      	ldr	r2, [r2, #8]
 8006508:	0211      	lsls	r1, r2, #8
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68d2      	ldr	r2, [r2, #12]
 800650e:	0912      	lsrs	r2, r2, #4
 8006510:	0452      	lsls	r2, r2, #17
 8006512:	430a      	orrs	r2, r1
 8006514:	492a      	ldr	r1, [pc, #168]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]
 800651a:	e027      	b.n	800656c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d112      	bne.n	8006548 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006522:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800652a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	0211      	lsls	r1, r2, #8
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6912      	ldr	r2, [r2, #16]
 8006538:	0852      	lsrs	r2, r2, #1
 800653a:	3a01      	subs	r2, #1
 800653c:	0552      	lsls	r2, r2, #21
 800653e:	430a      	orrs	r2, r1
 8006540:	491f      	ldr	r1, [pc, #124]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006542:	4313      	orrs	r3, r2
 8006544:	610b      	str	r3, [r1, #16]
 8006546:	e011      	b.n	800656c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6892      	ldr	r2, [r2, #8]
 8006558:	0211      	lsls	r1, r2, #8
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6952      	ldr	r2, [r2, #20]
 800655e:	0852      	lsrs	r2, r2, #1
 8006560:	3a01      	subs	r2, #1
 8006562:	0652      	lsls	r2, r2, #25
 8006564:	430a      	orrs	r2, r1
 8006566:	4916      	ldr	r1, [pc, #88]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800656c:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fc fa18 	bl	80029ac <HAL_GetTick>
 800657c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800657e:	e009      	b.n	8006594 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006580:	f7fc fa14 	bl	80029ac <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d902      	bls.n	8006594 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	73fb      	strb	r3, [r7, #15]
          break;
 8006592:	e005      	b.n	80065a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0ef      	beq.n	8006580 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	4904      	ldr	r1, [pc, #16]	; (80065c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065d2:	4b6a      	ldr	r3, [pc, #424]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80065de:	4b67      	ldr	r3, [pc, #412]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0203 	and.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d10d      	bne.n	800660a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
       ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80065f6:	4b61      	ldr	r3, [pc, #388]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
       ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d047      	beq.n	800669a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e044      	b.n	800669a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d018      	beq.n	800664a <RCCEx_PLLSAI2_Config+0x86>
 8006618:	2b03      	cmp	r3, #3
 800661a:	d825      	bhi.n	8006668 <RCCEx_PLLSAI2_Config+0xa4>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d002      	beq.n	8006626 <RCCEx_PLLSAI2_Config+0x62>
 8006620:	2b02      	cmp	r3, #2
 8006622:	d009      	beq.n	8006638 <RCCEx_PLLSAI2_Config+0x74>
 8006624:	e020      	b.n	8006668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006626:	4b55      	ldr	r3, [pc, #340]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11d      	bne.n	800666e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006636:	e01a      	b.n	800666e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006638:	4b50      	ldr	r3, [pc, #320]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d116      	bne.n	8006672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006648:	e013      	b.n	8006672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800664a:	4b4c      	ldr	r3, [pc, #304]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10f      	bne.n	8006676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006656:	4b49      	ldr	r3, [pc, #292]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006666:	e006      	b.n	8006676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
      break;
 800666c:	e004      	b.n	8006678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006672:	bf00      	nop
 8006674:	e000      	b.n	8006678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006676:	bf00      	nop
    }

    if(status == HAL_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10d      	bne.n	800669a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800667e:	4b3f      	ldr	r3, [pc, #252]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	430b      	orrs	r3, r1
 8006694:	4939      	ldr	r1, [pc, #228]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006696:	4313      	orrs	r3, r2
 8006698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d167      	bne.n	8006770 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066a0:	4b36      	ldr	r3, [pc, #216]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a35      	ldr	r2, [pc, #212]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ac:	f7fc f97e 	bl	80029ac <HAL_GetTick>
 80066b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066b2:	e009      	b.n	80066c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066b4:	f7fc f97a 	bl	80029ac <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d902      	bls.n	80066c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	73fb      	strb	r3, [r7, #15]
        break;
 80066c6:	e005      	b.n	80066d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066c8:	4b2c      	ldr	r3, [pc, #176]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ef      	bne.n	80066b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d14a      	bne.n	8006770 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d111      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066e0:	4b26      	ldr	r3, [pc, #152]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6892      	ldr	r2, [r2, #8]
 80066f0:	0211      	lsls	r1, r2, #8
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68d2      	ldr	r2, [r2, #12]
 80066f6:	0912      	lsrs	r2, r2, #4
 80066f8:	0452      	lsls	r2, r2, #17
 80066fa:	430a      	orrs	r2, r1
 80066fc:	491f      	ldr	r1, [pc, #124]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	614b      	str	r3, [r1, #20]
 8006702:	e011      	b.n	8006728 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800670c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6892      	ldr	r2, [r2, #8]
 8006714:	0211      	lsls	r1, r2, #8
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6912      	ldr	r2, [r2, #16]
 800671a:	0852      	lsrs	r2, r2, #1
 800671c:	3a01      	subs	r2, #1
 800671e:	0652      	lsls	r2, r2, #25
 8006720:	430a      	orrs	r2, r1
 8006722:	4916      	ldr	r1, [pc, #88]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006724:	4313      	orrs	r3, r2
 8006726:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006728:	4b14      	ldr	r3, [pc, #80]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a13      	ldr	r2, [pc, #76]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fc f93a 	bl	80029ac <HAL_GetTick>
 8006738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800673a:	e009      	b.n	8006750 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800673c:	f7fc f936 	bl	80029ac <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d902      	bls.n	8006750 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	73fb      	strb	r3, [r7, #15]
          break;
 800674e:	e005      	b.n	800675c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006750:	4b0a      	ldr	r3, [pc, #40]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ef      	beq.n	800673c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	4904      	ldr	r1, [pc, #16]	; (800677c <RCCEx_PLLSAI2_Config+0x1b8>)
 800676c:	4313      	orrs	r3, r2
 800676e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40021000 	.word	0x40021000

08006780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e049      	b.n	8006826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fb fe2a 	bl	8002400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f000 fade 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d001      	beq.n	8006848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e047      	b.n	80068d8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a23      	ldr	r2, [pc, #140]	; (80068e4 <HAL_TIM_Base_Start+0xb4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01d      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006862:	d018      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_TIM_Base_Start+0xb8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <HAL_TIM_Base_Start+0xbc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <HAL_TIM_Base_Start+0xc0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1b      	ldr	r2, [pc, #108]	; (80068f4 <HAL_TIM_Base_Start+0xc4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_TIM_Base_Start+0x66>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <HAL_TIM_Base_Start+0xc8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d115      	bne.n	80068c2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	4b17      	ldr	r3, [pc, #92]	; (80068fc <HAL_TIM_Base_Start+0xcc>)
 800689e:	4013      	ands	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b06      	cmp	r3, #6
 80068a6:	d015      	beq.n	80068d4 <HAL_TIM_Base_Start+0xa4>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ae:	d011      	beq.n	80068d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c0:	e008      	b.n	80068d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0201 	orr.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e000      	b.n	80068d6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40000c00 	.word	0x40000c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	00010007 	.word	0x00010007

08006900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e049      	b.n	80069a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f841 	bl	80069ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f000 fa1e 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069de:	2302      	movs	r3, #2
 80069e0:	e0ff      	b.n	8006be2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b14      	cmp	r3, #20
 80069ee:	f200 80f0 	bhi.w	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	08006bd3 	.word	0x08006bd3
 8006a00:	08006bd3 	.word	0x08006bd3
 8006a04:	08006bd3 	.word	0x08006bd3
 8006a08:	08006a8d 	.word	0x08006a8d
 8006a0c:	08006bd3 	.word	0x08006bd3
 8006a10:	08006bd3 	.word	0x08006bd3
 8006a14:	08006bd3 	.word	0x08006bd3
 8006a18:	08006acf 	.word	0x08006acf
 8006a1c:	08006bd3 	.word	0x08006bd3
 8006a20:	08006bd3 	.word	0x08006bd3
 8006a24:	08006bd3 	.word	0x08006bd3
 8006a28:	08006b0f 	.word	0x08006b0f
 8006a2c:	08006bd3 	.word	0x08006bd3
 8006a30:	08006bd3 	.word	0x08006bd3
 8006a34:	08006bd3 	.word	0x08006bd3
 8006a38:	08006b51 	.word	0x08006b51
 8006a3c:	08006bd3 	.word	0x08006bd3
 8006a40:	08006bd3 	.word	0x08006bd3
 8006a44:	08006bd3 	.word	0x08006bd3
 8006a48:	08006b91 	.word	0x08006b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fa2e 	bl	8006eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0208 	orr.w	r2, r2, #8
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0204 	bic.w	r2, r2, #4
 8006a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	619a      	str	r2, [r3, #24]
      break;
 8006a8a:	e0a5      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fa9e 	bl	8006fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	619a      	str	r2, [r3, #24]
      break;
 8006acc:	e084      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fb07 	bl	80070e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0208 	orr.w	r2, r2, #8
 8006ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0204 	bic.w	r2, r2, #4
 8006af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	61da      	str	r2, [r3, #28]
      break;
 8006b0c:	e064      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fb6f 	bl	80071f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69d9      	ldr	r1, [r3, #28]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	021a      	lsls	r2, r3, #8
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	61da      	str	r2, [r3, #28]
      break;
 8006b4e:	e043      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fbb8 	bl	80072cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0208 	orr.w	r2, r2, #8
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b8e:	e023      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fbfc 	bl	8007394 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	021a      	lsls	r2, r3, #8
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bd0:	e002      	b.n	8006bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop

08006bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIM_ConfigClockSource+0x1c>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e0b6      	b.n	8006d76 <HAL_TIM_ConfigClockSource+0x18a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c44:	d03e      	beq.n	8006cc4 <HAL_TIM_ConfigClockSource+0xd8>
 8006c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4a:	f200 8087 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c52:	f000 8086 	beq.w	8006d62 <HAL_TIM_ConfigClockSource+0x176>
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	d87f      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c5c:	2b70      	cmp	r3, #112	; 0x70
 8006c5e:	d01a      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0xaa>
 8006c60:	2b70      	cmp	r3, #112	; 0x70
 8006c62:	d87b      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c64:	2b60      	cmp	r3, #96	; 0x60
 8006c66:	d050      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0x11e>
 8006c68:	2b60      	cmp	r3, #96	; 0x60
 8006c6a:	d877      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c6c:	2b50      	cmp	r3, #80	; 0x50
 8006c6e:	d03c      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0xfe>
 8006c70:	2b50      	cmp	r3, #80	; 0x50
 8006c72:	d873      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d058      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x13e>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d86f      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d064      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x15e>
 8006c80:	2b30      	cmp	r3, #48	; 0x30
 8006c82:	d86b      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d060      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x15e>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d867      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x15e>
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d05a      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x15e>
 8006c94:	e062      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6899      	ldr	r1, [r3, #8]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f000 fc55 	bl	8007554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	609a      	str	r2, [r3, #8]
      break;
 8006cc2:	e04f      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6899      	ldr	r1, [r3, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f000 fc3e 	bl	8007554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ce6:	609a      	str	r2, [r3, #8]
      break;
 8006ce8:	e03c      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6859      	ldr	r1, [r3, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f000 fbb2 	bl	8007460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2150      	movs	r1, #80	; 0x50
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fc0b 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006d08:	e02c      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6859      	ldr	r1, [r3, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f000 fbd1 	bl	80074be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2160      	movs	r1, #96	; 0x60
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fbfb 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006d28:	e01c      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f000 fb92 	bl	8007460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2140      	movs	r1, #64	; 0x40
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fbeb 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006d48:	e00c      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f000 fbe2 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006d5a:	e003      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e000      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a40      	ldr	r2, [pc, #256]	; (8006e94 <TIM_Base_SetConfig+0x114>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d013      	beq.n	8006dc0 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d00f      	beq.n	8006dc0 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a3d      	ldr	r2, [pc, #244]	; (8006e98 <TIM_Base_SetConfig+0x118>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00b      	beq.n	8006dc0 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3c      	ldr	r2, [pc, #240]	; (8006e9c <TIM_Base_SetConfig+0x11c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d007      	beq.n	8006dc0 <TIM_Base_SetConfig+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a3b      	ldr	r2, [pc, #236]	; (8006ea0 <TIM_Base_SetConfig+0x120>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_Base_SetConfig+0x40>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a3a      	ldr	r2, [pc, #232]	; (8006ea4 <TIM_Base_SetConfig+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d108      	bne.n	8006dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <TIM_Base_SetConfig+0x114>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01f      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d01b      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2c      	ldr	r2, [pc, #176]	; (8006e98 <TIM_Base_SetConfig+0x118>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d017      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2b      	ldr	r2, [pc, #172]	; (8006e9c <TIM_Base_SetConfig+0x11c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a2a      	ldr	r2, [pc, #168]	; (8006ea0 <TIM_Base_SetConfig+0x120>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00f      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a29      	ldr	r2, [pc, #164]	; (8006ea4 <TIM_Base_SetConfig+0x124>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a28      	ldr	r2, [pc, #160]	; (8006ea8 <TIM_Base_SetConfig+0x128>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a27      	ldr	r2, [pc, #156]	; (8006eac <TIM_Base_SetConfig+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <TIM_Base_SetConfig+0x130>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <TIM_Base_SetConfig+0x114>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00f      	beq.n	8006e78 <TIM_Base_SetConfig+0xf8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a12      	ldr	r2, [pc, #72]	; (8006ea4 <TIM_Base_SetConfig+0x124>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00b      	beq.n	8006e78 <TIM_Base_SetConfig+0xf8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a11      	ldr	r2, [pc, #68]	; (8006ea8 <TIM_Base_SetConfig+0x128>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d007      	beq.n	8006e78 <TIM_Base_SetConfig+0xf8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <TIM_Base_SetConfig+0x12c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_Base_SetConfig+0xf8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0f      	ldr	r2, [pc, #60]	; (8006eb0 <TIM_Base_SetConfig+0x130>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d103      	bne.n	8006e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	615a      	str	r2, [r3, #20]
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40013400 	.word	0x40013400
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800

08006eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f023 0201 	bic.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0302 	bic.w	r3, r3, #2
 8006f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a2c      	ldr	r2, [pc, #176]	; (8006fc0 <TIM_OC1_SetConfig+0x10c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00f      	beq.n	8006f34 <TIM_OC1_SetConfig+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <TIM_OC1_SetConfig+0x110>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_OC1_SetConfig+0x80>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <TIM_OC1_SetConfig+0x114>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_OC1_SetConfig+0x80>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <TIM_OC1_SetConfig+0x118>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_OC1_SetConfig+0x80>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <TIM_OC1_SetConfig+0x11c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d10c      	bne.n	8006f4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0308 	bic.w	r3, r3, #8
 8006f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f023 0304 	bic.w	r3, r3, #4
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <TIM_OC1_SetConfig+0x10c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_OC1_SetConfig+0xc2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <TIM_OC1_SetConfig+0x110>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_OC1_SetConfig+0xc2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <TIM_OC1_SetConfig+0x114>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_OC1_SetConfig+0xc2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <TIM_OC1_SetConfig+0x118>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_OC1_SetConfig+0xc2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <TIM_OC1_SetConfig+0x11c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d111      	bne.n	8006f9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	621a      	str	r2, [r3, #32]
}
 8006fb4:	bf00      	nop
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40013400 	.word	0x40013400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 0210 	bic.w	r2, r3, #16
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f023 0320 	bic.w	r3, r3, #32
 8007022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a28      	ldr	r2, [pc, #160]	; (80070d4 <TIM_OC2_SetConfig+0x100>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC2_SetConfig+0x6c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a27      	ldr	r2, [pc, #156]	; (80070d8 <TIM_OC2_SetConfig+0x104>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10d      	bne.n	800705c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <TIM_OC2_SetConfig+0x100>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00f      	beq.n	8007084 <TIM_OC2_SetConfig+0xb0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <TIM_OC2_SetConfig+0x104>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00b      	beq.n	8007084 <TIM_OC2_SetConfig+0xb0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <TIM_OC2_SetConfig+0x108>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d007      	beq.n	8007084 <TIM_OC2_SetConfig+0xb0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <TIM_OC2_SetConfig+0x10c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC2_SetConfig+0xb0>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <TIM_OC2_SetConfig+0x110>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d113      	bne.n	80070ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800708a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4313      	orrs	r3, r2
 800709e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40014000 	.word	0x40014000
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800

080070e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <TIM_OC3_SetConfig+0xfc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d003      	beq.n	8007152 <TIM_OC3_SetConfig+0x6a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <TIM_OC3_SetConfig+0x100>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10d      	bne.n	800716e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800716c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1c      	ldr	r2, [pc, #112]	; (80071e4 <TIM_OC3_SetConfig+0xfc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_OC3_SetConfig+0xae>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a1b      	ldr	r2, [pc, #108]	; (80071e8 <TIM_OC3_SetConfig+0x100>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_OC3_SetConfig+0xae>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a1a      	ldr	r2, [pc, #104]	; (80071ec <TIM_OC3_SetConfig+0x104>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_OC3_SetConfig+0xae>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a19      	ldr	r2, [pc, #100]	; (80071f0 <TIM_OC3_SetConfig+0x108>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_OC3_SetConfig+0xae>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a18      	ldr	r2, [pc, #96]	; (80071f4 <TIM_OC3_SetConfig+0x10c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d113      	bne.n	80071be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800719c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	621a      	str	r2, [r3, #32]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	031b      	lsls	r3, r3, #12
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <TIM_OC4_SetConfig+0xc0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00f      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <TIM_OC4_SetConfig+0xc4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <TIM_OC4_SetConfig+0xc8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <TIM_OC4_SetConfig+0xcc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC4_SetConfig+0x84>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a14      	ldr	r2, [pc, #80]	; (80072c8 <TIM_OC4_SetConfig+0xd0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d109      	bne.n	8007290 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40013400 	.word	0x40013400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800

080072cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a17      	ldr	r2, [pc, #92]	; (8007380 <TIM_OC5_SetConfig+0xb4>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00f      	beq.n	8007346 <TIM_OC5_SetConfig+0x7a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC5_SetConfig+0xb8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00b      	beq.n	8007346 <TIM_OC5_SetConfig+0x7a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a15      	ldr	r2, [pc, #84]	; (8007388 <TIM_OC5_SetConfig+0xbc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d007      	beq.n	8007346 <TIM_OC5_SetConfig+0x7a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a14      	ldr	r2, [pc, #80]	; (800738c <TIM_OC5_SetConfig+0xc0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC5_SetConfig+0x7a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a13      	ldr	r2, [pc, #76]	; (8007390 <TIM_OC5_SetConfig+0xc4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d109      	bne.n	800735a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	621a      	str	r2, [r3, #32]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	051b      	lsls	r3, r3, #20
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a18      	ldr	r2, [pc, #96]	; (800744c <TIM_OC6_SetConfig+0xb8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00f      	beq.n	8007410 <TIM_OC6_SetConfig+0x7c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC6_SetConfig+0xbc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00b      	beq.n	8007410 <TIM_OC6_SetConfig+0x7c>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a16      	ldr	r2, [pc, #88]	; (8007454 <TIM_OC6_SetConfig+0xc0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d007      	beq.n	8007410 <TIM_OC6_SetConfig+0x7c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a15      	ldr	r2, [pc, #84]	; (8007458 <TIM_OC6_SetConfig+0xc4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d003      	beq.n	8007410 <TIM_OC6_SetConfig+0x7c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a14      	ldr	r2, [pc, #80]	; (800745c <TIM_OC6_SetConfig+0xc8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d109      	bne.n	8007424 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	029b      	lsls	r3, r3, #10
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4313      	orrs	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40013400 	.word	0x40013400
 8007454:	40014000 	.word	0x40014000
 8007458:	40014400 	.word	0x40014400
 800745c:	40014800 	.word	0x40014800

08007460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800748a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f023 030a 	bic.w	r3, r3, #10
 800749c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074be:	b480      	push	{r7}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f023 0210 	bic.w	r2, r3, #16
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	031b      	lsls	r3, r3, #12
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	f043 0307 	orr.w	r3, r3, #7
 8007540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	021a      	lsls	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	431a      	orrs	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e068      	b.n	800767e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2e      	ldr	r2, [pc, #184]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2d      	ldr	r2, [pc, #180]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d108      	bne.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1e      	ldr	r2, [pc, #120]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d01d      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761e:	d018      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1a      	ldr	r2, [pc, #104]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00e      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a18      	ldr	r2, [pc, #96]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d009      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10c      	bne.n	800766c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4313      	orrs	r3, r2
 8007662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	40012c00 	.word	0x40012c00
 8007690:	40013400 	.word	0x40013400
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40000c00 	.word	0x40000c00
 80076a0:	40014000 	.word	0x40014000

080076a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e040      	b.n	8007738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fa fee0 	bl	800248c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2224      	movs	r2, #36	; 0x24
 80076d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f82c 	bl	8007740 <UART_SetConfig>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e022      	b.n	8007738 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fad8 	bl	8007cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800770e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800771e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fb5f 	bl	8007df4 <UART_CheckIdleState>
 8007736:	4603      	mov	r3, r0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007744:	b08a      	sub	sp, #40	; 0x28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	431a      	orrs	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	431a      	orrs	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4313      	orrs	r3, r2
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4ba4      	ldr	r3, [pc, #656]	; (8007a00 <UART_SetConfig+0x2c0>)
 8007770:	4013      	ands	r3, r2
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	6812      	ldr	r2, [r2, #0]
 8007776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007778:	430b      	orrs	r3, r1
 800777a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a99      	ldr	r2, [pc, #612]	; (8007a04 <UART_SetConfig+0x2c4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a8:	4313      	orrs	r3, r2
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a90      	ldr	r2, [pc, #576]	; (8007a08 <UART_SetConfig+0x2c8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d126      	bne.n	8007818 <UART_SetConfig+0xd8>
 80077ca:	4b90      	ldr	r3, [pc, #576]	; (8007a0c <UART_SetConfig+0x2cc>)
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d81b      	bhi.n	8007810 <UART_SetConfig+0xd0>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0xa0>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	08007801 	.word	0x08007801
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007809 	.word	0x08007809
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077f6:	e116      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077fe:	e112      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007806:	e10e      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780e:	e10a      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e106      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7c      	ldr	r2, [pc, #496]	; (8007a10 <UART_SetConfig+0x2d0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d138      	bne.n	8007894 <UART_SetConfig+0x154>
 8007822:	4b7a      	ldr	r3, [pc, #488]	; (8007a0c <UART_SetConfig+0x2cc>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b0c      	cmp	r3, #12
 800782e:	d82d      	bhi.n	800788c <UART_SetConfig+0x14c>
 8007830:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <UART_SetConfig+0xf8>)
 8007832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007836:	bf00      	nop
 8007838:	0800786d 	.word	0x0800786d
 800783c:	0800788d 	.word	0x0800788d
 8007840:	0800788d 	.word	0x0800788d
 8007844:	0800788d 	.word	0x0800788d
 8007848:	0800787d 	.word	0x0800787d
 800784c:	0800788d 	.word	0x0800788d
 8007850:	0800788d 	.word	0x0800788d
 8007854:	0800788d 	.word	0x0800788d
 8007858:	08007875 	.word	0x08007875
 800785c:	0800788d 	.word	0x0800788d
 8007860:	0800788d 	.word	0x0800788d
 8007864:	0800788d 	.word	0x0800788d
 8007868:	08007885 	.word	0x08007885
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007872:	e0d8      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007874:	2302      	movs	r3, #2
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787a:	e0d4      	b.n	8007a26 <UART_SetConfig+0x2e6>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007882:	e0d0      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788a:	e0cc      	b.n	8007a26 <UART_SetConfig+0x2e6>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007892:	e0c8      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a5e      	ldr	r2, [pc, #376]	; (8007a14 <UART_SetConfig+0x2d4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d125      	bne.n	80078ea <UART_SetConfig+0x1aa>
 800789e:	4b5b      	ldr	r3, [pc, #364]	; (8007a0c <UART_SetConfig+0x2cc>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	d016      	beq.n	80078da <UART_SetConfig+0x19a>
 80078ac:	2b30      	cmp	r3, #48	; 0x30
 80078ae:	d818      	bhi.n	80078e2 <UART_SetConfig+0x1a2>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d00a      	beq.n	80078ca <UART_SetConfig+0x18a>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d814      	bhi.n	80078e2 <UART_SetConfig+0x1a2>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <UART_SetConfig+0x182>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d008      	beq.n	80078d2 <UART_SetConfig+0x192>
 80078c0:	e00f      	b.n	80078e2 <UART_SetConfig+0x1a2>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c8:	e0ad      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80078ca:	2302      	movs	r3, #2
 80078cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d0:	e0a9      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80078d2:	2304      	movs	r3, #4
 80078d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d8:	e0a5      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80078da:	2308      	movs	r3, #8
 80078dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e0:	e0a1      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80078e2:	2310      	movs	r3, #16
 80078e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e8:	e09d      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a4a      	ldr	r2, [pc, #296]	; (8007a18 <UART_SetConfig+0x2d8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d125      	bne.n	8007940 <UART_SetConfig+0x200>
 80078f4:	4b45      	ldr	r3, [pc, #276]	; (8007a0c <UART_SetConfig+0x2cc>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007900:	d016      	beq.n	8007930 <UART_SetConfig+0x1f0>
 8007902:	2bc0      	cmp	r3, #192	; 0xc0
 8007904:	d818      	bhi.n	8007938 <UART_SetConfig+0x1f8>
 8007906:	2b80      	cmp	r3, #128	; 0x80
 8007908:	d00a      	beq.n	8007920 <UART_SetConfig+0x1e0>
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d814      	bhi.n	8007938 <UART_SetConfig+0x1f8>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <UART_SetConfig+0x1d8>
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d008      	beq.n	8007928 <UART_SetConfig+0x1e8>
 8007916:	e00f      	b.n	8007938 <UART_SetConfig+0x1f8>
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800791e:	e082      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007920:	2302      	movs	r3, #2
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007926:	e07e      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007928:	2304      	movs	r3, #4
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800792e:	e07a      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007930:	2308      	movs	r3, #8
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007936:	e076      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007938:	2310      	movs	r3, #16
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793e:	e072      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <UART_SetConfig+0x2dc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d12a      	bne.n	80079a0 <UART_SetConfig+0x260>
 800794a:	4b30      	ldr	r3, [pc, #192]	; (8007a0c <UART_SetConfig+0x2cc>)
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007958:	d01a      	beq.n	8007990 <UART_SetConfig+0x250>
 800795a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795e:	d81b      	bhi.n	8007998 <UART_SetConfig+0x258>
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d00c      	beq.n	8007980 <UART_SetConfig+0x240>
 8007966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796a:	d815      	bhi.n	8007998 <UART_SetConfig+0x258>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <UART_SetConfig+0x238>
 8007970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007974:	d008      	beq.n	8007988 <UART_SetConfig+0x248>
 8007976:	e00f      	b.n	8007998 <UART_SetConfig+0x258>
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797e:	e052      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007980:	2302      	movs	r3, #2
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007986:	e04e      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007988:	2304      	movs	r3, #4
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798e:	e04a      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007990:	2308      	movs	r3, #8
 8007992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007996:	e046      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007998:	2310      	movs	r3, #16
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799e:	e042      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <UART_SetConfig+0x2c4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d13a      	bne.n	8007a20 <UART_SetConfig+0x2e0>
 80079aa:	4b18      	ldr	r3, [pc, #96]	; (8007a0c <UART_SetConfig+0x2cc>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079b8:	d01a      	beq.n	80079f0 <UART_SetConfig+0x2b0>
 80079ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079be:	d81b      	bhi.n	80079f8 <UART_SetConfig+0x2b8>
 80079c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c4:	d00c      	beq.n	80079e0 <UART_SetConfig+0x2a0>
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ca:	d815      	bhi.n	80079f8 <UART_SetConfig+0x2b8>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <UART_SetConfig+0x298>
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d4:	d008      	beq.n	80079e8 <UART_SetConfig+0x2a8>
 80079d6:	e00f      	b.n	80079f8 <UART_SetConfig+0x2b8>
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079de:	e022      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80079e0:	2302      	movs	r3, #2
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e6:	e01e      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ee:	e01a      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f6:	e016      	b.n	8007a26 <UART_SetConfig+0x2e6>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fe:	e012      	b.n	8007a26 <UART_SetConfig+0x2e6>
 8007a00:	efff69f3 	.word	0xefff69f3
 8007a04:	40008000 	.word	0x40008000
 8007a08:	40013800 	.word	0x40013800
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40004400 	.word	0x40004400
 8007a14:	40004800 	.word	0x40004800
 8007a18:	40004c00 	.word	0x40004c00
 8007a1c:	40005000 	.word	0x40005000
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a9f      	ldr	r2, [pc, #636]	; (8007ca8 <UART_SetConfig+0x568>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d17a      	bne.n	8007b26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d824      	bhi.n	8007a82 <UART_SetConfig+0x342>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <UART_SetConfig+0x300>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a83 	.word	0x08007a83
 8007a48:	08007a6d 	.word	0x08007a6d
 8007a4c:	08007a83 	.word	0x08007a83
 8007a50:	08007a73 	.word	0x08007a73
 8007a54:	08007a83 	.word	0x08007a83
 8007a58:	08007a83 	.word	0x08007a83
 8007a5c:	08007a83 	.word	0x08007a83
 8007a60:	08007a7b 	.word	0x08007a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fe f944 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 8007a68:	61f8      	str	r0, [r7, #28]
        break;
 8007a6a:	e010      	b.n	8007a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a6c:	4b8f      	ldr	r3, [pc, #572]	; (8007cac <UART_SetConfig+0x56c>)
 8007a6e:	61fb      	str	r3, [r7, #28]
        break;
 8007a70:	e00d      	b.n	8007a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a72:	f7fe f8a5 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007a76:	61f8      	str	r0, [r7, #28]
        break;
 8007a78:	e009      	b.n	8007a8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a7e:	61fb      	str	r3, [r7, #28]
        break;
 8007a80:	e005      	b.n	8007a8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80fb 	beq.w	8007c8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d305      	bcc.n	8007ab2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d903      	bls.n	8007aba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ab8:	e0e8      	b.n	8007c8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2200      	movs	r2, #0
 8007abe:	461c      	mov	r4, r3
 8007ac0:	4615      	mov	r5, r2
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	022b      	lsls	r3, r5, #8
 8007acc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ad0:	0222      	lsls	r2, r4, #8
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	6849      	ldr	r1, [r1, #4]
 8007ad6:	0849      	lsrs	r1, r1, #1
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4688      	mov	r8, r1
 8007adc:	4681      	mov	r9, r0
 8007ade:	eb12 0a08 	adds.w	sl, r2, r8
 8007ae2:	eb43 0b09 	adc.w	fp, r3, r9
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	603b      	str	r3, [r7, #0]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af4:	4650      	mov	r0, sl
 8007af6:	4659      	mov	r1, fp
 8007af8:	f7f9 f858 	bl	8000bac <__aeabi_uldivmod>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4613      	mov	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	d308      	bcc.n	8007b1e <UART_SetConfig+0x3de>
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	d204      	bcs.n	8007b1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	e0b6      	b.n	8007c8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b24:	e0b2      	b.n	8007c8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b2e:	d15e      	bne.n	8007bee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d828      	bhi.n	8007b8a <UART_SetConfig+0x44a>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0x400>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	08007b8b 	.word	0x08007b8b
 8007b50:	08007b7b 	.word	0x08007b7b
 8007b54:	08007b8b 	.word	0x08007b8b
 8007b58:	08007b8b 	.word	0x08007b8b
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b83 	.word	0x08007b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b64:	f7fe f8c4 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 8007b68:	61f8      	str	r0, [r7, #28]
        break;
 8007b6a:	e014      	b.n	8007b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b6c:	f7fe f8d6 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 8007b70:	61f8      	str	r0, [r7, #28]
        break;
 8007b72:	e010      	b.n	8007b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b74:	4b4d      	ldr	r3, [pc, #308]	; (8007cac <UART_SetConfig+0x56c>)
 8007b76:	61fb      	str	r3, [r7, #28]
        break;
 8007b78:	e00d      	b.n	8007b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7a:	f7fe f821 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007b7e:	61f8      	str	r0, [r7, #28]
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	61fb      	str	r3, [r7, #28]
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d077      	beq.n	8007c8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	005a      	lsls	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	441a      	add	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d916      	bls.n	8007be6 <UART_SetConfig+0x4a6>
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bbe:	d212      	bcs.n	8007be6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f023 030f 	bic.w	r3, r3, #15
 8007bc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	085b      	lsrs	r3, r3, #1
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	8afb      	ldrh	r3, [r7, #22]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	8afa      	ldrh	r2, [r7, #22]
 8007be2:	60da      	str	r2, [r3, #12]
 8007be4:	e052      	b.n	8007c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007bec:	e04e      	b.n	8007c8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf2:	2b08      	cmp	r3, #8
 8007bf4:	d827      	bhi.n	8007c46 <UART_SetConfig+0x506>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <UART_SetConfig+0x4bc>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c31 	.word	0x08007c31
 8007c08:	08007c47 	.word	0x08007c47
 8007c0c:	08007c37 	.word	0x08007c37
 8007c10:	08007c47 	.word	0x08007c47
 8007c14:	08007c47 	.word	0x08007c47
 8007c18:	08007c47 	.word	0x08007c47
 8007c1c:	08007c3f 	.word	0x08007c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fe f866 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 8007c24:	61f8      	str	r0, [r7, #28]
        break;
 8007c26:	e014      	b.n	8007c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7fe f878 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 8007c2c:	61f8      	str	r0, [r7, #28]
        break;
 8007c2e:	e010      	b.n	8007c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c30:	4b1e      	ldr	r3, [pc, #120]	; (8007cac <UART_SetConfig+0x56c>)
 8007c32:	61fb      	str	r3, [r7, #28]
        break;
 8007c34:	e00d      	b.n	8007c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c36:	f7fd ffc3 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007c3a:	61f8      	str	r0, [r7, #28]
        break;
 8007c3c:	e009      	b.n	8007c52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c42:	61fb      	str	r3, [r7, #28]
        break;
 8007c44:	e005      	b.n	8007c52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c50:	bf00      	nop
    }

    if (pclk != 0U)
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d019      	beq.n	8007c8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	085a      	lsrs	r2, r3, #1
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b0f      	cmp	r3, #15
 8007c70:	d909      	bls.n	8007c86 <UART_SetConfig+0x546>
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c78:	d205      	bcs.n	8007c86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e002      	b.n	8007c8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	; 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40008000 	.word	0x40008000
 8007cac:	00f42400 	.word	0x00f42400

08007cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dae:	d10a      	bne.n	8007dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	605a      	str	r2, [r3, #4]
  }
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e04:	f7fa fdd2 	bl	80029ac <HAL_GetTick>
 8007e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d10e      	bne.n	8007e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f82d 	bl	8007e86 <UART_WaitOnFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e023      	b.n	8007e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d10e      	bne.n	8007e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f817 	bl	8007e86 <UART_WaitOnFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00d      	b.n	8007e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b09c      	sub	sp, #112	; 0x70
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4613      	mov	r3, r2
 8007e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	e0a5      	b.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	f000 80a1 	beq.w	8007fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7fa fd83 	bl	80029ac <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d13e      	bne.n	8007f36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	663b      	str	r3, [r7, #96]	; 0x60
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e067      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d04f      	beq.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f52:	d147      	bne.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3308      	adds	r3, #8
 8007fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fb0:	623a      	str	r2, [r7, #32]
 8007fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	69f9      	ldr	r1, [r7, #28]
 8007fb6:	6a3a      	ldr	r2, [r7, #32]
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e5      	bne.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e010      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	69da      	ldr	r2, [r3, #28]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	4013      	ands	r3, r2
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bf0c      	ite	eq
 8007ff4:	2301      	moveq	r3, #1
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	f43f af4a 	beq.w	8007e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3770      	adds	r7, #112	; 0x70
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <atoi>:
 800800e:	220a      	movs	r2, #10
 8008010:	2100      	movs	r1, #0
 8008012:	f000 b93f 	b.w	8008294 <strtol>
	...

08008018 <__errno>:
 8008018:	4b01      	ldr	r3, [pc, #4]	; (8008020 <__errno+0x8>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000478 	.word	0x20000478

08008024 <__libc_init_array>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	4d0d      	ldr	r5, [pc, #52]	; (800805c <__libc_init_array+0x38>)
 8008028:	4c0d      	ldr	r4, [pc, #52]	; (8008060 <__libc_init_array+0x3c>)
 800802a:	1b64      	subs	r4, r4, r5
 800802c:	10a4      	asrs	r4, r4, #2
 800802e:	2600      	movs	r6, #0
 8008030:	42a6      	cmp	r6, r4
 8008032:	d109      	bne.n	8008048 <__libc_init_array+0x24>
 8008034:	4d0b      	ldr	r5, [pc, #44]	; (8008064 <__libc_init_array+0x40>)
 8008036:	4c0c      	ldr	r4, [pc, #48]	; (8008068 <__libc_init_array+0x44>)
 8008038:	f002 fb28 	bl	800a68c <_init>
 800803c:	1b64      	subs	r4, r4, r5
 800803e:	10a4      	asrs	r4, r4, #2
 8008040:	2600      	movs	r6, #0
 8008042:	42a6      	cmp	r6, r4
 8008044:	d105      	bne.n	8008052 <__libc_init_array+0x2e>
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	f855 3b04 	ldr.w	r3, [r5], #4
 800804c:	4798      	blx	r3
 800804e:	3601      	adds	r6, #1
 8008050:	e7ee      	b.n	8008030 <__libc_init_array+0xc>
 8008052:	f855 3b04 	ldr.w	r3, [r5], #4
 8008056:	4798      	blx	r3
 8008058:	3601      	adds	r6, #1
 800805a:	e7f2      	b.n	8008042 <__libc_init_array+0x1e>
 800805c:	0800ace0 	.word	0x0800ace0
 8008060:	0800ace0 	.word	0x0800ace0
 8008064:	0800ace0 	.word	0x0800ace0
 8008068:	0800ace4 	.word	0x0800ace4

0800806c <memcpy>:
 800806c:	440a      	add	r2, r1
 800806e:	4291      	cmp	r1, r2
 8008070:	f100 33ff 	add.w	r3, r0, #4294967295
 8008074:	d100      	bne.n	8008078 <memcpy+0xc>
 8008076:	4770      	bx	lr
 8008078:	b510      	push	{r4, lr}
 800807a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800807e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008082:	4291      	cmp	r1, r2
 8008084:	d1f9      	bne.n	800807a <memcpy+0xe>
 8008086:	bd10      	pop	{r4, pc}

08008088 <memset>:
 8008088:	4402      	add	r2, r0
 800808a:	4603      	mov	r3, r0
 800808c:	4293      	cmp	r3, r2
 800808e:	d100      	bne.n	8008092 <memset+0xa>
 8008090:	4770      	bx	lr
 8008092:	f803 1b01 	strb.w	r1, [r3], #1
 8008096:	e7f9      	b.n	800808c <memset+0x4>

08008098 <siprintf>:
 8008098:	b40e      	push	{r1, r2, r3}
 800809a:	b500      	push	{lr}
 800809c:	b09c      	sub	sp, #112	; 0x70
 800809e:	ab1d      	add	r3, sp, #116	; 0x74
 80080a0:	9002      	str	r0, [sp, #8]
 80080a2:	9006      	str	r0, [sp, #24]
 80080a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080a8:	4809      	ldr	r0, [pc, #36]	; (80080d0 <siprintf+0x38>)
 80080aa:	9107      	str	r1, [sp, #28]
 80080ac:	9104      	str	r1, [sp, #16]
 80080ae:	4909      	ldr	r1, [pc, #36]	; (80080d4 <siprintf+0x3c>)
 80080b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b4:	9105      	str	r1, [sp, #20]
 80080b6:	6800      	ldr	r0, [r0, #0]
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	a902      	add	r1, sp, #8
 80080bc:	f000 fa68 	bl	8008590 <_svfiprintf_r>
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	b01c      	add	sp, #112	; 0x70
 80080c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080cc:	b003      	add	sp, #12
 80080ce:	4770      	bx	lr
 80080d0:	20000478 	.word	0x20000478
 80080d4:	ffff0208 	.word	0xffff0208

080080d8 <strtok>:
 80080d8:	4b16      	ldr	r3, [pc, #88]	; (8008134 <strtok+0x5c>)
 80080da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080dc:	681e      	ldr	r6, [r3, #0]
 80080de:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80080e0:	4605      	mov	r5, r0
 80080e2:	b9fc      	cbnz	r4, 8008124 <strtok+0x4c>
 80080e4:	2050      	movs	r0, #80	; 0x50
 80080e6:	9101      	str	r1, [sp, #4]
 80080e8:	f000 f90e 	bl	8008308 <malloc>
 80080ec:	9901      	ldr	r1, [sp, #4]
 80080ee:	65b0      	str	r0, [r6, #88]	; 0x58
 80080f0:	4602      	mov	r2, r0
 80080f2:	b920      	cbnz	r0, 80080fe <strtok+0x26>
 80080f4:	4b10      	ldr	r3, [pc, #64]	; (8008138 <strtok+0x60>)
 80080f6:	4811      	ldr	r0, [pc, #68]	; (800813c <strtok+0x64>)
 80080f8:	2157      	movs	r1, #87	; 0x57
 80080fa:	f000 f8d5 	bl	80082a8 <__assert_func>
 80080fe:	e9c0 4400 	strd	r4, r4, [r0]
 8008102:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008106:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800810a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800810e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008112:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008116:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800811a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800811e:	6184      	str	r4, [r0, #24]
 8008120:	7704      	strb	r4, [r0, #28]
 8008122:	6244      	str	r4, [r0, #36]	; 0x24
 8008124:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008126:	2301      	movs	r3, #1
 8008128:	4628      	mov	r0, r5
 800812a:	b002      	add	sp, #8
 800812c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008130:	f000 b806 	b.w	8008140 <__strtok_r>
 8008134:	20000478 	.word	0x20000478
 8008138:	0800a8bc 	.word	0x0800a8bc
 800813c:	0800a8d3 	.word	0x0800a8d3

08008140 <__strtok_r>:
 8008140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008142:	b908      	cbnz	r0, 8008148 <__strtok_r+0x8>
 8008144:	6810      	ldr	r0, [r2, #0]
 8008146:	b188      	cbz	r0, 800816c <__strtok_r+0x2c>
 8008148:	4604      	mov	r4, r0
 800814a:	4620      	mov	r0, r4
 800814c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008150:	460f      	mov	r7, r1
 8008152:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008156:	b91e      	cbnz	r6, 8008160 <__strtok_r+0x20>
 8008158:	b965      	cbnz	r5, 8008174 <__strtok_r+0x34>
 800815a:	6015      	str	r5, [r2, #0]
 800815c:	4628      	mov	r0, r5
 800815e:	e005      	b.n	800816c <__strtok_r+0x2c>
 8008160:	42b5      	cmp	r5, r6
 8008162:	d1f6      	bne.n	8008152 <__strtok_r+0x12>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <__strtok_r+0xa>
 8008168:	6014      	str	r4, [r2, #0]
 800816a:	7003      	strb	r3, [r0, #0]
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816e:	461c      	mov	r4, r3
 8008170:	e00c      	b.n	800818c <__strtok_r+0x4c>
 8008172:	b915      	cbnz	r5, 800817a <__strtok_r+0x3a>
 8008174:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008178:	460e      	mov	r6, r1
 800817a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800817e:	42ab      	cmp	r3, r5
 8008180:	d1f7      	bne.n	8008172 <__strtok_r+0x32>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f3      	beq.n	800816e <__strtok_r+0x2e>
 8008186:	2300      	movs	r3, #0
 8008188:	f804 3c01 	strb.w	r3, [r4, #-1]
 800818c:	6014      	str	r4, [r2, #0]
 800818e:	e7ed      	b.n	800816c <__strtok_r+0x2c>

08008190 <_strtol_l.constprop.0>:
 8008190:	2b01      	cmp	r3, #1
 8008192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008196:	d001      	beq.n	800819c <_strtol_l.constprop.0+0xc>
 8008198:	2b24      	cmp	r3, #36	; 0x24
 800819a:	d906      	bls.n	80081aa <_strtol_l.constprop.0+0x1a>
 800819c:	f7ff ff3c 	bl	8008018 <__errno>
 80081a0:	2316      	movs	r3, #22
 80081a2:	6003      	str	r3, [r0, #0]
 80081a4:	2000      	movs	r0, #0
 80081a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008290 <_strtol_l.constprop.0+0x100>
 80081ae:	460d      	mov	r5, r1
 80081b0:	462e      	mov	r6, r5
 80081b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80081ba:	f017 0708 	ands.w	r7, r7, #8
 80081be:	d1f7      	bne.n	80081b0 <_strtol_l.constprop.0+0x20>
 80081c0:	2c2d      	cmp	r4, #45	; 0x2d
 80081c2:	d132      	bne.n	800822a <_strtol_l.constprop.0+0x9a>
 80081c4:	782c      	ldrb	r4, [r5, #0]
 80081c6:	2701      	movs	r7, #1
 80081c8:	1cb5      	adds	r5, r6, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d05b      	beq.n	8008286 <_strtol_l.constprop.0+0xf6>
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d109      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 80081d2:	2c30      	cmp	r4, #48	; 0x30
 80081d4:	d107      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 80081d6:	782c      	ldrb	r4, [r5, #0]
 80081d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081dc:	2c58      	cmp	r4, #88	; 0x58
 80081de:	d14d      	bne.n	800827c <_strtol_l.constprop.0+0xec>
 80081e0:	786c      	ldrb	r4, [r5, #1]
 80081e2:	2310      	movs	r3, #16
 80081e4:	3502      	adds	r5, #2
 80081e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80081ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80081ee:	f04f 0c00 	mov.w	ip, #0
 80081f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80081f6:	4666      	mov	r6, ip
 80081f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80081fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008200:	f1be 0f09 	cmp.w	lr, #9
 8008204:	d816      	bhi.n	8008234 <_strtol_l.constprop.0+0xa4>
 8008206:	4674      	mov	r4, lr
 8008208:	42a3      	cmp	r3, r4
 800820a:	dd24      	ble.n	8008256 <_strtol_l.constprop.0+0xc6>
 800820c:	f1bc 0f00 	cmp.w	ip, #0
 8008210:	db1e      	blt.n	8008250 <_strtol_l.constprop.0+0xc0>
 8008212:	45b1      	cmp	r9, r6
 8008214:	d31c      	bcc.n	8008250 <_strtol_l.constprop.0+0xc0>
 8008216:	d101      	bne.n	800821c <_strtol_l.constprop.0+0x8c>
 8008218:	45a2      	cmp	sl, r4
 800821a:	db19      	blt.n	8008250 <_strtol_l.constprop.0+0xc0>
 800821c:	fb06 4603 	mla	r6, r6, r3, r4
 8008220:	f04f 0c01 	mov.w	ip, #1
 8008224:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008228:	e7e8      	b.n	80081fc <_strtol_l.constprop.0+0x6c>
 800822a:	2c2b      	cmp	r4, #43	; 0x2b
 800822c:	bf04      	itt	eq
 800822e:	782c      	ldrbeq	r4, [r5, #0]
 8008230:	1cb5      	addeq	r5, r6, #2
 8008232:	e7ca      	b.n	80081ca <_strtol_l.constprop.0+0x3a>
 8008234:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008238:	f1be 0f19 	cmp.w	lr, #25
 800823c:	d801      	bhi.n	8008242 <_strtol_l.constprop.0+0xb2>
 800823e:	3c37      	subs	r4, #55	; 0x37
 8008240:	e7e2      	b.n	8008208 <_strtol_l.constprop.0+0x78>
 8008242:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008246:	f1be 0f19 	cmp.w	lr, #25
 800824a:	d804      	bhi.n	8008256 <_strtol_l.constprop.0+0xc6>
 800824c:	3c57      	subs	r4, #87	; 0x57
 800824e:	e7db      	b.n	8008208 <_strtol_l.constprop.0+0x78>
 8008250:	f04f 3cff 	mov.w	ip, #4294967295
 8008254:	e7e6      	b.n	8008224 <_strtol_l.constprop.0+0x94>
 8008256:	f1bc 0f00 	cmp.w	ip, #0
 800825a:	da05      	bge.n	8008268 <_strtol_l.constprop.0+0xd8>
 800825c:	2322      	movs	r3, #34	; 0x22
 800825e:	6003      	str	r3, [r0, #0]
 8008260:	4646      	mov	r6, r8
 8008262:	b942      	cbnz	r2, 8008276 <_strtol_l.constprop.0+0xe6>
 8008264:	4630      	mov	r0, r6
 8008266:	e79e      	b.n	80081a6 <_strtol_l.constprop.0+0x16>
 8008268:	b107      	cbz	r7, 800826c <_strtol_l.constprop.0+0xdc>
 800826a:	4276      	negs	r6, r6
 800826c:	2a00      	cmp	r2, #0
 800826e:	d0f9      	beq.n	8008264 <_strtol_l.constprop.0+0xd4>
 8008270:	f1bc 0f00 	cmp.w	ip, #0
 8008274:	d000      	beq.n	8008278 <_strtol_l.constprop.0+0xe8>
 8008276:	1e69      	subs	r1, r5, #1
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	e7f3      	b.n	8008264 <_strtol_l.constprop.0+0xd4>
 800827c:	2430      	movs	r4, #48	; 0x30
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1b1      	bne.n	80081e6 <_strtol_l.constprop.0+0x56>
 8008282:	2308      	movs	r3, #8
 8008284:	e7af      	b.n	80081e6 <_strtol_l.constprop.0+0x56>
 8008286:	2c30      	cmp	r4, #48	; 0x30
 8008288:	d0a5      	beq.n	80081d6 <_strtol_l.constprop.0+0x46>
 800828a:	230a      	movs	r3, #10
 800828c:	e7ab      	b.n	80081e6 <_strtol_l.constprop.0+0x56>
 800828e:	bf00      	nop
 8008290:	0800a96d 	.word	0x0800a96d

08008294 <strtol>:
 8008294:	4613      	mov	r3, r2
 8008296:	460a      	mov	r2, r1
 8008298:	4601      	mov	r1, r0
 800829a:	4802      	ldr	r0, [pc, #8]	; (80082a4 <strtol+0x10>)
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f7ff bf77 	b.w	8008190 <_strtol_l.constprop.0>
 80082a2:	bf00      	nop
 80082a4:	20000478 	.word	0x20000478

080082a8 <__assert_func>:
 80082a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082aa:	4614      	mov	r4, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <__assert_func+0x2c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4605      	mov	r5, r0
 80082b4:	68d8      	ldr	r0, [r3, #12]
 80082b6:	b14c      	cbz	r4, 80082cc <__assert_func+0x24>
 80082b8:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <__assert_func+0x30>)
 80082ba:	9100      	str	r1, [sp, #0]
 80082bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082c0:	4906      	ldr	r1, [pc, #24]	; (80082dc <__assert_func+0x34>)
 80082c2:	462b      	mov	r3, r5
 80082c4:	f000 f80e 	bl	80082e4 <fiprintf>
 80082c8:	f000 fe20 	bl	8008f0c <abort>
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <__assert_func+0x38>)
 80082ce:	461c      	mov	r4, r3
 80082d0:	e7f3      	b.n	80082ba <__assert_func+0x12>
 80082d2:	bf00      	nop
 80082d4:	20000478 	.word	0x20000478
 80082d8:	0800a930 	.word	0x0800a930
 80082dc:	0800a93d 	.word	0x0800a93d
 80082e0:	0800a96b 	.word	0x0800a96b

080082e4 <fiprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b503      	push	{r0, r1, lr}
 80082e8:	4601      	mov	r1, r0
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <fiprintf+0x20>)
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f000 fa75 	bl	80087e4 <_vfiprintf_r>
 80082fa:	b002      	add	sp, #8
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	20000478 	.word	0x20000478

08008308 <malloc>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <malloc+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f000 b86f 	b.w	80083f0 <_malloc_r>
 8008312:	bf00      	nop
 8008314:	20000478 	.word	0x20000478

08008318 <_free_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	2900      	cmp	r1, #0
 800831c:	d044      	beq.n	80083a8 <_free_r+0x90>
 800831e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008322:	9001      	str	r0, [sp, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f1a1 0404 	sub.w	r4, r1, #4
 800832a:	bfb8      	it	lt
 800832c:	18e4      	addlt	r4, r4, r3
 800832e:	f001 f82f 	bl	8009390 <__malloc_lock>
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <_free_r+0x94>)
 8008334:	9801      	ldr	r0, [sp, #4]
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	b933      	cbnz	r3, 8008348 <_free_r+0x30>
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	6014      	str	r4, [r2, #0]
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008344:	f001 b82a 	b.w	800939c <__malloc_unlock>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d908      	bls.n	800835e <_free_r+0x46>
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1961      	adds	r1, r4, r5
 8008350:	428b      	cmp	r3, r1
 8008352:	bf01      	itttt	eq
 8008354:	6819      	ldreq	r1, [r3, #0]
 8008356:	685b      	ldreq	r3, [r3, #4]
 8008358:	1949      	addeq	r1, r1, r5
 800835a:	6021      	streq	r1, [r4, #0]
 800835c:	e7ed      	b.n	800833a <_free_r+0x22>
 800835e:	461a      	mov	r2, r3
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b10b      	cbz	r3, 8008368 <_free_r+0x50>
 8008364:	42a3      	cmp	r3, r4
 8008366:	d9fa      	bls.n	800835e <_free_r+0x46>
 8008368:	6811      	ldr	r1, [r2, #0]
 800836a:	1855      	adds	r5, r2, r1
 800836c:	42a5      	cmp	r5, r4
 800836e:	d10b      	bne.n	8008388 <_free_r+0x70>
 8008370:	6824      	ldr	r4, [r4, #0]
 8008372:	4421      	add	r1, r4
 8008374:	1854      	adds	r4, r2, r1
 8008376:	42a3      	cmp	r3, r4
 8008378:	6011      	str	r1, [r2, #0]
 800837a:	d1e0      	bne.n	800833e <_free_r+0x26>
 800837c:	681c      	ldr	r4, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	6053      	str	r3, [r2, #4]
 8008382:	4421      	add	r1, r4
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	e7da      	b.n	800833e <_free_r+0x26>
 8008388:	d902      	bls.n	8008390 <_free_r+0x78>
 800838a:	230c      	movs	r3, #12
 800838c:	6003      	str	r3, [r0, #0]
 800838e:	e7d6      	b.n	800833e <_free_r+0x26>
 8008390:	6825      	ldr	r5, [r4, #0]
 8008392:	1961      	adds	r1, r4, r5
 8008394:	428b      	cmp	r3, r1
 8008396:	bf04      	itt	eq
 8008398:	6819      	ldreq	r1, [r3, #0]
 800839a:	685b      	ldreq	r3, [r3, #4]
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	bf04      	itt	eq
 80083a0:	1949      	addeq	r1, r1, r5
 80083a2:	6021      	streq	r1, [r4, #0]
 80083a4:	6054      	str	r4, [r2, #4]
 80083a6:	e7ca      	b.n	800833e <_free_r+0x26>
 80083a8:	b003      	add	sp, #12
 80083aa:	bd30      	pop	{r4, r5, pc}
 80083ac:	20010b70 	.word	0x20010b70

080083b0 <sbrk_aligned>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4e0e      	ldr	r6, [pc, #56]	; (80083ec <sbrk_aligned+0x3c>)
 80083b4:	460c      	mov	r4, r1
 80083b6:	6831      	ldr	r1, [r6, #0]
 80083b8:	4605      	mov	r5, r0
 80083ba:	b911      	cbnz	r1, 80083c2 <sbrk_aligned+0x12>
 80083bc:	f000 fcd6 	bl	8008d6c <_sbrk_r>
 80083c0:	6030      	str	r0, [r6, #0]
 80083c2:	4621      	mov	r1, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 fcd1 	bl	8008d6c <_sbrk_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d00a      	beq.n	80083e4 <sbrk_aligned+0x34>
 80083ce:	1cc4      	adds	r4, r0, #3
 80083d0:	f024 0403 	bic.w	r4, r4, #3
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d007      	beq.n	80083e8 <sbrk_aligned+0x38>
 80083d8:	1a21      	subs	r1, r4, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 fcc6 	bl	8008d6c <_sbrk_r>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d101      	bne.n	80083e8 <sbrk_aligned+0x38>
 80083e4:	f04f 34ff 	mov.w	r4, #4294967295
 80083e8:	4620      	mov	r0, r4
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	20010b74 	.word	0x20010b74

080083f0 <_malloc_r>:
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	1ccd      	adds	r5, r1, #3
 80083f6:	f025 0503 	bic.w	r5, r5, #3
 80083fa:	3508      	adds	r5, #8
 80083fc:	2d0c      	cmp	r5, #12
 80083fe:	bf38      	it	cc
 8008400:	250c      	movcc	r5, #12
 8008402:	2d00      	cmp	r5, #0
 8008404:	4607      	mov	r7, r0
 8008406:	db01      	blt.n	800840c <_malloc_r+0x1c>
 8008408:	42a9      	cmp	r1, r5
 800840a:	d905      	bls.n	8008418 <_malloc_r+0x28>
 800840c:	230c      	movs	r3, #12
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	2600      	movs	r6, #0
 8008412:	4630      	mov	r0, r6
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	4e2e      	ldr	r6, [pc, #184]	; (80084d4 <_malloc_r+0xe4>)
 800841a:	f000 ffb9 	bl	8009390 <__malloc_lock>
 800841e:	6833      	ldr	r3, [r6, #0]
 8008420:	461c      	mov	r4, r3
 8008422:	bb34      	cbnz	r4, 8008472 <_malloc_r+0x82>
 8008424:	4629      	mov	r1, r5
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff ffc2 	bl	80083b0 <sbrk_aligned>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	4604      	mov	r4, r0
 8008430:	d14d      	bne.n	80084ce <_malloc_r+0xde>
 8008432:	6834      	ldr	r4, [r6, #0]
 8008434:	4626      	mov	r6, r4
 8008436:	2e00      	cmp	r6, #0
 8008438:	d140      	bne.n	80084bc <_malloc_r+0xcc>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4631      	mov	r1, r6
 800843e:	4638      	mov	r0, r7
 8008440:	eb04 0803 	add.w	r8, r4, r3
 8008444:	f000 fc92 	bl	8008d6c <_sbrk_r>
 8008448:	4580      	cmp	r8, r0
 800844a:	d13a      	bne.n	80084c2 <_malloc_r+0xd2>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	3503      	adds	r5, #3
 8008450:	1a6d      	subs	r5, r5, r1
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	4629      	mov	r1, r5
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ffa5 	bl	80083b0 <sbrk_aligned>
 8008466:	3001      	adds	r0, #1
 8008468:	d02b      	beq.n	80084c2 <_malloc_r+0xd2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	442b      	add	r3, r5
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	e00e      	b.n	8008490 <_malloc_r+0xa0>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	1b52      	subs	r2, r2, r5
 8008476:	d41e      	bmi.n	80084b6 <_malloc_r+0xc6>
 8008478:	2a0b      	cmp	r2, #11
 800847a:	d916      	bls.n	80084aa <_malloc_r+0xba>
 800847c:	1961      	adds	r1, r4, r5
 800847e:	42a3      	cmp	r3, r4
 8008480:	6025      	str	r5, [r4, #0]
 8008482:	bf18      	it	ne
 8008484:	6059      	strne	r1, [r3, #4]
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	bf08      	it	eq
 800848a:	6031      	streq	r1, [r6, #0]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4638      	mov	r0, r7
 8008492:	f104 060b 	add.w	r6, r4, #11
 8008496:	f000 ff81 	bl	800939c <__malloc_unlock>
 800849a:	f026 0607 	bic.w	r6, r6, #7
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	1af2      	subs	r2, r6, r3
 80084a2:	d0b6      	beq.n	8008412 <_malloc_r+0x22>
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	e7b3      	b.n	8008412 <_malloc_r+0x22>
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bf0c      	ite	eq
 80084b0:	6032      	streq	r2, [r6, #0]
 80084b2:	605a      	strne	r2, [r3, #4]
 80084b4:	e7ec      	b.n	8008490 <_malloc_r+0xa0>
 80084b6:	4623      	mov	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7b2      	b.n	8008422 <_malloc_r+0x32>
 80084bc:	4634      	mov	r4, r6
 80084be:	6876      	ldr	r6, [r6, #4]
 80084c0:	e7b9      	b.n	8008436 <_malloc_r+0x46>
 80084c2:	230c      	movs	r3, #12
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4638      	mov	r0, r7
 80084c8:	f000 ff68 	bl	800939c <__malloc_unlock>
 80084cc:	e7a1      	b.n	8008412 <_malloc_r+0x22>
 80084ce:	6025      	str	r5, [r4, #0]
 80084d0:	e7de      	b.n	8008490 <_malloc_r+0xa0>
 80084d2:	bf00      	nop
 80084d4:	20010b70 	.word	0x20010b70

080084d8 <__ssputs_r>:
 80084d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	688e      	ldr	r6, [r1, #8]
 80084de:	429e      	cmp	r6, r3
 80084e0:	4682      	mov	sl, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4690      	mov	r8, r2
 80084e6:	461f      	mov	r7, r3
 80084e8:	d838      	bhi.n	800855c <__ssputs_r+0x84>
 80084ea:	898a      	ldrh	r2, [r1, #12]
 80084ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084f0:	d032      	beq.n	8008558 <__ssputs_r+0x80>
 80084f2:	6825      	ldr	r5, [r4, #0]
 80084f4:	6909      	ldr	r1, [r1, #16]
 80084f6:	eba5 0901 	sub.w	r9, r5, r1
 80084fa:	6965      	ldr	r5, [r4, #20]
 80084fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008500:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008504:	3301      	adds	r3, #1
 8008506:	444b      	add	r3, r9
 8008508:	106d      	asrs	r5, r5, #1
 800850a:	429d      	cmp	r5, r3
 800850c:	bf38      	it	cc
 800850e:	461d      	movcc	r5, r3
 8008510:	0553      	lsls	r3, r2, #21
 8008512:	d531      	bpl.n	8008578 <__ssputs_r+0xa0>
 8008514:	4629      	mov	r1, r5
 8008516:	f7ff ff6b 	bl	80083f0 <_malloc_r>
 800851a:	4606      	mov	r6, r0
 800851c:	b950      	cbnz	r0, 8008534 <__ssputs_r+0x5c>
 800851e:	230c      	movs	r3, #12
 8008520:	f8ca 3000 	str.w	r3, [sl]
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	6921      	ldr	r1, [r4, #16]
 8008536:	464a      	mov	r2, r9
 8008538:	f7ff fd98 	bl	800806c <memcpy>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	6126      	str	r6, [r4, #16]
 800854a:	6165      	str	r5, [r4, #20]
 800854c:	444e      	add	r6, r9
 800854e:	eba5 0509 	sub.w	r5, r5, r9
 8008552:	6026      	str	r6, [r4, #0]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	463e      	mov	r6, r7
 8008558:	42be      	cmp	r6, r7
 800855a:	d900      	bls.n	800855e <__ssputs_r+0x86>
 800855c:	463e      	mov	r6, r7
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	4632      	mov	r2, r6
 8008562:	4641      	mov	r1, r8
 8008564:	f000 fefa 	bl	800935c <memmove>
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	1b9b      	subs	r3, r3, r6
 800856c:	60a3      	str	r3, [r4, #8]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	4433      	add	r3, r6
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	2000      	movs	r0, #0
 8008576:	e7db      	b.n	8008530 <__ssputs_r+0x58>
 8008578:	462a      	mov	r2, r5
 800857a:	f000 ff15 	bl	80093a8 <_realloc_r>
 800857e:	4606      	mov	r6, r0
 8008580:	2800      	cmp	r0, #0
 8008582:	d1e1      	bne.n	8008548 <__ssputs_r+0x70>
 8008584:	6921      	ldr	r1, [r4, #16]
 8008586:	4650      	mov	r0, sl
 8008588:	f7ff fec6 	bl	8008318 <_free_r>
 800858c:	e7c7      	b.n	800851e <__ssputs_r+0x46>
	...

08008590 <_svfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4698      	mov	r8, r3
 8008596:	898b      	ldrh	r3, [r1, #12]
 8008598:	061b      	lsls	r3, r3, #24
 800859a:	b09d      	sub	sp, #116	; 0x74
 800859c:	4607      	mov	r7, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	4614      	mov	r4, r2
 80085a2:	d50e      	bpl.n	80085c2 <_svfiprintf_r+0x32>
 80085a4:	690b      	ldr	r3, [r1, #16]
 80085a6:	b963      	cbnz	r3, 80085c2 <_svfiprintf_r+0x32>
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	f7ff ff21 	bl	80083f0 <_malloc_r>
 80085ae:	6028      	str	r0, [r5, #0]
 80085b0:	6128      	str	r0, [r5, #16]
 80085b2:	b920      	cbnz	r0, 80085be <_svfiprintf_r+0x2e>
 80085b4:	230c      	movs	r3, #12
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295
 80085bc:	e0d1      	b.n	8008762 <_svfiprintf_r+0x1d2>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	616b      	str	r3, [r5, #20]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	2320      	movs	r3, #32
 80085c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	2330      	movs	r3, #48	; 0x30
 80085d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800877c <_svfiprintf_r+0x1ec>
 80085d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085da:	f04f 0901 	mov.w	r9, #1
 80085de:	4623      	mov	r3, r4
 80085e0:	469a      	mov	sl, r3
 80085e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e6:	b10a      	cbz	r2, 80085ec <_svfiprintf_r+0x5c>
 80085e8:	2a25      	cmp	r2, #37	; 0x25
 80085ea:	d1f9      	bne.n	80085e0 <_svfiprintf_r+0x50>
 80085ec:	ebba 0b04 	subs.w	fp, sl, r4
 80085f0:	d00b      	beq.n	800860a <_svfiprintf_r+0x7a>
 80085f2:	465b      	mov	r3, fp
 80085f4:	4622      	mov	r2, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ff6d 	bl	80084d8 <__ssputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	f000 80aa 	beq.w	8008758 <_svfiprintf_r+0x1c8>
 8008604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008606:	445a      	add	r2, fp
 8008608:	9209      	str	r2, [sp, #36]	; 0x24
 800860a:	f89a 3000 	ldrb.w	r3, [sl]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a2 	beq.w	8008758 <_svfiprintf_r+0x1c8>
 8008614:	2300      	movs	r3, #0
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861e:	f10a 0a01 	add.w	sl, sl, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800862a:	931a      	str	r3, [sp, #104]	; 0x68
 800862c:	4654      	mov	r4, sl
 800862e:	2205      	movs	r2, #5
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	4851      	ldr	r0, [pc, #324]	; (800877c <_svfiprintf_r+0x1ec>)
 8008636:	f7f7 fdcb 	bl	80001d0 <memchr>
 800863a:	9a04      	ldr	r2, [sp, #16]
 800863c:	b9d8      	cbnz	r0, 8008676 <_svfiprintf_r+0xe6>
 800863e:	06d0      	lsls	r0, r2, #27
 8008640:	bf44      	itt	mi
 8008642:	2320      	movmi	r3, #32
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008648:	0711      	lsls	r1, r2, #28
 800864a:	bf44      	itt	mi
 800864c:	232b      	movmi	r3, #43	; 0x2b
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b2a      	cmp	r3, #42	; 0x2a
 8008658:	d015      	beq.n	8008686 <_svfiprintf_r+0xf6>
 800865a:	9a07      	ldr	r2, [sp, #28]
 800865c:	4654      	mov	r4, sl
 800865e:	2000      	movs	r0, #0
 8008660:	f04f 0c0a 	mov.w	ip, #10
 8008664:	4621      	mov	r1, r4
 8008666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866a:	3b30      	subs	r3, #48	; 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d94e      	bls.n	800870e <_svfiprintf_r+0x17e>
 8008670:	b1b0      	cbz	r0, 80086a0 <_svfiprintf_r+0x110>
 8008672:	9207      	str	r2, [sp, #28]
 8008674:	e014      	b.n	80086a0 <_svfiprintf_r+0x110>
 8008676:	eba0 0308 	sub.w	r3, r0, r8
 800867a:	fa09 f303 	lsl.w	r3, r9, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	46a2      	mov	sl, r4
 8008684:	e7d2      	b.n	800862c <_svfiprintf_r+0x9c>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9103      	str	r1, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfbb      	ittet	lt
 8008692:	425b      	neglt	r3, r3
 8008694:	f042 0202 	orrlt.w	r2, r2, #2
 8008698:	9307      	strge	r3, [sp, #28]
 800869a:	9307      	strlt	r3, [sp, #28]
 800869c:	bfb8      	it	lt
 800869e:	9204      	strlt	r2, [sp, #16]
 80086a0:	7823      	ldrb	r3, [r4, #0]
 80086a2:	2b2e      	cmp	r3, #46	; 0x2e
 80086a4:	d10c      	bne.n	80086c0 <_svfiprintf_r+0x130>
 80086a6:	7863      	ldrb	r3, [r4, #1]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d135      	bne.n	8008718 <_svfiprintf_r+0x188>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	9203      	str	r2, [sp, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfb8      	it	lt
 80086b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80086bc:	3402      	adds	r4, #2
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800878c <_svfiprintf_r+0x1fc>
 80086c4:	7821      	ldrb	r1, [r4, #0]
 80086c6:	2203      	movs	r2, #3
 80086c8:	4650      	mov	r0, sl
 80086ca:	f7f7 fd81 	bl	80001d0 <memchr>
 80086ce:	b140      	cbz	r0, 80086e2 <_svfiprintf_r+0x152>
 80086d0:	2340      	movs	r3, #64	; 0x40
 80086d2:	eba0 000a 	sub.w	r0, r0, sl
 80086d6:	fa03 f000 	lsl.w	r0, r3, r0
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	4303      	orrs	r3, r0
 80086de:	3401      	adds	r4, #1
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e6:	4826      	ldr	r0, [pc, #152]	; (8008780 <_svfiprintf_r+0x1f0>)
 80086e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ec:	2206      	movs	r2, #6
 80086ee:	f7f7 fd6f 	bl	80001d0 <memchr>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d038      	beq.n	8008768 <_svfiprintf_r+0x1d8>
 80086f6:	4b23      	ldr	r3, [pc, #140]	; (8008784 <_svfiprintf_r+0x1f4>)
 80086f8:	bb1b      	cbnz	r3, 8008742 <_svfiprintf_r+0x1b2>
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	3307      	adds	r3, #7
 80086fe:	f023 0307 	bic.w	r3, r3, #7
 8008702:	3308      	adds	r3, #8
 8008704:	9303      	str	r3, [sp, #12]
 8008706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008708:	4433      	add	r3, r6
 800870a:	9309      	str	r3, [sp, #36]	; 0x24
 800870c:	e767      	b.n	80085de <_svfiprintf_r+0x4e>
 800870e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008712:	460c      	mov	r4, r1
 8008714:	2001      	movs	r0, #1
 8008716:	e7a5      	b.n	8008664 <_svfiprintf_r+0xd4>
 8008718:	2300      	movs	r3, #0
 800871a:	3401      	adds	r4, #1
 800871c:	9305      	str	r3, [sp, #20]
 800871e:	4619      	mov	r1, r3
 8008720:	f04f 0c0a 	mov.w	ip, #10
 8008724:	4620      	mov	r0, r4
 8008726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872a:	3a30      	subs	r2, #48	; 0x30
 800872c:	2a09      	cmp	r2, #9
 800872e:	d903      	bls.n	8008738 <_svfiprintf_r+0x1a8>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0c5      	beq.n	80086c0 <_svfiprintf_r+0x130>
 8008734:	9105      	str	r1, [sp, #20]
 8008736:	e7c3      	b.n	80086c0 <_svfiprintf_r+0x130>
 8008738:	fb0c 2101 	mla	r1, ip, r1, r2
 800873c:	4604      	mov	r4, r0
 800873e:	2301      	movs	r3, #1
 8008740:	e7f0      	b.n	8008724 <_svfiprintf_r+0x194>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <_svfiprintf_r+0x1f8>)
 800874a:	a904      	add	r1, sp, #16
 800874c:	4638      	mov	r0, r7
 800874e:	f3af 8000 	nop.w
 8008752:	1c42      	adds	r2, r0, #1
 8008754:	4606      	mov	r6, r0
 8008756:	d1d6      	bne.n	8008706 <_svfiprintf_r+0x176>
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	065b      	lsls	r3, r3, #25
 800875c:	f53f af2c 	bmi.w	80085b8 <_svfiprintf_r+0x28>
 8008760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008762:	b01d      	add	sp, #116	; 0x74
 8008764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_svfiprintf_r+0x1f8>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4638      	mov	r0, r7
 8008774:	f000 f9d4 	bl	8008b20 <_printf_i>
 8008778:	e7eb      	b.n	8008752 <_svfiprintf_r+0x1c2>
 800877a:	bf00      	nop
 800877c:	0800aa6d 	.word	0x0800aa6d
 8008780:	0800aa77 	.word	0x0800aa77
 8008784:	00000000 	.word	0x00000000
 8008788:	080084d9 	.word	0x080084d9
 800878c:	0800aa73 	.word	0x0800aa73

08008790 <__sfputc_r>:
 8008790:	6893      	ldr	r3, [r2, #8]
 8008792:	3b01      	subs	r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	b410      	push	{r4}
 8008798:	6093      	str	r3, [r2, #8]
 800879a:	da08      	bge.n	80087ae <__sfputc_r+0x1e>
 800879c:	6994      	ldr	r4, [r2, #24]
 800879e:	42a3      	cmp	r3, r4
 80087a0:	db01      	blt.n	80087a6 <__sfputc_r+0x16>
 80087a2:	290a      	cmp	r1, #10
 80087a4:	d103      	bne.n	80087ae <__sfputc_r+0x1e>
 80087a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087aa:	f000 baef 	b.w	8008d8c <__swbuf_r>
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	1c58      	adds	r0, r3, #1
 80087b2:	6010      	str	r0, [r2, #0]
 80087b4:	7019      	strb	r1, [r3, #0]
 80087b6:	4608      	mov	r0, r1
 80087b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087bc:	4770      	bx	lr

080087be <__sfputs_r>:
 80087be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	18d5      	adds	r5, r2, r3
 80087c8:	42ac      	cmp	r4, r5
 80087ca:	d101      	bne.n	80087d0 <__sfputs_r+0x12>
 80087cc:	2000      	movs	r0, #0
 80087ce:	e007      	b.n	80087e0 <__sfputs_r+0x22>
 80087d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d4:	463a      	mov	r2, r7
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ffda 	bl	8008790 <__sfputc_r>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d1f3      	bne.n	80087c8 <__sfputs_r+0xa>
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087e4 <_vfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460d      	mov	r5, r1
 80087ea:	b09d      	sub	sp, #116	; 0x74
 80087ec:	4614      	mov	r4, r2
 80087ee:	4698      	mov	r8, r3
 80087f0:	4606      	mov	r6, r0
 80087f2:	b118      	cbz	r0, 80087fc <_vfiprintf_r+0x18>
 80087f4:	6983      	ldr	r3, [r0, #24]
 80087f6:	b90b      	cbnz	r3, 80087fc <_vfiprintf_r+0x18>
 80087f8:	f000 fcaa 	bl	8009150 <__sinit>
 80087fc:	4b89      	ldr	r3, [pc, #548]	; (8008a24 <_vfiprintf_r+0x240>)
 80087fe:	429d      	cmp	r5, r3
 8008800:	d11b      	bne.n	800883a <_vfiprintf_r+0x56>
 8008802:	6875      	ldr	r5, [r6, #4]
 8008804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	d405      	bmi.n	8008816 <_vfiprintf_r+0x32>
 800880a:	89ab      	ldrh	r3, [r5, #12]
 800880c:	059a      	lsls	r2, r3, #22
 800880e:	d402      	bmi.n	8008816 <_vfiprintf_r+0x32>
 8008810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008812:	f000 fd3b 	bl	800928c <__retarget_lock_acquire_recursive>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	071b      	lsls	r3, r3, #28
 800881a:	d501      	bpl.n	8008820 <_vfiprintf_r+0x3c>
 800881c:	692b      	ldr	r3, [r5, #16]
 800881e:	b9eb      	cbnz	r3, 800885c <_vfiprintf_r+0x78>
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f000 fb04 	bl	8008e30 <__swsetup_r>
 8008828:	b1c0      	cbz	r0, 800885c <_vfiprintf_r+0x78>
 800882a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882c:	07dc      	lsls	r4, r3, #31
 800882e:	d50e      	bpl.n	800884e <_vfiprintf_r+0x6a>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	b01d      	add	sp, #116	; 0x74
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	4b7b      	ldr	r3, [pc, #492]	; (8008a28 <_vfiprintf_r+0x244>)
 800883c:	429d      	cmp	r5, r3
 800883e:	d101      	bne.n	8008844 <_vfiprintf_r+0x60>
 8008840:	68b5      	ldr	r5, [r6, #8]
 8008842:	e7df      	b.n	8008804 <_vfiprintf_r+0x20>
 8008844:	4b79      	ldr	r3, [pc, #484]	; (8008a2c <_vfiprintf_r+0x248>)
 8008846:	429d      	cmp	r5, r3
 8008848:	bf08      	it	eq
 800884a:	68f5      	ldreq	r5, [r6, #12]
 800884c:	e7da      	b.n	8008804 <_vfiprintf_r+0x20>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	0598      	lsls	r0, r3, #22
 8008852:	d4ed      	bmi.n	8008830 <_vfiprintf_r+0x4c>
 8008854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008856:	f000 fd1a 	bl	800928e <__retarget_lock_release_recursive>
 800885a:	e7e9      	b.n	8008830 <_vfiprintf_r+0x4c>
 800885c:	2300      	movs	r3, #0
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	2320      	movs	r3, #32
 8008862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008866:	f8cd 800c 	str.w	r8, [sp, #12]
 800886a:	2330      	movs	r3, #48	; 0x30
 800886c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a30 <_vfiprintf_r+0x24c>
 8008870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008874:	f04f 0901 	mov.w	r9, #1
 8008878:	4623      	mov	r3, r4
 800887a:	469a      	mov	sl, r3
 800887c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008880:	b10a      	cbz	r2, 8008886 <_vfiprintf_r+0xa2>
 8008882:	2a25      	cmp	r2, #37	; 0x25
 8008884:	d1f9      	bne.n	800887a <_vfiprintf_r+0x96>
 8008886:	ebba 0b04 	subs.w	fp, sl, r4
 800888a:	d00b      	beq.n	80088a4 <_vfiprintf_r+0xc0>
 800888c:	465b      	mov	r3, fp
 800888e:	4622      	mov	r2, r4
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ff93 	bl	80087be <__sfputs_r>
 8008898:	3001      	adds	r0, #1
 800889a:	f000 80aa 	beq.w	80089f2 <_vfiprintf_r+0x20e>
 800889e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a0:	445a      	add	r2, fp
 80088a2:	9209      	str	r2, [sp, #36]	; 0x24
 80088a4:	f89a 3000 	ldrb.w	r3, [sl]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 80a2 	beq.w	80089f2 <_vfiprintf_r+0x20e>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295
 80088b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088b8:	f10a 0a01 	add.w	sl, sl, #1
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	9307      	str	r3, [sp, #28]
 80088c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088c4:	931a      	str	r3, [sp, #104]	; 0x68
 80088c6:	4654      	mov	r4, sl
 80088c8:	2205      	movs	r2, #5
 80088ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ce:	4858      	ldr	r0, [pc, #352]	; (8008a30 <_vfiprintf_r+0x24c>)
 80088d0:	f7f7 fc7e 	bl	80001d0 <memchr>
 80088d4:	9a04      	ldr	r2, [sp, #16]
 80088d6:	b9d8      	cbnz	r0, 8008910 <_vfiprintf_r+0x12c>
 80088d8:	06d1      	lsls	r1, r2, #27
 80088da:	bf44      	itt	mi
 80088dc:	2320      	movmi	r3, #32
 80088de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088e2:	0713      	lsls	r3, r2, #28
 80088e4:	bf44      	itt	mi
 80088e6:	232b      	movmi	r3, #43	; 0x2b
 80088e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ec:	f89a 3000 	ldrb.w	r3, [sl]
 80088f0:	2b2a      	cmp	r3, #42	; 0x2a
 80088f2:	d015      	beq.n	8008920 <_vfiprintf_r+0x13c>
 80088f4:	9a07      	ldr	r2, [sp, #28]
 80088f6:	4654      	mov	r4, sl
 80088f8:	2000      	movs	r0, #0
 80088fa:	f04f 0c0a 	mov.w	ip, #10
 80088fe:	4621      	mov	r1, r4
 8008900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008904:	3b30      	subs	r3, #48	; 0x30
 8008906:	2b09      	cmp	r3, #9
 8008908:	d94e      	bls.n	80089a8 <_vfiprintf_r+0x1c4>
 800890a:	b1b0      	cbz	r0, 800893a <_vfiprintf_r+0x156>
 800890c:	9207      	str	r2, [sp, #28]
 800890e:	e014      	b.n	800893a <_vfiprintf_r+0x156>
 8008910:	eba0 0308 	sub.w	r3, r0, r8
 8008914:	fa09 f303 	lsl.w	r3, r9, r3
 8008918:	4313      	orrs	r3, r2
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	46a2      	mov	sl, r4
 800891e:	e7d2      	b.n	80088c6 <_vfiprintf_r+0xe2>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	1d19      	adds	r1, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9103      	str	r1, [sp, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfbb      	ittet	lt
 800892c:	425b      	neglt	r3, r3
 800892e:	f042 0202 	orrlt.w	r2, r2, #2
 8008932:	9307      	strge	r3, [sp, #28]
 8008934:	9307      	strlt	r3, [sp, #28]
 8008936:	bfb8      	it	lt
 8008938:	9204      	strlt	r2, [sp, #16]
 800893a:	7823      	ldrb	r3, [r4, #0]
 800893c:	2b2e      	cmp	r3, #46	; 0x2e
 800893e:	d10c      	bne.n	800895a <_vfiprintf_r+0x176>
 8008940:	7863      	ldrb	r3, [r4, #1]
 8008942:	2b2a      	cmp	r3, #42	; 0x2a
 8008944:	d135      	bne.n	80089b2 <_vfiprintf_r+0x1ce>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	1d1a      	adds	r2, r3, #4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	9203      	str	r2, [sp, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfb8      	it	lt
 8008952:	f04f 33ff 	movlt.w	r3, #4294967295
 8008956:	3402      	adds	r4, #2
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a40 <_vfiprintf_r+0x25c>
 800895e:	7821      	ldrb	r1, [r4, #0]
 8008960:	2203      	movs	r2, #3
 8008962:	4650      	mov	r0, sl
 8008964:	f7f7 fc34 	bl	80001d0 <memchr>
 8008968:	b140      	cbz	r0, 800897c <_vfiprintf_r+0x198>
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	eba0 000a 	sub.w	r0, r0, sl
 8008970:	fa03 f000 	lsl.w	r0, r3, r0
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	4303      	orrs	r3, r0
 8008978:	3401      	adds	r4, #1
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008980:	482c      	ldr	r0, [pc, #176]	; (8008a34 <_vfiprintf_r+0x250>)
 8008982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008986:	2206      	movs	r2, #6
 8008988:	f7f7 fc22 	bl	80001d0 <memchr>
 800898c:	2800      	cmp	r0, #0
 800898e:	d03f      	beq.n	8008a10 <_vfiprintf_r+0x22c>
 8008990:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <_vfiprintf_r+0x254>)
 8008992:	bb1b      	cbnz	r3, 80089dc <_vfiprintf_r+0x1f8>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	3307      	adds	r3, #7
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	3308      	adds	r3, #8
 800899e:	9303      	str	r3, [sp, #12]
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	443b      	add	r3, r7
 80089a4:	9309      	str	r3, [sp, #36]	; 0x24
 80089a6:	e767      	b.n	8008878 <_vfiprintf_r+0x94>
 80089a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ac:	460c      	mov	r4, r1
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7a5      	b.n	80088fe <_vfiprintf_r+0x11a>
 80089b2:	2300      	movs	r3, #0
 80089b4:	3401      	adds	r4, #1
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f04f 0c0a 	mov.w	ip, #10
 80089be:	4620      	mov	r0, r4
 80089c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089c4:	3a30      	subs	r2, #48	; 0x30
 80089c6:	2a09      	cmp	r2, #9
 80089c8:	d903      	bls.n	80089d2 <_vfiprintf_r+0x1ee>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0c5      	beq.n	800895a <_vfiprintf_r+0x176>
 80089ce:	9105      	str	r1, [sp, #20]
 80089d0:	e7c3      	b.n	800895a <_vfiprintf_r+0x176>
 80089d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089d6:	4604      	mov	r4, r0
 80089d8:	2301      	movs	r3, #1
 80089da:	e7f0      	b.n	80089be <_vfiprintf_r+0x1da>
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	462a      	mov	r2, r5
 80089e2:	4b16      	ldr	r3, [pc, #88]	; (8008a3c <_vfiprintf_r+0x258>)
 80089e4:	a904      	add	r1, sp, #16
 80089e6:	4630      	mov	r0, r6
 80089e8:	f3af 8000 	nop.w
 80089ec:	4607      	mov	r7, r0
 80089ee:	1c78      	adds	r0, r7, #1
 80089f0:	d1d6      	bne.n	80089a0 <_vfiprintf_r+0x1bc>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07d9      	lsls	r1, r3, #31
 80089f6:	d405      	bmi.n	8008a04 <_vfiprintf_r+0x220>
 80089f8:	89ab      	ldrh	r3, [r5, #12]
 80089fa:	059a      	lsls	r2, r3, #22
 80089fc:	d402      	bmi.n	8008a04 <_vfiprintf_r+0x220>
 80089fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a00:	f000 fc45 	bl	800928e <__retarget_lock_release_recursive>
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af12 	bmi.w	8008830 <_vfiprintf_r+0x4c>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	e711      	b.n	8008834 <_vfiprintf_r+0x50>
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	462a      	mov	r2, r5
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <_vfiprintf_r+0x258>)
 8008a18:	a904      	add	r1, sp, #16
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f880 	bl	8008b20 <_printf_i>
 8008a20:	e7e4      	b.n	80089ec <_vfiprintf_r+0x208>
 8008a22:	bf00      	nop
 8008a24:	0800aac0 	.word	0x0800aac0
 8008a28:	0800aae0 	.word	0x0800aae0
 8008a2c:	0800aaa0 	.word	0x0800aaa0
 8008a30:	0800aa6d 	.word	0x0800aa6d
 8008a34:	0800aa77 	.word	0x0800aa77
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	080087bf 	.word	0x080087bf
 8008a40:	0800aa73 	.word	0x0800aa73

08008a44 <_printf_common>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	4616      	mov	r6, r2
 8008a4a:	4699      	mov	r9, r3
 8008a4c:	688a      	ldr	r2, [r1, #8]
 8008a4e:	690b      	ldr	r3, [r1, #16]
 8008a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	bfb8      	it	lt
 8008a58:	4613      	movlt	r3, r2
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a60:	4607      	mov	r7, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	b10a      	cbz	r2, 8008a6a <_printf_common+0x26>
 8008a66:	3301      	adds	r3, #1
 8008a68:	6033      	str	r3, [r6, #0]
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	0699      	lsls	r1, r3, #26
 8008a6e:	bf42      	ittt	mi
 8008a70:	6833      	ldrmi	r3, [r6, #0]
 8008a72:	3302      	addmi	r3, #2
 8008a74:	6033      	strmi	r3, [r6, #0]
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	f015 0506 	ands.w	r5, r5, #6
 8008a7c:	d106      	bne.n	8008a8c <_printf_common+0x48>
 8008a7e:	f104 0a19 	add.w	sl, r4, #25
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	6832      	ldr	r2, [r6, #0]
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	42ab      	cmp	r3, r5
 8008a8a:	dc26      	bgt.n	8008ada <_printf_common+0x96>
 8008a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a90:	1e13      	subs	r3, r2, #0
 8008a92:	6822      	ldr	r2, [r4, #0]
 8008a94:	bf18      	it	ne
 8008a96:	2301      	movne	r3, #1
 8008a98:	0692      	lsls	r2, r2, #26
 8008a9a:	d42b      	bmi.n	8008af4 <_printf_common+0xb0>
 8008a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c0      	blx	r8
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d01e      	beq.n	8008ae8 <_printf_common+0xa4>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	68e5      	ldr	r5, [r4, #12]
 8008aae:	6832      	ldr	r2, [r6, #0]
 8008ab0:	f003 0306 	and.w	r3, r3, #6
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	bf08      	it	eq
 8008ab8:	1aad      	subeq	r5, r5, r2
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	bf0c      	ite	eq
 8008ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ac4:	2500      	movne	r5, #0
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bfc4      	itt	gt
 8008aca:	1a9b      	subgt	r3, r3, r2
 8008acc:	18ed      	addgt	r5, r5, r3
 8008ace:	2600      	movs	r6, #0
 8008ad0:	341a      	adds	r4, #26
 8008ad2:	42b5      	cmp	r5, r6
 8008ad4:	d11a      	bne.n	8008b0c <_printf_common+0xc8>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e008      	b.n	8008aec <_printf_common+0xa8>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	47c0      	blx	r8
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d103      	bne.n	8008af0 <_printf_common+0xac>
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af0:	3501      	adds	r5, #1
 8008af2:	e7c6      	b.n	8008a82 <_printf_common+0x3e>
 8008af4:	18e1      	adds	r1, r4, r3
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	2030      	movs	r0, #48	; 0x30
 8008afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008afe:	4422      	add	r2, r4
 8008b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b08:	3302      	adds	r3, #2
 8008b0a:	e7c7      	b.n	8008a9c <_printf_common+0x58>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4622      	mov	r2, r4
 8008b10:	4649      	mov	r1, r9
 8008b12:	4638      	mov	r0, r7
 8008b14:	47c0      	blx	r8
 8008b16:	3001      	adds	r0, #1
 8008b18:	d0e6      	beq.n	8008ae8 <_printf_common+0xa4>
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7d9      	b.n	8008ad2 <_printf_common+0x8e>
	...

08008b20 <_printf_i>:
 8008b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	7e0f      	ldrb	r7, [r1, #24]
 8008b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b28:	2f78      	cmp	r7, #120	; 0x78
 8008b2a:	4691      	mov	r9, r2
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	469a      	mov	sl, r3
 8008b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b36:	d807      	bhi.n	8008b48 <_printf_i+0x28>
 8008b38:	2f62      	cmp	r7, #98	; 0x62
 8008b3a:	d80a      	bhi.n	8008b52 <_printf_i+0x32>
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	f000 80d8 	beq.w	8008cf2 <_printf_i+0x1d2>
 8008b42:	2f58      	cmp	r7, #88	; 0x58
 8008b44:	f000 80a3 	beq.w	8008c8e <_printf_i+0x16e>
 8008b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b50:	e03a      	b.n	8008bc8 <_printf_i+0xa8>
 8008b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b56:	2b15      	cmp	r3, #21
 8008b58:	d8f6      	bhi.n	8008b48 <_printf_i+0x28>
 8008b5a:	a101      	add	r1, pc, #4	; (adr r1, 8008b60 <_printf_i+0x40>)
 8008b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bcd 	.word	0x08008bcd
 8008b68:	08008b49 	.word	0x08008b49
 8008b6c:	08008b49 	.word	0x08008b49
 8008b70:	08008b49 	.word	0x08008b49
 8008b74:	08008b49 	.word	0x08008b49
 8008b78:	08008bcd 	.word	0x08008bcd
 8008b7c:	08008b49 	.word	0x08008b49
 8008b80:	08008b49 	.word	0x08008b49
 8008b84:	08008b49 	.word	0x08008b49
 8008b88:	08008b49 	.word	0x08008b49
 8008b8c:	08008cd9 	.word	0x08008cd9
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008cbb 	.word	0x08008cbb
 8008b98:	08008b49 	.word	0x08008b49
 8008b9c:	08008b49 	.word	0x08008b49
 8008ba0:	08008cfb 	.word	0x08008cfb
 8008ba4:	08008b49 	.word	0x08008b49
 8008ba8:	08008bfd 	.word	0x08008bfd
 8008bac:	08008b49 	.word	0x08008b49
 8008bb0:	08008b49 	.word	0x08008b49
 8008bb4:	08008cc3 	.word	0x08008cc3
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	1d1a      	adds	r2, r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	602a      	str	r2, [r5, #0]
 8008bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0a3      	b.n	8008d14 <_printf_i+0x1f4>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	6829      	ldr	r1, [r5, #0]
 8008bd0:	0606      	lsls	r6, r0, #24
 8008bd2:	f101 0304 	add.w	r3, r1, #4
 8008bd6:	d50a      	bpl.n	8008bee <_printf_i+0xce>
 8008bd8:	680e      	ldr	r6, [r1, #0]
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	2e00      	cmp	r6, #0
 8008bde:	da03      	bge.n	8008be8 <_printf_i+0xc8>
 8008be0:	232d      	movs	r3, #45	; 0x2d
 8008be2:	4276      	negs	r6, r6
 8008be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be8:	485e      	ldr	r0, [pc, #376]	; (8008d64 <_printf_i+0x244>)
 8008bea:	230a      	movs	r3, #10
 8008bec:	e019      	b.n	8008c22 <_printf_i+0x102>
 8008bee:	680e      	ldr	r6, [r1, #0]
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bf6:	bf18      	it	ne
 8008bf8:	b236      	sxthne	r6, r6
 8008bfa:	e7ef      	b.n	8008bdc <_printf_i+0xbc>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	6820      	ldr	r0, [r4, #0]
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	6029      	str	r1, [r5, #0]
 8008c04:	0601      	lsls	r1, r0, #24
 8008c06:	d501      	bpl.n	8008c0c <_printf_i+0xec>
 8008c08:	681e      	ldr	r6, [r3, #0]
 8008c0a:	e002      	b.n	8008c12 <_printf_i+0xf2>
 8008c0c:	0646      	lsls	r6, r0, #25
 8008c0e:	d5fb      	bpl.n	8008c08 <_printf_i+0xe8>
 8008c10:	881e      	ldrh	r6, [r3, #0]
 8008c12:	4854      	ldr	r0, [pc, #336]	; (8008d64 <_printf_i+0x244>)
 8008c14:	2f6f      	cmp	r7, #111	; 0x6f
 8008c16:	bf0c      	ite	eq
 8008c18:	2308      	moveq	r3, #8
 8008c1a:	230a      	movne	r3, #10
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c22:	6865      	ldr	r5, [r4, #4]
 8008c24:	60a5      	str	r5, [r4, #8]
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	bfa2      	ittt	ge
 8008c2a:	6821      	ldrge	r1, [r4, #0]
 8008c2c:	f021 0104 	bicge.w	r1, r1, #4
 8008c30:	6021      	strge	r1, [r4, #0]
 8008c32:	b90e      	cbnz	r6, 8008c38 <_printf_i+0x118>
 8008c34:	2d00      	cmp	r5, #0
 8008c36:	d04d      	beq.n	8008cd4 <_printf_i+0x1b4>
 8008c38:	4615      	mov	r5, r2
 8008c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c42:	5dc7      	ldrb	r7, [r0, r7]
 8008c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c48:	4637      	mov	r7, r6
 8008c4a:	42bb      	cmp	r3, r7
 8008c4c:	460e      	mov	r6, r1
 8008c4e:	d9f4      	bls.n	8008c3a <_printf_i+0x11a>
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d10b      	bne.n	8008c6c <_printf_i+0x14c>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	07de      	lsls	r6, r3, #31
 8008c58:	d508      	bpl.n	8008c6c <_printf_i+0x14c>
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	6861      	ldr	r1, [r4, #4]
 8008c5e:	4299      	cmp	r1, r3
 8008c60:	bfde      	ittt	le
 8008c62:	2330      	movle	r3, #48	; 0x30
 8008c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c6c:	1b52      	subs	r2, r2, r5
 8008c6e:	6122      	str	r2, [r4, #16]
 8008c70:	f8cd a000 	str.w	sl, [sp]
 8008c74:	464b      	mov	r3, r9
 8008c76:	aa03      	add	r2, sp, #12
 8008c78:	4621      	mov	r1, r4
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	f7ff fee2 	bl	8008a44 <_printf_common>
 8008c80:	3001      	adds	r0, #1
 8008c82:	d14c      	bne.n	8008d1e <_printf_i+0x1fe>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	b004      	add	sp, #16
 8008c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8e:	4835      	ldr	r0, [pc, #212]	; (8008d64 <_printf_i+0x244>)
 8008c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c94:	6829      	ldr	r1, [r5, #0]
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c9c:	6029      	str	r1, [r5, #0]
 8008c9e:	061d      	lsls	r5, r3, #24
 8008ca0:	d514      	bpl.n	8008ccc <_printf_i+0x1ac>
 8008ca2:	07df      	lsls	r7, r3, #31
 8008ca4:	bf44      	itt	mi
 8008ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8008caa:	6023      	strmi	r3, [r4, #0]
 8008cac:	b91e      	cbnz	r6, 8008cb6 <_printf_i+0x196>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	f023 0320 	bic.w	r3, r3, #32
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	2310      	movs	r3, #16
 8008cb8:	e7b0      	b.n	8008c1c <_printf_i+0xfc>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f043 0320 	orr.w	r3, r3, #32
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	2378      	movs	r3, #120	; 0x78
 8008cc4:	4828      	ldr	r0, [pc, #160]	; (8008d68 <_printf_i+0x248>)
 8008cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cca:	e7e3      	b.n	8008c94 <_printf_i+0x174>
 8008ccc:	0659      	lsls	r1, r3, #25
 8008cce:	bf48      	it	mi
 8008cd0:	b2b6      	uxthmi	r6, r6
 8008cd2:	e7e6      	b.n	8008ca2 <_printf_i+0x182>
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	e7bb      	b.n	8008c50 <_printf_i+0x130>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	6826      	ldr	r6, [r4, #0]
 8008cdc:	6961      	ldr	r1, [r4, #20]
 8008cde:	1d18      	adds	r0, r3, #4
 8008ce0:	6028      	str	r0, [r5, #0]
 8008ce2:	0635      	lsls	r5, r6, #24
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	d501      	bpl.n	8008cec <_printf_i+0x1cc>
 8008ce8:	6019      	str	r1, [r3, #0]
 8008cea:	e002      	b.n	8008cf2 <_printf_i+0x1d2>
 8008cec:	0670      	lsls	r0, r6, #25
 8008cee:	d5fb      	bpl.n	8008ce8 <_printf_i+0x1c8>
 8008cf0:	8019      	strh	r1, [r3, #0]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	4615      	mov	r5, r2
 8008cf8:	e7ba      	b.n	8008c70 <_printf_i+0x150>
 8008cfa:	682b      	ldr	r3, [r5, #0]
 8008cfc:	1d1a      	adds	r2, r3, #4
 8008cfe:	602a      	str	r2, [r5, #0]
 8008d00:	681d      	ldr	r5, [r3, #0]
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	2100      	movs	r1, #0
 8008d06:	4628      	mov	r0, r5
 8008d08:	f7f7 fa62 	bl	80001d0 <memchr>
 8008d0c:	b108      	cbz	r0, 8008d12 <_printf_i+0x1f2>
 8008d0e:	1b40      	subs	r0, r0, r5
 8008d10:	6060      	str	r0, [r4, #4]
 8008d12:	6863      	ldr	r3, [r4, #4]
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	2300      	movs	r3, #0
 8008d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1c:	e7a8      	b.n	8008c70 <_printf_i+0x150>
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	462a      	mov	r2, r5
 8008d22:	4649      	mov	r1, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	47d0      	blx	sl
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d0ab      	beq.n	8008c84 <_printf_i+0x164>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	079b      	lsls	r3, r3, #30
 8008d30:	d413      	bmi.n	8008d5a <_printf_i+0x23a>
 8008d32:	68e0      	ldr	r0, [r4, #12]
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	4298      	cmp	r0, r3
 8008d38:	bfb8      	it	lt
 8008d3a:	4618      	movlt	r0, r3
 8008d3c:	e7a4      	b.n	8008c88 <_printf_i+0x168>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4632      	mov	r2, r6
 8008d42:	4649      	mov	r1, r9
 8008d44:	4640      	mov	r0, r8
 8008d46:	47d0      	blx	sl
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d09b      	beq.n	8008c84 <_printf_i+0x164>
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	9903      	ldr	r1, [sp, #12]
 8008d52:	1a5b      	subs	r3, r3, r1
 8008d54:	42ab      	cmp	r3, r5
 8008d56:	dcf2      	bgt.n	8008d3e <_printf_i+0x21e>
 8008d58:	e7eb      	b.n	8008d32 <_printf_i+0x212>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	f104 0619 	add.w	r6, r4, #25
 8008d60:	e7f5      	b.n	8008d4e <_printf_i+0x22e>
 8008d62:	bf00      	nop
 8008d64:	0800aa7e 	.word	0x0800aa7e
 8008d68:	0800aa8f 	.word	0x0800aa8f

08008d6c <_sbrk_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_sbrk_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7f9 fcb2 	bl	80026e0 <_sbrk>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_sbrk_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_sbrk_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20010b7c 	.word	0x20010b7c

08008d8c <__swbuf_r>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	460e      	mov	r6, r1
 8008d90:	4614      	mov	r4, r2
 8008d92:	4605      	mov	r5, r0
 8008d94:	b118      	cbz	r0, 8008d9e <__swbuf_r+0x12>
 8008d96:	6983      	ldr	r3, [r0, #24]
 8008d98:	b90b      	cbnz	r3, 8008d9e <__swbuf_r+0x12>
 8008d9a:	f000 f9d9 	bl	8009150 <__sinit>
 8008d9e:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <__swbuf_r+0x98>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	d12b      	bne.n	8008dfc <__swbuf_r+0x70>
 8008da4:	686c      	ldr	r4, [r5, #4]
 8008da6:	69a3      	ldr	r3, [r4, #24]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	071a      	lsls	r2, r3, #28
 8008dae:	d52f      	bpl.n	8008e10 <__swbuf_r+0x84>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	b36b      	cbz	r3, 8008e10 <__swbuf_r+0x84>
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	6820      	ldr	r0, [r4, #0]
 8008db8:	1ac0      	subs	r0, r0, r3
 8008dba:	6963      	ldr	r3, [r4, #20]
 8008dbc:	b2f6      	uxtb	r6, r6
 8008dbe:	4283      	cmp	r3, r0
 8008dc0:	4637      	mov	r7, r6
 8008dc2:	dc04      	bgt.n	8008dce <__swbuf_r+0x42>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 f92e 	bl	8009028 <_fflush_r>
 8008dcc:	bb30      	cbnz	r0, 8008e1c <__swbuf_r+0x90>
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	60a3      	str	r3, [r4, #8]
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	701e      	strb	r6, [r3, #0]
 8008ddc:	6963      	ldr	r3, [r4, #20]
 8008dde:	3001      	adds	r0, #1
 8008de0:	4283      	cmp	r3, r0
 8008de2:	d004      	beq.n	8008dee <__swbuf_r+0x62>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	07db      	lsls	r3, r3, #31
 8008de8:	d506      	bpl.n	8008df8 <__swbuf_r+0x6c>
 8008dea:	2e0a      	cmp	r6, #10
 8008dec:	d104      	bne.n	8008df8 <__swbuf_r+0x6c>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 f919 	bl	8009028 <_fflush_r>
 8008df6:	b988      	cbnz	r0, 8008e1c <__swbuf_r+0x90>
 8008df8:	4638      	mov	r0, r7
 8008dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <__swbuf_r+0x9c>)
 8008dfe:	429c      	cmp	r4, r3
 8008e00:	d101      	bne.n	8008e06 <__swbuf_r+0x7a>
 8008e02:	68ac      	ldr	r4, [r5, #8]
 8008e04:	e7cf      	b.n	8008da6 <__swbuf_r+0x1a>
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <__swbuf_r+0xa0>)
 8008e08:	429c      	cmp	r4, r3
 8008e0a:	bf08      	it	eq
 8008e0c:	68ec      	ldreq	r4, [r5, #12]
 8008e0e:	e7ca      	b.n	8008da6 <__swbuf_r+0x1a>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 f80c 	bl	8008e30 <__swsetup_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d0cb      	beq.n	8008db4 <__swbuf_r+0x28>
 8008e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e20:	e7ea      	b.n	8008df8 <__swbuf_r+0x6c>
 8008e22:	bf00      	nop
 8008e24:	0800aac0 	.word	0x0800aac0
 8008e28:	0800aae0 	.word	0x0800aae0
 8008e2c:	0800aaa0 	.word	0x0800aaa0

08008e30 <__swsetup_r>:
 8008e30:	4b32      	ldr	r3, [pc, #200]	; (8008efc <__swsetup_r+0xcc>)
 8008e32:	b570      	push	{r4, r5, r6, lr}
 8008e34:	681d      	ldr	r5, [r3, #0]
 8008e36:	4606      	mov	r6, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	b125      	cbz	r5, 8008e46 <__swsetup_r+0x16>
 8008e3c:	69ab      	ldr	r3, [r5, #24]
 8008e3e:	b913      	cbnz	r3, 8008e46 <__swsetup_r+0x16>
 8008e40:	4628      	mov	r0, r5
 8008e42:	f000 f985 	bl	8009150 <__sinit>
 8008e46:	4b2e      	ldr	r3, [pc, #184]	; (8008f00 <__swsetup_r+0xd0>)
 8008e48:	429c      	cmp	r4, r3
 8008e4a:	d10f      	bne.n	8008e6c <__swsetup_r+0x3c>
 8008e4c:	686c      	ldr	r4, [r5, #4]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e54:	0719      	lsls	r1, r3, #28
 8008e56:	d42c      	bmi.n	8008eb2 <__swsetup_r+0x82>
 8008e58:	06dd      	lsls	r5, r3, #27
 8008e5a:	d411      	bmi.n	8008e80 <__swsetup_r+0x50>
 8008e5c:	2309      	movs	r3, #9
 8008e5e:	6033      	str	r3, [r6, #0]
 8008e60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	e03e      	b.n	8008eea <__swsetup_r+0xba>
 8008e6c:	4b25      	ldr	r3, [pc, #148]	; (8008f04 <__swsetup_r+0xd4>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <__swsetup_r+0x46>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7eb      	b.n	8008e4e <__swsetup_r+0x1e>
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <__swsetup_r+0xd8>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	bf08      	it	eq
 8008e7c:	68ec      	ldreq	r4, [r5, #12]
 8008e7e:	e7e6      	b.n	8008e4e <__swsetup_r+0x1e>
 8008e80:	0758      	lsls	r0, r3, #29
 8008e82:	d512      	bpl.n	8008eaa <__swsetup_r+0x7a>
 8008e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e86:	b141      	cbz	r1, 8008e9a <__swsetup_r+0x6a>
 8008e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	d002      	beq.n	8008e96 <__swsetup_r+0x66>
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7ff fa41 	bl	8008318 <_free_r>
 8008e96:	2300      	movs	r3, #0
 8008e98:	6363      	str	r3, [r4, #52]	; 0x34
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f043 0308 	orr.w	r3, r3, #8
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	b94b      	cbnz	r3, 8008eca <__swsetup_r+0x9a>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec0:	d003      	beq.n	8008eca <__swsetup_r+0x9a>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f000 fa09 	bl	80092dc <__smakebuf_r>
 8008eca:	89a0      	ldrh	r0, [r4, #12]
 8008ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed0:	f010 0301 	ands.w	r3, r0, #1
 8008ed4:	d00a      	beq.n	8008eec <__swsetup_r+0xbc>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60a3      	str	r3, [r4, #8]
 8008eda:	6963      	ldr	r3, [r4, #20]
 8008edc:	425b      	negs	r3, r3
 8008ede:	61a3      	str	r3, [r4, #24]
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	b943      	cbnz	r3, 8008ef6 <__swsetup_r+0xc6>
 8008ee4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee8:	d1ba      	bne.n	8008e60 <__swsetup_r+0x30>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	0781      	lsls	r1, r0, #30
 8008eee:	bf58      	it	pl
 8008ef0:	6963      	ldrpl	r3, [r4, #20]
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	e7f4      	b.n	8008ee0 <__swsetup_r+0xb0>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7f7      	b.n	8008eea <__swsetup_r+0xba>
 8008efa:	bf00      	nop
 8008efc:	20000478 	.word	0x20000478
 8008f00:	0800aac0 	.word	0x0800aac0
 8008f04:	0800aae0 	.word	0x0800aae0
 8008f08:	0800aaa0 	.word	0x0800aaa0

08008f0c <abort>:
 8008f0c:	b508      	push	{r3, lr}
 8008f0e:	2006      	movs	r0, #6
 8008f10:	f000 faa2 	bl	8009458 <raise>
 8008f14:	2001      	movs	r0, #1
 8008f16:	f7f9 fb6b 	bl	80025f0 <_exit>
	...

08008f1c <__sflush_r>:
 8008f1c:	898a      	ldrh	r2, [r1, #12]
 8008f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	4605      	mov	r5, r0
 8008f24:	0710      	lsls	r0, r2, #28
 8008f26:	460c      	mov	r4, r1
 8008f28:	d458      	bmi.n	8008fdc <__sflush_r+0xc0>
 8008f2a:	684b      	ldr	r3, [r1, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dc05      	bgt.n	8008f3c <__sflush_r+0x20>
 8008f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dc02      	bgt.n	8008f3c <__sflush_r+0x20>
 8008f36:	2000      	movs	r0, #0
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d0f9      	beq.n	8008f36 <__sflush_r+0x1a>
 8008f42:	2300      	movs	r3, #0
 8008f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f48:	682f      	ldr	r7, [r5, #0]
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	d032      	beq.n	8008fb4 <__sflush_r+0x98>
 8008f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	075a      	lsls	r2, r3, #29
 8008f54:	d505      	bpl.n	8008f62 <__sflush_r+0x46>
 8008f56:	6863      	ldr	r3, [r4, #4]
 8008f58:	1ac0      	subs	r0, r0, r3
 8008f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f5c:	b10b      	cbz	r3, 8008f62 <__sflush_r+0x46>
 8008f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f60:	1ac0      	subs	r0, r0, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	4602      	mov	r2, r0
 8008f66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f68:	6a21      	ldr	r1, [r4, #32]
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b0      	blx	r6
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	d106      	bne.n	8008f82 <__sflush_r+0x66>
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	291d      	cmp	r1, #29
 8008f78:	d82c      	bhi.n	8008fd4 <__sflush_r+0xb8>
 8008f7a:	4a2a      	ldr	r2, [pc, #168]	; (8009024 <__sflush_r+0x108>)
 8008f7c:	40ca      	lsrs	r2, r1
 8008f7e:	07d6      	lsls	r6, r2, #31
 8008f80:	d528      	bpl.n	8008fd4 <__sflush_r+0xb8>
 8008f82:	2200      	movs	r2, #0
 8008f84:	6062      	str	r2, [r4, #4]
 8008f86:	04d9      	lsls	r1, r3, #19
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	6022      	str	r2, [r4, #0]
 8008f8c:	d504      	bpl.n	8008f98 <__sflush_r+0x7c>
 8008f8e:	1c42      	adds	r2, r0, #1
 8008f90:	d101      	bne.n	8008f96 <__sflush_r+0x7a>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	b903      	cbnz	r3, 8008f98 <__sflush_r+0x7c>
 8008f96:	6560      	str	r0, [r4, #84]	; 0x54
 8008f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d0ca      	beq.n	8008f36 <__sflush_r+0x1a>
 8008fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	d002      	beq.n	8008fae <__sflush_r+0x92>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff f9b5 	bl	8008318 <_free_r>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8008fb2:	e7c1      	b.n	8008f38 <__sflush_r+0x1c>
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b0      	blx	r6
 8008fbc:	1c41      	adds	r1, r0, #1
 8008fbe:	d1c7      	bne.n	8008f50 <__sflush_r+0x34>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0c4      	beq.n	8008f50 <__sflush_r+0x34>
 8008fc6:	2b1d      	cmp	r3, #29
 8008fc8:	d001      	beq.n	8008fce <__sflush_r+0xb2>
 8008fca:	2b16      	cmp	r3, #22
 8008fcc:	d101      	bne.n	8008fd2 <__sflush_r+0xb6>
 8008fce:	602f      	str	r7, [r5, #0]
 8008fd0:	e7b1      	b.n	8008f36 <__sflush_r+0x1a>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	e7ad      	b.n	8008f38 <__sflush_r+0x1c>
 8008fdc:	690f      	ldr	r7, [r1, #16]
 8008fde:	2f00      	cmp	r7, #0
 8008fe0:	d0a9      	beq.n	8008f36 <__sflush_r+0x1a>
 8008fe2:	0793      	lsls	r3, r2, #30
 8008fe4:	680e      	ldr	r6, [r1, #0]
 8008fe6:	bf08      	it	eq
 8008fe8:	694b      	ldreq	r3, [r1, #20]
 8008fea:	600f      	str	r7, [r1, #0]
 8008fec:	bf18      	it	ne
 8008fee:	2300      	movne	r3, #0
 8008ff0:	eba6 0807 	sub.w	r8, r6, r7
 8008ff4:	608b      	str	r3, [r1, #8]
 8008ff6:	f1b8 0f00 	cmp.w	r8, #0
 8008ffa:	dd9c      	ble.n	8008f36 <__sflush_r+0x1a>
 8008ffc:	6a21      	ldr	r1, [r4, #32]
 8008ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009000:	4643      	mov	r3, r8
 8009002:	463a      	mov	r2, r7
 8009004:	4628      	mov	r0, r5
 8009006:	47b0      	blx	r6
 8009008:	2800      	cmp	r0, #0
 800900a:	dc06      	bgt.n	800901a <__sflush_r+0xfe>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	e78e      	b.n	8008f38 <__sflush_r+0x1c>
 800901a:	4407      	add	r7, r0
 800901c:	eba8 0800 	sub.w	r8, r8, r0
 8009020:	e7e9      	b.n	8008ff6 <__sflush_r+0xda>
 8009022:	bf00      	nop
 8009024:	20400001 	.word	0x20400001

08009028 <_fflush_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	690b      	ldr	r3, [r1, #16]
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b913      	cbnz	r3, 8009038 <_fflush_r+0x10>
 8009032:	2500      	movs	r5, #0
 8009034:	4628      	mov	r0, r5
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	b118      	cbz	r0, 8009042 <_fflush_r+0x1a>
 800903a:	6983      	ldr	r3, [r0, #24]
 800903c:	b90b      	cbnz	r3, 8009042 <_fflush_r+0x1a>
 800903e:	f000 f887 	bl	8009150 <__sinit>
 8009042:	4b14      	ldr	r3, [pc, #80]	; (8009094 <_fflush_r+0x6c>)
 8009044:	429c      	cmp	r4, r3
 8009046:	d11b      	bne.n	8009080 <_fflush_r+0x58>
 8009048:	686c      	ldr	r4, [r5, #4]
 800904a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0ef      	beq.n	8009032 <_fflush_r+0xa>
 8009052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009054:	07d0      	lsls	r0, r2, #31
 8009056:	d404      	bmi.n	8009062 <_fflush_r+0x3a>
 8009058:	0599      	lsls	r1, r3, #22
 800905a:	d402      	bmi.n	8009062 <_fflush_r+0x3a>
 800905c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905e:	f000 f915 	bl	800928c <__retarget_lock_acquire_recursive>
 8009062:	4628      	mov	r0, r5
 8009064:	4621      	mov	r1, r4
 8009066:	f7ff ff59 	bl	8008f1c <__sflush_r>
 800906a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800906c:	07da      	lsls	r2, r3, #31
 800906e:	4605      	mov	r5, r0
 8009070:	d4e0      	bmi.n	8009034 <_fflush_r+0xc>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d4dd      	bmi.n	8009034 <_fflush_r+0xc>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f000 f908 	bl	800928e <__retarget_lock_release_recursive>
 800907e:	e7d9      	b.n	8009034 <_fflush_r+0xc>
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <_fflush_r+0x70>)
 8009082:	429c      	cmp	r4, r3
 8009084:	d101      	bne.n	800908a <_fflush_r+0x62>
 8009086:	68ac      	ldr	r4, [r5, #8]
 8009088:	e7df      	b.n	800904a <_fflush_r+0x22>
 800908a:	4b04      	ldr	r3, [pc, #16]	; (800909c <_fflush_r+0x74>)
 800908c:	429c      	cmp	r4, r3
 800908e:	bf08      	it	eq
 8009090:	68ec      	ldreq	r4, [r5, #12]
 8009092:	e7da      	b.n	800904a <_fflush_r+0x22>
 8009094:	0800aac0 	.word	0x0800aac0
 8009098:	0800aae0 	.word	0x0800aae0
 800909c:	0800aaa0 	.word	0x0800aaa0

080090a0 <std>:
 80090a0:	2300      	movs	r3, #0
 80090a2:	b510      	push	{r4, lr}
 80090a4:	4604      	mov	r4, r0
 80090a6:	e9c0 3300 	strd	r3, r3, [r0]
 80090aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ae:	6083      	str	r3, [r0, #8]
 80090b0:	8181      	strh	r1, [r0, #12]
 80090b2:	6643      	str	r3, [r0, #100]	; 0x64
 80090b4:	81c2      	strh	r2, [r0, #14]
 80090b6:	6183      	str	r3, [r0, #24]
 80090b8:	4619      	mov	r1, r3
 80090ba:	2208      	movs	r2, #8
 80090bc:	305c      	adds	r0, #92	; 0x5c
 80090be:	f7fe ffe3 	bl	8008088 <memset>
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <std+0x38>)
 80090c4:	6263      	str	r3, [r4, #36]	; 0x24
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <std+0x3c>)
 80090c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <std+0x40>)
 80090cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <std+0x44>)
 80090d0:	6224      	str	r4, [r4, #32]
 80090d2:	6323      	str	r3, [r4, #48]	; 0x30
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	08009491 	.word	0x08009491
 80090dc:	080094b3 	.word	0x080094b3
 80090e0:	080094eb 	.word	0x080094eb
 80090e4:	0800950f 	.word	0x0800950f

080090e8 <_cleanup_r>:
 80090e8:	4901      	ldr	r1, [pc, #4]	; (80090f0 <_cleanup_r+0x8>)
 80090ea:	f000 b8af 	b.w	800924c <_fwalk_reent>
 80090ee:	bf00      	nop
 80090f0:	08009029 	.word	0x08009029

080090f4 <__sfmoreglue>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	2268      	movs	r2, #104	; 0x68
 80090f8:	1e4d      	subs	r5, r1, #1
 80090fa:	4355      	muls	r5, r2
 80090fc:	460e      	mov	r6, r1
 80090fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009102:	f7ff f975 	bl	80083f0 <_malloc_r>
 8009106:	4604      	mov	r4, r0
 8009108:	b140      	cbz	r0, 800911c <__sfmoreglue+0x28>
 800910a:	2100      	movs	r1, #0
 800910c:	e9c0 1600 	strd	r1, r6, [r0]
 8009110:	300c      	adds	r0, #12
 8009112:	60a0      	str	r0, [r4, #8]
 8009114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009118:	f7fe ffb6 	bl	8008088 <memset>
 800911c:	4620      	mov	r0, r4
 800911e:	bd70      	pop	{r4, r5, r6, pc}

08009120 <__sfp_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sfp_lock_acquire+0x8>)
 8009122:	f000 b8b3 	b.w	800928c <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	20010b79 	.word	0x20010b79

0800912c <__sfp_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sfp_lock_release+0x8>)
 800912e:	f000 b8ae 	b.w	800928e <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	20010b79 	.word	0x20010b79

08009138 <__sinit_lock_acquire>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__sinit_lock_acquire+0x8>)
 800913a:	f000 b8a7 	b.w	800928c <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	20010b7a 	.word	0x20010b7a

08009144 <__sinit_lock_release>:
 8009144:	4801      	ldr	r0, [pc, #4]	; (800914c <__sinit_lock_release+0x8>)
 8009146:	f000 b8a2 	b.w	800928e <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	20010b7a 	.word	0x20010b7a

08009150 <__sinit>:
 8009150:	b510      	push	{r4, lr}
 8009152:	4604      	mov	r4, r0
 8009154:	f7ff fff0 	bl	8009138 <__sinit_lock_acquire>
 8009158:	69a3      	ldr	r3, [r4, #24]
 800915a:	b11b      	cbz	r3, 8009164 <__sinit+0x14>
 800915c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009160:	f7ff bff0 	b.w	8009144 <__sinit_lock_release>
 8009164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009168:	6523      	str	r3, [r4, #80]	; 0x50
 800916a:	4b13      	ldr	r3, [pc, #76]	; (80091b8 <__sinit+0x68>)
 800916c:	4a13      	ldr	r2, [pc, #76]	; (80091bc <__sinit+0x6c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	62a2      	str	r2, [r4, #40]	; 0x28
 8009172:	42a3      	cmp	r3, r4
 8009174:	bf04      	itt	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	61a3      	streq	r3, [r4, #24]
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f820 	bl	80091c0 <__sfp>
 8009180:	6060      	str	r0, [r4, #4]
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f81c 	bl	80091c0 <__sfp>
 8009188:	60a0      	str	r0, [r4, #8]
 800918a:	4620      	mov	r0, r4
 800918c:	f000 f818 	bl	80091c0 <__sfp>
 8009190:	2200      	movs	r2, #0
 8009192:	60e0      	str	r0, [r4, #12]
 8009194:	2104      	movs	r1, #4
 8009196:	6860      	ldr	r0, [r4, #4]
 8009198:	f7ff ff82 	bl	80090a0 <std>
 800919c:	68a0      	ldr	r0, [r4, #8]
 800919e:	2201      	movs	r2, #1
 80091a0:	2109      	movs	r1, #9
 80091a2:	f7ff ff7d 	bl	80090a0 <std>
 80091a6:	68e0      	ldr	r0, [r4, #12]
 80091a8:	2202      	movs	r2, #2
 80091aa:	2112      	movs	r1, #18
 80091ac:	f7ff ff78 	bl	80090a0 <std>
 80091b0:	2301      	movs	r3, #1
 80091b2:	61a3      	str	r3, [r4, #24]
 80091b4:	e7d2      	b.n	800915c <__sinit+0xc>
 80091b6:	bf00      	nop
 80091b8:	0800a8b8 	.word	0x0800a8b8
 80091bc:	080090e9 	.word	0x080090e9

080091c0 <__sfp>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	4607      	mov	r7, r0
 80091c4:	f7ff ffac 	bl	8009120 <__sfp_lock_acquire>
 80091c8:	4b1e      	ldr	r3, [pc, #120]	; (8009244 <__sfp+0x84>)
 80091ca:	681e      	ldr	r6, [r3, #0]
 80091cc:	69b3      	ldr	r3, [r6, #24]
 80091ce:	b913      	cbnz	r3, 80091d6 <__sfp+0x16>
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff ffbd 	bl	8009150 <__sinit>
 80091d6:	3648      	adds	r6, #72	; 0x48
 80091d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091dc:	3b01      	subs	r3, #1
 80091de:	d503      	bpl.n	80091e8 <__sfp+0x28>
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	b30b      	cbz	r3, 8009228 <__sfp+0x68>
 80091e4:	6836      	ldr	r6, [r6, #0]
 80091e6:	e7f7      	b.n	80091d8 <__sfp+0x18>
 80091e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091ec:	b9d5      	cbnz	r5, 8009224 <__sfp+0x64>
 80091ee:	4b16      	ldr	r3, [pc, #88]	; (8009248 <__sfp+0x88>)
 80091f0:	60e3      	str	r3, [r4, #12]
 80091f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091f6:	6665      	str	r5, [r4, #100]	; 0x64
 80091f8:	f000 f847 	bl	800928a <__retarget_lock_init_recursive>
 80091fc:	f7ff ff96 	bl	800912c <__sfp_lock_release>
 8009200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009208:	6025      	str	r5, [r4, #0]
 800920a:	61a5      	str	r5, [r4, #24]
 800920c:	2208      	movs	r2, #8
 800920e:	4629      	mov	r1, r5
 8009210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009214:	f7fe ff38 	bl	8008088 <memset>
 8009218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800921c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009220:	4620      	mov	r0, r4
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009224:	3468      	adds	r4, #104	; 0x68
 8009226:	e7d9      	b.n	80091dc <__sfp+0x1c>
 8009228:	2104      	movs	r1, #4
 800922a:	4638      	mov	r0, r7
 800922c:	f7ff ff62 	bl	80090f4 <__sfmoreglue>
 8009230:	4604      	mov	r4, r0
 8009232:	6030      	str	r0, [r6, #0]
 8009234:	2800      	cmp	r0, #0
 8009236:	d1d5      	bne.n	80091e4 <__sfp+0x24>
 8009238:	f7ff ff78 	bl	800912c <__sfp_lock_release>
 800923c:	230c      	movs	r3, #12
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	e7ee      	b.n	8009220 <__sfp+0x60>
 8009242:	bf00      	nop
 8009244:	0800a8b8 	.word	0x0800a8b8
 8009248:	ffff0001 	.word	0xffff0001

0800924c <_fwalk_reent>:
 800924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009250:	4606      	mov	r6, r0
 8009252:	4688      	mov	r8, r1
 8009254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009258:	2700      	movs	r7, #0
 800925a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800925e:	f1b9 0901 	subs.w	r9, r9, #1
 8009262:	d505      	bpl.n	8009270 <_fwalk_reent+0x24>
 8009264:	6824      	ldr	r4, [r4, #0]
 8009266:	2c00      	cmp	r4, #0
 8009268:	d1f7      	bne.n	800925a <_fwalk_reent+0xe>
 800926a:	4638      	mov	r0, r7
 800926c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009270:	89ab      	ldrh	r3, [r5, #12]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d907      	bls.n	8009286 <_fwalk_reent+0x3a>
 8009276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800927a:	3301      	adds	r3, #1
 800927c:	d003      	beq.n	8009286 <_fwalk_reent+0x3a>
 800927e:	4629      	mov	r1, r5
 8009280:	4630      	mov	r0, r6
 8009282:	47c0      	blx	r8
 8009284:	4307      	orrs	r7, r0
 8009286:	3568      	adds	r5, #104	; 0x68
 8009288:	e7e9      	b.n	800925e <_fwalk_reent+0x12>

0800928a <__retarget_lock_init_recursive>:
 800928a:	4770      	bx	lr

0800928c <__retarget_lock_acquire_recursive>:
 800928c:	4770      	bx	lr

0800928e <__retarget_lock_release_recursive>:
 800928e:	4770      	bx	lr

08009290 <__swhatbuf_r>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009298:	2900      	cmp	r1, #0
 800929a:	b096      	sub	sp, #88	; 0x58
 800929c:	4614      	mov	r4, r2
 800929e:	461d      	mov	r5, r3
 80092a0:	da08      	bge.n	80092b4 <__swhatbuf_r+0x24>
 80092a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	602a      	str	r2, [r5, #0]
 80092aa:	061a      	lsls	r2, r3, #24
 80092ac:	d410      	bmi.n	80092d0 <__swhatbuf_r+0x40>
 80092ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b2:	e00e      	b.n	80092d2 <__swhatbuf_r+0x42>
 80092b4:	466a      	mov	r2, sp
 80092b6:	f000 f951 	bl	800955c <_fstat_r>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	dbf1      	blt.n	80092a2 <__swhatbuf_r+0x12>
 80092be:	9a01      	ldr	r2, [sp, #4]
 80092c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092c8:	425a      	negs	r2, r3
 80092ca:	415a      	adcs	r2, r3
 80092cc:	602a      	str	r2, [r5, #0]
 80092ce:	e7ee      	b.n	80092ae <__swhatbuf_r+0x1e>
 80092d0:	2340      	movs	r3, #64	; 0x40
 80092d2:	2000      	movs	r0, #0
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	b016      	add	sp, #88	; 0x58
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080092dc <__smakebuf_r>:
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092e0:	079d      	lsls	r5, r3, #30
 80092e2:	4606      	mov	r6, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	d507      	bpl.n	80092f8 <__smakebuf_r+0x1c>
 80092e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	6123      	str	r3, [r4, #16]
 80092f0:	2301      	movs	r3, #1
 80092f2:	6163      	str	r3, [r4, #20]
 80092f4:	b002      	add	sp, #8
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	ab01      	add	r3, sp, #4
 80092fa:	466a      	mov	r2, sp
 80092fc:	f7ff ffc8 	bl	8009290 <__swhatbuf_r>
 8009300:	9900      	ldr	r1, [sp, #0]
 8009302:	4605      	mov	r5, r0
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff f873 	bl	80083f0 <_malloc_r>
 800930a:	b948      	cbnz	r0, 8009320 <__smakebuf_r+0x44>
 800930c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009310:	059a      	lsls	r2, r3, #22
 8009312:	d4ef      	bmi.n	80092f4 <__smakebuf_r+0x18>
 8009314:	f023 0303 	bic.w	r3, r3, #3
 8009318:	f043 0302 	orr.w	r3, r3, #2
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	e7e3      	b.n	80092e8 <__smakebuf_r+0xc>
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <__smakebuf_r+0x7c>)
 8009322:	62b3      	str	r3, [r6, #40]	; 0x28
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	6020      	str	r0, [r4, #0]
 8009328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	6163      	str	r3, [r4, #20]
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	6120      	str	r0, [r4, #16]
 8009336:	b15b      	cbz	r3, 8009350 <__smakebuf_r+0x74>
 8009338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800933c:	4630      	mov	r0, r6
 800933e:	f000 f91f 	bl	8009580 <_isatty_r>
 8009342:	b128      	cbz	r0, 8009350 <__smakebuf_r+0x74>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	89a0      	ldrh	r0, [r4, #12]
 8009352:	4305      	orrs	r5, r0
 8009354:	81a5      	strh	r5, [r4, #12]
 8009356:	e7cd      	b.n	80092f4 <__smakebuf_r+0x18>
 8009358:	080090e9 	.word	0x080090e9

0800935c <memmove>:
 800935c:	4288      	cmp	r0, r1
 800935e:	b510      	push	{r4, lr}
 8009360:	eb01 0402 	add.w	r4, r1, r2
 8009364:	d902      	bls.n	800936c <memmove+0x10>
 8009366:	4284      	cmp	r4, r0
 8009368:	4623      	mov	r3, r4
 800936a:	d807      	bhi.n	800937c <memmove+0x20>
 800936c:	1e43      	subs	r3, r0, #1
 800936e:	42a1      	cmp	r1, r4
 8009370:	d008      	beq.n	8009384 <memmove+0x28>
 8009372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009376:	f803 2f01 	strb.w	r2, [r3, #1]!
 800937a:	e7f8      	b.n	800936e <memmove+0x12>
 800937c:	4402      	add	r2, r0
 800937e:	4601      	mov	r1, r0
 8009380:	428a      	cmp	r2, r1
 8009382:	d100      	bne.n	8009386 <memmove+0x2a>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800938a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800938e:	e7f7      	b.n	8009380 <memmove+0x24>

08009390 <__malloc_lock>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__malloc_lock+0x8>)
 8009392:	f7ff bf7b 	b.w	800928c <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	20010b78 	.word	0x20010b78

0800939c <__malloc_unlock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_unlock+0x8>)
 800939e:	f7ff bf76 	b.w	800928e <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	20010b78 	.word	0x20010b78

080093a8 <_realloc_r>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	4680      	mov	r8, r0
 80093ae:	4614      	mov	r4, r2
 80093b0:	460e      	mov	r6, r1
 80093b2:	b921      	cbnz	r1, 80093be <_realloc_r+0x16>
 80093b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b8:	4611      	mov	r1, r2
 80093ba:	f7ff b819 	b.w	80083f0 <_malloc_r>
 80093be:	b92a      	cbnz	r2, 80093cc <_realloc_r+0x24>
 80093c0:	f7fe ffaa 	bl	8008318 <_free_r>
 80093c4:	4625      	mov	r5, r4
 80093c6:	4628      	mov	r0, r5
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093cc:	f000 f8fa 	bl	80095c4 <_malloc_usable_size_r>
 80093d0:	4284      	cmp	r4, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	d802      	bhi.n	80093dc <_realloc_r+0x34>
 80093d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093da:	d812      	bhi.n	8009402 <_realloc_r+0x5a>
 80093dc:	4621      	mov	r1, r4
 80093de:	4640      	mov	r0, r8
 80093e0:	f7ff f806 	bl	80083f0 <_malloc_r>
 80093e4:	4605      	mov	r5, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0ed      	beq.n	80093c6 <_realloc_r+0x1e>
 80093ea:	42bc      	cmp	r4, r7
 80093ec:	4622      	mov	r2, r4
 80093ee:	4631      	mov	r1, r6
 80093f0:	bf28      	it	cs
 80093f2:	463a      	movcs	r2, r7
 80093f4:	f7fe fe3a 	bl	800806c <memcpy>
 80093f8:	4631      	mov	r1, r6
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7fe ff8c 	bl	8008318 <_free_r>
 8009400:	e7e1      	b.n	80093c6 <_realloc_r+0x1e>
 8009402:	4635      	mov	r5, r6
 8009404:	e7df      	b.n	80093c6 <_realloc_r+0x1e>

08009406 <_raise_r>:
 8009406:	291f      	cmp	r1, #31
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4604      	mov	r4, r0
 800940c:	460d      	mov	r5, r1
 800940e:	d904      	bls.n	800941a <_raise_r+0x14>
 8009410:	2316      	movs	r3, #22
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	bd38      	pop	{r3, r4, r5, pc}
 800941a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800941c:	b112      	cbz	r2, 8009424 <_raise_r+0x1e>
 800941e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009422:	b94b      	cbnz	r3, 8009438 <_raise_r+0x32>
 8009424:	4620      	mov	r0, r4
 8009426:	f000 f831 	bl	800948c <_getpid_r>
 800942a:	462a      	mov	r2, r5
 800942c:	4601      	mov	r1, r0
 800942e:	4620      	mov	r0, r4
 8009430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009434:	f000 b818 	b.w	8009468 <_kill_r>
 8009438:	2b01      	cmp	r3, #1
 800943a:	d00a      	beq.n	8009452 <_raise_r+0x4c>
 800943c:	1c59      	adds	r1, r3, #1
 800943e:	d103      	bne.n	8009448 <_raise_r+0x42>
 8009440:	2316      	movs	r3, #22
 8009442:	6003      	str	r3, [r0, #0]
 8009444:	2001      	movs	r0, #1
 8009446:	e7e7      	b.n	8009418 <_raise_r+0x12>
 8009448:	2400      	movs	r4, #0
 800944a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800944e:	4628      	mov	r0, r5
 8009450:	4798      	blx	r3
 8009452:	2000      	movs	r0, #0
 8009454:	e7e0      	b.n	8009418 <_raise_r+0x12>
	...

08009458 <raise>:
 8009458:	4b02      	ldr	r3, [pc, #8]	; (8009464 <raise+0xc>)
 800945a:	4601      	mov	r1, r0
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f7ff bfd2 	b.w	8009406 <_raise_r>
 8009462:	bf00      	nop
 8009464:	20000478 	.word	0x20000478

08009468 <_kill_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_kill_r+0x20>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	602b      	str	r3, [r5, #0]
 8009476:	f7f9 f8ab 	bl	80025d0 <_kill>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	d102      	bne.n	8009484 <_kill_r+0x1c>
 800947e:	682b      	ldr	r3, [r5, #0]
 8009480:	b103      	cbz	r3, 8009484 <_kill_r+0x1c>
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	bd38      	pop	{r3, r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	20010b7c 	.word	0x20010b7c

0800948c <_getpid_r>:
 800948c:	f7f9 b898 	b.w	80025c0 <_getpid>

08009490 <__sread>:
 8009490:	b510      	push	{r4, lr}
 8009492:	460c      	mov	r4, r1
 8009494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009498:	f000 f89c 	bl	80095d4 <_read_r>
 800949c:	2800      	cmp	r0, #0
 800949e:	bfab      	itete	ge
 80094a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094a2:	89a3      	ldrhlt	r3, [r4, #12]
 80094a4:	181b      	addge	r3, r3, r0
 80094a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094aa:	bfac      	ite	ge
 80094ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ae:	81a3      	strhlt	r3, [r4, #12]
 80094b0:	bd10      	pop	{r4, pc}

080094b2 <__swrite>:
 80094b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b6:	461f      	mov	r7, r3
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	05db      	lsls	r3, r3, #23
 80094bc:	4605      	mov	r5, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	4616      	mov	r6, r2
 80094c2:	d505      	bpl.n	80094d0 <__swrite+0x1e>
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	2302      	movs	r3, #2
 80094ca:	2200      	movs	r2, #0
 80094cc:	f000 f868 	bl	80095a0 <_lseek_r>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	4632      	mov	r2, r6
 80094de:	463b      	mov	r3, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	f000 b817 	b.w	8009518 <_write_r>

080094ea <__sseek>:
 80094ea:	b510      	push	{r4, lr}
 80094ec:	460c      	mov	r4, r1
 80094ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f2:	f000 f855 	bl	80095a0 <_lseek_r>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	bf15      	itete	ne
 80094fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009506:	81a3      	strheq	r3, [r4, #12]
 8009508:	bf18      	it	ne
 800950a:	81a3      	strhne	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__sclose>:
 800950e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009512:	f000 b813 	b.w	800953c <_close_r>
	...

08009518 <_write_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	; (8009538 <_write_r+0x20>)
 800951c:	4604      	mov	r4, r0
 800951e:	4608      	mov	r0, r1
 8009520:	4611      	mov	r1, r2
 8009522:	2200      	movs	r2, #0
 8009524:	602a      	str	r2, [r5, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	f7f9 f889 	bl	800263e <_write>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_write_r+0x1e>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_write_r+0x1e>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	20010b7c 	.word	0x20010b7c

0800953c <_close_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	; (8009558 <_close_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f9 f895 	bl	8002676 <_close>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_close_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_close_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20010b7c 	.word	0x20010b7c

0800955c <_fstat_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d07      	ldr	r5, [pc, #28]	; (800957c <_fstat_r+0x20>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	4611      	mov	r1, r2
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	f7f9 f890 	bl	800268e <_fstat>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d102      	bne.n	8009578 <_fstat_r+0x1c>
 8009572:	682b      	ldr	r3, [r5, #0]
 8009574:	b103      	cbz	r3, 8009578 <_fstat_r+0x1c>
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	20010b7c 	.word	0x20010b7c

08009580 <_isatty_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d06      	ldr	r5, [pc, #24]	; (800959c <_isatty_r+0x1c>)
 8009584:	2300      	movs	r3, #0
 8009586:	4604      	mov	r4, r0
 8009588:	4608      	mov	r0, r1
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	f7f9 f88f 	bl	80026ae <_isatty>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d102      	bne.n	800959a <_isatty_r+0x1a>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	b103      	cbz	r3, 800959a <_isatty_r+0x1a>
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	20010b7c 	.word	0x20010b7c

080095a0 <_lseek_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	; (80095c0 <_lseek_r+0x20>)
 80095a4:	4604      	mov	r4, r0
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	2200      	movs	r2, #0
 80095ac:	602a      	str	r2, [r5, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f7f9 f888 	bl	80026c4 <_lseek>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_lseek_r+0x1e>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_lseek_r+0x1e>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	20010b7c 	.word	0x20010b7c

080095c4 <_malloc_usable_size_r>:
 80095c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c8:	1f18      	subs	r0, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfbc      	itt	lt
 80095ce:	580b      	ldrlt	r3, [r1, r0]
 80095d0:	18c0      	addlt	r0, r0, r3
 80095d2:	4770      	bx	lr

080095d4 <_read_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d07      	ldr	r5, [pc, #28]	; (80095f4 <_read_r+0x20>)
 80095d8:	4604      	mov	r4, r0
 80095da:	4608      	mov	r0, r1
 80095dc:	4611      	mov	r1, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	602a      	str	r2, [r5, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	f7f9 f80e 	bl	8002604 <_read>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_read_r+0x1e>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_read_r+0x1e>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20010b7c 	.word	0x20010b7c

080095f8 <sin>:
 80095f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095fa:	ec53 2b10 	vmov	r2, r3, d0
 80095fe:	4828      	ldr	r0, [pc, #160]	; (80096a0 <sin+0xa8>)
 8009600:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009604:	4281      	cmp	r1, r0
 8009606:	dc07      	bgt.n	8009618 <sin+0x20>
 8009608:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009698 <sin+0xa0>
 800960c:	2000      	movs	r0, #0
 800960e:	b005      	add	sp, #20
 8009610:	f85d eb04 	ldr.w	lr, [sp], #4
 8009614:	f000 be6c 	b.w	800a2f0 <__kernel_sin>
 8009618:	4822      	ldr	r0, [pc, #136]	; (80096a4 <sin+0xac>)
 800961a:	4281      	cmp	r1, r0
 800961c:	dd09      	ble.n	8009632 <sin+0x3a>
 800961e:	ee10 0a10 	vmov	r0, s0
 8009622:	4619      	mov	r1, r3
 8009624:	f7f6 fe28 	bl	8000278 <__aeabi_dsub>
 8009628:	ec41 0b10 	vmov	d0, r0, r1
 800962c:	b005      	add	sp, #20
 800962e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009632:	4668      	mov	r0, sp
 8009634:	f000 f838 	bl	80096a8 <__ieee754_rem_pio2>
 8009638:	f000 0003 	and.w	r0, r0, #3
 800963c:	2801      	cmp	r0, #1
 800963e:	d00c      	beq.n	800965a <sin+0x62>
 8009640:	2802      	cmp	r0, #2
 8009642:	d011      	beq.n	8009668 <sin+0x70>
 8009644:	b9f0      	cbnz	r0, 8009684 <sin+0x8c>
 8009646:	ed9d 1b02 	vldr	d1, [sp, #8]
 800964a:	ed9d 0b00 	vldr	d0, [sp]
 800964e:	2001      	movs	r0, #1
 8009650:	f000 fe4e 	bl	800a2f0 <__kernel_sin>
 8009654:	ec51 0b10 	vmov	r0, r1, d0
 8009658:	e7e6      	b.n	8009628 <sin+0x30>
 800965a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800965e:	ed9d 0b00 	vldr	d0, [sp]
 8009662:	f000 fa2d 	bl	8009ac0 <__kernel_cos>
 8009666:	e7f5      	b.n	8009654 <sin+0x5c>
 8009668:	ed9d 1b02 	vldr	d1, [sp, #8]
 800966c:	ed9d 0b00 	vldr	d0, [sp]
 8009670:	2001      	movs	r0, #1
 8009672:	f000 fe3d 	bl	800a2f0 <__kernel_sin>
 8009676:	ec53 2b10 	vmov	r2, r3, d0
 800967a:	ee10 0a10 	vmov	r0, s0
 800967e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009682:	e7d1      	b.n	8009628 <sin+0x30>
 8009684:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009688:	ed9d 0b00 	vldr	d0, [sp]
 800968c:	f000 fa18 	bl	8009ac0 <__kernel_cos>
 8009690:	e7f1      	b.n	8009676 <sin+0x7e>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
	...
 80096a0:	3fe921fb 	.word	0x3fe921fb
 80096a4:	7fefffff 	.word	0x7fefffff

080096a8 <__ieee754_rem_pio2>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	ed2d 8b02 	vpush	{d8}
 80096b0:	ec55 4b10 	vmov	r4, r5, d0
 80096b4:	4bca      	ldr	r3, [pc, #808]	; (80099e0 <__ieee754_rem_pio2+0x338>)
 80096b6:	b08b      	sub	sp, #44	; 0x2c
 80096b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80096bc:	4598      	cmp	r8, r3
 80096be:	4682      	mov	sl, r0
 80096c0:	9502      	str	r5, [sp, #8]
 80096c2:	dc08      	bgt.n	80096d6 <__ieee754_rem_pio2+0x2e>
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	ed80 0b00 	vstr	d0, [r0]
 80096cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80096d0:	f04f 0b00 	mov.w	fp, #0
 80096d4:	e028      	b.n	8009728 <__ieee754_rem_pio2+0x80>
 80096d6:	4bc3      	ldr	r3, [pc, #780]	; (80099e4 <__ieee754_rem_pio2+0x33c>)
 80096d8:	4598      	cmp	r8, r3
 80096da:	dc78      	bgt.n	80097ce <__ieee754_rem_pio2+0x126>
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	4ec2      	ldr	r6, [pc, #776]	; (80099e8 <__ieee754_rem_pio2+0x340>)
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	ee10 0a10 	vmov	r0, s0
 80096e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80099a8 <__ieee754_rem_pio2+0x300>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4629      	mov	r1, r5
 80096ee:	dd39      	ble.n	8009764 <__ieee754_rem_pio2+0xbc>
 80096f0:	f7f6 fdc2 	bl	8000278 <__aeabi_dsub>
 80096f4:	45b0      	cmp	r8, r6
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	d01b      	beq.n	8009734 <__ieee754_rem_pio2+0x8c>
 80096fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80099b0 <__ieee754_rem_pio2+0x308>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 fdb9 	bl	8000278 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9ca 2300 	strd	r2, r3, [sl]
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f7f6 fdb1 	bl	8000278 <__aeabi_dsub>
 8009716:	a3a6      	add	r3, pc, #664	; (adr r3, 80099b0 <__ieee754_rem_pio2+0x308>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 fdac 	bl	8000278 <__aeabi_dsub>
 8009720:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009724:	f04f 0b01 	mov.w	fp, #1
 8009728:	4658      	mov	r0, fp
 800972a:	b00b      	add	sp, #44	; 0x2c
 800972c:	ecbd 8b02 	vpop	{d8}
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	a3a0      	add	r3, pc, #640	; (adr r3, 80099b8 <__ieee754_rem_pio2+0x310>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 fd9d 	bl	8000278 <__aeabi_dsub>
 800973e:	a3a0      	add	r3, pc, #640	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x318>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	4604      	mov	r4, r0
 8009746:	460d      	mov	r5, r1
 8009748:	f7f6 fd96 	bl	8000278 <__aeabi_dsub>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	e9ca 2300 	strd	r2, r3, [sl]
 8009754:	4620      	mov	r0, r4
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 fd8e 	bl	8000278 <__aeabi_dsub>
 800975c:	a398      	add	r3, pc, #608	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x318>)
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	e7db      	b.n	800971c <__ieee754_rem_pio2+0x74>
 8009764:	f7f6 fd8a 	bl	800027c <__adddf3>
 8009768:	45b0      	cmp	r8, r6
 800976a:	4604      	mov	r4, r0
 800976c:	460d      	mov	r5, r1
 800976e:	d016      	beq.n	800979e <__ieee754_rem_pio2+0xf6>
 8009770:	a38f      	add	r3, pc, #572	; (adr r3, 80099b0 <__ieee754_rem_pio2+0x308>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	f7f6 fd81 	bl	800027c <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	e9ca 2300 	strd	r2, r3, [sl]
 8009782:	4620      	mov	r0, r4
 8009784:	4629      	mov	r1, r5
 8009786:	f7f6 fd77 	bl	8000278 <__aeabi_dsub>
 800978a:	a389      	add	r3, pc, #548	; (adr r3, 80099b0 <__ieee754_rem_pio2+0x308>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 fd74 	bl	800027c <__adddf3>
 8009794:	f04f 3bff 	mov.w	fp, #4294967295
 8009798:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800979c:	e7c4      	b.n	8009728 <__ieee754_rem_pio2+0x80>
 800979e:	a386      	add	r3, pc, #536	; (adr r3, 80099b8 <__ieee754_rem_pio2+0x310>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fd6a 	bl	800027c <__adddf3>
 80097a8:	a385      	add	r3, pc, #532	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x318>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	f7f6 fd63 	bl	800027c <__adddf3>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	e9ca 2300 	strd	r2, r3, [sl]
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f6 fd59 	bl	8000278 <__aeabi_dsub>
 80097c6:	a37e      	add	r3, pc, #504	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x318>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	e7e0      	b.n	8009790 <__ieee754_rem_pio2+0xe8>
 80097ce:	4b87      	ldr	r3, [pc, #540]	; (80099ec <__ieee754_rem_pio2+0x344>)
 80097d0:	4598      	cmp	r8, r3
 80097d2:	f300 80d9 	bgt.w	8009988 <__ieee754_rem_pio2+0x2e0>
 80097d6:	f000 fe49 	bl	800a46c <fabs>
 80097da:	ec55 4b10 	vmov	r4, r5, d0
 80097de:	ee10 0a10 	vmov	r0, s0
 80097e2:	a379      	add	r3, pc, #484	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x320>)
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f6 fefd 	bl	80005e8 <__aeabi_dmul>
 80097ee:	4b80      	ldr	r3, [pc, #512]	; (80099f0 <__ieee754_rem_pio2+0x348>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 fd43 	bl	800027c <__adddf3>
 80097f6:	f7f7 f991 	bl	8000b1c <__aeabi_d2iz>
 80097fa:	4683      	mov	fp, r0
 80097fc:	f7f6 fe8a 	bl	8000514 <__aeabi_i2d>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	ec43 2b18 	vmov	d8, r2, r3
 8009808:	a367      	add	r3, pc, #412	; (adr r3, 80099a8 <__ieee754_rem_pio2+0x300>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 feeb 	bl	80005e8 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	f7f6 fd2d 	bl	8000278 <__aeabi_dsub>
 800981e:	a364      	add	r3, pc, #400	; (adr r3, 80099b0 <__ieee754_rem_pio2+0x308>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	ec51 0b18 	vmov	r0, r1, d8
 800982c:	f7f6 fedc 	bl	80005e8 <__aeabi_dmul>
 8009830:	f1bb 0f1f 	cmp.w	fp, #31
 8009834:	4604      	mov	r4, r0
 8009836:	460d      	mov	r5, r1
 8009838:	dc0d      	bgt.n	8009856 <__ieee754_rem_pio2+0x1ae>
 800983a:	4b6e      	ldr	r3, [pc, #440]	; (80099f4 <__ieee754_rem_pio2+0x34c>)
 800983c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	4543      	cmp	r3, r8
 8009846:	d006      	beq.n	8009856 <__ieee754_rem_pio2+0x1ae>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 fd12 	bl	8000278 <__aeabi_dsub>
 8009854:	e00f      	b.n	8009876 <__ieee754_rem_pio2+0x1ce>
 8009856:	462b      	mov	r3, r5
 8009858:	4622      	mov	r2, r4
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 fd0b 	bl	8000278 <__aeabi_dsub>
 8009862:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800986c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009870:	f1b8 0f10 	cmp.w	r8, #16
 8009874:	dc02      	bgt.n	800987c <__ieee754_rem_pio2+0x1d4>
 8009876:	e9ca 0100 	strd	r0, r1, [sl]
 800987a:	e039      	b.n	80098f0 <__ieee754_rem_pio2+0x248>
 800987c:	a34e      	add	r3, pc, #312	; (adr r3, 80099b8 <__ieee754_rem_pio2+0x310>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	ec51 0b18 	vmov	r0, r1, d8
 8009886:	f7f6 feaf 	bl	80005e8 <__aeabi_dmul>
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fcef 	bl	8000278 <__aeabi_dsub>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	4680      	mov	r8, r0
 80098a0:	4689      	mov	r9, r1
 80098a2:	4630      	mov	r0, r6
 80098a4:	4639      	mov	r1, r7
 80098a6:	f7f6 fce7 	bl	8000278 <__aeabi_dsub>
 80098aa:	4622      	mov	r2, r4
 80098ac:	462b      	mov	r3, r5
 80098ae:	f7f6 fce3 	bl	8000278 <__aeabi_dsub>
 80098b2:	a343      	add	r3, pc, #268	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x318>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	ec51 0b18 	vmov	r0, r1, d8
 80098c0:	f7f6 fe92 	bl	80005e8 <__aeabi_dmul>
 80098c4:	4622      	mov	r2, r4
 80098c6:	462b      	mov	r3, r5
 80098c8:	f7f6 fcd6 	bl	8000278 <__aeabi_dsub>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f6 fcce 	bl	8000278 <__aeabi_dsub>
 80098dc:	9a03      	ldr	r2, [sp, #12]
 80098de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b31      	cmp	r3, #49	; 0x31
 80098e6:	dc24      	bgt.n	8009932 <__ieee754_rem_pio2+0x28a>
 80098e8:	e9ca 0100 	strd	r0, r1, [sl]
 80098ec:	4646      	mov	r6, r8
 80098ee:	464f      	mov	r7, r9
 80098f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80098f4:	4630      	mov	r0, r6
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fcbc 	bl	8000278 <__aeabi_dsub>
 8009900:	462b      	mov	r3, r5
 8009902:	4622      	mov	r2, r4
 8009904:	f7f6 fcb8 	bl	8000278 <__aeabi_dsub>
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009910:	f6bf af0a 	bge.w	8009728 <__ieee754_rem_pio2+0x80>
 8009914:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009918:	f8ca 3004 	str.w	r3, [sl, #4]
 800991c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009920:	f8ca 8000 	str.w	r8, [sl]
 8009924:	f8ca 0008 	str.w	r0, [sl, #8]
 8009928:	f8ca 300c 	str.w	r3, [sl, #12]
 800992c:	f1cb 0b00 	rsb	fp, fp, #0
 8009930:	e6fa      	b.n	8009728 <__ieee754_rem_pio2+0x80>
 8009932:	a327      	add	r3, pc, #156	; (adr r3, 80099d0 <__ieee754_rem_pio2+0x328>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	ec51 0b18 	vmov	r0, r1, d8
 800993c:	f7f6 fe54 	bl	80005e8 <__aeabi_dmul>
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f6 fc94 	bl	8000278 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	4640      	mov	r0, r8
 800995a:	4649      	mov	r1, r9
 800995c:	f7f6 fc8c 	bl	8000278 <__aeabi_dsub>
 8009960:	4622      	mov	r2, r4
 8009962:	462b      	mov	r3, r5
 8009964:	f7f6 fc88 	bl	8000278 <__aeabi_dsub>
 8009968:	a31b      	add	r3, pc, #108	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x330>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	4604      	mov	r4, r0
 8009970:	460d      	mov	r5, r1
 8009972:	ec51 0b18 	vmov	r0, r1, d8
 8009976:	f7f6 fe37 	bl	80005e8 <__aeabi_dmul>
 800997a:	4622      	mov	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	f7f6 fc7b 	bl	8000278 <__aeabi_dsub>
 8009982:	4604      	mov	r4, r0
 8009984:	460d      	mov	r5, r1
 8009986:	e75f      	b.n	8009848 <__ieee754_rem_pio2+0x1a0>
 8009988:	4b1b      	ldr	r3, [pc, #108]	; (80099f8 <__ieee754_rem_pio2+0x350>)
 800998a:	4598      	cmp	r8, r3
 800998c:	dd36      	ble.n	80099fc <__ieee754_rem_pio2+0x354>
 800998e:	ee10 2a10 	vmov	r2, s0
 8009992:	462b      	mov	r3, r5
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fc6e 	bl	8000278 <__aeabi_dsub>
 800999c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099a0:	e9ca 0100 	strd	r0, r1, [sl]
 80099a4:	e694      	b.n	80096d0 <__ieee754_rem_pio2+0x28>
 80099a6:	bf00      	nop
 80099a8:	54400000 	.word	0x54400000
 80099ac:	3ff921fb 	.word	0x3ff921fb
 80099b0:	1a626331 	.word	0x1a626331
 80099b4:	3dd0b461 	.word	0x3dd0b461
 80099b8:	1a600000 	.word	0x1a600000
 80099bc:	3dd0b461 	.word	0x3dd0b461
 80099c0:	2e037073 	.word	0x2e037073
 80099c4:	3ba3198a 	.word	0x3ba3198a
 80099c8:	6dc9c883 	.word	0x6dc9c883
 80099cc:	3fe45f30 	.word	0x3fe45f30
 80099d0:	2e000000 	.word	0x2e000000
 80099d4:	3ba3198a 	.word	0x3ba3198a
 80099d8:	252049c1 	.word	0x252049c1
 80099dc:	397b839a 	.word	0x397b839a
 80099e0:	3fe921fb 	.word	0x3fe921fb
 80099e4:	4002d97b 	.word	0x4002d97b
 80099e8:	3ff921fb 	.word	0x3ff921fb
 80099ec:	413921fb 	.word	0x413921fb
 80099f0:	3fe00000 	.word	0x3fe00000
 80099f4:	0800ab00 	.word	0x0800ab00
 80099f8:	7fefffff 	.word	0x7fefffff
 80099fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009a00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009a04:	ee10 0a10 	vmov	r0, s0
 8009a08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009a0c:	ee10 6a10 	vmov	r6, s0
 8009a10:	460f      	mov	r7, r1
 8009a12:	f7f7 f883 	bl	8000b1c <__aeabi_d2iz>
 8009a16:	f7f6 fd7d 	bl	8000514 <__aeabi_i2d>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a26:	f7f6 fc27 	bl	8000278 <__aeabi_dsub>
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <__ieee754_rem_pio2+0x410>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f7f6 fddb 	bl	80005e8 <__aeabi_dmul>
 8009a32:	460f      	mov	r7, r1
 8009a34:	4606      	mov	r6, r0
 8009a36:	f7f7 f871 	bl	8000b1c <__aeabi_d2iz>
 8009a3a:	f7f6 fd6b 	bl	8000514 <__aeabi_i2d>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4630      	mov	r0, r6
 8009a44:	4639      	mov	r1, r7
 8009a46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a4a:	f7f6 fc15 	bl	8000278 <__aeabi_dsub>
 8009a4e:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <__ieee754_rem_pio2+0x410>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7f6 fdc9 	bl	80005e8 <__aeabi_dmul>
 8009a56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a5a:	ad04      	add	r5, sp, #16
 8009a5c:	f04f 0803 	mov.w	r8, #3
 8009a60:	46a9      	mov	r9, r5
 8009a62:	2600      	movs	r6, #0
 8009a64:	2700      	movs	r7, #0
 8009a66:	4632      	mov	r2, r6
 8009a68:	463b      	mov	r3, r7
 8009a6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009a6e:	46c3      	mov	fp, r8
 8009a70:	3d08      	subs	r5, #8
 8009a72:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a76:	f7f7 f81f 	bl	8000ab8 <__aeabi_dcmpeq>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1f3      	bne.n	8009a66 <__ieee754_rem_pio2+0x3be>
 8009a7e:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <__ieee754_rem_pio2+0x414>)
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2302      	movs	r3, #2
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4622      	mov	r2, r4
 8009a88:	465b      	mov	r3, fp
 8009a8a:	4651      	mov	r1, sl
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f000 f8df 	bl	8009c50 <__kernel_rem_pio2>
 8009a92:	9b02      	ldr	r3, [sp, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	4683      	mov	fp, r0
 8009a98:	f6bf ae46 	bge.w	8009728 <__ieee754_rem_pio2+0x80>
 8009a9c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009aa4:	e9ca 2300 	strd	r2, r3, [sl]
 8009aa8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ab0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009ab4:	e73a      	b.n	800992c <__ieee754_rem_pio2+0x284>
 8009ab6:	bf00      	nop
 8009ab8:	41700000 	.word	0x41700000
 8009abc:	0800ab80 	.word	0x0800ab80

08009ac0 <__kernel_cos>:
 8009ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	ec57 6b10 	vmov	r6, r7, d0
 8009ac8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009acc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009ad0:	ed8d 1b00 	vstr	d1, [sp]
 8009ad4:	da07      	bge.n	8009ae6 <__kernel_cos+0x26>
 8009ad6:	ee10 0a10 	vmov	r0, s0
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f7 f81e 	bl	8000b1c <__aeabi_d2iz>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f000 8088 	beq.w	8009bf6 <__kernel_cos+0x136>
 8009ae6:	4632      	mov	r2, r6
 8009ae8:	463b      	mov	r3, r7
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fd7b 	bl	80005e8 <__aeabi_dmul>
 8009af2:	4b51      	ldr	r3, [pc, #324]	; (8009c38 <__kernel_cos+0x178>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	4604      	mov	r4, r0
 8009af8:	460d      	mov	r5, r1
 8009afa:	f7f6 fd75 	bl	80005e8 <__aeabi_dmul>
 8009afe:	a340      	add	r3, pc, #256	; (adr r3, 8009c00 <__kernel_cos+0x140>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	4682      	mov	sl, r0
 8009b06:	468b      	mov	fp, r1
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fd6c 	bl	80005e8 <__aeabi_dmul>
 8009b10:	a33d      	add	r3, pc, #244	; (adr r3, 8009c08 <__kernel_cos+0x148>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fbb1 	bl	800027c <__adddf3>
 8009b1a:	4622      	mov	r2, r4
 8009b1c:	462b      	mov	r3, r5
 8009b1e:	f7f6 fd63 	bl	80005e8 <__aeabi_dmul>
 8009b22:	a33b      	add	r3, pc, #236	; (adr r3, 8009c10 <__kernel_cos+0x150>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f7f6 fba6 	bl	8000278 <__aeabi_dsub>
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	462b      	mov	r3, r5
 8009b30:	f7f6 fd5a 	bl	80005e8 <__aeabi_dmul>
 8009b34:	a338      	add	r3, pc, #224	; (adr r3, 8009c18 <__kernel_cos+0x158>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fb9f 	bl	800027c <__adddf3>
 8009b3e:	4622      	mov	r2, r4
 8009b40:	462b      	mov	r3, r5
 8009b42:	f7f6 fd51 	bl	80005e8 <__aeabi_dmul>
 8009b46:	a336      	add	r3, pc, #216	; (adr r3, 8009c20 <__kernel_cos+0x160>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fb94 	bl	8000278 <__aeabi_dsub>
 8009b50:	4622      	mov	r2, r4
 8009b52:	462b      	mov	r3, r5
 8009b54:	f7f6 fd48 	bl	80005e8 <__aeabi_dmul>
 8009b58:	a333      	add	r3, pc, #204	; (adr r3, 8009c28 <__kernel_cos+0x168>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fb8d 	bl	800027c <__adddf3>
 8009b62:	4622      	mov	r2, r4
 8009b64:	462b      	mov	r3, r5
 8009b66:	f7f6 fd3f 	bl	80005e8 <__aeabi_dmul>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	f7f6 fd3b 	bl	80005e8 <__aeabi_dmul>
 8009b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fd33 	bl	80005e8 <__aeabi_dmul>
 8009b82:	460b      	mov	r3, r1
 8009b84:	4602      	mov	r2, r0
 8009b86:	4629      	mov	r1, r5
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7f6 fb75 	bl	8000278 <__aeabi_dsub>
 8009b8e:	4b2b      	ldr	r3, [pc, #172]	; (8009c3c <__kernel_cos+0x17c>)
 8009b90:	4598      	cmp	r8, r3
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	dc10      	bgt.n	8009bba <__kernel_cos+0xfa>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	4659      	mov	r1, fp
 8009ba0:	f7f6 fb6a 	bl	8000278 <__aeabi_dsub>
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4926      	ldr	r1, [pc, #152]	; (8009c40 <__kernel_cos+0x180>)
 8009ba8:	4602      	mov	r2, r0
 8009baa:	2000      	movs	r0, #0
 8009bac:	f7f6 fb64 	bl	8000278 <__aeabi_dsub>
 8009bb0:	ec41 0b10 	vmov	d0, r0, r1
 8009bb4:	b003      	add	sp, #12
 8009bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bba:	4b22      	ldr	r3, [pc, #136]	; (8009c44 <__kernel_cos+0x184>)
 8009bbc:	4920      	ldr	r1, [pc, #128]	; (8009c40 <__kernel_cos+0x180>)
 8009bbe:	4598      	cmp	r8, r3
 8009bc0:	bfcc      	ite	gt
 8009bc2:	4d21      	ldrgt	r5, [pc, #132]	; (8009c48 <__kernel_cos+0x188>)
 8009bc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009bc8:	2400      	movs	r4, #0
 8009bca:	4622      	mov	r2, r4
 8009bcc:	462b      	mov	r3, r5
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f7f6 fb52 	bl	8000278 <__aeabi_dsub>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	462b      	mov	r3, r5
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	f7f6 fb4a 	bl	8000278 <__aeabi_dsub>
 8009be4:	4632      	mov	r2, r6
 8009be6:	463b      	mov	r3, r7
 8009be8:	f7f6 fb46 	bl	8000278 <__aeabi_dsub>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	e7da      	b.n	8009bac <__kernel_cos+0xec>
 8009bf6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009c30 <__kernel_cos+0x170>
 8009bfa:	e7db      	b.n	8009bb4 <__kernel_cos+0xf4>
 8009bfc:	f3af 8000 	nop.w
 8009c00:	be8838d4 	.word	0xbe8838d4
 8009c04:	bda8fae9 	.word	0xbda8fae9
 8009c08:	bdb4b1c4 	.word	0xbdb4b1c4
 8009c0c:	3e21ee9e 	.word	0x3e21ee9e
 8009c10:	809c52ad 	.word	0x809c52ad
 8009c14:	3e927e4f 	.word	0x3e927e4f
 8009c18:	19cb1590 	.word	0x19cb1590
 8009c1c:	3efa01a0 	.word	0x3efa01a0
 8009c20:	16c15177 	.word	0x16c15177
 8009c24:	3f56c16c 	.word	0x3f56c16c
 8009c28:	5555554c 	.word	0x5555554c
 8009c2c:	3fa55555 	.word	0x3fa55555
 8009c30:	00000000 	.word	0x00000000
 8009c34:	3ff00000 	.word	0x3ff00000
 8009c38:	3fe00000 	.word	0x3fe00000
 8009c3c:	3fd33332 	.word	0x3fd33332
 8009c40:	3ff00000 	.word	0x3ff00000
 8009c44:	3fe90000 	.word	0x3fe90000
 8009c48:	3fd20000 	.word	0x3fd20000
 8009c4c:	00000000 	.word	0x00000000

08009c50 <__kernel_rem_pio2>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	ed2d 8b02 	vpush	{d8}
 8009c58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009c5c:	f112 0f14 	cmn.w	r2, #20
 8009c60:	9308      	str	r3, [sp, #32]
 8009c62:	9101      	str	r1, [sp, #4]
 8009c64:	4bc4      	ldr	r3, [pc, #784]	; (8009f78 <__kernel_rem_pio2+0x328>)
 8009c66:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009c68:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	9b08      	ldr	r3, [sp, #32]
 8009c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c76:	bfa8      	it	ge
 8009c78:	1ed4      	subge	r4, r2, #3
 8009c7a:	9306      	str	r3, [sp, #24]
 8009c7c:	bfb2      	itee	lt
 8009c7e:	2400      	movlt	r4, #0
 8009c80:	2318      	movge	r3, #24
 8009c82:	fb94 f4f3 	sdivge	r4, r4, r3
 8009c86:	f06f 0317 	mvn.w	r3, #23
 8009c8a:	fb04 3303 	mla	r3, r4, r3, r3
 8009c8e:	eb03 0a02 	add.w	sl, r3, r2
 8009c92:	9b02      	ldr	r3, [sp, #8]
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009f68 <__kernel_rem_pio2+0x318>
 8009c9a:	eb03 0802 	add.w	r8, r3, r2
 8009c9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009ca0:	1aa7      	subs	r7, r4, r2
 8009ca2:	ae22      	add	r6, sp, #136	; 0x88
 8009ca4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009ca8:	2500      	movs	r5, #0
 8009caa:	4545      	cmp	r5, r8
 8009cac:	dd13      	ble.n	8009cd6 <__kernel_rem_pio2+0x86>
 8009cae:	9b08      	ldr	r3, [sp, #32]
 8009cb0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009f68 <__kernel_rem_pio2+0x318>
 8009cb4:	aa22      	add	r2, sp, #136	; 0x88
 8009cb6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009cba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	9b02      	ldr	r3, [sp, #8]
 8009cc4:	4598      	cmp	r8, r3
 8009cc6:	dc2f      	bgt.n	8009d28 <__kernel_rem_pio2+0xd8>
 8009cc8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009ccc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009cd0:	462f      	mov	r7, r5
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	e01b      	b.n	8009d0e <__kernel_rem_pio2+0xbe>
 8009cd6:	42ef      	cmn	r7, r5
 8009cd8:	d407      	bmi.n	8009cea <__kernel_rem_pio2+0x9a>
 8009cda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009cde:	f7f6 fc19 	bl	8000514 <__aeabi_i2d>
 8009ce2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009ce6:	3501      	adds	r5, #1
 8009ce8:	e7df      	b.n	8009caa <__kernel_rem_pio2+0x5a>
 8009cea:	ec51 0b18 	vmov	r0, r1, d8
 8009cee:	e7f8      	b.n	8009ce2 <__kernel_rem_pio2+0x92>
 8009cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009cf8:	f7f6 fc76 	bl	80005e8 <__aeabi_dmul>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d04:	f7f6 faba 	bl	800027c <__adddf3>
 8009d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d0c:	3601      	adds	r6, #1
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	429e      	cmp	r6, r3
 8009d12:	f1a7 0708 	sub.w	r7, r7, #8
 8009d16:	ddeb      	ble.n	8009cf0 <__kernel_rem_pio2+0xa0>
 8009d18:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009d1c:	f108 0801 	add.w	r8, r8, #1
 8009d20:	ecab 7b02 	vstmia	fp!, {d7}
 8009d24:	3508      	adds	r5, #8
 8009d26:	e7cc      	b.n	8009cc2 <__kernel_rem_pio2+0x72>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	aa0e      	add	r2, sp, #56	; 0x38
 8009d2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d30:	930d      	str	r3, [sp, #52]	; 0x34
 8009d32:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009d38:	9c02      	ldr	r4, [sp, #8]
 8009d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009d3c:	00e3      	lsls	r3, r4, #3
 8009d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d40:	ab9a      	add	r3, sp, #616	; 0x268
 8009d42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009d4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009d4e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009d50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009d54:	46c3      	mov	fp, r8
 8009d56:	46a1      	mov	r9, r4
 8009d58:	f1b9 0f00 	cmp.w	r9, #0
 8009d5c:	f1a5 0508 	sub.w	r5, r5, #8
 8009d60:	dc77      	bgt.n	8009e52 <__kernel_rem_pio2+0x202>
 8009d62:	ec47 6b10 	vmov	d0, r6, r7
 8009d66:	4650      	mov	r0, sl
 8009d68:	f000 fc0a 	bl	800a580 <scalbn>
 8009d6c:	ec57 6b10 	vmov	r6, r7, d0
 8009d70:	2200      	movs	r2, #0
 8009d72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009d76:	ee10 0a10 	vmov	r0, s0
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fc34 	bl	80005e8 <__aeabi_dmul>
 8009d80:	ec41 0b10 	vmov	d0, r0, r1
 8009d84:	f000 fb7c 	bl	800a480 <floor>
 8009d88:	4b7c      	ldr	r3, [pc, #496]	; (8009f7c <__kernel_rem_pio2+0x32c>)
 8009d8a:	ec51 0b10 	vmov	r0, r1, d0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 fc2a 	bl	80005e8 <__aeabi_dmul>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fa6c 	bl	8000278 <__aeabi_dsub>
 8009da0:	460f      	mov	r7, r1
 8009da2:	4606      	mov	r6, r0
 8009da4:	f7f6 feba 	bl	8000b1c <__aeabi_d2iz>
 8009da8:	9004      	str	r0, [sp, #16]
 8009daa:	f7f6 fbb3 	bl	8000514 <__aeabi_i2d>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4630      	mov	r0, r6
 8009db4:	4639      	mov	r1, r7
 8009db6:	f7f6 fa5f 	bl	8000278 <__aeabi_dsub>
 8009dba:	f1ba 0f00 	cmp.w	sl, #0
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460f      	mov	r7, r1
 8009dc2:	dd6d      	ble.n	8009ea0 <__kernel_rem_pio2+0x250>
 8009dc4:	1e62      	subs	r2, r4, #1
 8009dc6:	ab0e      	add	r3, sp, #56	; 0x38
 8009dc8:	9d04      	ldr	r5, [sp, #16]
 8009dca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009dce:	f1ca 0118 	rsb	r1, sl, #24
 8009dd2:	fa40 f301 	asr.w	r3, r0, r1
 8009dd6:	441d      	add	r5, r3
 8009dd8:	408b      	lsls	r3, r1
 8009dda:	1ac0      	subs	r0, r0, r3
 8009ddc:	ab0e      	add	r3, sp, #56	; 0x38
 8009dde:	9504      	str	r5, [sp, #16]
 8009de0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009de4:	f1ca 0317 	rsb	r3, sl, #23
 8009de8:	fa40 fb03 	asr.w	fp, r0, r3
 8009dec:	f1bb 0f00 	cmp.w	fp, #0
 8009df0:	dd65      	ble.n	8009ebe <__kernel_rem_pio2+0x26e>
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	2200      	movs	r2, #0
 8009df6:	3301      	adds	r3, #1
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	4615      	mov	r5, r2
 8009dfc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009e00:	4294      	cmp	r4, r2
 8009e02:	f300 809c 	bgt.w	8009f3e <__kernel_rem_pio2+0x2ee>
 8009e06:	f1ba 0f00 	cmp.w	sl, #0
 8009e0a:	dd07      	ble.n	8009e1c <__kernel_rem_pio2+0x1cc>
 8009e0c:	f1ba 0f01 	cmp.w	sl, #1
 8009e10:	f000 80c0 	beq.w	8009f94 <__kernel_rem_pio2+0x344>
 8009e14:	f1ba 0f02 	cmp.w	sl, #2
 8009e18:	f000 80c6 	beq.w	8009fa8 <__kernel_rem_pio2+0x358>
 8009e1c:	f1bb 0f02 	cmp.w	fp, #2
 8009e20:	d14d      	bne.n	8009ebe <__kernel_rem_pio2+0x26e>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	4956      	ldr	r1, [pc, #344]	; (8009f80 <__kernel_rem_pio2+0x330>)
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f7f6 fa25 	bl	8000278 <__aeabi_dsub>
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	d043      	beq.n	8009ebe <__kernel_rem_pio2+0x26e>
 8009e36:	4650      	mov	r0, sl
 8009e38:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009f70 <__kernel_rem_pio2+0x320>
 8009e3c:	f000 fba0 	bl	800a580 <scalbn>
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	ec53 2b10 	vmov	r2, r3, d0
 8009e48:	f7f6 fa16 	bl	8000278 <__aeabi_dsub>
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	e035      	b.n	8009ebe <__kernel_rem_pio2+0x26e>
 8009e52:	4b4c      	ldr	r3, [pc, #304]	; (8009f84 <__kernel_rem_pio2+0x334>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 fbc5 	bl	80005e8 <__aeabi_dmul>
 8009e5e:	f7f6 fe5d 	bl	8000b1c <__aeabi_d2iz>
 8009e62:	f7f6 fb57 	bl	8000514 <__aeabi_i2d>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	ec43 2b18 	vmov	d8, r2, r3
 8009e6e:	4b46      	ldr	r3, [pc, #280]	; (8009f88 <__kernel_rem_pio2+0x338>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	f7f6 fbb9 	bl	80005e8 <__aeabi_dmul>
 8009e76:	4602      	mov	r2, r0
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	f7f6 f9fb 	bl	8000278 <__aeabi_dsub>
 8009e82:	f7f6 fe4b 	bl	8000b1c <__aeabi_d2iz>
 8009e86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e8a:	f84b 0b04 	str.w	r0, [fp], #4
 8009e8e:	ec51 0b18 	vmov	r0, r1, d8
 8009e92:	f7f6 f9f3 	bl	800027c <__adddf3>
 8009e96:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	460f      	mov	r7, r1
 8009e9e:	e75b      	b.n	8009d58 <__kernel_rem_pio2+0x108>
 8009ea0:	d106      	bne.n	8009eb0 <__kernel_rem_pio2+0x260>
 8009ea2:	1e63      	subs	r3, r4, #1
 8009ea4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ea6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009eaa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009eae:	e79d      	b.n	8009dec <__kernel_rem_pio2+0x19c>
 8009eb0:	4b36      	ldr	r3, [pc, #216]	; (8009f8c <__kernel_rem_pio2+0x33c>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f7f6 fe1e 	bl	8000af4 <__aeabi_dcmpge>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d13d      	bne.n	8009f38 <__kernel_rem_pio2+0x2e8>
 8009ebc:	4683      	mov	fp, r0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	f7f6 fdf7 	bl	8000ab8 <__aeabi_dcmpeq>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f000 80c0 	beq.w	800a050 <__kernel_rem_pio2+0x400>
 8009ed0:	1e65      	subs	r5, r4, #1
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	9902      	ldr	r1, [sp, #8]
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	da6c      	bge.n	8009fb6 <__kernel_rem_pio2+0x366>
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	f000 8089 	beq.w	8009ff4 <__kernel_rem_pio2+0x3a4>
 8009ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8009ee4:	f1aa 0a18 	sub.w	sl, sl, #24
 8009ee8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 80ad 	beq.w	800a04c <__kernel_rem_pio2+0x3fc>
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009f70 <__kernel_rem_pio2+0x320>
 8009ef8:	f000 fb42 	bl	800a580 <scalbn>
 8009efc:	ab9a      	add	r3, sp, #616	; 0x268
 8009efe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f02:	ec57 6b10 	vmov	r6, r7, d0
 8009f06:	00ec      	lsls	r4, r5, #3
 8009f08:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009f0c:	46aa      	mov	sl, r5
 8009f0e:	f1ba 0f00 	cmp.w	sl, #0
 8009f12:	f280 80d6 	bge.w	800a0c2 <__kernel_rem_pio2+0x472>
 8009f16:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009f68 <__kernel_rem_pio2+0x318>
 8009f1a:	462e      	mov	r6, r5
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	f2c0 8104 	blt.w	800a12a <__kernel_rem_pio2+0x4da>
 8009f22:	ab72      	add	r3, sp, #456	; 0x1c8
 8009f24:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009f28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009f90 <__kernel_rem_pio2+0x340>
 8009f2c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009f30:	f04f 0800 	mov.w	r8, #0
 8009f34:	1baf      	subs	r7, r5, r6
 8009f36:	e0ea      	b.n	800a10e <__kernel_rem_pio2+0x4be>
 8009f38:	f04f 0b02 	mov.w	fp, #2
 8009f3c:	e759      	b.n	8009df2 <__kernel_rem_pio2+0x1a2>
 8009f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f42:	b955      	cbnz	r5, 8009f5a <__kernel_rem_pio2+0x30a>
 8009f44:	b123      	cbz	r3, 8009f50 <__kernel_rem_pio2+0x300>
 8009f46:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009f4a:	f8c8 3000 	str.w	r3, [r8]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	3201      	adds	r2, #1
 8009f52:	f108 0804 	add.w	r8, r8, #4
 8009f56:	461d      	mov	r5, r3
 8009f58:	e752      	b.n	8009e00 <__kernel_rem_pio2+0x1b0>
 8009f5a:	1acb      	subs	r3, r1, r3
 8009f5c:	f8c8 3000 	str.w	r3, [r8]
 8009f60:	462b      	mov	r3, r5
 8009f62:	e7f5      	b.n	8009f50 <__kernel_rem_pio2+0x300>
 8009f64:	f3af 8000 	nop.w
	...
 8009f74:	3ff00000 	.word	0x3ff00000
 8009f78:	0800acc8 	.word	0x0800acc8
 8009f7c:	40200000 	.word	0x40200000
 8009f80:	3ff00000 	.word	0x3ff00000
 8009f84:	3e700000 	.word	0x3e700000
 8009f88:	41700000 	.word	0x41700000
 8009f8c:	3fe00000 	.word	0x3fe00000
 8009f90:	0800ac88 	.word	0x0800ac88
 8009f94:	1e62      	subs	r2, r4, #1
 8009f96:	ab0e      	add	r3, sp, #56	; 0x38
 8009f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009fa0:	a90e      	add	r1, sp, #56	; 0x38
 8009fa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009fa6:	e739      	b.n	8009e1c <__kernel_rem_pio2+0x1cc>
 8009fa8:	1e62      	subs	r2, r4, #1
 8009faa:	ab0e      	add	r3, sp, #56	; 0x38
 8009fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009fb4:	e7f4      	b.n	8009fa0 <__kernel_rem_pio2+0x350>
 8009fb6:	a90e      	add	r1, sp, #56	; 0x38
 8009fb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	e789      	b.n	8009ed6 <__kernel_rem_pio2+0x286>
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	d0fa      	beq.n	8009fc2 <__kernel_rem_pio2+0x372>
 8009fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009fd2:	446a      	add	r2, sp
 8009fd4:	3a98      	subs	r2, #152	; 0x98
 8009fd6:	920a      	str	r2, [sp, #40]	; 0x28
 8009fd8:	9a08      	ldr	r2, [sp, #32]
 8009fda:	18e3      	adds	r3, r4, r3
 8009fdc:	18a5      	adds	r5, r4, r2
 8009fde:	aa22      	add	r2, sp, #136	; 0x88
 8009fe0:	f104 0801 	add.w	r8, r4, #1
 8009fe4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	9b04      	ldr	r3, [sp, #16]
 8009fec:	4543      	cmp	r3, r8
 8009fee:	da04      	bge.n	8009ffa <__kernel_rem_pio2+0x3aa>
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	e6a3      	b.n	8009d3c <__kernel_rem_pio2+0xec>
 8009ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e7e4      	b.n	8009fc4 <__kernel_rem_pio2+0x374>
 8009ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ffc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a000:	f7f6 fa88 	bl	8000514 <__aeabi_i2d>
 800a004:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a00a:	46ab      	mov	fp, r5
 800a00c:	461c      	mov	r4, r3
 800a00e:	f04f 0900 	mov.w	r9, #0
 800a012:	2600      	movs	r6, #0
 800a014:	2700      	movs	r7, #0
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	4599      	cmp	r9, r3
 800a01a:	dd06      	ble.n	800a02a <__kernel_rem_pio2+0x3da>
 800a01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a022:	f108 0801 	add.w	r8, r8, #1
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	e7df      	b.n	8009fea <__kernel_rem_pio2+0x39a>
 800a02a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a02e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a032:	f7f6 fad9 	bl	80005e8 <__aeabi_dmul>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 f91d 	bl	800027c <__adddf3>
 800a042:	f109 0901 	add.w	r9, r9, #1
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	e7e4      	b.n	800a016 <__kernel_rem_pio2+0x3c6>
 800a04c:	3d01      	subs	r5, #1
 800a04e:	e748      	b.n	8009ee2 <__kernel_rem_pio2+0x292>
 800a050:	ec47 6b10 	vmov	d0, r6, r7
 800a054:	f1ca 0000 	rsb	r0, sl, #0
 800a058:	f000 fa92 	bl	800a580 <scalbn>
 800a05c:	ec57 6b10 	vmov	r6, r7, d0
 800a060:	4ba0      	ldr	r3, [pc, #640]	; (800a2e4 <__kernel_rem_pio2+0x694>)
 800a062:	ee10 0a10 	vmov	r0, s0
 800a066:	2200      	movs	r2, #0
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 fd43 	bl	8000af4 <__aeabi_dcmpge>
 800a06e:	b1f8      	cbz	r0, 800a0b0 <__kernel_rem_pio2+0x460>
 800a070:	4b9d      	ldr	r3, [pc, #628]	; (800a2e8 <__kernel_rem_pio2+0x698>)
 800a072:	2200      	movs	r2, #0
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fab6 	bl	80005e8 <__aeabi_dmul>
 800a07c:	f7f6 fd4e 	bl	8000b1c <__aeabi_d2iz>
 800a080:	4680      	mov	r8, r0
 800a082:	f7f6 fa47 	bl	8000514 <__aeabi_i2d>
 800a086:	4b97      	ldr	r3, [pc, #604]	; (800a2e4 <__kernel_rem_pio2+0x694>)
 800a088:	2200      	movs	r2, #0
 800a08a:	f7f6 faad 	bl	80005e8 <__aeabi_dmul>
 800a08e:	460b      	mov	r3, r1
 800a090:	4602      	mov	r2, r0
 800a092:	4639      	mov	r1, r7
 800a094:	4630      	mov	r0, r6
 800a096:	f7f6 f8ef 	bl	8000278 <__aeabi_dsub>
 800a09a:	f7f6 fd3f 	bl	8000b1c <__aeabi_d2iz>
 800a09e:	1c65      	adds	r5, r4, #1
 800a0a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a0a2:	f10a 0a18 	add.w	sl, sl, #24
 800a0a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a0aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a0ae:	e720      	b.n	8009ef2 <__kernel_rem_pio2+0x2a2>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fd32 	bl	8000b1c <__aeabi_d2iz>
 800a0b8:	ab0e      	add	r3, sp, #56	; 0x38
 800a0ba:	4625      	mov	r5, r4
 800a0bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a0c0:	e717      	b.n	8009ef2 <__kernel_rem_pio2+0x2a2>
 800a0c2:	ab0e      	add	r3, sp, #56	; 0x38
 800a0c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a0c8:	f7f6 fa24 	bl	8000514 <__aeabi_i2d>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	f7f6 fa8a 	bl	80005e8 <__aeabi_dmul>
 800a0d4:	4b84      	ldr	r3, [pc, #528]	; (800a2e8 <__kernel_rem_pio2+0x698>)
 800a0d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a0da:	2200      	movs	r2, #0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 fa82 	bl	80005e8 <__aeabi_dmul>
 800a0e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	e70f      	b.n	8009f0e <__kernel_rem_pio2+0x2be>
 800a0ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a0f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a0f6:	f7f6 fa77 	bl	80005e8 <__aeabi_dmul>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a102:	f7f6 f8bb 	bl	800027c <__adddf3>
 800a106:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	9b02      	ldr	r3, [sp, #8]
 800a110:	4598      	cmp	r8, r3
 800a112:	dc01      	bgt.n	800a118 <__kernel_rem_pio2+0x4c8>
 800a114:	45b8      	cmp	r8, r7
 800a116:	ddea      	ble.n	800a0ee <__kernel_rem_pio2+0x49e>
 800a118:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a11c:	ab4a      	add	r3, sp, #296	; 0x128
 800a11e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a122:	ed87 7b00 	vstr	d7, [r7]
 800a126:	3e01      	subs	r6, #1
 800a128:	e6f8      	b.n	8009f1c <__kernel_rem_pio2+0x2cc>
 800a12a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	dc0b      	bgt.n	800a148 <__kernel_rem_pio2+0x4f8>
 800a130:	2b00      	cmp	r3, #0
 800a132:	dc35      	bgt.n	800a1a0 <__kernel_rem_pio2+0x550>
 800a134:	d059      	beq.n	800a1ea <__kernel_rem_pio2+0x59a>
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	f003 0007 	and.w	r0, r3, #7
 800a13c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a140:	ecbd 8b02 	vpop	{d8}
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d1f3      	bne.n	800a136 <__kernel_rem_pio2+0x4e6>
 800a14e:	ab4a      	add	r3, sp, #296	; 0x128
 800a150:	4423      	add	r3, r4
 800a152:	9306      	str	r3, [sp, #24]
 800a154:	461c      	mov	r4, r3
 800a156:	469a      	mov	sl, r3
 800a158:	9502      	str	r5, [sp, #8]
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a162:	dc6b      	bgt.n	800a23c <__kernel_rem_pio2+0x5ec>
 800a164:	46aa      	mov	sl, r5
 800a166:	f1ba 0f01 	cmp.w	sl, #1
 800a16a:	f1a4 0408 	sub.w	r4, r4, #8
 800a16e:	f300 8085 	bgt.w	800a27c <__kernel_rem_pio2+0x62c>
 800a172:	9c06      	ldr	r4, [sp, #24]
 800a174:	2000      	movs	r0, #0
 800a176:	3408      	adds	r4, #8
 800a178:	2100      	movs	r1, #0
 800a17a:	2d01      	cmp	r5, #1
 800a17c:	f300 809d 	bgt.w	800a2ba <__kernel_rem_pio2+0x66a>
 800a180:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a184:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a188:	f1bb 0f00 	cmp.w	fp, #0
 800a18c:	f040 809b 	bne.w	800a2c6 <__kernel_rem_pio2+0x676>
 800a190:	9b01      	ldr	r3, [sp, #4]
 800a192:	e9c3 5600 	strd	r5, r6, [r3]
 800a196:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a19a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a19e:	e7ca      	b.n	800a136 <__kernel_rem_pio2+0x4e6>
 800a1a0:	3408      	adds	r4, #8
 800a1a2:	ab4a      	add	r3, sp, #296	; 0x128
 800a1a4:	441c      	add	r4, r3
 800a1a6:	462e      	mov	r6, r5
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	2e00      	cmp	r6, #0
 800a1ae:	da36      	bge.n	800a21e <__kernel_rem_pio2+0x5ce>
 800a1b0:	f1bb 0f00 	cmp.w	fp, #0
 800a1b4:	d039      	beq.n	800a22a <__kernel_rem_pio2+0x5da>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1bc:	9c01      	ldr	r4, [sp, #4]
 800a1be:	e9c4 2300 	strd	r2, r3, [r4]
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a1ca:	f7f6 f855 	bl	8000278 <__aeabi_dsub>
 800a1ce:	ae4c      	add	r6, sp, #304	; 0x130
 800a1d0:	2401      	movs	r4, #1
 800a1d2:	42a5      	cmp	r5, r4
 800a1d4:	da2c      	bge.n	800a230 <__kernel_rem_pio2+0x5e0>
 800a1d6:	f1bb 0f00 	cmp.w	fp, #0
 800a1da:	d002      	beq.n	800a1e2 <__kernel_rem_pio2+0x592>
 800a1dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	9b01      	ldr	r3, [sp, #4]
 800a1e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a1e8:	e7a5      	b.n	800a136 <__kernel_rem_pio2+0x4e6>
 800a1ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a1ee:	eb0d 0403 	add.w	r4, sp, r3
 800a1f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2d00      	cmp	r5, #0
 800a1fc:	da09      	bge.n	800a212 <__kernel_rem_pio2+0x5c2>
 800a1fe:	f1bb 0f00 	cmp.w	fp, #0
 800a202:	d002      	beq.n	800a20a <__kernel_rem_pio2+0x5ba>
 800a204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a208:	4619      	mov	r1, r3
 800a20a:	9b01      	ldr	r3, [sp, #4]
 800a20c:	e9c3 0100 	strd	r0, r1, [r3]
 800a210:	e791      	b.n	800a136 <__kernel_rem_pio2+0x4e6>
 800a212:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a216:	f7f6 f831 	bl	800027c <__adddf3>
 800a21a:	3d01      	subs	r5, #1
 800a21c:	e7ed      	b.n	800a1fa <__kernel_rem_pio2+0x5aa>
 800a21e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a222:	f7f6 f82b 	bl	800027c <__adddf3>
 800a226:	3e01      	subs	r6, #1
 800a228:	e7c0      	b.n	800a1ac <__kernel_rem_pio2+0x55c>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e7c5      	b.n	800a1bc <__kernel_rem_pio2+0x56c>
 800a230:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a234:	f7f6 f822 	bl	800027c <__adddf3>
 800a238:	3401      	adds	r4, #1
 800a23a:	e7ca      	b.n	800a1d2 <__kernel_rem_pio2+0x582>
 800a23c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a240:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a244:	9b02      	ldr	r3, [sp, #8]
 800a246:	3b01      	subs	r3, #1
 800a248:	9302      	str	r3, [sp, #8]
 800a24a:	4632      	mov	r2, r6
 800a24c:	463b      	mov	r3, r7
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	f7f6 f813 	bl	800027c <__adddf3>
 800a256:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4640      	mov	r0, r8
 800a260:	4649      	mov	r1, r9
 800a262:	f7f6 f809 	bl	8000278 <__aeabi_dsub>
 800a266:	4632      	mov	r2, r6
 800a268:	463b      	mov	r3, r7
 800a26a:	f7f6 f807 	bl	800027c <__adddf3>
 800a26e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a276:	ed8a 7b00 	vstr	d7, [sl]
 800a27a:	e76e      	b.n	800a15a <__kernel_rem_pio2+0x50a>
 800a27c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a280:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a284:	4640      	mov	r0, r8
 800a286:	4632      	mov	r2, r6
 800a288:	463b      	mov	r3, r7
 800a28a:	4649      	mov	r1, r9
 800a28c:	f7f5 fff6 	bl	800027c <__adddf3>
 800a290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4640      	mov	r0, r8
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f5 ffec 	bl	8000278 <__aeabi_dsub>
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	463b      	mov	r3, r7
 800a2a4:	f7f5 ffea 	bl	800027c <__adddf3>
 800a2a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2b0:	ed84 7b00 	vstr	d7, [r4]
 800a2b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2b8:	e755      	b.n	800a166 <__kernel_rem_pio2+0x516>
 800a2ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2be:	f7f5 ffdd 	bl	800027c <__adddf3>
 800a2c2:	3d01      	subs	r5, #1
 800a2c4:	e759      	b.n	800a17a <__kernel_rem_pio2+0x52a>
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	9a01      	ldr	r2, [sp, #4]
 800a2ca:	601d      	str	r5, [r3, #0]
 800a2cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a2d0:	605c      	str	r4, [r3, #4]
 800a2d2:	609f      	str	r7, [r3, #8]
 800a2d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a2d8:	60d3      	str	r3, [r2, #12]
 800a2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2de:	6110      	str	r0, [r2, #16]
 800a2e0:	6153      	str	r3, [r2, #20]
 800a2e2:	e728      	b.n	800a136 <__kernel_rem_pio2+0x4e6>
 800a2e4:	41700000 	.word	0x41700000
 800a2e8:	3e700000 	.word	0x3e700000
 800a2ec:	00000000 	.word	0x00000000

0800a2f0 <__kernel_sin>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	ed2d 8b04 	vpush	{d8-d9}
 800a2f8:	eeb0 8a41 	vmov.f32	s16, s2
 800a2fc:	eef0 8a61 	vmov.f32	s17, s3
 800a300:	ec55 4b10 	vmov	r4, r5, d0
 800a304:	b083      	sub	sp, #12
 800a306:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a30a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a30e:	9001      	str	r0, [sp, #4]
 800a310:	da06      	bge.n	800a320 <__kernel_sin+0x30>
 800a312:	ee10 0a10 	vmov	r0, s0
 800a316:	4629      	mov	r1, r5
 800a318:	f7f6 fc00 	bl	8000b1c <__aeabi_d2iz>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d051      	beq.n	800a3c4 <__kernel_sin+0xd4>
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f6 f95e 	bl	80005e8 <__aeabi_dmul>
 800a32c:	4682      	mov	sl, r0
 800a32e:	468b      	mov	fp, r1
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f6 f956 	bl	80005e8 <__aeabi_dmul>
 800a33c:	a341      	add	r3, pc, #260	; (adr r3, 800a444 <__kernel_sin+0x154>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	4680      	mov	r8, r0
 800a344:	4689      	mov	r9, r1
 800a346:	4650      	mov	r0, sl
 800a348:	4659      	mov	r1, fp
 800a34a:	f7f6 f94d 	bl	80005e8 <__aeabi_dmul>
 800a34e:	a33f      	add	r3, pc, #252	; (adr r3, 800a44c <__kernel_sin+0x15c>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff90 	bl	8000278 <__aeabi_dsub>
 800a358:	4652      	mov	r2, sl
 800a35a:	465b      	mov	r3, fp
 800a35c:	f7f6 f944 	bl	80005e8 <__aeabi_dmul>
 800a360:	a33c      	add	r3, pc, #240	; (adr r3, 800a454 <__kernel_sin+0x164>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 ff89 	bl	800027c <__adddf3>
 800a36a:	4652      	mov	r2, sl
 800a36c:	465b      	mov	r3, fp
 800a36e:	f7f6 f93b 	bl	80005e8 <__aeabi_dmul>
 800a372:	a33a      	add	r3, pc, #232	; (adr r3, 800a45c <__kernel_sin+0x16c>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff7e 	bl	8000278 <__aeabi_dsub>
 800a37c:	4652      	mov	r2, sl
 800a37e:	465b      	mov	r3, fp
 800a380:	f7f6 f932 	bl	80005e8 <__aeabi_dmul>
 800a384:	a337      	add	r3, pc, #220	; (adr r3, 800a464 <__kernel_sin+0x174>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff77 	bl	800027c <__adddf3>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	4606      	mov	r6, r0
 800a392:	460f      	mov	r7, r1
 800a394:	b9eb      	cbnz	r3, 800a3d2 <__kernel_sin+0xe2>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4650      	mov	r0, sl
 800a39c:	4659      	mov	r1, fp
 800a39e:	f7f6 f923 	bl	80005e8 <__aeabi_dmul>
 800a3a2:	a325      	add	r3, pc, #148	; (adr r3, 800a438 <__kernel_sin+0x148>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7f5 ff66 	bl	8000278 <__aeabi_dsub>
 800a3ac:	4642      	mov	r2, r8
 800a3ae:	464b      	mov	r3, r9
 800a3b0:	f7f6 f91a 	bl	80005e8 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 ff5e 	bl	800027c <__adddf3>
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	ec45 4b10 	vmov	d0, r4, r5
 800a3c8:	b003      	add	sp, #12
 800a3ca:	ecbd 8b04 	vpop	{d8-d9}
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <__kernel_sin+0x150>)
 800a3d4:	ec51 0b18 	vmov	r0, r1, d8
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f6 f905 	bl	80005e8 <__aeabi_dmul>
 800a3de:	4632      	mov	r2, r6
 800a3e0:	ec41 0b19 	vmov	d9, r0, r1
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7f6 f8fd 	bl	80005e8 <__aeabi_dmul>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	ec51 0b19 	vmov	r0, r1, d9
 800a3f6:	f7f5 ff3f 	bl	8000278 <__aeabi_dsub>
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	f7f6 f8f3 	bl	80005e8 <__aeabi_dmul>
 800a402:	ec53 2b18 	vmov	r2, r3, d8
 800a406:	f7f5 ff37 	bl	8000278 <__aeabi_dsub>
 800a40a:	a30b      	add	r3, pc, #44	; (adr r3, 800a438 <__kernel_sin+0x148>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	4606      	mov	r6, r0
 800a412:	460f      	mov	r7, r1
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f6 f8e6 	bl	80005e8 <__aeabi_dmul>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f5 ff2a 	bl	800027c <__adddf3>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff22 	bl	8000278 <__aeabi_dsub>
 800a434:	e7c4      	b.n	800a3c0 <__kernel_sin+0xd0>
 800a436:	bf00      	nop
 800a438:	55555549 	.word	0x55555549
 800a43c:	3fc55555 	.word	0x3fc55555
 800a440:	3fe00000 	.word	0x3fe00000
 800a444:	5acfd57c 	.word	0x5acfd57c
 800a448:	3de5d93a 	.word	0x3de5d93a
 800a44c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a450:	3e5ae5e6 	.word	0x3e5ae5e6
 800a454:	57b1fe7d 	.word	0x57b1fe7d
 800a458:	3ec71de3 	.word	0x3ec71de3
 800a45c:	19c161d5 	.word	0x19c161d5
 800a460:	3f2a01a0 	.word	0x3f2a01a0
 800a464:	1110f8a6 	.word	0x1110f8a6
 800a468:	3f811111 	.word	0x3f811111

0800a46c <fabs>:
 800a46c:	ec51 0b10 	vmov	r0, r1, d0
 800a470:	ee10 2a10 	vmov	r2, s0
 800a474:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a478:	ec43 2b10 	vmov	d0, r2, r3
 800a47c:	4770      	bx	lr
	...

0800a480 <floor>:
 800a480:	ec51 0b10 	vmov	r0, r1, d0
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a48c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a490:	2e13      	cmp	r6, #19
 800a492:	ee10 5a10 	vmov	r5, s0
 800a496:	ee10 8a10 	vmov	r8, s0
 800a49a:	460c      	mov	r4, r1
 800a49c:	dc32      	bgt.n	800a504 <floor+0x84>
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	da14      	bge.n	800a4cc <floor+0x4c>
 800a4a2:	a333      	add	r3, pc, #204	; (adr r3, 800a570 <floor+0xf0>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 fee8 	bl	800027c <__adddf3>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f7f6 fb2a 	bl	8000b08 <__aeabi_dcmpgt>
 800a4b4:	b138      	cbz	r0, 800a4c6 <floor+0x46>
 800a4b6:	2c00      	cmp	r4, #0
 800a4b8:	da57      	bge.n	800a56a <floor+0xea>
 800a4ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a4be:	431d      	orrs	r5, r3
 800a4c0:	d001      	beq.n	800a4c6 <floor+0x46>
 800a4c2:	4c2d      	ldr	r4, [pc, #180]	; (800a578 <floor+0xf8>)
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e025      	b.n	800a518 <floor+0x98>
 800a4cc:	4f2b      	ldr	r7, [pc, #172]	; (800a57c <floor+0xfc>)
 800a4ce:	4137      	asrs	r7, r6
 800a4d0:	ea01 0307 	and.w	r3, r1, r7
 800a4d4:	4303      	orrs	r3, r0
 800a4d6:	d01f      	beq.n	800a518 <floor+0x98>
 800a4d8:	a325      	add	r3, pc, #148	; (adr r3, 800a570 <floor+0xf0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 fecd 	bl	800027c <__adddf3>
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f7f6 fb0f 	bl	8000b08 <__aeabi_dcmpgt>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0eb      	beq.n	800a4c6 <floor+0x46>
 800a4ee:	2c00      	cmp	r4, #0
 800a4f0:	bfbe      	ittt	lt
 800a4f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a4fa:	19a4      	addlt	r4, r4, r6
 800a4fc:	ea24 0407 	bic.w	r4, r4, r7
 800a500:	2500      	movs	r5, #0
 800a502:	e7e0      	b.n	800a4c6 <floor+0x46>
 800a504:	2e33      	cmp	r6, #51	; 0x33
 800a506:	dd0b      	ble.n	800a520 <floor+0xa0>
 800a508:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a50c:	d104      	bne.n	800a518 <floor+0x98>
 800a50e:	ee10 2a10 	vmov	r2, s0
 800a512:	460b      	mov	r3, r1
 800a514:	f7f5 feb2 	bl	800027c <__adddf3>
 800a518:	ec41 0b10 	vmov	d0, r0, r1
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	fa23 f707 	lsr.w	r7, r3, r7
 800a52c:	4207      	tst	r7, r0
 800a52e:	d0f3      	beq.n	800a518 <floor+0x98>
 800a530:	a30f      	add	r3, pc, #60	; (adr r3, 800a570 <floor+0xf0>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fea1 	bl	800027c <__adddf3>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	f7f6 fae3 	bl	8000b08 <__aeabi_dcmpgt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d0bf      	beq.n	800a4c6 <floor+0x46>
 800a546:	2c00      	cmp	r4, #0
 800a548:	da02      	bge.n	800a550 <floor+0xd0>
 800a54a:	2e14      	cmp	r6, #20
 800a54c:	d103      	bne.n	800a556 <floor+0xd6>
 800a54e:	3401      	adds	r4, #1
 800a550:	ea25 0507 	bic.w	r5, r5, r7
 800a554:	e7b7      	b.n	800a4c6 <floor+0x46>
 800a556:	2301      	movs	r3, #1
 800a558:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a55c:	fa03 f606 	lsl.w	r6, r3, r6
 800a560:	4435      	add	r5, r6
 800a562:	4545      	cmp	r5, r8
 800a564:	bf38      	it	cc
 800a566:	18e4      	addcc	r4, r4, r3
 800a568:	e7f2      	b.n	800a550 <floor+0xd0>
 800a56a:	2500      	movs	r5, #0
 800a56c:	462c      	mov	r4, r5
 800a56e:	e7aa      	b.n	800a4c6 <floor+0x46>
 800a570:	8800759c 	.word	0x8800759c
 800a574:	7e37e43c 	.word	0x7e37e43c
 800a578:	bff00000 	.word	0xbff00000
 800a57c:	000fffff 	.word	0x000fffff

0800a580 <scalbn>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	ec55 4b10 	vmov	r4, r5, d0
 800a586:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a58a:	4606      	mov	r6, r0
 800a58c:	462b      	mov	r3, r5
 800a58e:	b99a      	cbnz	r2, 800a5b8 <scalbn+0x38>
 800a590:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a594:	4323      	orrs	r3, r4
 800a596:	d036      	beq.n	800a606 <scalbn+0x86>
 800a598:	4b39      	ldr	r3, [pc, #228]	; (800a680 <scalbn+0x100>)
 800a59a:	4629      	mov	r1, r5
 800a59c:	ee10 0a10 	vmov	r0, s0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f6 f821 	bl	80005e8 <__aeabi_dmul>
 800a5a6:	4b37      	ldr	r3, [pc, #220]	; (800a684 <scalbn+0x104>)
 800a5a8:	429e      	cmp	r6, r3
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	460d      	mov	r5, r1
 800a5ae:	da10      	bge.n	800a5d2 <scalbn+0x52>
 800a5b0:	a32b      	add	r3, pc, #172	; (adr r3, 800a660 <scalbn+0xe0>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	e03a      	b.n	800a62e <scalbn+0xae>
 800a5b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a5bc:	428a      	cmp	r2, r1
 800a5be:	d10c      	bne.n	800a5da <scalbn+0x5a>
 800a5c0:	ee10 2a10 	vmov	r2, s0
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f5 fe58 	bl	800027c <__adddf3>
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	e019      	b.n	800a606 <scalbn+0x86>
 800a5d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	3a36      	subs	r2, #54	; 0x36
 800a5da:	4432      	add	r2, r6
 800a5dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a5e0:	428a      	cmp	r2, r1
 800a5e2:	dd08      	ble.n	800a5f6 <scalbn+0x76>
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	a120      	add	r1, pc, #128	; (adr r1, 800a668 <scalbn+0xe8>)
 800a5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ec:	da1c      	bge.n	800a628 <scalbn+0xa8>
 800a5ee:	a120      	add	r1, pc, #128	; (adr r1, 800a670 <scalbn+0xf0>)
 800a5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f4:	e018      	b.n	800a628 <scalbn+0xa8>
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	dd08      	ble.n	800a60c <scalbn+0x8c>
 800a5fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a602:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a606:	ec45 4b10 	vmov	d0, r4, r5
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a610:	da19      	bge.n	800a646 <scalbn+0xc6>
 800a612:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a616:	429e      	cmp	r6, r3
 800a618:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a61c:	dd0a      	ble.n	800a634 <scalbn+0xb4>
 800a61e:	a112      	add	r1, pc, #72	; (adr r1, 800a668 <scalbn+0xe8>)
 800a620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1e2      	bne.n	800a5ee <scalbn+0x6e>
 800a628:	a30f      	add	r3, pc, #60	; (adr r3, 800a668 <scalbn+0xe8>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 ffdb 	bl	80005e8 <__aeabi_dmul>
 800a632:	e7cb      	b.n	800a5cc <scalbn+0x4c>
 800a634:	a10a      	add	r1, pc, #40	; (adr r1, 800a660 <scalbn+0xe0>)
 800a636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0b8      	beq.n	800a5b0 <scalbn+0x30>
 800a63e:	a10e      	add	r1, pc, #56	; (adr r1, 800a678 <scalbn+0xf8>)
 800a640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a644:	e7b4      	b.n	800a5b0 <scalbn+0x30>
 800a646:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a64a:	3236      	adds	r2, #54	; 0x36
 800a64c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a650:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a654:	4620      	mov	r0, r4
 800a656:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <scalbn+0x108>)
 800a658:	2200      	movs	r2, #0
 800a65a:	e7e8      	b.n	800a62e <scalbn+0xae>
 800a65c:	f3af 8000 	nop.w
 800a660:	c2f8f359 	.word	0xc2f8f359
 800a664:	01a56e1f 	.word	0x01a56e1f
 800a668:	8800759c 	.word	0x8800759c
 800a66c:	7e37e43c 	.word	0x7e37e43c
 800a670:	8800759c 	.word	0x8800759c
 800a674:	fe37e43c 	.word	0xfe37e43c
 800a678:	c2f8f359 	.word	0xc2f8f359
 800a67c:	81a56e1f 	.word	0x81a56e1f
 800a680:	43500000 	.word	0x43500000
 800a684:	ffff3cb0 	.word	0xffff3cb0
 800a688:	3c900000 	.word	0x3c900000

0800a68c <_init>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	bf00      	nop
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr

0800a698 <_fini>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	bf00      	nop
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr
