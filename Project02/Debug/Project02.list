
Project02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d68  08004d68  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000030  08004da0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004da0  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010535  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4c  00000000  00000000  00030595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000324e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274fc  00000000  00000000  00034190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001145c  00000000  00000000  0005b68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f463a  00000000  00000000  0006cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dcc  00000000  00000000  00161174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c14 	.word	0x08004c14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08004c14 	.word	0x08004c14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setup>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setup() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	// Set servo to position 0
    TIM2->CCR1 = POSITION_0;
 80004d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
    TIM3->CCR1 = POSITION_0;
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <setup+0xa0>)
 80004dc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
    // Set the recipes to the servos
    servo_one.recipe = recipe_demo;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <setup+0xa4>)
 80004e4:	4a23      	ldr	r2, [pc, #140]	; (8000574 <setup+0xa8>)
 80004e6:	601a      	str	r2, [r3, #0]
    servo_two.recipe = recipe2;
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <setup+0xac>)
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <setup+0xb0>)
 80004ec:	601a      	str	r2, [r3, #0]
    // Set up servo profiles
    servo_one.command = none;
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <setup+0xa4>)
 80004f0:	2206      	movs	r2, #6
 80004f2:	711a      	strb	r2, [r3, #4]
    servo_two.command = none;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <setup+0xac>)
 80004f6:	2206      	movs	r2, #6
 80004f8:	711a      	strb	r2, [r3, #4]
    servo_one.position = 0;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <setup+0xa4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	715a      	strb	r2, [r3, #5]
    servo_two.position = 0;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <setup+0xac>)
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    servo_one.recipe_index = 0;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <setup+0xa4>)
 8000508:	2200      	movs	r2, #0
 800050a:	719a      	strb	r2, [r3, #6]
    servo_two.recipe_index = 0;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <setup+0xac>)
 800050e:	2200      	movs	r2, #0
 8000510:	719a      	strb	r2, [r3, #6]
    servo_one.status = status_paused;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <setup+0xa4>)
 8000514:	2201      	movs	r2, #1
 8000516:	71da      	strb	r2, [r3, #7]
    servo_two.status = status_paused;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <setup+0xac>)
 800051a:	2201      	movs	r2, #1
 800051c:	71da      	strb	r2, [r3, #7]
    servo_one.wait_cnt = 0;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <setup+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	721a      	strb	r2, [r3, #8]
    servo_two.wait_cnt = 0;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <setup+0xac>)
 8000526:	2200      	movs	r2, #0
 8000528:	721a      	strb	r2, [r3, #8]
    servo_one.loop_cnt = 0;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <setup+0xa4>)
 800052c:	2200      	movs	r2, #0
 800052e:	72da      	strb	r2, [r3, #11]
    servo_two.loop_cnt = 0;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <setup+0xac>)
 8000532:	2200      	movs	r2, #0
 8000534:	72da      	strb	r2, [r3, #11]
    servo_one.move_wait = 0;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <setup+0xa4>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
    servo_two.move_wait = 0;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <setup+0xac>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
    servo_one.sweep_cnt = 0;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <setup+0xa4>)
 8000544:	2200      	movs	r2, #0
 8000546:	751a      	strb	r2, [r3, #20]
    servo_two.sweep_cnt = 0;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <setup+0xac>)
 800054a:	2200      	movs	r2, #0
 800054c:	751a      	strb	r2, [r3, #20]
    servo_one.nest_prot = 0;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <setup+0xa4>)
 8000550:	2200      	movs	r2, #0
 8000552:	755a      	strb	r2, [r3, #21]
    servo_two.nest_prot = 0;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <setup+0xac>)
 8000556:	2200      	movs	r2, #0
 8000558:	755a      	strb	r2, [r3, #21]

    // Ask initial prompt
    USART_Write(USART2, prompt, 202);
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <setup+0xb4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	22ca      	movs	r2, #202	; 0xca
 8000560:	4619      	mov	r1, r3
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <setup+0xb8>)
 8000564:	f000 fdf4 	bl	8001150 <USART_Write>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40000400 	.word	0x40000400
 8000570:	200001b4 	.word	0x200001b4
 8000574:	20000010 	.word	0x20000010
 8000578:	200001cc 	.word	0x200001cc
 800057c:	20000008 	.word	0x20000008
 8000580:	20000004 	.word	0x20000004
 8000584:	40004400 	.word	0x40004400

08000588 <update_leds>:

void update_leds(enum status status){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	switch (status) {
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d83b      	bhi.n	8000610 <update_leds+0x88>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <update_leds+0x18>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b1 	.word	0x080005b1
 80005a4:	080005c9 	.word	0x080005c9
 80005a8:	080005e1 	.word	0x080005e1
 80005ac:	080005f9 	.word	0x080005f9
		case status_running:
			set_led(1, GPIOA, LED01_Pin);			// D1: on
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 ff0c 	bl	80013d4 <set_led>
			set_led(0, LED02_GPIO_Port, LED02_Pin);	// D2: off
 80005bc:	2240      	movs	r2, #64	; 0x40
 80005be:	4917      	ldr	r1, [pc, #92]	; (800061c <update_leds+0x94>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 ff07 	bl	80013d4 <set_led>
			break;
 80005c6:	e024      	b.n	8000612 <update_leds+0x8a>
		case status_paused:
			set_led(0, GPIOA, LED01_Pin);			// D1: off
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 ff00 	bl	80013d4 <set_led>
			set_led(0, LED02_GPIO_Port, LED02_Pin);	// D2: off
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	4911      	ldr	r1, [pc, #68]	; (800061c <update_leds+0x94>)
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fefb 	bl	80013d4 <set_led>
			break;
 80005de:	e018      	b.n	8000612 <update_leds+0x8a>
		case status_command_error:
			set_led(0, GPIOA, LED01_Pin);			// D1: off
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 fef4 	bl	80013d4 <set_led>
			set_led(1, LED02_GPIO_Port, LED02_Pin);	// D2: on
 80005ec:	2240      	movs	r2, #64	; 0x40
 80005ee:	490b      	ldr	r1, [pc, #44]	; (800061c <update_leds+0x94>)
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 feef 	bl	80013d4 <set_led>
			break;
 80005f6:	e00c      	b.n	8000612 <update_leds+0x8a>
		case status_nested_error:
			set_led(1, GPIOA, LED01_Pin);			// D1: on
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fee8 	bl	80013d4 <set_led>
			set_led(1, LED02_GPIO_Port, LED02_Pin);	// D2: on
 8000604:	2240      	movs	r2, #64	; 0x40
 8000606:	4905      	ldr	r1, [pc, #20]	; (800061c <update_leds+0x94>)
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fee3 	bl	80013d4 <set_led>
			break;
 800060e:	e000      	b.n	8000612 <update_leds+0x8a>
		default:
			break;
 8000610:	bf00      	nop
	}
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	48000400 	.word	0x48000400

08000620 <update_servo>:


void update_servo(struct servo_profile_t *profile, TIM_TypeDef *TIMx){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	int diff;

	switch (profile->command) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	2b05      	cmp	r3, #5
 8000630:	d87f      	bhi.n	8000732 <update_servo+0x112>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <update_servo+0x18>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	0800069b 	.word	0x0800069b
 800063c:	080006ab 	.word	0x080006ab
 8000640:	080006b3 	.word	0x080006b3
 8000644:	080006ef 	.word	0x080006ef
 8000648:	0800072b 	.word	0x0800072b
 800064c:	08000651 	.word	0x08000651
		case servo_begin:
			// Get the current time if this starting/resuming
			if (profile->status == status_paused) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	79db      	ldrb	r3, [r3, #7]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d107      	bne.n	8000668 <update_servo+0x48>
				profile->comp_time = TIMx->CNT;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
				profile->status = status_running;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	71da      	strb	r2, [r3, #7]
					perform_recipe(profile, TIMx);
					// Set the new comparison time
					profile->comp_time = TIM4->CNT;
				}
			}
			break;
 8000666:	e066      	b.n	8000736 <update_servo+0x116>
				diff = ((TIM4->CNT) - profile->comp_time);
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <update_servo+0x124>)
 800066a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				if (diff >= ( TIME_100MS + profile->move_wait)){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	429a      	cmp	r2, r3
 8000680:	d859      	bhi.n	8000736 <update_servo+0x116>
					profile->move_wait = 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
					perform_recipe(profile, TIMx);
 8000688:	6839      	ldr	r1, [r7, #0]
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f85c 	bl	8000748 <perform_recipe>
					profile->comp_time = TIM4->CNT;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <update_servo+0x124>)
 8000692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
			break;
 8000698:	e04d      	b.n	8000736 <update_servo+0x116>
		case servo_pause:
			if (profile->status == status_running) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	79db      	ldrb	r3, [r3, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d14b      	bne.n	800073a <update_servo+0x11a>
				profile->status = status_paused;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2201      	movs	r2, #1
 80006a6:	71da      	strb	r2, [r3, #7]
			}
			break;
 80006a8:	e047      	b.n	800073a <update_servo+0x11a>
		case servo_continue:
			profile->command = servo_begin;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2205      	movs	r2, #5
 80006ae:	711a      	strb	r2, [r3, #4]
			break;
 80006b0:	e044      	b.n	800073c <update_servo+0x11c>
		case servo_right:
			if ((profile->status == status_paused || profile->command == none) && profile->position > 0) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	79db      	ldrb	r3, [r3, #7]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d003      	beq.n	80006c2 <update_servo+0xa2>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d111      	bne.n	80006e6 <update_servo+0xc6>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	795b      	ldrb	r3, [r3, #5]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00d      	beq.n	80006e6 <update_servo+0xc6>
				profile->position -= 1;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	795b      	ldrb	r3, [r3, #5]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	715a      	strb	r2, [r3, #5]
				TIMx->CCR1 = get_duty_cycle_from_position(profile->position);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fe20 	bl	8001320 <get_duty_cycle_from_position>
 80006e0:	4602      	mov	r2, r0
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
			}
			profile->command = none;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2206      	movs	r2, #6
 80006ea:	711a      	strb	r2, [r3, #4]
			break;
 80006ec:	e026      	b.n	800073c <update_servo+0x11c>
		case servo_left:
			if ((profile->status == status_paused || profile->command == none) && profile->position < 5) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	79db      	ldrb	r3, [r3, #7]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d003      	beq.n	80006fe <update_servo+0xde>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d111      	bne.n	8000722 <update_servo+0x102>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b04      	cmp	r3, #4
 8000704:	d80d      	bhi.n	8000722 <update_servo+0x102>
				profile->position += 1;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	795b      	ldrb	r3, [r3, #5]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	715a      	strb	r2, [r3, #5]
				TIMx->CCR1 = get_duty_cycle_from_position(profile->position);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fe02 	bl	8001320 <get_duty_cycle_from_position>
 800071c:	4602      	mov	r2, r0
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
			}
			profile->command = none;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2206      	movs	r2, #6
 8000726:	711a      	strb	r2, [r3, #4]
			break;
 8000728:	e008      	b.n	800073c <update_servo+0x11c>
		case servo_no_op:
			profile->command = none;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2206      	movs	r2, #6
 800072e:	711a      	strb	r2, [r3, #4]
			break;
 8000730:	e004      	b.n	800073c <update_servo+0x11c>
		default:
			break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <update_servo+0x11c>
			break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <update_servo+0x11c>
			break;
 800073a:	bf00      	nop
	}

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40000800 	.word	0x40000800

08000748 <perform_recipe>:

void perform_recipe(struct servo_profile_t *profile, TIM_TypeDef *TIMx) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	uint8_t curr_item      = profile->recipe[profile->recipe_index];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7992      	ldrb	r2, [r2, #6]
 800075a:	4413      	add	r3, r2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	73fb      	strb	r3, [r7, #15]
	uint8_t op_mask 	   = 0b11100000;
 8000760:	23e0      	movs	r3, #224	; 0xe0
 8000762:	73bb      	strb	r3, [r7, #14]
	uint8_t parameter_mask = 0b00011111;
 8000764:	231f      	movs	r3, #31
 8000766:	737b      	strb	r3, [r7, #13]
	uint8_t opcode;
	uint8_t parameter;

	// Get the opcode
	opcode = (curr_item & op_mask) >> 5;
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	4013      	ands	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	095b      	lsrs	r3, r3, #5
 8000772:	733b      	strb	r3, [r7, #12]
	parameter = (curr_item & parameter_mask);
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	7b7b      	ldrb	r3, [r7, #13]
 8000778:	4013      	ands	r3, r2
 800077a:	72fb      	strb	r3, [r7, #11]
	switch(opcode) {
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	2b05      	cmp	r3, #5
 8000780:	f200 80d6 	bhi.w	8000930 <perform_recipe+0x1e8>
 8000784:	a201      	add	r2, pc, #4	; (adr r2, 800078c <perform_recipe+0x44>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	0800091d 	.word	0x0800091d
 8000790:	080007a5 	.word	0x080007a5
 8000794:	080007db 	.word	0x080007db
 8000798:	08000879 	.word	0x08000879
 800079c:	08000801 	.word	0x08000801
 80007a0:	08000843 	.word	0x08000843
		case (MOV >> OPCODE_SHIFT):
			profile->move_wait = get_move_wait(profile->position, parameter);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fdeb 	bl	8001388 <get_move_wait>
 80007b2:	4602      	mov	r2, r0
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	611a      	str	r2, [r3, #16]
			profile->position = parameter;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7afa      	ldrb	r2, [r7, #11]
 80007bc:	715a      	strb	r2, [r3, #5]
			TIMx->CCR1 = get_duty_cycle_from_position(parameter);
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fdad 	bl	8001320 <get_duty_cycle_from_position>
 80007c6:	4602      	mov	r2, r0
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
			profile->recipe_index++;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	799b      	ldrb	r3, [r3, #6]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	719a      	strb	r2, [r3, #6]
			break;
 80007d8:	e0b1      	b.n	800093e <perform_recipe+0x1f6>
		case (WAIT >> OPCODE_SHIFT):
			if (profile->wait_cnt < parameter) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	7afa      	ldrb	r2, [r7, #11]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d906      	bls.n	80007f2 <perform_recipe+0xaa>
				profile->wait_cnt++;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7a1b      	ldrb	r3, [r3, #8]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	721a      	strb	r2, [r3, #8]
			}
			else {
				profile->recipe_index++;
			}
			break;
 80007f0:	e0a5      	b.n	800093e <perform_recipe+0x1f6>
				profile->recipe_index++;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	719a      	strb	r2, [r3, #6]
			break;
 80007fe:	e09e      	b.n	800093e <perform_recipe+0x1f6>
		case (LOOP >> OPCODE_SHIFT):
			// increase nest protection to make sure there is no nested for loops
			profile->nest_prot++;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7d5b      	ldrb	r3, [r3, #21]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	755a      	strb	r2, [r3, #21]
			// Save the start of the loop
			profile->loop_start_index = profile->recipe_index + 1;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	799b      	ldrb	r3, [r3, #6]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	725a      	strb	r2, [r3, #9]
			// Save the amount of loops needed to be
			profile->loop_amt = parameter;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7afa      	ldrb	r2, [r7, #11]
 800081c:	729a      	strb	r2, [r3, #10]
			profile->recipe_index++;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	799b      	ldrb	r3, [r3, #6]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	719a      	strb	r2, [r3, #6]
			if (profile->nest_prot > 1) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7d5b      	ldrb	r3, [r3, #21]
 800082e:	2b01      	cmp	r3, #1
 8000830:	f240 8082 	bls.w	8000938 <perform_recipe+0x1f0>
				profile->status = status_nested_error;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2203      	movs	r2, #3
 8000838:	71da      	strb	r2, [r3, #7]
				profile->command = servo_pause;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	711a      	strb	r2, [r3, #4]
			}
			break;
 8000840:	e07a      	b.n	8000938 <perform_recipe+0x1f0>
		case (END_LOOP >> OPCODE_SHIFT):
			profile->loop_cnt++;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7adb      	ldrb	r3, [r3, #11]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	72da      	strb	r2, [r3, #11]
			if (profile->loop_cnt > profile->loop_amt) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7ada      	ldrb	r2, [r3, #11]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7a9b      	ldrb	r3, [r3, #10]
 8000856:	429a      	cmp	r2, r3
 8000858:	d909      	bls.n	800086e <perform_recipe+0x126>
				profile->recipe_index++;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	799b      	ldrb	r3, [r3, #6]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	719a      	strb	r2, [r3, #6]
				profile->nest_prot = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	755a      	strb	r2, [r3, #21]
			}
			else {
				profile->recipe_index = profile->loop_start_index;
			}
			break;
 800086c:	e067      	b.n	800093e <perform_recipe+0x1f6>
				profile->recipe_index = profile->loop_start_index;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a5a      	ldrb	r2, [r3, #9]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	719a      	strb	r2, [r3, #6]
			break;
 8000876:	e062      	b.n	800093e <perform_recipe+0x1f6>
		case (SWEEP >> OPCODE_SHIFT):
			if ((profile->sweep_cnt / 2) <= parameter) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7d1b      	ldrb	r3, [r3, #20]
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	7afa      	ldrb	r2, [r7, #11]
 8000882:	429a      	cmp	r2, r3
 8000884:	d343      	bcc.n	800090e <perform_recipe+0x1c6>
				if (profile->sweep_cnt == 0 || (profile->sweep_cnt % 2) != 0) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7d1b      	ldrb	r3, [r3, #20]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <perform_recipe+0x154>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7d1b      	ldrb	r3, [r3, #20]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d018      	beq.n	80008ce <perform_recipe+0x186>
					profile->move_wait = get_move_wait(profile->position, 0);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fd70 	bl	8001388 <get_move_wait>
 80008a8:	4602      	mov	r2, r0
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	611a      	str	r2, [r3, #16]
					profile->position = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	715a      	strb	r2, [r3, #5]
					TIMx->CCR1 = get_duty_cycle_from_position(0);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 fd33 	bl	8001320 <get_duty_cycle_from_position>
 80008ba:	4602      	mov	r2, r0
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
					profile->sweep_cnt++;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7d1b      	ldrb	r3, [r3, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	751a      	strb	r2, [r3, #20]
				}
			}
			else {
				profile->recipe_index++;
			}
			break;
 80008cc:	e036      	b.n	800093c <perform_recipe+0x1f4>
				else if ((profile->sweep_cnt % 2) == 0) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7d1b      	ldrb	r3, [r3, #20]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d12f      	bne.n	800093c <perform_recipe+0x1f4>
					profile->move_wait = get_move_wait(profile->position, 5);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	2105      	movs	r1, #5
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fd50 	bl	8001388 <get_move_wait>
 80008e8:	4602      	mov	r2, r0
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	611a      	str	r2, [r3, #16]
					profile->position = 5;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2205      	movs	r2, #5
 80008f2:	715a      	strb	r2, [r3, #5]
					TIMx->CCR1 = get_duty_cycle_from_position(5);
 80008f4:	2005      	movs	r0, #5
 80008f6:	f000 fd13 	bl	8001320 <get_duty_cycle_from_position>
 80008fa:	4602      	mov	r2, r0
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
					profile->sweep_cnt++;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7d1b      	ldrb	r3, [r3, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	751a      	strb	r2, [r3, #20]
			break;
 800090c:	e016      	b.n	800093c <perform_recipe+0x1f4>
				profile->recipe_index++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	3301      	adds	r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	719a      	strb	r2, [r3, #6]
			break;
 800091a:	e00f      	b.n	800093c <perform_recipe+0x1f4>
		case RECIPE_END:
			profile->status = servo_pause;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	71da      	strb	r2, [r3, #7]
			profile->command = none;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2206      	movs	r2, #6
 8000926:	711a      	strb	r2, [r3, #4]
			profile->recipe_index = 0;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	719a      	strb	r2, [r3, #6]
			break;
 800092e:	e006      	b.n	800093e <perform_recipe+0x1f6>
		default:
			profile->status = status_command_error;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2202      	movs	r2, #2
 8000934:	71da      	strb	r2, [r3, #7]
			break;
 8000936:	e002      	b.n	800093e <perform_recipe+0x1f6>
			break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <perform_recipe+0x1f6>
			break;
 800093c:	bf00      	nop
	}

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fd88 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f83a 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f000 fa08 	bl	8000d68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000958:	f000 f9d6 	bl	8000d08 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800095c:	f000 f886 	bl	8000a6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000960:	f000 f902 	bl	8000b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000964:	f000 f97e 	bl	8000c64 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000968:	f7ff fdb0 	bl	80004cc <setup>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// *** THIS LOOP CANNOT BE BLOCKING
	// Check user input
	if (get_servo_process(commands, USART2)) {
 800096c:	4911      	ldr	r1, [pc, #68]	; (80009b4 <main+0x6c>)
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <main+0x70>)
 8000970:	f000 fc20 	bl	80011b4 <get_servo_process>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00d      	beq.n	8000996 <main+0x4e>
		// Update servo's commands
		servo_one.command = commands[0];
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <main+0x70>)
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <main+0x74>)
 8000980:	711a      	strb	r2, [r3, #4]
		servo_two.command = commands[1];
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <main+0x70>)
 8000984:	785a      	ldrb	r2, [r3, #1]
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <main+0x78>)
 8000988:	711a      	strb	r2, [r3, #4]
		// remove the commands
		commands[0] = none;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <main+0x70>)
 800098c:	2206      	movs	r2, #6
 800098e:	701a      	strb	r2, [r3, #0]
		commands[1] = none;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <main+0x70>)
 8000992:	2206      	movs	r2, #6
 8000994:	705a      	strb	r2, [r3, #1]
	}
	// Run servo process if active
	update_servo(&servo_one, TIM2);
 8000996:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <main+0x74>)
 800099c:	f7ff fe40 	bl	8000620 <update_servo>
	update_servo(&servo_two, TIM3);
 80009a0:	4908      	ldr	r1, [pc, #32]	; (80009c4 <main+0x7c>)
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <main+0x78>)
 80009a4:	f7ff fe3c 	bl	8000620 <update_servo>
	// update LEDs (only with respects to servo one)
	update_leds(servo_one.status);
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <main+0x74>)
 80009aa:	79db      	ldrb	r3, [r3, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fdeb 	bl	8000588 <update_leds>
	if (get_servo_process(commands, USART2)) {
 80009b2:	e7db      	b.n	800096c <main+0x24>
 80009b4:	40004400 	.word	0x40004400
 80009b8:	20000000 	.word	0x20000000
 80009bc:	200001b4 	.word	0x200001b4
 80009c0:	200001cc 	.word	0x200001cc
 80009c4:	40000400 	.word	0x40000400

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b096      	sub	sp, #88	; 0x58
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2244      	movs	r2, #68	; 0x44
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f914 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ee:	f001 f869 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009f8:	f000 fa32 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2310      	movs	r3, #16
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a16:	230a      	movs	r3, #10
 8000a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f8a0 	bl	8001b70 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a36:	f000 fa13 	bl	8000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2104      	movs	r1, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fc68 	bl	8002328 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a5e:	f000 f9ff 	bl	8000e60 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000aa8:	224f      	movs	r2, #79	; 0x4f
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000ab4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac6:	4827      	ldr	r0, [pc, #156]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000ac8:	f002 fb0e 	bl	80030e8 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 f9c5 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4820      	ldr	r0, [pc, #128]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000ae4:	f002 fe32 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aee:	f000 f9b7 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af2:	481c      	ldr	r0, [pc, #112]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000af4:	f002 fbb8 	bl	8003268 <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000afe:	f000 f9af 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000b12:	f003 fb15 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b1c:	f000 f9a0 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b20:	2360      	movs	r3, #96	; 0x60
 8000b22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000b38:	f002 fcf4 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b42:	f000 f98d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000b48:	f002 fb26 	bl	8003198 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000b50:	f002 fbec 	bl	800332c <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM2_Init+0xf8>)
 8000b56:	f000 f9f3 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000004c 	.word	0x2000004c

08000b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000b9c:	4a30      	ldr	r2, [pc, #192]	; (8000c60 <MX_TIM3_Init+0xf8>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000ba2:	224f      	movs	r2, #79	; 0x4f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc0:	4826      	ldr	r0, [pc, #152]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bc2:	f002 fa91 	bl	80030e8 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bcc:	f000 f948 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bde:	f002 fdb5 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000be8:	f000 f93a 	bl	8000e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bec:	481b      	ldr	r0, [pc, #108]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000bee:	f002 fb3b 	bl	8003268 <HAL_TIM_PWM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bf8:	f000 f932 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000c0c:	f003 fa98 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c16:	f000 f923 	bl	8000e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1a:	2360      	movs	r3, #96	; 0x60
 8000c1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000c32:	f002 fc77 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c3c:	f000 f910 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000c42:	f002 faa9 	bl	8003198 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8000c46:	2100      	movs	r1, #0
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000c4a:	f002 fb6f 	bl	800332c <HAL_TIM_IC_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM3_Init+0xf4>)
 8000c50:	f000 f976 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000098 	.word	0x20000098
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000c84:	4a1f      	ldr	r2, [pc, #124]	; (8000d04 <MX_TIM4_Init+0xa0>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7999;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000c8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000cac:	f002 fa1c 	bl	80030e8 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cb6:	f000 f8d3 	bl	8000e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000cc8:	f002 fd40 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cd2:	f000 f8c5 	bl	8000e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000ce4:	f003 fa2c 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000cee:	f000 f8b7 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start(&htim4);
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_TIM4_Init+0x9c>)
 8000cf4:	f002 fa50 	bl	8003198 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000e4 	.word	0x200000e4
 8000d04:	40000800 	.word	0x40000800

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_USART2_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d4c:	f003 fa80 	bl	8004250 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 f883 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000130 	.word	0x20000130
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_GPIO_Init+0xec>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED01_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	21a0      	movs	r1, #160	; 0xa0
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f000 fe47 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED02_GPIO_Port, LED02_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	481a      	ldr	r0, [pc, #104]	; (8000e58 <MX_GPIO_Init+0xf0>)
 8000df0:	f000 fe42 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <MX_GPIO_Init+0xf4>)
 8000e0c:	f000 fc8a 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED01_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED01_Pin;
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fc7b 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED02_Pin */
  GPIO_InitStruct.Pin = LED02_Pin;
 8000e2e:	2340      	movs	r3, #64	; 0x40
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED02_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0xf0>)
 8000e46:	f000 fc6d 	bl	8001724 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ede:	e022      	b.n	8000f26 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_TIM_Base_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10c      	bne.n	8000f04 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
}
 8000f02:	e010      	b.n	8000f26 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <HAL_TIM_Base_MspInit+0x88>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10b      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	40000800 	.word	0x40000800

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d11d      	bne.n	8000f9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f000 fbc4 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f9c:	e021      	b.n	8000fe2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <HAL_TIM_MspPostInit+0xb0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d11c      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_TIM_MspPostInit+0xac>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 fba1 	bl	8001724 <HAL_GPIO_Init>
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40000400 	.word	0x40000400

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ac      	sub	sp, #176	; 0xb0
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2288      	movs	r2, #136	; 0x88
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fdf5 	bl	8004c04 <memset>
  if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_UART_MspInit+0xb0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d13b      	bne.n	800109c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fb9d 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800103c:	f7ff ff10 	bl	8000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_UART_MspInit+0xb4>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001070:	230c      	movs	r3, #12
 8001072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001088:	2307      	movs	r3, #7
 800108a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f000 fb44 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800109c:	bf00      	nop
 800109e:	37b0      	adds	r7, #176	; 0xb0
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 fa0e 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <USART_Read>:
	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
}

// ***** MODIFIED TO NOT GET STUCK WAITING FOR INPUT *****
uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)) {  // Wait until RXNE (RX not empty) bit is set
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <USART_Read+0x1e>
		// USART resets the RXNE flag automatically after reading DR
		return ((uint8_t)(USARTx->RDR & 0xFF));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	e000      	b.n	8001144 <USART_Read+0x20>
	}
	else {
		return '\0';
 8001142:	2300      	movs	r3, #0
	}
	// Reading USART_DR automatically clears the RXNE flag 
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e010      	b.n	8001184 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001162:	bf00      	nop
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f9      	beq.n	8001164 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b29a      	uxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8ea      	bhi.n	8001162 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 800118c:	bf00      	nop
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f9      	beq.n	800118e <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	61da      	str	r2, [r3, #28]
}   
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <get_servo_process>:
static uint8_t index = 0; // 0 = servo 0, 1 = servo 1

// Gets the commands inputted into the terminal
// Will add the commands to an array that contains the two servo instructions [servo0 command, servo1 command]
//
_Bool get_servo_process(servo_commands_t *entered, USART_TypeDef * USARTx) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	char read;

	// Get what servo we are commanding
	if (entered[0] == none) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d103      	bne.n	80011ce <get_servo_process+0x1a>
		index = 0;
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <get_servo_process+0x164>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e007      	b.n	80011de <get_servo_process+0x2a>
	} else if (entered[1] == none) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d102      	bne.n	80011de <get_servo_process+0x2a>
		index = 1;
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <get_servo_process+0x164>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
	}

	// Make sure a character has been gotten
	read = USART_Read(USARTx);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f7ff ffa0 	bl	8001124 <USART_Read>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
	if (read != '\0') {
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 808e 	beq.w	800130c <get_servo_process+0x158>
		// Display inputed char to the terminal
		USART_Write(USARTx, &read, 1);
 80011f0:	f107 030f 	add.w	r3, r7, #15
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	6838      	ldr	r0, [r7, #0]
 80011fa:	f7ff ffa9 	bl	8001150 <USART_Write>
		switch (read) {
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b0d      	cmp	r3, #13
 8001202:	d071      	beq.n	80012e8 <get_servo_process+0x134>
 8001204:	2b0d      	cmp	r3, #13
 8001206:	db76      	blt.n	80012f6 <get_servo_process+0x142>
 8001208:	2b78      	cmp	r3, #120	; 0x78
 800120a:	dc74      	bgt.n	80012f6 <get_servo_process+0x142>
 800120c:	2b62      	cmp	r3, #98	; 0x62
 800120e:	db72      	blt.n	80012f6 <get_servo_process+0x142>
 8001210:	3b62      	subs	r3, #98	; 0x62
 8001212:	2b16      	cmp	r3, #22
 8001214:	d86f      	bhi.n	80012f6 <get_servo_process+0x142>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <get_servo_process+0x68>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	080012c9 	.word	0x080012c9
 8001220:	08001289 	.word	0x08001289
 8001224:	080012f7 	.word	0x080012f7
 8001228:	080012f7 	.word	0x080012f7
 800122c:	080012f7 	.word	0x080012f7
 8001230:	080012f7 	.word	0x080012f7
 8001234:	080012f7 	.word	0x080012f7
 8001238:	080012f7 	.word	0x080012f7
 800123c:	080012f7 	.word	0x080012f7
 8001240:	080012f7 	.word	0x080012f7
 8001244:	080012a9 	.word	0x080012a9
 8001248:	080012f7 	.word	0x080012f7
 800124c:	080012b9 	.word	0x080012b9
 8001250:	080012f7 	.word	0x080012f7
 8001254:	08001279 	.word	0x08001279
 8001258:	080012f7 	.word	0x080012f7
 800125c:	08001299 	.word	0x08001299
 8001260:	080012f7 	.word	0x080012f7
 8001264:	080012f7 	.word	0x080012f7
 8001268:	080012f7 	.word	0x080012f7
 800126c:	080012f7 	.word	0x080012f7
 8001270:	080012f7 	.word	0x080012f7
 8001274:	080012d9 	.word	0x080012d9
			case 'p':
				entered[index] = servo_pause;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <get_servo_process+0x164>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
				break;
 8001286:	e037      	b.n	80012f8 <get_servo_process+0x144>
			case 'c':
				entered[index] = servo_continue;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <get_servo_process+0x164>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
				break;
 8001296:	e02f      	b.n	80012f8 <get_servo_process+0x144>
			case 'r':
				entered[index] = servo_right;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <get_servo_process+0x164>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]
				break;
 80012a6:	e027      	b.n	80012f8 <get_servo_process+0x144>
			case 'l':
				entered[index] = servo_left;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <get_servo_process+0x164>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	2203      	movs	r2, #3
 80012b4:	701a      	strb	r2, [r3, #0]
				break;
 80012b6:	e01f      	b.n	80012f8 <get_servo_process+0x144>
			case 'n':
				entered[index] = servo_no_op;
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <get_servo_process+0x164>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	2204      	movs	r2, #4
 80012c4:	701a      	strb	r2, [r3, #0]
				break;
 80012c6:	e017      	b.n	80012f8 <get_servo_process+0x144>
			case 'b':
				entered[index] = servo_begin;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <get_servo_process+0x164>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	2205      	movs	r2, #5
 80012d4:	701a      	strb	r2, [r3, #0]
				break;
 80012d6:	e00f      	b.n	80012f8 <get_servo_process+0x144>
			case 'x':
				// reset the entered commands
				entered[0] = none;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2206      	movs	r2, #6
 80012dc:	701a      	strb	r2, [r3, #0]
				entered[1] = none;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3301      	adds	r3, #1
 80012e2:	2206      	movs	r2, #6
 80012e4:	701a      	strb	r2, [r3, #0]
				break;
 80012e6:	e007      	b.n	80012f8 <get_servo_process+0x144>
			case CR:
				USART_Write(USARTx, "\r\n Performing Commands... \r\n", 29);
 80012e8:	221d      	movs	r2, #29
 80012ea:	490c      	ldr	r1, [pc, #48]	; (800131c <get_servo_process+0x168>)
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7ff ff2f 	bl	8001150 <USART_Write>
				return TRUE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00b      	b.n	800130e <get_servo_process+0x15a>
				break;
			default:
				break;
 80012f6:	bf00      	nop
		}
		if (index == 0) { index++; }
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <get_servo_process+0x164>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <get_servo_process+0x158>
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <get_servo_process+0x164>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <get_servo_process+0x164>)
 800130a:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001e4 	.word	0x200001e4
 800131c:	08004cf8 	.word	0x08004cf8

08001320 <get_duty_cycle_from_position>:

uint32_t get_duty_cycle_from_position(uint8_t position) {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	switch (position) {
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d821      	bhi.n	8001374 <get_duty_cycle_from_position+0x54>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <get_duty_cycle_from_position+0x18>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001351 	.word	0x08001351
 800133c:	08001357 	.word	0x08001357
 8001340:	0800135d 	.word	0x0800135d
 8001344:	08001363 	.word	0x08001363
 8001348:	08001369 	.word	0x08001369
 800134c:	0800136f 	.word	0x0800136f
		case 0:
			return POSITION_0;
 8001350:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
 8001354:	e011      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		case 1:
			return POSITION_1;
 8001356:	f44f 7342 	mov.w	r3, #776	; 0x308
 800135a:	e00e      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		case 2:
			return POSITION_2;
 800135c:	f240 433a 	movw	r3, #1082	; 0x43a
 8001360:	e00b      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		case 3:
			return POSITION_3;
 8001362:	f240 536c 	movw	r3, #1388	; 0x56c
 8001366:	e008      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		case 4:
			return POSITION_4;
 8001368:	f240 639e 	movw	r3, #1694	; 0x69e
 800136c:	e005      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		case 5:
			return POSITION_5;
 800136e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001372:	e002      	b.n	800137a <get_duty_cycle_from_position+0x5a>
		default:
			break;
 8001374:	bf00      	nop
	}
	return POSITION_0;
 8001376:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <get_move_wait>:

uint32_t get_move_wait(uint8_t old_position, uint8_t new_position){
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
	uint8_t difference;
	uint32_t move_wait;

	if (old_position >= new_position) {
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	429a      	cmp	r2, r3
 800139e:	d304      	bcc.n	80013aa <get_move_wait+0x22>
		difference = old_position - new_position;
 80013a0:	79fa      	ldrb	r2, [r7, #7]
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e007      	b.n	80013ba <get_move_wait+0x32>
	}
	else if (new_position > old_position) {
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d903      	bls.n	80013ba <get_move_wait+0x32>
		difference = new_position - old_position;
 80013b2:	79ba      	ldrb	r2, [r7, #6]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	73fb      	strb	r3, [r7, #15]
	}
	move_wait = difference * POSITION_MOVE_WAIT;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	60bb      	str	r3, [r7, #8]
	return move_wait;
 80013c6:	68bb      	ldr	r3, [r7, #8]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <set_led>:

void set_led( uint32_t on, GPIO_TypeDef *GPIO,  uint16_t pin){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	80fb      	strh	r3, [r7, #6]
	if ( on ) // a5
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <set_led+0x22>
		HAL_GPIO_WritePin(GPIO, pin, GPIO_PIN_RESET);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f000 fb42 	bl	8001a78 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIO, pin, GPIO_PIN_SET);
}
 80013f4:	e005      	b.n	8001402 <set_led+0x2e>
		HAL_GPIO_WritePin(GPIO, pin, GPIO_PIN_SET);
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f000 fb3b 	bl	8001a78 <HAL_GPIO_WritePin>
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001444 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001410:	f7ff fe76 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopForever+0x6>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopForever+0xe>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopForever+0x16>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143a:	f003 fbbf 	bl	8004bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143e:	f7ff fa83 	bl	8000948 <main>

08001442 <LoopForever>:

LoopForever:
    b LoopForever
 8001442:	e7fe      	b.n	8001442 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001450:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 8001454:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001458:	200001ec 	.word	0x200001ec

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>
	...

08001460 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_Init+0x3c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_Init+0x3c>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f000 f920 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f80f 	bl	80014a0 <HAL_InitTick>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	e001      	b.n	8001492 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148e:	f7ff fced 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001492:	79fb      	ldrb	r3, [r7, #7]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40022000 	.word	0x40022000

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_InitTick+0x6c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d023      	beq.n	80014fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_InitTick+0x70>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_InitTick+0x6c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f91d 	bl	800170a <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d809      	bhi.n	80014f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f8f5 	bl	80016d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_InitTick+0x74>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e007      	b.n	8001500 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e004      	b.n	8001500 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e001      	b.n	8001500 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000002c 	.word	0x2000002c
 8001510:	20000024 	.word	0x20000024
 8001514:	20000028 	.word	0x20000028

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000002c 	.word	0x2000002c
 800153c:	200001e8 	.word	0x200001e8

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200001e8 	.word	0x200001e8

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff47 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff5c 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb0 	bl	8001678 <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001732:	e17f      	b.n	8001a34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8171 	beq.w	8001a2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x40>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 0201 	and.w	r2, r3, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d118      	bne.n	8001804 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	6939      	ldr	r1, [r7, #16]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80ac 	beq.w	8001a2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b5f      	ldr	r3, [pc, #380]	; (8001a54 <HAL_GPIO_Init+0x330>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	4a5e      	ldr	r2, [pc, #376]	; (8001a54 <HAL_GPIO_Init+0x330>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6613      	str	r3, [r2, #96]	; 0x60
 80018e2:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_GPIO_Init+0x330>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x334>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001918:	d025      	beq.n	8001966 <HAL_GPIO_Init+0x242>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <HAL_GPIO_Init+0x338>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d01f      	beq.n	8001962 <HAL_GPIO_Init+0x23e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4e      	ldr	r2, [pc, #312]	; (8001a60 <HAL_GPIO_Init+0x33c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d019      	beq.n	800195e <HAL_GPIO_Init+0x23a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <HAL_GPIO_Init+0x340>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0x236>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_GPIO_Init+0x344>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00d      	beq.n	8001956 <HAL_GPIO_Init+0x232>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_GPIO_Init+0x348>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d007      	beq.n	8001952 <HAL_GPIO_Init+0x22e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x34c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_GPIO_Init+0x22a>
 800194a:	2306      	movs	r3, #6
 800194c:	e00c      	b.n	8001968 <HAL_GPIO_Init+0x244>
 800194e:	2307      	movs	r3, #7
 8001950:	e00a      	b.n	8001968 <HAL_GPIO_Init+0x244>
 8001952:	2305      	movs	r3, #5
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x244>
 8001956:	2304      	movs	r3, #4
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x244>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x244>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x244>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x244>
 8001966:	2300      	movs	r3, #0
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	f002 0203 	and.w	r2, r2, #3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001978:	4937      	ldr	r1, [pc, #220]	; (8001a58 <HAL_GPIO_Init+0x334>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_GPIO_Init+0x350>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_GPIO_Init+0x350>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x350>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_GPIO_Init+0x350>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_GPIO_Init+0x350>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_GPIO_Init+0x350>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x350>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_GPIO_Init+0x350>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f47f ae78 	bne.w	8001734 <HAL_GPIO_Init+0x10>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000c00 	.word	0x48000c00
 8001a68:	48001000 	.word	0x48001000
 8001a6c:	48001400 	.word	0x48001400
 8001a70:	48001800 	.word	0x48001800
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	d130      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d038      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2232      	movs	r2, #50	; 0x32
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	e002      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d102      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f2      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d110      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d007      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b4c:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000024 	.word	0x20000024
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e3ca      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b97      	ldr	r3, [pc, #604]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80e4 	beq.w	8001d6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_RCC_OscConfig+0x4a>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f040 808b 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 8087 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e3a2      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1a      	ldr	r2, [r3, #32]
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_RCC_OscConfig+0x7c>
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_OscConfig+0x88>
 8001bec:	4b7c      	ldr	r3, [pc, #496]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d223      	bcs.n	8001c44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fd55 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e383      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c10:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a72      	ldr	r2, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b70      	ldr	r3, [pc, #448]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	496d      	ldr	r1, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b6c      	ldr	r3, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	4968      	ldr	r1, [pc, #416]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e025      	b.n	8001c90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a65      	ldr	r2, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4960      	ldr	r1, [pc, #384]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	495b      	ldr	r1, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fd15 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e343      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c90:	f000 fc4a 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	4950      	ldr	r1, [pc, #320]	; (8001de4 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a4e      	ldr	r2, [pc, #312]	; (8001de8 <HAL_RCC_OscConfig+0x278>)
 8001cae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fbf3 	bl	80014a0 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d052      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	e327      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d032      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc30 	bl	8001540 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc2c 	bl	8001540 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e310      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4931      	ldr	r1, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	492c      	ldr	r1, [pc, #176]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e01a      	b.n	8001d6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d36:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fbfd 	bl	8001540 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fbf9 	bl	8001540 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e2dd      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x1da>
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d074      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x21a>
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d10e      	bne.n	8001da2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d064      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d160      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e2ba      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x24a>
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e026      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc2:	d115      	bne.n	8001df0 <HAL_RCC_OscConfig+0x280>
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a02      	ldr	r2, [pc, #8]	; (8001de0 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x298>
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08004d18 	.word	0x08004d18
 8001de8:	20000024 	.word	0x20000024
 8001dec:	20000028 	.word	0x20000028
 8001df0:	4ba0      	ldr	r3, [pc, #640]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a9f      	ldr	r2, [pc, #636]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b9d      	ldr	r3, [pc, #628]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a9c      	ldr	r2, [pc, #624]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fb96 	bl	8001540 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fb92 	bl	8001540 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e276      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2a8>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb82 	bl	8001540 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fb7e 	bl	8001540 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e262      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d0>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d060      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x310>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d119      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d116      	bne.n	8001eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x328>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e23f      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	4973      	ldr	r1, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eac:	e040      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d023      	beq.n	8001efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb3d 	bl	8001540 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fb39 	bl	8001540 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e21d      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	495f      	ldr	r1, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e018      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fb19 	bl	8001540 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff fb15 	bl	8001540 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1f9      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff faf4 	bl	8001540 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff faf0 	bl	8001540 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1d4      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCC_OscConfig+0x3ec>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fad7 	bl	8001540 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fad3 	bl	8001540 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1b7      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ef      	bne.n	8001f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80a6 	beq.w	8002110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d118      	bne.n	800202e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <HAL_RCC_OscConfig+0x508>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <HAL_RCC_OscConfig+0x508>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002008:	f7ff fa9a 	bl	8001540 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002010:	f7ff fa96 	bl	8001540 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e17a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_RCC_OscConfig+0x508>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_RCC_OscConfig+0x4d8>
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002046:	e029      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d115      	bne.n	800207c <HAL_RCC_OscConfig+0x50c>
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_RCC_OscConfig+0x504>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x52c>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	4b9c      	ldr	r3, [pc, #624]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a9b      	ldr	r2, [pc, #620]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208c:	4b98      	ldr	r3, [pc, #608]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	4a97      	ldr	r2, [pc, #604]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7ff fa4c 	bl	8001540 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff fa48 	bl	8001540 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e12a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ed      	beq.n	80020ac <HAL_RCC_OscConfig+0x53c>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fa35 	bl	8001540 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fa31 	bl	8001540 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e113      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ed      	bne.n	80020da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a79      	ldr	r2, [pc, #484]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80fe 	beq.w	8002316 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	2b02      	cmp	r3, #2
 8002120:	f040 80d0 	bne.w	80022c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002124:	4b72      	ldr	r3, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	429a      	cmp	r2, r3
 8002136:	d130      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	3b01      	subs	r3, #1
 8002144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d127      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d11f      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002164:	2a07      	cmp	r2, #7
 8002166:	bf14      	ite	ne
 8002168:	2201      	movne	r2, #1
 800216a:	2200      	moveq	r2, #0
 800216c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d109      	bne.n	800219a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d06e      	beq.n	8002278 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d069      	beq.n	8002274 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0ad      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c8:	f7ff f9ba 	bl	8001540 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff f9b6 	bl	8001540 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e09a      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ee:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x784>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021fe:	3a01      	subs	r2, #1
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002208:	0212      	lsls	r2, r2, #8
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002210:	0852      	lsrs	r2, r2, #1
 8002212:	3a01      	subs	r2, #1
 8002214:	0552      	lsls	r2, r2, #21
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800221c:	0852      	lsrs	r2, r2, #1
 800221e:	3a01      	subs	r2, #1
 8002220:	0652      	lsls	r2, r2, #25
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002228:	0912      	lsrs	r2, r2, #4
 800222a:	0452      	lsls	r2, r2, #17
 800222c:	430a      	orrs	r2, r1
 800222e:	4930      	ldr	r1, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7ff f978 	bl	8001540 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff f974 	bl	8001540 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e058      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002272:	e050      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04f      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d148      	bne.n	8002316 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229c:	f7ff f950 	bl	8001540 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f94c 	bl	8001540 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e030      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x734>
 80022c2:	e028      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d023      	beq.n	8002312 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_RCC_OscConfig+0x780>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f933 	bl	8001540 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e00c      	b.n	80022f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f92f 	bl	8001540 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d905      	bls.n	80022f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_OscConfig+0x7b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x7b0>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4905      	ldr	r1, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x7b0>)
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_OscConfig+0x7b4>)
 800230c:	4013      	ands	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
 8002310:	e001      	b.n	8002316 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	feeefffc 	.word	0xfeeefffc

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0e7      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4970      	ldr	r1, [pc, #448]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cf      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4960      	ldr	r1, [pc, #384]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04c      	beq.n	8002440 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d121      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0a6      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e09a      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e08e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e086      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4943      	ldr	r1, [pc, #268]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7ff f896 	bl	8001540 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff f892 	bl	8001540 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e06e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	492b      	ldr	r1, [pc, #172]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d210      	bcs.n	800249e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4923      	ldr	r1, [pc, #140]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e036      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4918      	ldr	r1, [pc, #96]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4910      	ldr	r1, [pc, #64]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024dc:	f000 f824 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1f4>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1fc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe ffcd 	bl	80014a0 <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	72fb      	strb	r3, [r7, #11]

  return status;
 800250a:	7afb      	ldrb	r3, [r7, #11]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08004d18 	.word	0x08004d18
 8002520:	20000024 	.word	0x20000024
 8002524:	20000028 	.word	0x20000028

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d121      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11e      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e005      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e004      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d134      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0xa6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xac>
 80025cc:	e005      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025d6:	617b      	str	r3, [r7, #20]
      break;
 80025d8:	e002      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	617b      	str	r3, [r7, #20]
      break;
 80025de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	3301      	adds	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	0e5b      	lsrs	r3, r3, #25
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	3301      	adds	r3, #1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002620:	69bb      	ldr	r3, [r7, #24]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	08004d30 	.word	0x08004d30
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200

08002640 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_GetHCLKFreq+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000024 	.word	0x20000024

08002658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800265c:	f7ff fff0 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	08004d28 	.word	0x08004d28

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002688:	f7ff ffda 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0adb      	lsrs	r3, r3, #11
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08004d28 	.word	0x08004d28

080026b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026c8:	f7ff f9ee 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 80026cc:	6178      	str	r0, [r7, #20]
 80026ce:	e014      	b.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f9de 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d10b      	bne.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d919      	bls.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2ba0      	cmp	r3, #160	; 0xa0
 800270c:	d902      	bls.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800270e:	2302      	movs	r3, #2
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e013      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e010      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d902      	bls.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e00a      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d102      	bne.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272c:	2302      	movs	r3, #2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e004      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d101      	bne.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 0207 	bic.w	r2, r3, #7
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277c:	2300      	movs	r3, #0
 800277e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002788:	2b00      	cmp	r3, #0
 800278a:	d041      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002790:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002794:	d02a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002796:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800279a:	d824      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800279c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a0:	d008      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a6:	d81e      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b0:	d010      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b2:	e018      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b4:	4b86      	ldr	r3, [pc, #536]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a85      	ldr	r2, [pc, #532]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c0:	e015      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fabb 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3320      	adds	r3, #32
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fba6 	bl	8002f2c <RCCEx_PLLSAI2_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002802:	4973      	ldr	r1, [pc, #460]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d041      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002820:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002824:	d02a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002826:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800282a:	d824      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800282c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002836:	d81e      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800283c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002840:	d010      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002842:	e018      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002850:	e015      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa73 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002862:	e00c      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3320      	adds	r3, #32
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fb5e 	bl	8002f2c <RCCEx_PLLSAI2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	74fb      	strb	r3, [r7, #19]
      break;
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002892:	494f      	ldr	r1, [pc, #316]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a0 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fe26 	bl	8001540 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fe22 	bl	8001540 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	74fb      	strb	r3, [r7, #19]
        break;
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d15c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01f      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fde1 	bl	8001540 <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002980:	e00b      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fddd 	bl	8001540 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d902      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	74fb      	strb	r3, [r7, #19]
            break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ec      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c6:	e009      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7c7b      	ldrb	r3, [r7, #17]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a9d      	ldr	r2, [pc, #628]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	4994      	ldr	r1, [pc, #592]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	498c      	ldr	r1, [pc, #560]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3e:	4b87      	ldr	r3, [pc, #540]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4983      	ldr	r1, [pc, #524]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a60:	4b7e      	ldr	r3, [pc, #504]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	497b      	ldr	r1, [pc, #492]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	4972      	ldr	r1, [pc, #456]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	496a      	ldr	r1, [pc, #424]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	4961      	ldr	r1, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4959      	ldr	r1, [pc, #356]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	4950      	ldr	r1, [pc, #320]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	4948      	ldr	r1, [pc, #288]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4e:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	493f      	ldr	r1, [pc, #252]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d028      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	4937      	ldr	r1, [pc, #220]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f8c8 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	491f      	ldr	r1, [pc, #124]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f899 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d02b      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e014      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f867 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	4928      	ldr	r1, [pc, #160]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f844 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d014      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	74bb      	strb	r3, [r7, #18]
 8002cca:	e011      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3320      	adds	r3, #32
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f925 	bl	8002f2c <RCCEx_PLLSAI2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0a:	490d      	ldr	r1, [pc, #52]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2e:	4904      	ldr	r1, [pc, #16]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000

08002d44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d52:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10d      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
       ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d76:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
       ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d047      	beq.n	8002e1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e044      	b.n	8002e1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d018      	beq.n	8002dca <RCCEx_PLLSAI1_Config+0x86>
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d825      	bhi.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d002      	beq.n	8002da6 <RCCEx_PLLSAI1_Config+0x62>
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d009      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x74>
 8002da4:	e020      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da6:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db6:	e01a      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db8:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d116      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e013      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dca:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de6:	e006      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      break;
 8002dec:	e004      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	430b      	orrs	r3, r1
 8002e14:	4944      	ldr	r1, [pc, #272]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d17d      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a40      	ldr	r2, [pc, #256]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fb88 	bl	8001540 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e32:	e009      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e34:	f7fe fb84 	bl	8001540 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	73fb      	strb	r3, [r7, #15]
        break;
 8002e46:	e005      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e48:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ef      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d160      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d111      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e60:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6892      	ldr	r2, [r2, #8]
 8002e70:	0211      	lsls	r1, r2, #8
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68d2      	ldr	r2, [r2, #12]
 8002e76:	0912      	lsrs	r2, r2, #4
 8002e78:	0452      	lsls	r2, r2, #17
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	492a      	ldr	r1, [pc, #168]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	610b      	str	r3, [r1, #16]
 8002e82:	e027      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d112      	bne.n	8002eb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	0211      	lsls	r1, r2, #8
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6912      	ldr	r2, [r2, #16]
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0552      	lsls	r2, r2, #21
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	491f      	ldr	r1, [pc, #124]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	610b      	str	r3, [r1, #16]
 8002eae:	e011      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	0211      	lsls	r1, r2, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6952      	ldr	r2, [r2, #20]
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0652      	lsls	r2, r2, #25
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	4916      	ldr	r1, [pc, #88]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fb2e 	bl	8001540 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee6:	e009      	b.n	8002efc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee8:	f7fe fb2a 	bl	8001540 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d902      	bls.n	8002efc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8002efa:	e005      	b.n	8002f08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0ef      	beq.n	8002ee8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000

08002f2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0203 	and.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10d      	bne.n	8002f72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
       ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d047      	beq.n	8003002 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	e044      	b.n	8003002 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d018      	beq.n	8002fb2 <RCCEx_PLLSAI2_Config+0x86>
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d825      	bhi.n	8002fd0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d002      	beq.n	8002f8e <RCCEx_PLLSAI2_Config+0x62>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d009      	beq.n	8002fa0 <RCCEx_PLLSAI2_Config+0x74>
 8002f8c:	e020      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f8e:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9e:	e01a      	b.n	8002fd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb0:	e013      	b.n	8002fda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fce:	e006      	b.n	8002fde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e004      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	4939      	ldr	r1, [pc, #228]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d167      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a35      	ldr	r2, [pc, #212]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fe fa94 	bl	8001540 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800301a:	e009      	b.n	8003030 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800301c:	f7fe fa90 	bl	8001540 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d902      	bls.n	8003030 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	73fb      	strb	r3, [r7, #15]
        break;
 800302e:	e005      	b.n	800303c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ef      	bne.n	800301c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d14a      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003048:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6892      	ldr	r2, [r2, #8]
 8003058:	0211      	lsls	r1, r2, #8
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	0912      	lsrs	r2, r2, #4
 8003060:	0452      	lsls	r2, r2, #17
 8003062:	430a      	orrs	r2, r1
 8003064:	491f      	ldr	r1, [pc, #124]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	4313      	orrs	r3, r2
 8003068:	614b      	str	r3, [r1, #20]
 800306a:	e011      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003074:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6912      	ldr	r2, [r2, #16]
 8003082:	0852      	lsrs	r2, r2, #1
 8003084:	3a01      	subs	r2, #1
 8003086:	0652      	lsls	r2, r2, #25
 8003088:	430a      	orrs	r2, r1
 800308a:	4916      	ldr	r1, [pc, #88]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	4313      	orrs	r3, r2
 800308e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe fa50 	bl	8001540 <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030a2:	e009      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030a4:	f7fe fa4c 	bl	8001540 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	73fb      	strb	r3, [r7, #15]
          break;
 80030b6:	e005      	b.n	80030c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4904      	ldr	r1, [pc, #16]	; (80030e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000

080030e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e049      	b.n	800318e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fed0 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fbda 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d001      	beq.n	80031b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e047      	b.n	8003240 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <HAL_TIM_Base_Start+0xb4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d018      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_TIM_Base_Start+0xb8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_TIM_Base_Start+0xbc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	; (8003258 <HAL_TIM_Base_Start+0xc0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_TIM_Base_Start+0xc4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_TIM_Base_Start+0x66>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_TIM_Base_Start+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d115      	bne.n	800322a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_TIM_Base_Start+0xcc>)
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d015      	beq.n	800323c <HAL_TIM_Base_Start+0xa4>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d011      	beq.n	800323c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	e008      	b.n	800323c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e000      	b.n	800323e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	00010007 	.word	0x00010007

08003268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e049      	b.n	800330e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f841 	bl	8003316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fb1a 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_TIM_IC_Start+0x1a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e023      	b.n	800338e <HAL_TIM_IC_Start+0x62>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start+0x2a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e01b      	b.n	800338e <HAL_TIM_IC_Start+0x62>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start+0x3a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e013      	b.n	800338e <HAL_TIM_IC_Start+0x62>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d104      	bne.n	8003376 <HAL_TIM_IC_Start+0x4a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e00b      	b.n	800338e <HAL_TIM_IC_Start+0x62>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d104      	bne.n	8003386 <HAL_TIM_IC_Start+0x5a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e003      	b.n	800338e <HAL_TIM_IC_Start+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800338c:	b2db      	uxtb	r3, r3
 800338e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_TIM_IC_Start+0x74>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e013      	b.n	80033c8 <HAL_TIM_IC_Start+0x9c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d104      	bne.n	80033b0 <HAL_TIM_IC_Start+0x84>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e00b      	b.n	80033c8 <HAL_TIM_IC_Start+0x9c>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d104      	bne.n	80033c0 <HAL_TIM_IC_Start+0x94>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e003      	b.n	80033c8 <HAL_TIM_IC_Start+0x9c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80033d0:	7bbb      	ldrb	r3, [r7, #14]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e092      	b.n	8003500 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_TIM_IC_Start+0xbe>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e8:	e023      	b.n	8003432 <HAL_TIM_IC_Start+0x106>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_IC_Start+0xce>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f8:	e01b      	b.n	8003432 <HAL_TIM_IC_Start+0x106>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d104      	bne.n	800340a <HAL_TIM_IC_Start+0xde>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003408:	e013      	b.n	8003432 <HAL_TIM_IC_Start+0x106>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d104      	bne.n	800341a <HAL_TIM_IC_Start+0xee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003418:	e00b      	b.n	8003432 <HAL_TIM_IC_Start+0x106>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d104      	bne.n	800342a <HAL_TIM_IC_Start+0xfe>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003428:	e003      	b.n	8003432 <HAL_TIM_IC_Start+0x106>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_TIM_IC_Start+0x116>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	e013      	b.n	800346a <HAL_TIM_IC_Start+0x13e>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d104      	bne.n	8003452 <HAL_TIM_IC_Start+0x126>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003450:	e00b      	b.n	800346a <HAL_TIM_IC_Start+0x13e>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d104      	bne.n	8003462 <HAL_TIM_IC_Start+0x136>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003460:	e003      	b.n	800346a <HAL_TIM_IC_Start+0x13e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe3e 	bl	80040f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_TIM_IC_Start+0x1dc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01d      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d018      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_TIM_IC_Start+0x1e0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_TIM_IC_Start+0x1e4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_IC_Start+0x1e8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <HAL_TIM_IC_Start+0x1ec>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_IC_Start+0x192>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_TIM_IC_Start+0x1f0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d115      	bne.n	80034ea <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_TIM_IC_Start+0x1f4>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d015      	beq.n	80034fc <HAL_TIM_IC_Start+0x1d0>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d6:	d011      	beq.n	80034fc <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	e008      	b.n	80034fc <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e000      	b.n	80034fe <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40013400 	.word	0x40013400
 800351c:	40014000 	.word	0x40014000
 8003520:	00010007 	.word	0x00010007

08003524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800353e:	2302      	movs	r3, #2
 8003540:	e0ff      	b.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b14      	cmp	r3, #20
 800354e:	f200 80f0 	bhi.w	8003732 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003733 	.word	0x08003733
 8003560:	08003733 	.word	0x08003733
 8003564:	08003733 	.word	0x08003733
 8003568:	080035ed 	.word	0x080035ed
 800356c:	08003733 	.word	0x08003733
 8003570:	08003733 	.word	0x08003733
 8003574:	08003733 	.word	0x08003733
 8003578:	0800362f 	.word	0x0800362f
 800357c:	08003733 	.word	0x08003733
 8003580:	08003733 	.word	0x08003733
 8003584:	08003733 	.word	0x08003733
 8003588:	0800366f 	.word	0x0800366f
 800358c:	08003733 	.word	0x08003733
 8003590:	08003733 	.word	0x08003733
 8003594:	08003733 	.word	0x08003733
 8003598:	080036b1 	.word	0x080036b1
 800359c:	08003733 	.word	0x08003733
 80035a0:	08003733 	.word	0x08003733
 80035a4:	08003733 	.word	0x08003733
 80035a8:	080036f1 	.word	0x080036f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa2e 	bl	8003a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e0a5      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fa9e 	bl	8003b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e084      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb07 	bl	8003c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e064      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fb6f 	bl	8003d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e043      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fbb8 	bl	8003e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036ee:	e023      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fbfc 	bl	8003ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003730:	e002      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003740:	7dfb      	ldrb	r3, [r7, #23]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e0b6      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x18a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xd8>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x176>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xaa>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x11e>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xfe>
 80037d0:	2b50      	cmp	r3, #80	; 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x13e>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b30      	cmp	r3, #48	; 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037e0:	2b30      	cmp	r3, #48	; 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f000 fc55 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 fc3e 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fbb2 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	; 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fc0b 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fbd1 	bl	800401e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	; 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fbfb 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fb92 	bl	8003fc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fbeb 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fbe2 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d01b      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d017      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00f      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00b      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <TIM_Base_SetConfig+0x9a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d108      	bne.n	800398c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00f      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40013400 	.word	0x40013400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800

08003a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_OC1_SetConfig+0x10c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_OC1_SetConfig+0x110>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_OC1_SetConfig+0x114>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_OC1_SetConfig+0x118>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_OC1_SetConfig+0x80>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_OC1_SetConfig+0x11c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10c      	bne.n	8003aae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0308 	bic.w	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <TIM_OC1_SetConfig+0x10c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <TIM_OC1_SetConfig+0x110>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <TIM_OC1_SetConfig+0x114>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <TIM_OC1_SetConfig+0x118>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_OC1_SetConfig+0xc2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <TIM_OC1_SetConfig+0x11c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d111      	bne.n	8003afa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	621a      	str	r2, [r3, #32]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40014000 	.word	0x40014000
 8003b2c:	40014400 	.word	0x40014400
 8003b30:	40014800 	.word	0x40014800

08003b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0210 	bic.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a28      	ldr	r2, [pc, #160]	; (8003c34 <TIM_OC2_SetConfig+0x100>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x6c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <TIM_OC2_SetConfig+0x104>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC2_SetConfig+0x100>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00f      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_OC2_SetConfig+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <TIM_OC2_SetConfig+0x108>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <TIM_OC2_SetConfig+0x10c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC2_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a19      	ldr	r2, [pc, #100]	; (8003c44 <TIM_OC2_SetConfig+0x110>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <TIM_OC3_SetConfig+0xfc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC3_SetConfig+0x6a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <TIM_OC3_SetConfig+0x100>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10d      	bne.n	8003cce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_OC3_SetConfig+0xfc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <TIM_OC3_SetConfig+0x100>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <TIM_OC3_SetConfig+0x104>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_OC3_SetConfig+0x108>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC3_SetConfig+0xae>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <TIM_OC3_SetConfig+0x10c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_OC4_SetConfig+0xc0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <TIM_OC4_SetConfig+0xc4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <TIM_OC4_SetConfig+0xc8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <TIM_OC4_SetConfig+0xcc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC4_SetConfig+0x84>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <TIM_OC4_SetConfig+0xd0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d109      	bne.n	8003df0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40013400 	.word	0x40013400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <TIM_OC5_SetConfig+0xb4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <TIM_OC5_SetConfig+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <TIM_OC5_SetConfig+0xbc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <TIM_OC5_SetConfig+0xc0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC5_SetConfig+0x7a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <TIM_OC5_SetConfig+0xc4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d109      	bne.n	8003eba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a18      	ldr	r2, [pc, #96]	; (8003fac <TIM_OC6_SetConfig+0xb8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00f      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <TIM_OC6_SetConfig+0xbc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <TIM_OC6_SetConfig+0xc0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d007      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <TIM_OC6_SetConfig+0xc4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_OC6_SetConfig+0x7c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <TIM_OC6_SetConfig+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d109      	bne.n	8003f84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40014400 	.word	0x40014400
 8003fbc:	40014800 	.word	0x40014800

08003fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 030a 	bic.w	r3, r3, #10
 8003ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0210 	bic.w	r2, r3, #16
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	031b      	lsls	r3, r3, #12
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2201      	movs	r2, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e068      	b.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2e      	ldr	r2, [pc, #184]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2d      	ldr	r2, [pc, #180]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004192:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1e      	ldr	r2, [pc, #120]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01d      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d018      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10c      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40013400 	.word	0x40013400
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40014000 	.word	0x40014000

08004250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e040      	b.n	80042e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc febe 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f82c 	bl	80042ec <UART_SetConfig>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e022      	b.n	80042e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fad8 	bl	800485c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fb5f 	bl	80049a0 <UART_CheckIdleState>
 80042e2:	4603      	mov	r3, r0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	431a      	orrs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4313      	orrs	r3, r2
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4ba4      	ldr	r3, [pc, #656]	; (80045ac <UART_SetConfig+0x2c0>)
 800431c:	4013      	ands	r3, r2
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004324:	430b      	orrs	r3, r1
 8004326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a99      	ldr	r2, [pc, #612]	; (80045b0 <UART_SetConfig+0x2c4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d004      	beq.n	8004358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	4313      	orrs	r3, r2
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	430a      	orrs	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a90      	ldr	r2, [pc, #576]	; (80045b4 <UART_SetConfig+0x2c8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d126      	bne.n	80043c4 <UART_SetConfig+0xd8>
 8004376:	4b90      	ldr	r3, [pc, #576]	; (80045b8 <UART_SetConfig+0x2cc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b03      	cmp	r3, #3
 8004382:	d81b      	bhi.n	80043bc <UART_SetConfig+0xd0>
 8004384:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0xa0>)
 8004386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438a:	bf00      	nop
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b5 	.word	0x080043b5
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e116      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e112      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e10e      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e10a      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e106      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a7c      	ldr	r2, [pc, #496]	; (80045bc <UART_SetConfig+0x2d0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d138      	bne.n	8004440 <UART_SetConfig+0x154>
 80043ce:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d82d      	bhi.n	8004438 <UART_SetConfig+0x14c>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <UART_SetConfig+0xf8>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	08004419 	.word	0x08004419
 80043e8:	08004439 	.word	0x08004439
 80043ec:	08004439 	.word	0x08004439
 80043f0:	08004439 	.word	0x08004439
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004439 	.word	0x08004439
 80043fc:	08004439 	.word	0x08004439
 8004400:	08004439 	.word	0x08004439
 8004404:	08004421 	.word	0x08004421
 8004408:	08004439 	.word	0x08004439
 800440c:	08004439 	.word	0x08004439
 8004410:	08004439 	.word	0x08004439
 8004414:	08004431 	.word	0x08004431
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441e:	e0d8      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0d4      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e0d0      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e0cc      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e0c8      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5e      	ldr	r2, [pc, #376]	; (80045c0 <UART_SetConfig+0x2d4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d125      	bne.n	8004496 <UART_SetConfig+0x1aa>
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <UART_SetConfig+0x2cc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d016      	beq.n	8004486 <UART_SetConfig+0x19a>
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	d818      	bhi.n	800448e <UART_SetConfig+0x1a2>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d00a      	beq.n	8004476 <UART_SetConfig+0x18a>
 8004460:	2b20      	cmp	r3, #32
 8004462:	d814      	bhi.n	800448e <UART_SetConfig+0x1a2>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <UART_SetConfig+0x182>
 8004468:	2b10      	cmp	r3, #16
 800446a:	d008      	beq.n	800447e <UART_SetConfig+0x192>
 800446c:	e00f      	b.n	800448e <UART_SetConfig+0x1a2>
 800446e:	2300      	movs	r3, #0
 8004470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004474:	e0ad      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004476:	2302      	movs	r3, #2
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e0a9      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800447e:	2304      	movs	r3, #4
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e0a5      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004486:	2308      	movs	r3, #8
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e0a1      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800448e:	2310      	movs	r3, #16
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e09d      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a4a      	ldr	r2, [pc, #296]	; (80045c4 <UART_SetConfig+0x2d8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d125      	bne.n	80044ec <UART_SetConfig+0x200>
 80044a0:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <UART_SetConfig+0x2cc>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044aa:	2bc0      	cmp	r3, #192	; 0xc0
 80044ac:	d016      	beq.n	80044dc <UART_SetConfig+0x1f0>
 80044ae:	2bc0      	cmp	r3, #192	; 0xc0
 80044b0:	d818      	bhi.n	80044e4 <UART_SetConfig+0x1f8>
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d00a      	beq.n	80044cc <UART_SetConfig+0x1e0>
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d814      	bhi.n	80044e4 <UART_SetConfig+0x1f8>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <UART_SetConfig+0x1d8>
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d008      	beq.n	80044d4 <UART_SetConfig+0x1e8>
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x1f8>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e082      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e07e      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e07a      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e076      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e072      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a35      	ldr	r2, [pc, #212]	; (80045c8 <UART_SetConfig+0x2dc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d12a      	bne.n	800454c <UART_SetConfig+0x260>
 80044f6:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <UART_SetConfig+0x2cc>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004504:	d01a      	beq.n	800453c <UART_SetConfig+0x250>
 8004506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450a:	d81b      	bhi.n	8004544 <UART_SetConfig+0x258>
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d00c      	beq.n	800452c <UART_SetConfig+0x240>
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d815      	bhi.n	8004544 <UART_SetConfig+0x258>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <UART_SetConfig+0x238>
 800451c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004520:	d008      	beq.n	8004534 <UART_SetConfig+0x248>
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x258>
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e052      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e04e      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e04a      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e046      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e042      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <UART_SetConfig+0x2c4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d13a      	bne.n	80045cc <UART_SetConfig+0x2e0>
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004564:	d01a      	beq.n	800459c <UART_SetConfig+0x2b0>
 8004566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456a:	d81b      	bhi.n	80045a4 <UART_SetConfig+0x2b8>
 800456c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004570:	d00c      	beq.n	800458c <UART_SetConfig+0x2a0>
 8004572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004576:	d815      	bhi.n	80045a4 <UART_SetConfig+0x2b8>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART_SetConfig+0x298>
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d008      	beq.n	8004594 <UART_SetConfig+0x2a8>
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x2b8>
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e022      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800458c:	2302      	movs	r3, #2
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e01e      	b.n	80045d2 <UART_SetConfig+0x2e6>
 8004594:	2304      	movs	r3, #4
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e01a      	b.n	80045d2 <UART_SetConfig+0x2e6>
 800459c:	2308      	movs	r3, #8
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e016      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80045a4:	2310      	movs	r3, #16
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e012      	b.n	80045d2 <UART_SetConfig+0x2e6>
 80045ac:	efff69f3 	.word	0xefff69f3
 80045b0:	40008000 	.word	0x40008000
 80045b4:	40013800 	.word	0x40013800
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40004400 	.word	0x40004400
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	40005000 	.word	0x40005000
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a9f      	ldr	r2, [pc, #636]	; (8004854 <UART_SetConfig+0x568>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d17a      	bne.n	80046d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d824      	bhi.n	800462e <UART_SetConfig+0x342>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0x300>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004611 	.word	0x08004611
 80045f0:	0800462f 	.word	0x0800462f
 80045f4:	08004619 	.word	0x08004619
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	0800461f 	.word	0x0800461f
 8004600:	0800462f 	.word	0x0800462f
 8004604:	0800462f 	.word	0x0800462f
 8004608:	0800462f 	.word	0x0800462f
 800460c:	08004627 	.word	0x08004627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fe f822 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8004614:	61f8      	str	r0, [r7, #28]
        break;
 8004616:	e010      	b.n	800463a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004618:	4b8f      	ldr	r3, [pc, #572]	; (8004858 <UART_SetConfig+0x56c>)
 800461a:	61fb      	str	r3, [r7, #28]
        break;
 800461c:	e00d      	b.n	800463a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461e:	f7fd ff83 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8004622:	61f8      	str	r0, [r7, #28]
        break;
 8004624:	e009      	b.n	800463a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462a:	61fb      	str	r3, [r7, #28]
        break;
 800462c:	e005      	b.n	800463a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80fb 	beq.w	8004838 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	d305      	bcc.n	800465e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	429a      	cmp	r2, r3
 800465c:	d903      	bls.n	8004666 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004664:	e0e8      	b.n	8004838 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2200      	movs	r2, #0
 800466a:	461c      	mov	r4, r3
 800466c:	4615      	mov	r5, r2
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	022b      	lsls	r3, r5, #8
 8004678:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800467c:	0222      	lsls	r2, r4, #8
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	6849      	ldr	r1, [r1, #4]
 8004682:	0849      	lsrs	r1, r1, #1
 8004684:	2000      	movs	r0, #0
 8004686:	4688      	mov	r8, r1
 8004688:	4681      	mov	r9, r0
 800468a:	eb12 0a08 	adds.w	sl, r2, r8
 800468e:	eb43 0b09 	adc.w	fp, r3, r9
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a0:	4650      	mov	r0, sl
 80046a2:	4659      	mov	r1, fp
 80046a4:	f7fb fd90 	bl	80001c8 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b6:	d308      	bcc.n	80046ca <UART_SetConfig+0x3de>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d204      	bcs.n	80046ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	60da      	str	r2, [r3, #12]
 80046c8:	e0b6      	b.n	8004838 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046d0:	e0b2      	b.n	8004838 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046da:	d15e      	bne.n	800479a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d828      	bhi.n	8004736 <UART_SetConfig+0x44a>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x400>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	08004737 	.word	0x08004737
 80046fc:	08004727 	.word	0x08004727
 8004700:	08004737 	.word	0x08004737
 8004704:	08004737 	.word	0x08004737
 8004708:	08004737 	.word	0x08004737
 800470c:	0800472f 	.word	0x0800472f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fd ffa2 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8004714:	61f8      	str	r0, [r7, #28]
        break;
 8004716:	e014      	b.n	8004742 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004718:	f7fd ffb4 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 800471c:	61f8      	str	r0, [r7, #28]
        break;
 800471e:	e010      	b.n	8004742 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004720:	4b4d      	ldr	r3, [pc, #308]	; (8004858 <UART_SetConfig+0x56c>)
 8004722:	61fb      	str	r3, [r7, #28]
        break;
 8004724:	e00d      	b.n	8004742 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004726:	f7fd feff 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 800472a:	61f8      	str	r0, [r7, #28]
        break;
 800472c:	e009      	b.n	8004742 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004732:	61fb      	str	r3, [r7, #28]
        break;
 8004734:	e005      	b.n	8004742 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d077      	beq.n	8004838 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005a      	lsls	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	441a      	add	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b0f      	cmp	r3, #15
 8004762:	d916      	bls.n	8004792 <UART_SetConfig+0x4a6>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d212      	bcs.n	8004792 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	b29a      	uxth	r2, r3
 8004782:	8afb      	ldrh	r3, [r7, #22]
 8004784:	4313      	orrs	r3, r2
 8004786:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	8afa      	ldrh	r2, [r7, #22]
 800478e:	60da      	str	r2, [r3, #12]
 8004790:	e052      	b.n	8004838 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004798:	e04e      	b.n	8004838 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800479a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d827      	bhi.n	80047f2 <UART_SetConfig+0x506>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x4bc>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fd ff44 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 80047d0:	61f8      	str	r0, [r7, #28]
        break;
 80047d2:	e014      	b.n	80047fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fd ff56 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e010      	b.n	80047fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b1e      	ldr	r3, [pc, #120]	; (8004858 <UART_SetConfig+0x56c>)
 80047de:	61fb      	str	r3, [r7, #28]
        break;
 80047e0:	e00d      	b.n	80047fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fd fea1 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80047e6:	61f8      	str	r0, [r7, #28]
        break;
 80047e8:	e009      	b.n	80047fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	61fb      	str	r3, [r7, #28]
        break;
 80047f0:	e005      	b.n	80047fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047fc:	bf00      	nop
    }

    if (pclk != 0U)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d019      	beq.n	8004838 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	085a      	lsrs	r2, r3, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d909      	bls.n	8004832 <UART_SetConfig+0x546>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d205      	bcs.n	8004832 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60da      	str	r2, [r3, #12]
 8004830:	e002      	b.n	8004838 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004844:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	; 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004852:	bf00      	nop
 8004854:	40008000 	.word	0x40008000
 8004858:	00f42400 	.word	0x00f42400

0800485c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495a:	d10a      	bne.n	8004972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b0:	f7fc fdc6 	bl	8001540 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d10e      	bne.n	80049e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f82d 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e023      	b.n	8004a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d10e      	bne.n	8004a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f817 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00d      	b.n	8004a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b09c      	sub	sp, #112	; 0x70
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a42:	e0a5      	b.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	f000 80a1 	beq.w	8004b90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fc fd77 	bl	8001540 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d13e      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a78:	667b      	str	r3, [r7, #100]	; 0x64
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e6      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ab6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e067      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d04f      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afe:	d147      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e6      	bne.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b5c:	623a      	str	r2, [r7, #32]
 8004b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	69f9      	ldr	r1, [r7, #28]
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e010      	b.n	8004bb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f43f af4a 	beq.w	8004a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3770      	adds	r7, #112	; 0x70
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	4d0d      	ldr	r5, [pc, #52]	; (8004bf4 <__libc_init_array+0x38>)
 8004bc0:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <__libc_init_array+0x3c>)
 8004bc2:	1b64      	subs	r4, r4, r5
 8004bc4:	10a4      	asrs	r4, r4, #2
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	4d0b      	ldr	r5, [pc, #44]	; (8004bfc <__libc_init_array+0x40>)
 8004bce:	4c0c      	ldr	r4, [pc, #48]	; (8004c00 <__libc_init_array+0x44>)
 8004bd0:	f000 f820 	bl	8004c14 <_init>
 8004bd4:	1b64      	subs	r4, r4, r5
 8004bd6:	10a4      	asrs	r4, r4, #2
 8004bd8:	2600      	movs	r6, #0
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	08004d68 	.word	0x08004d68
 8004bf8:	08004d68 	.word	0x08004d68
 8004bfc:	08004d68 	.word	0x08004d68
 8004c00:	08004d6c 	.word	0x08004d6c

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <_init>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr

08004c20 <_fini>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	bf00      	nop
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr
