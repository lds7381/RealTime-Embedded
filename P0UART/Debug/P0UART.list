
P0UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800175c  0800175c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800175c  0800175c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800175c  0800175c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800175c  0800175c  0001175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000064  080017c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080017c8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001324  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000541  00000000  00000000  000213b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00021900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  000219f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d718  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b42  00000000  00000000  0003f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a34b9  00000000  00000000  00040cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e41ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000728  00000000  00000000  000e41fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016e0 	.word	0x080016e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080016e0 	.word	0x080016e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <clock_init>:
 */


#include "stm32l476xx.h"

void clock_init(void) {
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <clock_init+0x68>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a17      	ldr	r2, [pc, #92]	; (8000944 <clock_init+0x68>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 80008ec:	bf00      	nop
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <clock_init+0x68>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <clock_init+0x68>)
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <clock_init+0x68>)
 8000900:	f023 0303 	bic.w	r3, r3, #3
 8000904:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <clock_init+0x68>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <clock_init+0x68>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000912:	bf00      	nop
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <clock_init+0x68>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f003 030c 	and.w	r3, r3, #12
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f9      	beq.n	8000914 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <clock_init+0x68>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <clock_init+0x68>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <clock_init+0x68>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <clock_init+0x68>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <led_init>:
// • When the I/O is LOW, the LED is off

#define LED_PIN 5

void led_init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	// Configure LED_PIN as an output
    GPIOA->MODER &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two MODE bits for this pin
 800094c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000956:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800095a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=   0x1<<(LED_PIN*2)  ;        // 0x1 means output
 800095c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]

    // ...and as push-pull drive
    GPIOA->OTYPER &= ~(0x1<<LED_PIN) ;
 800096c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000976:	f023 0320 	bic.w	r3, r3, #32
 800097a:	6053      	str	r3, [r2, #4]

    // ...with medium speed
    GPIOA->OSPEEDR &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two OSPEED bits for this pin
 800097c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000986:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800098a:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=   0x1<<(LED_PIN*2)  ;        // 0x1 means medium speed
 800098c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099a:	6093      	str	r3, [r2, #8]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <led_set>:

void led_set(_Bool isOn )
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	71fb      	strb	r3, [r7, #7]
	if(isOn)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <led_set+0x22>
		GPIOA->ODR |=  (1 << LED_PIN);
 80009b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6153      	str	r3, [r2, #20]
	else
		GPIOA->ODR &= ~(1 << LED_PIN);
}
 80009c6:	e007      	b.n	80009d8 <led_set+0x32>
		GPIOA->ODR &= ~(1 << LED_PIN);
 80009c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80009d2:	f023 0320 	bic.w	r3, r3, #32
 80009d6:	6153      	str	r3, [r2, #20]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <main>:
#include <stdio.h>
#include <ctype.h>
#include <uart.h>

uint8_t buffer[100];
int main(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af04      	add	r7, sp, #16
	int		some_int;
	float 	some_float = 1.0;
 80009ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80009f2:	617b      	str	r3, [r7, #20]
	int		n ;

	clock_init(); // Switch System Clock = 80 MHz
 80009f4:	f7ff ff72 	bl	80008dc <clock_init>
	led_init();
 80009f8:	f7ff ffa6 	bl	8000948 <led_init>
	USART2_Init(115200);	// initialize USART2
 80009fc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000a00:	f000 f888 	bl	8000b14 <USART2_Init>

	while (1){
		// create some values to print
		some_float *= -1.618;
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f7ff fec1 	bl	800078c <__aeabi_f2d>
 8000a0a:	a327      	add	r3, pc, #156	; (adr r3, 8000aa8 <main+0xc0>)
 8000a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a10:	f7ff fc2e 	bl	8000270 <__aeabi_dmul>
 8000a14:	4602      	mov	r2, r0
 8000a16:	460b      	mov	r3, r1
 8000a18:	4610      	mov	r0, r2
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f7ff ff0e 	bl	800083c <__aeabi_d2f>
 8000a20:	4603      	mov	r3, r0
 8000a22:	617b      	str	r3, [r7, #20]
		some_int = some_float;
 8000a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a2c:	ee17 3a90 	vmov	r3, s15
 8000a30:	60fb      	str	r3, [r7, #12]
		char *msg = "";
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <main+0xa8>)
 8000a34:	613b      	str	r3, [r7, #16]

		// toggle User LED based on user input
		char rxByte = USART_Read(USART2);
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <main+0xac>)
 8000a38:	f000 f942 	bl	8000cc0 <USART_Read>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	72fb      	strb	r3, [r7, #11]
		// 'L' turns LED on
		if (rxByte == 'L') {
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	2b4c      	cmp	r3, #76	; 0x4c
 8000a44:	d105      	bne.n	8000a52 <main+0x6a>
			led_set(1);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ffad 	bl	80009a6 <led_set>
			msg = "ON";
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <main+0xb0>)
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	e007      	b.n	8000a62 <main+0x7a>
		}
		// 'l' turns it off
		else if(rxByte == 'l') {
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	2b6c      	cmp	r3, #108	; 0x6c
 8000a56:	d104      	bne.n	8000a62 <main+0x7a>
			led_set(0);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ffa4 	bl	80009a6 <led_set>
			msg = "off";
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <main+0xb4>)
 8000a60:	613b      	str	r3, [r7, #16]
		}

		// print out some values
		n = sprintf((char *)buffer, "some_int=%d\t some_float=%5.3f \t%s\r\n", some_int, some_float, msg);
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff fe92 	bl	800078c <__aeabi_f2d>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	9102      	str	r1, [sp, #8]
 8000a70:	e9cd 2300 	strd	r2, r3, [sp]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <main+0xb8>)
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <main+0xbc>)
 8000a7a:	f000 f9b5 	bl	8000de8 <siprintf>
 8000a7e:	6078      	str	r0, [r7, #4]
		USART_Write(USART2, buffer, n);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <main+0xbc>)
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <main+0xac>)
 8000a88:	f000 f92f 	bl	8000cea <USART_Write>
	while (1){
 8000a8c:	e7ba      	b.n	8000a04 <main+0x1c>
 8000a8e:	bf00      	nop
 8000a90:	080016f8 	.word	0x080016f8
 8000a94:	40004400 	.word	0x40004400
 8000a98:	080016fc 	.word	0x080016fc
 8000a9c:	08001700 	.word	0x08001700
 8000aa0:	08001704 	.word	0x08001704
 8000aa4:	20000080 	.word	0x20000080
 8000aa8:	f7ced917 	.word	0xf7ced917
 8000aac:	bff9e353 	.word	0xbff9e353

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <SystemInit+0x5c>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <SystemInit+0x5c>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <SystemInit+0x60>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <SystemInit+0x60>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <SystemInit+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <SystemInit+0x60>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <SystemInit+0x60>)
 8000adc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ae0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ae4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <SystemInit+0x60>)
 8000ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <SystemInit+0x60>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <SystemInit+0x60>)
 8000af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SystemInit+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	40021000 	.word	0x40021000

08000b14 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000b1c:	4b65      	ldr	r3, [pc, #404]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	4a64      	ldr	r2, [pc, #400]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	6593      	str	r3, [r2, #88]	; 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 8000b28:	4b62      	ldr	r3, [pc, #392]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000b32:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a5f      	ldr	r2, [pc, #380]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <USART2_Init+0x1a0>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8000b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b56:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b62:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000b66:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8000b68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b76:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8000b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b82:	f023 030c 	bic.w	r3, r3, #12
 8000b86:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8000b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b96:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8000b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ba6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 8000ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000bb6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 8000bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bc2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bc6:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8000bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 8000bd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8000be8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf6:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <USART2_Init+0x1a4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <USART2_Init+0x1a4>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c0a:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 8000c0e:	f023 031c 	bic.w	r3, r3, #28
 8000c12:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c1a:	f043 030c 	orr.w	r3, r3, #12
 8000c1e:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2a:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000c3e:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <USART2_Init+0x1a8>)
 8000c4a:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	085a      	lsrs	r2, r3, #1
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	441a      	add	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 8000c5e:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c6a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000c6e:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c76:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000c7a:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000c88:	bf00      	nop
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f9      	beq.n	8000c8a <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000c96:	bf00      	nop
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <USART2_Init+0x1a4>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f9      	beq.n	8000c98 <USART2_Init+0x184>
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	00f42400 	.word	0x00f42400

08000cc0 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000cc8:	bf00      	nop
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f9      	beq.n	8000cca <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000cea:	b480      	push	{r7}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e010      	b.n	8000d1e <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000cfc:	bf00      	nop
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8ea      	bhi.n	8000cfc <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8000d26:	bf00      	nop
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f9      	beq.n	8000d28 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	61da      	str	r2, [r3, #28]
}   
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff feae 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d7e:	f7ff fe33 	bl	80009e8 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d90:	08001764 	.word	0x08001764
  ldr r2, =_sbss
 8000d94:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d98:	200000f8 	.word	0x200000f8

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	4d0d      	ldr	r5, [pc, #52]	; (8000dd8 <__libc_init_array+0x38>)
 8000da4:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da6:	1b64      	subs	r4, r4, r5
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	2600      	movs	r6, #0
 8000dac:	42a6      	cmp	r6, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	4d0b      	ldr	r5, [pc, #44]	; (8000de0 <__libc_init_array+0x40>)
 8000db2:	4c0c      	ldr	r4, [pc, #48]	; (8000de4 <__libc_init_array+0x44>)
 8000db4:	f000 fc94 	bl	80016e0 <_init>
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	10a4      	asrs	r4, r4, #2
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	42a6      	cmp	r6, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc8:	4798      	blx	r3
 8000dca:	3601      	adds	r6, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd2:	4798      	blx	r3
 8000dd4:	3601      	adds	r6, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	0800175c 	.word	0x0800175c
 8000ddc:	0800175c 	.word	0x0800175c
 8000de0:	0800175c 	.word	0x0800175c
 8000de4:	08001760 	.word	0x08001760

08000de8 <siprintf>:
 8000de8:	b40e      	push	{r1, r2, r3}
 8000dea:	b500      	push	{lr}
 8000dec:	b09c      	sub	sp, #112	; 0x70
 8000dee:	ab1d      	add	r3, sp, #116	; 0x74
 8000df0:	9002      	str	r0, [sp, #8]
 8000df2:	9006      	str	r0, [sp, #24]
 8000df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <siprintf+0x38>)
 8000dfa:	9107      	str	r1, [sp, #28]
 8000dfc:	9104      	str	r1, [sp, #16]
 8000dfe:	4909      	ldr	r1, [pc, #36]	; (8000e24 <siprintf+0x3c>)
 8000e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e04:	9105      	str	r1, [sp, #20]
 8000e06:	6800      	ldr	r0, [r0, #0]
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	a902      	add	r1, sp, #8
 8000e0c:	f000 f868 	bl	8000ee0 <_svfiprintf_r>
 8000e10:	9b02      	ldr	r3, [sp, #8]
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	b01c      	add	sp, #112	; 0x70
 8000e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e1c:	b003      	add	sp, #12
 8000e1e:	4770      	bx	lr
 8000e20:	20000000 	.word	0x20000000
 8000e24:	ffff0208 	.word	0xffff0208

08000e28 <__ssputs_r>:
 8000e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	688e      	ldr	r6, [r1, #8]
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	4682      	mov	sl, r0
 8000e32:	460c      	mov	r4, r1
 8000e34:	4690      	mov	r8, r2
 8000e36:	461f      	mov	r7, r3
 8000e38:	d838      	bhi.n	8000eac <__ssputs_r+0x84>
 8000e3a:	898a      	ldrh	r2, [r1, #12]
 8000e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000e40:	d032      	beq.n	8000ea8 <__ssputs_r+0x80>
 8000e42:	6825      	ldr	r5, [r4, #0]
 8000e44:	6909      	ldr	r1, [r1, #16]
 8000e46:	eba5 0901 	sub.w	r9, r5, r1
 8000e4a:	6965      	ldr	r5, [r4, #20]
 8000e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e54:	3301      	adds	r3, #1
 8000e56:	444b      	add	r3, r9
 8000e58:	106d      	asrs	r5, r5, #1
 8000e5a:	429d      	cmp	r5, r3
 8000e5c:	bf38      	it	cc
 8000e5e:	461d      	movcc	r5, r3
 8000e60:	0553      	lsls	r3, r2, #21
 8000e62:	d531      	bpl.n	8000ec8 <__ssputs_r+0xa0>
 8000e64:	4629      	mov	r1, r5
 8000e66:	f000 fb63 	bl	8001530 <_malloc_r>
 8000e6a:	4606      	mov	r6, r0
 8000e6c:	b950      	cbnz	r0, 8000e84 <__ssputs_r+0x5c>
 8000e6e:	230c      	movs	r3, #12
 8000e70:	f8ca 3000 	str.w	r3, [sl]
 8000e74:	89a3      	ldrh	r3, [r4, #12]
 8000e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7a:	81a3      	strh	r3, [r4, #12]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e84:	6921      	ldr	r1, [r4, #16]
 8000e86:	464a      	mov	r2, r9
 8000e88:	f000 fabe 	bl	8001408 <memcpy>
 8000e8c:	89a3      	ldrh	r3, [r4, #12]
 8000e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	81a3      	strh	r3, [r4, #12]
 8000e98:	6126      	str	r6, [r4, #16]
 8000e9a:	6165      	str	r5, [r4, #20]
 8000e9c:	444e      	add	r6, r9
 8000e9e:	eba5 0509 	sub.w	r5, r5, r9
 8000ea2:	6026      	str	r6, [r4, #0]
 8000ea4:	60a5      	str	r5, [r4, #8]
 8000ea6:	463e      	mov	r6, r7
 8000ea8:	42be      	cmp	r6, r7
 8000eaa:	d900      	bls.n	8000eae <__ssputs_r+0x86>
 8000eac:	463e      	mov	r6, r7
 8000eae:	6820      	ldr	r0, [r4, #0]
 8000eb0:	4632      	mov	r2, r6
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	f000 fab6 	bl	8001424 <memmove>
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	1b9b      	subs	r3, r3, r6
 8000ebc:	60a3      	str	r3, [r4, #8]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	4433      	add	r3, r6
 8000ec2:	6023      	str	r3, [r4, #0]
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	e7db      	b.n	8000e80 <__ssputs_r+0x58>
 8000ec8:	462a      	mov	r2, r5
 8000eca:	f000 fba5 	bl	8001618 <_realloc_r>
 8000ece:	4606      	mov	r6, r0
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d1e1      	bne.n	8000e98 <__ssputs_r+0x70>
 8000ed4:	6921      	ldr	r1, [r4, #16]
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	f000 fabe 	bl	8001458 <_free_r>
 8000edc:	e7c7      	b.n	8000e6e <__ssputs_r+0x46>
	...

08000ee0 <_svfiprintf_r>:
 8000ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	898b      	ldrh	r3, [r1, #12]
 8000ee8:	061b      	lsls	r3, r3, #24
 8000eea:	b09d      	sub	sp, #116	; 0x74
 8000eec:	4607      	mov	r7, r0
 8000eee:	460d      	mov	r5, r1
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	d50e      	bpl.n	8000f12 <_svfiprintf_r+0x32>
 8000ef4:	690b      	ldr	r3, [r1, #16]
 8000ef6:	b963      	cbnz	r3, 8000f12 <_svfiprintf_r+0x32>
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	f000 fb19 	bl	8001530 <_malloc_r>
 8000efe:	6028      	str	r0, [r5, #0]
 8000f00:	6128      	str	r0, [r5, #16]
 8000f02:	b920      	cbnz	r0, 8000f0e <_svfiprintf_r+0x2e>
 8000f04:	230c      	movs	r3, #12
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	e0d1      	b.n	80010b2 <_svfiprintf_r+0x1d2>
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	616b      	str	r3, [r5, #20]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9309      	str	r3, [sp, #36]	; 0x24
 8000f16:	2320      	movs	r3, #32
 8000f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f20:	2330      	movs	r3, #48	; 0x30
 8000f22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80010cc <_svfiprintf_r+0x1ec>
 8000f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f2a:	f04f 0901 	mov.w	r9, #1
 8000f2e:	4623      	mov	r3, r4
 8000f30:	469a      	mov	sl, r3
 8000f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f36:	b10a      	cbz	r2, 8000f3c <_svfiprintf_r+0x5c>
 8000f38:	2a25      	cmp	r2, #37	; 0x25
 8000f3a:	d1f9      	bne.n	8000f30 <_svfiprintf_r+0x50>
 8000f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8000f40:	d00b      	beq.n	8000f5a <_svfiprintf_r+0x7a>
 8000f42:	465b      	mov	r3, fp
 8000f44:	4622      	mov	r2, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f7ff ff6d 	bl	8000e28 <__ssputs_r>
 8000f4e:	3001      	adds	r0, #1
 8000f50:	f000 80aa 	beq.w	80010a8 <_svfiprintf_r+0x1c8>
 8000f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f56:	445a      	add	r2, fp
 8000f58:	9209      	str	r2, [sp, #36]	; 0x24
 8000f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80a2 	beq.w	80010a8 <_svfiprintf_r+0x1c8>
 8000f64:	2300      	movs	r3, #0
 8000f66:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f6e:	f10a 0a01 	add.w	sl, sl, #1
 8000f72:	9304      	str	r3, [sp, #16]
 8000f74:	9307      	str	r3, [sp, #28]
 8000f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8000f7c:	4654      	mov	r4, sl
 8000f7e:	2205      	movs	r2, #5
 8000f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f84:	4851      	ldr	r0, [pc, #324]	; (80010cc <_svfiprintf_r+0x1ec>)
 8000f86:	f7ff f923 	bl	80001d0 <memchr>
 8000f8a:	9a04      	ldr	r2, [sp, #16]
 8000f8c:	b9d8      	cbnz	r0, 8000fc6 <_svfiprintf_r+0xe6>
 8000f8e:	06d0      	lsls	r0, r2, #27
 8000f90:	bf44      	itt	mi
 8000f92:	2320      	movmi	r3, #32
 8000f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f98:	0711      	lsls	r1, r2, #28
 8000f9a:	bf44      	itt	mi
 8000f9c:	232b      	movmi	r3, #43	; 0x2b
 8000f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8000fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa8:	d015      	beq.n	8000fd6 <_svfiprintf_r+0xf6>
 8000faa:	9a07      	ldr	r2, [sp, #28]
 8000fac:	4654      	mov	r4, sl
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f04f 0c0a 	mov.w	ip, #10
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fba:	3b30      	subs	r3, #48	; 0x30
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d94e      	bls.n	800105e <_svfiprintf_r+0x17e>
 8000fc0:	b1b0      	cbz	r0, 8000ff0 <_svfiprintf_r+0x110>
 8000fc2:	9207      	str	r2, [sp, #28]
 8000fc4:	e014      	b.n	8000ff0 <_svfiprintf_r+0x110>
 8000fc6:	eba0 0308 	sub.w	r3, r0, r8
 8000fca:	fa09 f303 	lsl.w	r3, r9, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	9304      	str	r3, [sp, #16]
 8000fd2:	46a2      	mov	sl, r4
 8000fd4:	e7d2      	b.n	8000f7c <_svfiprintf_r+0x9c>
 8000fd6:	9b03      	ldr	r3, [sp, #12]
 8000fd8:	1d19      	adds	r1, r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	9103      	str	r1, [sp, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bfbb      	ittet	lt
 8000fe2:	425b      	neglt	r3, r3
 8000fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8000fe8:	9307      	strge	r3, [sp, #28]
 8000fea:	9307      	strlt	r3, [sp, #28]
 8000fec:	bfb8      	it	lt
 8000fee:	9204      	strlt	r2, [sp, #16]
 8000ff0:	7823      	ldrb	r3, [r4, #0]
 8000ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff4:	d10c      	bne.n	8001010 <_svfiprintf_r+0x130>
 8000ff6:	7863      	ldrb	r3, [r4, #1]
 8000ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8000ffa:	d135      	bne.n	8001068 <_svfiprintf_r+0x188>
 8000ffc:	9b03      	ldr	r3, [sp, #12]
 8000ffe:	1d1a      	adds	r2, r3, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	9203      	str	r2, [sp, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	bfb8      	it	lt
 8001008:	f04f 33ff 	movlt.w	r3, #4294967295
 800100c:	3402      	adds	r4, #2
 800100e:	9305      	str	r3, [sp, #20]
 8001010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80010dc <_svfiprintf_r+0x1fc>
 8001014:	7821      	ldrb	r1, [r4, #0]
 8001016:	2203      	movs	r2, #3
 8001018:	4650      	mov	r0, sl
 800101a:	f7ff f8d9 	bl	80001d0 <memchr>
 800101e:	b140      	cbz	r0, 8001032 <_svfiprintf_r+0x152>
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	eba0 000a 	sub.w	r0, r0, sl
 8001026:	fa03 f000 	lsl.w	r0, r3, r0
 800102a:	9b04      	ldr	r3, [sp, #16]
 800102c:	4303      	orrs	r3, r0
 800102e:	3401      	adds	r4, #1
 8001030:	9304      	str	r3, [sp, #16]
 8001032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <_svfiprintf_r+0x1f0>)
 8001038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800103c:	2206      	movs	r2, #6
 800103e:	f7ff f8c7 	bl	80001d0 <memchr>
 8001042:	2800      	cmp	r0, #0
 8001044:	d038      	beq.n	80010b8 <_svfiprintf_r+0x1d8>
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <_svfiprintf_r+0x1f4>)
 8001048:	bb1b      	cbnz	r3, 8001092 <_svfiprintf_r+0x1b2>
 800104a:	9b03      	ldr	r3, [sp, #12]
 800104c:	3307      	adds	r3, #7
 800104e:	f023 0307 	bic.w	r3, r3, #7
 8001052:	3308      	adds	r3, #8
 8001054:	9303      	str	r3, [sp, #12]
 8001056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001058:	4433      	add	r3, r6
 800105a:	9309      	str	r3, [sp, #36]	; 0x24
 800105c:	e767      	b.n	8000f2e <_svfiprintf_r+0x4e>
 800105e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001062:	460c      	mov	r4, r1
 8001064:	2001      	movs	r0, #1
 8001066:	e7a5      	b.n	8000fb4 <_svfiprintf_r+0xd4>
 8001068:	2300      	movs	r3, #0
 800106a:	3401      	adds	r4, #1
 800106c:	9305      	str	r3, [sp, #20]
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 0c0a 	mov.w	ip, #10
 8001074:	4620      	mov	r0, r4
 8001076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800107a:	3a30      	subs	r2, #48	; 0x30
 800107c:	2a09      	cmp	r2, #9
 800107e:	d903      	bls.n	8001088 <_svfiprintf_r+0x1a8>
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0c5      	beq.n	8001010 <_svfiprintf_r+0x130>
 8001084:	9105      	str	r1, [sp, #20]
 8001086:	e7c3      	b.n	8001010 <_svfiprintf_r+0x130>
 8001088:	fb0c 2101 	mla	r1, ip, r1, r2
 800108c:	4604      	mov	r4, r0
 800108e:	2301      	movs	r3, #1
 8001090:	e7f0      	b.n	8001074 <_svfiprintf_r+0x194>
 8001092:	ab03      	add	r3, sp, #12
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	462a      	mov	r2, r5
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <_svfiprintf_r+0x1f8>)
 800109a:	a904      	add	r1, sp, #16
 800109c:	4638      	mov	r0, r7
 800109e:	f3af 8000 	nop.w
 80010a2:	1c42      	adds	r2, r0, #1
 80010a4:	4606      	mov	r6, r0
 80010a6:	d1d6      	bne.n	8001056 <_svfiprintf_r+0x176>
 80010a8:	89ab      	ldrh	r3, [r5, #12]
 80010aa:	065b      	lsls	r3, r3, #25
 80010ac:	f53f af2c 	bmi.w	8000f08 <_svfiprintf_r+0x28>
 80010b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80010b2:	b01d      	add	sp, #116	; 0x74
 80010b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b8:	ab03      	add	r3, sp, #12
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	462a      	mov	r2, r5
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <_svfiprintf_r+0x1f8>)
 80010c0:	a904      	add	r1, sp, #16
 80010c2:	4638      	mov	r0, r7
 80010c4:	f000 f87a 	bl	80011bc <_printf_i>
 80010c8:	e7eb      	b.n	80010a2 <_svfiprintf_r+0x1c2>
 80010ca:	bf00      	nop
 80010cc:	08001728 	.word	0x08001728
 80010d0:	08001732 	.word	0x08001732
 80010d4:	00000000 	.word	0x00000000
 80010d8:	08000e29 	.word	0x08000e29
 80010dc:	0800172e 	.word	0x0800172e

080010e0 <_printf_common>:
 80010e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e4:	4616      	mov	r6, r2
 80010e6:	4699      	mov	r9, r3
 80010e8:	688a      	ldr	r2, [r1, #8]
 80010ea:	690b      	ldr	r3, [r1, #16]
 80010ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	bfb8      	it	lt
 80010f4:	4613      	movlt	r3, r2
 80010f6:	6033      	str	r3, [r6, #0]
 80010f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010fc:	4607      	mov	r7, r0
 80010fe:	460c      	mov	r4, r1
 8001100:	b10a      	cbz	r2, 8001106 <_printf_common+0x26>
 8001102:	3301      	adds	r3, #1
 8001104:	6033      	str	r3, [r6, #0]
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	0699      	lsls	r1, r3, #26
 800110a:	bf42      	ittt	mi
 800110c:	6833      	ldrmi	r3, [r6, #0]
 800110e:	3302      	addmi	r3, #2
 8001110:	6033      	strmi	r3, [r6, #0]
 8001112:	6825      	ldr	r5, [r4, #0]
 8001114:	f015 0506 	ands.w	r5, r5, #6
 8001118:	d106      	bne.n	8001128 <_printf_common+0x48>
 800111a:	f104 0a19 	add.w	sl, r4, #25
 800111e:	68e3      	ldr	r3, [r4, #12]
 8001120:	6832      	ldr	r2, [r6, #0]
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	42ab      	cmp	r3, r5
 8001126:	dc26      	bgt.n	8001176 <_printf_common+0x96>
 8001128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800112c:	1e13      	subs	r3, r2, #0
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	bf18      	it	ne
 8001132:	2301      	movne	r3, #1
 8001134:	0692      	lsls	r2, r2, #26
 8001136:	d42b      	bmi.n	8001190 <_printf_common+0xb0>
 8001138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800113c:	4649      	mov	r1, r9
 800113e:	4638      	mov	r0, r7
 8001140:	47c0      	blx	r8
 8001142:	3001      	adds	r0, #1
 8001144:	d01e      	beq.n	8001184 <_printf_common+0xa4>
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	68e5      	ldr	r5, [r4, #12]
 800114a:	6832      	ldr	r2, [r6, #0]
 800114c:	f003 0306 	and.w	r3, r3, #6
 8001150:	2b04      	cmp	r3, #4
 8001152:	bf08      	it	eq
 8001154:	1aad      	subeq	r5, r5, r2
 8001156:	68a3      	ldr	r3, [r4, #8]
 8001158:	6922      	ldr	r2, [r4, #16]
 800115a:	bf0c      	ite	eq
 800115c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001160:	2500      	movne	r5, #0
 8001162:	4293      	cmp	r3, r2
 8001164:	bfc4      	itt	gt
 8001166:	1a9b      	subgt	r3, r3, r2
 8001168:	18ed      	addgt	r5, r5, r3
 800116a:	2600      	movs	r6, #0
 800116c:	341a      	adds	r4, #26
 800116e:	42b5      	cmp	r5, r6
 8001170:	d11a      	bne.n	80011a8 <_printf_common+0xc8>
 8001172:	2000      	movs	r0, #0
 8001174:	e008      	b.n	8001188 <_printf_common+0xa8>
 8001176:	2301      	movs	r3, #1
 8001178:	4652      	mov	r2, sl
 800117a:	4649      	mov	r1, r9
 800117c:	4638      	mov	r0, r7
 800117e:	47c0      	blx	r8
 8001180:	3001      	adds	r0, #1
 8001182:	d103      	bne.n	800118c <_printf_common+0xac>
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	3501      	adds	r5, #1
 800118e:	e7c6      	b.n	800111e <_printf_common+0x3e>
 8001190:	18e1      	adds	r1, r4, r3
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	2030      	movs	r0, #48	; 0x30
 8001196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800119a:	4422      	add	r2, r4
 800119c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80011a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80011a4:	3302      	adds	r3, #2
 80011a6:	e7c7      	b.n	8001138 <_printf_common+0x58>
 80011a8:	2301      	movs	r3, #1
 80011aa:	4622      	mov	r2, r4
 80011ac:	4649      	mov	r1, r9
 80011ae:	4638      	mov	r0, r7
 80011b0:	47c0      	blx	r8
 80011b2:	3001      	adds	r0, #1
 80011b4:	d0e6      	beq.n	8001184 <_printf_common+0xa4>
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7d9      	b.n	800116e <_printf_common+0x8e>
	...

080011bc <_printf_i>:
 80011bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	7e0f      	ldrb	r7, [r1, #24]
 80011c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80011c4:	2f78      	cmp	r7, #120	; 0x78
 80011c6:	4691      	mov	r9, r2
 80011c8:	4680      	mov	r8, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	469a      	mov	sl, r3
 80011ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80011d2:	d807      	bhi.n	80011e4 <_printf_i+0x28>
 80011d4:	2f62      	cmp	r7, #98	; 0x62
 80011d6:	d80a      	bhi.n	80011ee <_printf_i+0x32>
 80011d8:	2f00      	cmp	r7, #0
 80011da:	f000 80d8 	beq.w	800138e <_printf_i+0x1d2>
 80011de:	2f58      	cmp	r7, #88	; 0x58
 80011e0:	f000 80a3 	beq.w	800132a <_printf_i+0x16e>
 80011e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80011ec:	e03a      	b.n	8001264 <_printf_i+0xa8>
 80011ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80011f2:	2b15      	cmp	r3, #21
 80011f4:	d8f6      	bhi.n	80011e4 <_printf_i+0x28>
 80011f6:	a101      	add	r1, pc, #4	; (adr r1, 80011fc <_printf_i+0x40>)
 80011f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001269 	.word	0x08001269
 8001204:	080011e5 	.word	0x080011e5
 8001208:	080011e5 	.word	0x080011e5
 800120c:	080011e5 	.word	0x080011e5
 8001210:	080011e5 	.word	0x080011e5
 8001214:	08001269 	.word	0x08001269
 8001218:	080011e5 	.word	0x080011e5
 800121c:	080011e5 	.word	0x080011e5
 8001220:	080011e5 	.word	0x080011e5
 8001224:	080011e5 	.word	0x080011e5
 8001228:	08001375 	.word	0x08001375
 800122c:	08001299 	.word	0x08001299
 8001230:	08001357 	.word	0x08001357
 8001234:	080011e5 	.word	0x080011e5
 8001238:	080011e5 	.word	0x080011e5
 800123c:	08001397 	.word	0x08001397
 8001240:	080011e5 	.word	0x080011e5
 8001244:	08001299 	.word	0x08001299
 8001248:	080011e5 	.word	0x080011e5
 800124c:	080011e5 	.word	0x080011e5
 8001250:	0800135f 	.word	0x0800135f
 8001254:	682b      	ldr	r3, [r5, #0]
 8001256:	1d1a      	adds	r2, r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	602a      	str	r2, [r5, #0]
 800125c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001264:	2301      	movs	r3, #1
 8001266:	e0a3      	b.n	80013b0 <_printf_i+0x1f4>
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	6829      	ldr	r1, [r5, #0]
 800126c:	0606      	lsls	r6, r0, #24
 800126e:	f101 0304 	add.w	r3, r1, #4
 8001272:	d50a      	bpl.n	800128a <_printf_i+0xce>
 8001274:	680e      	ldr	r6, [r1, #0]
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	2e00      	cmp	r6, #0
 800127a:	da03      	bge.n	8001284 <_printf_i+0xc8>
 800127c:	232d      	movs	r3, #45	; 0x2d
 800127e:	4276      	negs	r6, r6
 8001280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001284:	485e      	ldr	r0, [pc, #376]	; (8001400 <_printf_i+0x244>)
 8001286:	230a      	movs	r3, #10
 8001288:	e019      	b.n	80012be <_printf_i+0x102>
 800128a:	680e      	ldr	r6, [r1, #0]
 800128c:	602b      	str	r3, [r5, #0]
 800128e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001292:	bf18      	it	ne
 8001294:	b236      	sxthne	r6, r6
 8001296:	e7ef      	b.n	8001278 <_printf_i+0xbc>
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	6820      	ldr	r0, [r4, #0]
 800129c:	1d19      	adds	r1, r3, #4
 800129e:	6029      	str	r1, [r5, #0]
 80012a0:	0601      	lsls	r1, r0, #24
 80012a2:	d501      	bpl.n	80012a8 <_printf_i+0xec>
 80012a4:	681e      	ldr	r6, [r3, #0]
 80012a6:	e002      	b.n	80012ae <_printf_i+0xf2>
 80012a8:	0646      	lsls	r6, r0, #25
 80012aa:	d5fb      	bpl.n	80012a4 <_printf_i+0xe8>
 80012ac:	881e      	ldrh	r6, [r3, #0]
 80012ae:	4854      	ldr	r0, [pc, #336]	; (8001400 <_printf_i+0x244>)
 80012b0:	2f6f      	cmp	r7, #111	; 0x6f
 80012b2:	bf0c      	ite	eq
 80012b4:	2308      	moveq	r3, #8
 80012b6:	230a      	movne	r3, #10
 80012b8:	2100      	movs	r1, #0
 80012ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80012be:	6865      	ldr	r5, [r4, #4]
 80012c0:	60a5      	str	r5, [r4, #8]
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	bfa2      	ittt	ge
 80012c6:	6821      	ldrge	r1, [r4, #0]
 80012c8:	f021 0104 	bicge.w	r1, r1, #4
 80012cc:	6021      	strge	r1, [r4, #0]
 80012ce:	b90e      	cbnz	r6, 80012d4 <_printf_i+0x118>
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d04d      	beq.n	8001370 <_printf_i+0x1b4>
 80012d4:	4615      	mov	r5, r2
 80012d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80012da:	fb03 6711 	mls	r7, r3, r1, r6
 80012de:	5dc7      	ldrb	r7, [r0, r7]
 80012e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80012e4:	4637      	mov	r7, r6
 80012e6:	42bb      	cmp	r3, r7
 80012e8:	460e      	mov	r6, r1
 80012ea:	d9f4      	bls.n	80012d6 <_printf_i+0x11a>
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d10b      	bne.n	8001308 <_printf_i+0x14c>
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	07de      	lsls	r6, r3, #31
 80012f4:	d508      	bpl.n	8001308 <_printf_i+0x14c>
 80012f6:	6923      	ldr	r3, [r4, #16]
 80012f8:	6861      	ldr	r1, [r4, #4]
 80012fa:	4299      	cmp	r1, r3
 80012fc:	bfde      	ittt	le
 80012fe:	2330      	movle	r3, #48	; 0x30
 8001300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001308:	1b52      	subs	r2, r2, r5
 800130a:	6122      	str	r2, [r4, #16]
 800130c:	f8cd a000 	str.w	sl, [sp]
 8001310:	464b      	mov	r3, r9
 8001312:	aa03      	add	r2, sp, #12
 8001314:	4621      	mov	r1, r4
 8001316:	4640      	mov	r0, r8
 8001318:	f7ff fee2 	bl	80010e0 <_printf_common>
 800131c:	3001      	adds	r0, #1
 800131e:	d14c      	bne.n	80013ba <_printf_i+0x1fe>
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	b004      	add	sp, #16
 8001326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <_printf_i+0x244>)
 800132c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001330:	6829      	ldr	r1, [r5, #0]
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f851 6b04 	ldr.w	r6, [r1], #4
 8001338:	6029      	str	r1, [r5, #0]
 800133a:	061d      	lsls	r5, r3, #24
 800133c:	d514      	bpl.n	8001368 <_printf_i+0x1ac>
 800133e:	07df      	lsls	r7, r3, #31
 8001340:	bf44      	itt	mi
 8001342:	f043 0320 	orrmi.w	r3, r3, #32
 8001346:	6023      	strmi	r3, [r4, #0]
 8001348:	b91e      	cbnz	r6, 8001352 <_printf_i+0x196>
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	f023 0320 	bic.w	r3, r3, #32
 8001350:	6023      	str	r3, [r4, #0]
 8001352:	2310      	movs	r3, #16
 8001354:	e7b0      	b.n	80012b8 <_printf_i+0xfc>
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	2378      	movs	r3, #120	; 0x78
 8001360:	4828      	ldr	r0, [pc, #160]	; (8001404 <_printf_i+0x248>)
 8001362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001366:	e7e3      	b.n	8001330 <_printf_i+0x174>
 8001368:	0659      	lsls	r1, r3, #25
 800136a:	bf48      	it	mi
 800136c:	b2b6      	uxthmi	r6, r6
 800136e:	e7e6      	b.n	800133e <_printf_i+0x182>
 8001370:	4615      	mov	r5, r2
 8001372:	e7bb      	b.n	80012ec <_printf_i+0x130>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	6826      	ldr	r6, [r4, #0]
 8001378:	6961      	ldr	r1, [r4, #20]
 800137a:	1d18      	adds	r0, r3, #4
 800137c:	6028      	str	r0, [r5, #0]
 800137e:	0635      	lsls	r5, r6, #24
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	d501      	bpl.n	8001388 <_printf_i+0x1cc>
 8001384:	6019      	str	r1, [r3, #0]
 8001386:	e002      	b.n	800138e <_printf_i+0x1d2>
 8001388:	0670      	lsls	r0, r6, #25
 800138a:	d5fb      	bpl.n	8001384 <_printf_i+0x1c8>
 800138c:	8019      	strh	r1, [r3, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	6123      	str	r3, [r4, #16]
 8001392:	4615      	mov	r5, r2
 8001394:	e7ba      	b.n	800130c <_printf_i+0x150>
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	1d1a      	adds	r2, r3, #4
 800139a:	602a      	str	r2, [r5, #0]
 800139c:	681d      	ldr	r5, [r3, #0]
 800139e:	6862      	ldr	r2, [r4, #4]
 80013a0:	2100      	movs	r1, #0
 80013a2:	4628      	mov	r0, r5
 80013a4:	f7fe ff14 	bl	80001d0 <memchr>
 80013a8:	b108      	cbz	r0, 80013ae <_printf_i+0x1f2>
 80013aa:	1b40      	subs	r0, r0, r5
 80013ac:	6060      	str	r0, [r4, #4]
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	6123      	str	r3, [r4, #16]
 80013b2:	2300      	movs	r3, #0
 80013b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013b8:	e7a8      	b.n	800130c <_printf_i+0x150>
 80013ba:	6923      	ldr	r3, [r4, #16]
 80013bc:	462a      	mov	r2, r5
 80013be:	4649      	mov	r1, r9
 80013c0:	4640      	mov	r0, r8
 80013c2:	47d0      	blx	sl
 80013c4:	3001      	adds	r0, #1
 80013c6:	d0ab      	beq.n	8001320 <_printf_i+0x164>
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	079b      	lsls	r3, r3, #30
 80013cc:	d413      	bmi.n	80013f6 <_printf_i+0x23a>
 80013ce:	68e0      	ldr	r0, [r4, #12]
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	4298      	cmp	r0, r3
 80013d4:	bfb8      	it	lt
 80013d6:	4618      	movlt	r0, r3
 80013d8:	e7a4      	b.n	8001324 <_printf_i+0x168>
 80013da:	2301      	movs	r3, #1
 80013dc:	4632      	mov	r2, r6
 80013de:	4649      	mov	r1, r9
 80013e0:	4640      	mov	r0, r8
 80013e2:	47d0      	blx	sl
 80013e4:	3001      	adds	r0, #1
 80013e6:	d09b      	beq.n	8001320 <_printf_i+0x164>
 80013e8:	3501      	adds	r5, #1
 80013ea:	68e3      	ldr	r3, [r4, #12]
 80013ec:	9903      	ldr	r1, [sp, #12]
 80013ee:	1a5b      	subs	r3, r3, r1
 80013f0:	42ab      	cmp	r3, r5
 80013f2:	dcf2      	bgt.n	80013da <_printf_i+0x21e>
 80013f4:	e7eb      	b.n	80013ce <_printf_i+0x212>
 80013f6:	2500      	movs	r5, #0
 80013f8:	f104 0619 	add.w	r6, r4, #25
 80013fc:	e7f5      	b.n	80013ea <_printf_i+0x22e>
 80013fe:	bf00      	nop
 8001400:	08001739 	.word	0x08001739
 8001404:	0800174a 	.word	0x0800174a

08001408 <memcpy>:
 8001408:	440a      	add	r2, r1
 800140a:	4291      	cmp	r1, r2
 800140c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001410:	d100      	bne.n	8001414 <memcpy+0xc>
 8001412:	4770      	bx	lr
 8001414:	b510      	push	{r4, lr}
 8001416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800141a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800141e:	4291      	cmp	r1, r2
 8001420:	d1f9      	bne.n	8001416 <memcpy+0xe>
 8001422:	bd10      	pop	{r4, pc}

08001424 <memmove>:
 8001424:	4288      	cmp	r0, r1
 8001426:	b510      	push	{r4, lr}
 8001428:	eb01 0402 	add.w	r4, r1, r2
 800142c:	d902      	bls.n	8001434 <memmove+0x10>
 800142e:	4284      	cmp	r4, r0
 8001430:	4623      	mov	r3, r4
 8001432:	d807      	bhi.n	8001444 <memmove+0x20>
 8001434:	1e43      	subs	r3, r0, #1
 8001436:	42a1      	cmp	r1, r4
 8001438:	d008      	beq.n	800144c <memmove+0x28>
 800143a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800143e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001442:	e7f8      	b.n	8001436 <memmove+0x12>
 8001444:	4402      	add	r2, r0
 8001446:	4601      	mov	r1, r0
 8001448:	428a      	cmp	r2, r1
 800144a:	d100      	bne.n	800144e <memmove+0x2a>
 800144c:	bd10      	pop	{r4, pc}
 800144e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001456:	e7f7      	b.n	8001448 <memmove+0x24>

08001458 <_free_r>:
 8001458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800145a:	2900      	cmp	r1, #0
 800145c:	d044      	beq.n	80014e8 <_free_r+0x90>
 800145e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001462:	9001      	str	r0, [sp, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f1a1 0404 	sub.w	r4, r1, #4
 800146a:	bfb8      	it	lt
 800146c:	18e4      	addlt	r4, r4, r3
 800146e:	f000 f913 	bl	8001698 <__malloc_lock>
 8001472:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <_free_r+0x94>)
 8001474:	9801      	ldr	r0, [sp, #4]
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	b933      	cbnz	r3, 8001488 <_free_r+0x30>
 800147a:	6063      	str	r3, [r4, #4]
 800147c:	6014      	str	r4, [r2, #0]
 800147e:	b003      	add	sp, #12
 8001480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001484:	f000 b90e 	b.w	80016a4 <__malloc_unlock>
 8001488:	42a3      	cmp	r3, r4
 800148a:	d908      	bls.n	800149e <_free_r+0x46>
 800148c:	6825      	ldr	r5, [r4, #0]
 800148e:	1961      	adds	r1, r4, r5
 8001490:	428b      	cmp	r3, r1
 8001492:	bf01      	itttt	eq
 8001494:	6819      	ldreq	r1, [r3, #0]
 8001496:	685b      	ldreq	r3, [r3, #4]
 8001498:	1949      	addeq	r1, r1, r5
 800149a:	6021      	streq	r1, [r4, #0]
 800149c:	e7ed      	b.n	800147a <_free_r+0x22>
 800149e:	461a      	mov	r2, r3
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	b10b      	cbz	r3, 80014a8 <_free_r+0x50>
 80014a4:	42a3      	cmp	r3, r4
 80014a6:	d9fa      	bls.n	800149e <_free_r+0x46>
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	1855      	adds	r5, r2, r1
 80014ac:	42a5      	cmp	r5, r4
 80014ae:	d10b      	bne.n	80014c8 <_free_r+0x70>
 80014b0:	6824      	ldr	r4, [r4, #0]
 80014b2:	4421      	add	r1, r4
 80014b4:	1854      	adds	r4, r2, r1
 80014b6:	42a3      	cmp	r3, r4
 80014b8:	6011      	str	r1, [r2, #0]
 80014ba:	d1e0      	bne.n	800147e <_free_r+0x26>
 80014bc:	681c      	ldr	r4, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	6053      	str	r3, [r2, #4]
 80014c2:	4421      	add	r1, r4
 80014c4:	6011      	str	r1, [r2, #0]
 80014c6:	e7da      	b.n	800147e <_free_r+0x26>
 80014c8:	d902      	bls.n	80014d0 <_free_r+0x78>
 80014ca:	230c      	movs	r3, #12
 80014cc:	6003      	str	r3, [r0, #0]
 80014ce:	e7d6      	b.n	800147e <_free_r+0x26>
 80014d0:	6825      	ldr	r5, [r4, #0]
 80014d2:	1961      	adds	r1, r4, r5
 80014d4:	428b      	cmp	r3, r1
 80014d6:	bf04      	itt	eq
 80014d8:	6819      	ldreq	r1, [r3, #0]
 80014da:	685b      	ldreq	r3, [r3, #4]
 80014dc:	6063      	str	r3, [r4, #4]
 80014de:	bf04      	itt	eq
 80014e0:	1949      	addeq	r1, r1, r5
 80014e2:	6021      	streq	r1, [r4, #0]
 80014e4:	6054      	str	r4, [r2, #4]
 80014e6:	e7ca      	b.n	800147e <_free_r+0x26>
 80014e8:	b003      	add	sp, #12
 80014ea:	bd30      	pop	{r4, r5, pc}
 80014ec:	200000e4 	.word	0x200000e4

080014f0 <sbrk_aligned>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4e0e      	ldr	r6, [pc, #56]	; (800152c <sbrk_aligned+0x3c>)
 80014f4:	460c      	mov	r4, r1
 80014f6:	6831      	ldr	r1, [r6, #0]
 80014f8:	4605      	mov	r5, r0
 80014fa:	b911      	cbnz	r1, 8001502 <sbrk_aligned+0x12>
 80014fc:	f000 f8bc 	bl	8001678 <_sbrk_r>
 8001500:	6030      	str	r0, [r6, #0]
 8001502:	4621      	mov	r1, r4
 8001504:	4628      	mov	r0, r5
 8001506:	f000 f8b7 	bl	8001678 <_sbrk_r>
 800150a:	1c43      	adds	r3, r0, #1
 800150c:	d00a      	beq.n	8001524 <sbrk_aligned+0x34>
 800150e:	1cc4      	adds	r4, r0, #3
 8001510:	f024 0403 	bic.w	r4, r4, #3
 8001514:	42a0      	cmp	r0, r4
 8001516:	d007      	beq.n	8001528 <sbrk_aligned+0x38>
 8001518:	1a21      	subs	r1, r4, r0
 800151a:	4628      	mov	r0, r5
 800151c:	f000 f8ac 	bl	8001678 <_sbrk_r>
 8001520:	3001      	adds	r0, #1
 8001522:	d101      	bne.n	8001528 <sbrk_aligned+0x38>
 8001524:	f04f 34ff 	mov.w	r4, #4294967295
 8001528:	4620      	mov	r0, r4
 800152a:	bd70      	pop	{r4, r5, r6, pc}
 800152c:	200000e8 	.word	0x200000e8

08001530 <_malloc_r>:
 8001530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001534:	1ccd      	adds	r5, r1, #3
 8001536:	f025 0503 	bic.w	r5, r5, #3
 800153a:	3508      	adds	r5, #8
 800153c:	2d0c      	cmp	r5, #12
 800153e:	bf38      	it	cc
 8001540:	250c      	movcc	r5, #12
 8001542:	2d00      	cmp	r5, #0
 8001544:	4607      	mov	r7, r0
 8001546:	db01      	blt.n	800154c <_malloc_r+0x1c>
 8001548:	42a9      	cmp	r1, r5
 800154a:	d905      	bls.n	8001558 <_malloc_r+0x28>
 800154c:	230c      	movs	r3, #12
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	2600      	movs	r6, #0
 8001552:	4630      	mov	r0, r6
 8001554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001558:	4e2e      	ldr	r6, [pc, #184]	; (8001614 <_malloc_r+0xe4>)
 800155a:	f000 f89d 	bl	8001698 <__malloc_lock>
 800155e:	6833      	ldr	r3, [r6, #0]
 8001560:	461c      	mov	r4, r3
 8001562:	bb34      	cbnz	r4, 80015b2 <_malloc_r+0x82>
 8001564:	4629      	mov	r1, r5
 8001566:	4638      	mov	r0, r7
 8001568:	f7ff ffc2 	bl	80014f0 <sbrk_aligned>
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	4604      	mov	r4, r0
 8001570:	d14d      	bne.n	800160e <_malloc_r+0xde>
 8001572:	6834      	ldr	r4, [r6, #0]
 8001574:	4626      	mov	r6, r4
 8001576:	2e00      	cmp	r6, #0
 8001578:	d140      	bne.n	80015fc <_malloc_r+0xcc>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	4631      	mov	r1, r6
 800157e:	4638      	mov	r0, r7
 8001580:	eb04 0803 	add.w	r8, r4, r3
 8001584:	f000 f878 	bl	8001678 <_sbrk_r>
 8001588:	4580      	cmp	r8, r0
 800158a:	d13a      	bne.n	8001602 <_malloc_r+0xd2>
 800158c:	6821      	ldr	r1, [r4, #0]
 800158e:	3503      	adds	r5, #3
 8001590:	1a6d      	subs	r5, r5, r1
 8001592:	f025 0503 	bic.w	r5, r5, #3
 8001596:	3508      	adds	r5, #8
 8001598:	2d0c      	cmp	r5, #12
 800159a:	bf38      	it	cc
 800159c:	250c      	movcc	r5, #12
 800159e:	4629      	mov	r1, r5
 80015a0:	4638      	mov	r0, r7
 80015a2:	f7ff ffa5 	bl	80014f0 <sbrk_aligned>
 80015a6:	3001      	adds	r0, #1
 80015a8:	d02b      	beq.n	8001602 <_malloc_r+0xd2>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	442b      	add	r3, r5
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	e00e      	b.n	80015d0 <_malloc_r+0xa0>
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	1b52      	subs	r2, r2, r5
 80015b6:	d41e      	bmi.n	80015f6 <_malloc_r+0xc6>
 80015b8:	2a0b      	cmp	r2, #11
 80015ba:	d916      	bls.n	80015ea <_malloc_r+0xba>
 80015bc:	1961      	adds	r1, r4, r5
 80015be:	42a3      	cmp	r3, r4
 80015c0:	6025      	str	r5, [r4, #0]
 80015c2:	bf18      	it	ne
 80015c4:	6059      	strne	r1, [r3, #4]
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	bf08      	it	eq
 80015ca:	6031      	streq	r1, [r6, #0]
 80015cc:	5162      	str	r2, [r4, r5]
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	4638      	mov	r0, r7
 80015d2:	f104 060b 	add.w	r6, r4, #11
 80015d6:	f000 f865 	bl	80016a4 <__malloc_unlock>
 80015da:	f026 0607 	bic.w	r6, r6, #7
 80015de:	1d23      	adds	r3, r4, #4
 80015e0:	1af2      	subs	r2, r6, r3
 80015e2:	d0b6      	beq.n	8001552 <_malloc_r+0x22>
 80015e4:	1b9b      	subs	r3, r3, r6
 80015e6:	50a3      	str	r3, [r4, r2]
 80015e8:	e7b3      	b.n	8001552 <_malloc_r+0x22>
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	42a3      	cmp	r3, r4
 80015ee:	bf0c      	ite	eq
 80015f0:	6032      	streq	r2, [r6, #0]
 80015f2:	605a      	strne	r2, [r3, #4]
 80015f4:	e7ec      	b.n	80015d0 <_malloc_r+0xa0>
 80015f6:	4623      	mov	r3, r4
 80015f8:	6864      	ldr	r4, [r4, #4]
 80015fa:	e7b2      	b.n	8001562 <_malloc_r+0x32>
 80015fc:	4634      	mov	r4, r6
 80015fe:	6876      	ldr	r6, [r6, #4]
 8001600:	e7b9      	b.n	8001576 <_malloc_r+0x46>
 8001602:	230c      	movs	r3, #12
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4638      	mov	r0, r7
 8001608:	f000 f84c 	bl	80016a4 <__malloc_unlock>
 800160c:	e7a1      	b.n	8001552 <_malloc_r+0x22>
 800160e:	6025      	str	r5, [r4, #0]
 8001610:	e7de      	b.n	80015d0 <_malloc_r+0xa0>
 8001612:	bf00      	nop
 8001614:	200000e4 	.word	0x200000e4

08001618 <_realloc_r>:
 8001618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800161c:	4680      	mov	r8, r0
 800161e:	4614      	mov	r4, r2
 8001620:	460e      	mov	r6, r1
 8001622:	b921      	cbnz	r1, 800162e <_realloc_r+0x16>
 8001624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001628:	4611      	mov	r1, r2
 800162a:	f7ff bf81 	b.w	8001530 <_malloc_r>
 800162e:	b92a      	cbnz	r2, 800163c <_realloc_r+0x24>
 8001630:	f7ff ff12 	bl	8001458 <_free_r>
 8001634:	4625      	mov	r5, r4
 8001636:	4628      	mov	r0, r5
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163c:	f000 f838 	bl	80016b0 <_malloc_usable_size_r>
 8001640:	4284      	cmp	r4, r0
 8001642:	4607      	mov	r7, r0
 8001644:	d802      	bhi.n	800164c <_realloc_r+0x34>
 8001646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800164a:	d812      	bhi.n	8001672 <_realloc_r+0x5a>
 800164c:	4621      	mov	r1, r4
 800164e:	4640      	mov	r0, r8
 8001650:	f7ff ff6e 	bl	8001530 <_malloc_r>
 8001654:	4605      	mov	r5, r0
 8001656:	2800      	cmp	r0, #0
 8001658:	d0ed      	beq.n	8001636 <_realloc_r+0x1e>
 800165a:	42bc      	cmp	r4, r7
 800165c:	4622      	mov	r2, r4
 800165e:	4631      	mov	r1, r6
 8001660:	bf28      	it	cs
 8001662:	463a      	movcs	r2, r7
 8001664:	f7ff fed0 	bl	8001408 <memcpy>
 8001668:	4631      	mov	r1, r6
 800166a:	4640      	mov	r0, r8
 800166c:	f7ff fef4 	bl	8001458 <_free_r>
 8001670:	e7e1      	b.n	8001636 <_realloc_r+0x1e>
 8001672:	4635      	mov	r5, r6
 8001674:	e7df      	b.n	8001636 <_realloc_r+0x1e>
	...

08001678 <_sbrk_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4d06      	ldr	r5, [pc, #24]	; (8001694 <_sbrk_r+0x1c>)
 800167c:	2300      	movs	r3, #0
 800167e:	4604      	mov	r4, r0
 8001680:	4608      	mov	r0, r1
 8001682:	602b      	str	r3, [r5, #0]
 8001684:	f000 f81e 	bl	80016c4 <_sbrk>
 8001688:	1c43      	adds	r3, r0, #1
 800168a:	d102      	bne.n	8001692 <_sbrk_r+0x1a>
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	b103      	cbz	r3, 8001692 <_sbrk_r+0x1a>
 8001690:	6023      	str	r3, [r4, #0]
 8001692:	bd38      	pop	{r3, r4, r5, pc}
 8001694:	200000ec 	.word	0x200000ec

08001698 <__malloc_lock>:
 8001698:	4801      	ldr	r0, [pc, #4]	; (80016a0 <__malloc_lock+0x8>)
 800169a:	f000 b811 	b.w	80016c0 <__retarget_lock_acquire_recursive>
 800169e:	bf00      	nop
 80016a0:	200000f0 	.word	0x200000f0

080016a4 <__malloc_unlock>:
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <__malloc_unlock+0x8>)
 80016a6:	f000 b80c 	b.w	80016c2 <__retarget_lock_release_recursive>
 80016aa:	bf00      	nop
 80016ac:	200000f0 	.word	0x200000f0

080016b0 <_malloc_usable_size_r>:
 80016b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b4:	1f18      	subs	r0, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bfbc      	itt	lt
 80016ba:	580b      	ldrlt	r3, [r1, r0]
 80016bc:	18c0      	addlt	r0, r0, r3
 80016be:	4770      	bx	lr

080016c0 <__retarget_lock_acquire_recursive>:
 80016c0:	4770      	bx	lr

080016c2 <__retarget_lock_release_recursive>:
 80016c2:	4770      	bx	lr

080016c4 <_sbrk>:
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <_sbrk+0x14>)
 80016c6:	6811      	ldr	r1, [r2, #0]
 80016c8:	4603      	mov	r3, r0
 80016ca:	b909      	cbnz	r1, 80016d0 <_sbrk+0xc>
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <_sbrk+0x18>)
 80016ce:	6011      	str	r1, [r2, #0]
 80016d0:	6810      	ldr	r0, [r2, #0]
 80016d2:	4403      	add	r3, r0
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4770      	bx	lr
 80016d8:	200000f4 	.word	0x200000f4
 80016dc:	200000f8 	.word	0x200000f8

080016e0 <_init>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr

080016ec <_fini>:
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ee:	bf00      	nop
 80016f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f2:	bc08      	pop	{r3}
 80016f4:	469e      	mov	lr, r3
 80016f6:	4770      	bx	lr
