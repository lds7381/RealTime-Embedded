
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800525c  0800525c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005264  08005264  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800526c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  080052dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080052dc  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109b6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f66  00000000  00000000  00030a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000329c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00033868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000afb5  00000000  00000000  00034648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e51  00000000  00000000  0003f5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f48b3  00000000  00000000  0005044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144d01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004224  00000000  00000000  00144d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fbc 	.word	0x08004fbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004fbc 	.word	0x08004fbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <power_on_self_test>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// USER FUNCTIONS
_Bool power_on_self_test() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	uint32_t first, second, difference;

	// Print post
	print("POST: Performing...");
 800057a:	4818      	ldr	r0, [pc, #96]	; (80005dc <power_on_self_test+0x68>)
 800057c:	f000 f950 	bl	8000820 <print>

	// Get the first capture
	while(!(TIM2->SR & TIM_SR_CC1IF));
 8000580:	bf00      	nop
 8000582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000586:	691b      	ldr	r3, [r3, #16]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f8      	beq.n	8000582 <power_on_self_test+0xe>
	first = TIM2->CCR1;
 8000590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	60fb      	str	r3, [r7, #12]

	while(!(TIM2->SR & TIM_SR_CC1IF));
 8000598:	bf00      	nop
 800059a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f8      	beq.n	800059a <power_on_self_test+0x26>
	second = TIM2->CCR1;
 80005a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	60bb      	str	r3, [r7, #8]

	difference = second - first;
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	607b      	str	r3, [r7, #4]
	if (difference > (100 * 1000)) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <power_on_self_test+0x6c>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d904      	bls.n	80005ca <power_on_self_test+0x56>
		print("POST: Failed, did not receive a pulse less than 100 milliseconds long");
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <power_on_self_test+0x70>)
 80005c2:	f000 f92d 	bl	8000820 <print>
		return 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e003      	b.n	80005d2 <power_on_self_test+0x5e>
	}

	print("POST: Successful");
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <power_on_self_test+0x74>)
 80005cc:	f000 f928 	bl	8000820 <print>
	return 1;
 80005d0:	2301      	movs	r3, #1

}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	08004fd4 	.word	0x08004fd4
 80005e0:	000186a0 	.word	0x000186a0
 80005e4:	08004fe8 	.word	0x08004fe8
 80005e8:	08005030 	.word	0x08005030

080005ec <set_timer_base>:

int set_timer_base(uint16_t base) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	char buff[30];

	if (base < MIN_PERIOD) return 0;
 80005f6:	2232      	movs	r2, #50	; 0x32
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d201      	bcs.n	8000602 <set_timer_base+0x16>
 80005fe:	2300      	movs	r3, #0
 8000600:	e028      	b.n	8000654 <set_timer_base+0x68>
	else if (base > MAX_PERIOD ) return 0;
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <set_timer_base+0x70>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d901      	bls.n	800060e <set_timer_base+0x22>
 800060a:	2300      	movs	r3, #0
 800060c:	e022      	b.n	8000654 <set_timer_base+0x68>
	else {
		for(int i = 0; i < BUCKET_AMOUNT; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000612:	e00d      	b.n	8000630 <set_timer_base+0x44>
			buckets[i].period = (base - 50) + i;
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	b29a      	uxth	r2, r3
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b32      	subs	r3, #50	; 0x32
 8000620:	b299      	uxth	r1, r3
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <set_timer_base+0x74>)
 8000624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000626:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < BUCKET_AMOUNT; i++) {
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	3301      	adds	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	461a      	mov	r2, r3
 8000634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000636:	4293      	cmp	r3, r2
 8000638:	dbec      	blt.n	8000614 <set_timer_base+0x28>
		}
		sprintf(buff, "Expected period set to %d", base);
 800063a:	88fa      	ldrh	r2, [r7, #6]
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4908      	ldr	r1, [pc, #32]	; (8000664 <set_timer_base+0x78>)
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ffc0 	bl	80045c8 <siprintf>
		print(buff);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8e7 	bl	8000820 <print>
		return base;
 8000652:	88fb      	ldrh	r3, [r7, #6]
	}
}
 8000654:	4618      	mov	r0, r3
 8000656:	3730      	adds	r7, #48	; 0x30
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	000f4240 	.word	0x000f4240
 8000660:	20000190 	.word	0x20000190
 8000664:	08005044 	.word	0x08005044

08000668 <get_line>:

void get_line(char *buffer, int max_length) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	uint16_t count = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	81fb      	strh	r3, [r7, #14]

	do {
		// Get last entered Input
		buffer[count] = USART_Read(USART2);
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	18d4      	adds	r4, r2, r3
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <get_line+0x50>)
 800067e:	f000 fbdf 	bl	8000e40 <USART_Read>
 8000682:	4603      	mov	r3, r0
 8000684:	7023      	strb	r3, [r4, #0]
		// Write it to the screen
		USART_Write(USART2, &buffer[count], 1);
 8000686:	89fb      	ldrh	r3, [r7, #14]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <get_line+0x50>)
 8000692:	f000 fbea 	bl	8000e6a <USART_Write>
		// increase count so we know amount of characters inputed
		count++;
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	3301      	adds	r3, #1
 800069a:	81fb      	strh	r3, [r7, #14]
	}
	// While we do no have an enter input
	while(buffer[count-1] != CARRAIGE_RETURN);
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	3b01      	subs	r3, #1
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	220d      	movs	r2, #13
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d1e4      	bne.n	8000676 <get_line+0xe>
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40004400 	.word	0x40004400

080006bc <get_pulses>:

void get_pulses(struct Bucket *buckets, int max_pulses) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	uint8_t  pulses = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]

	print("Reading Periods...");
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <get_pulses+0x80>)
 80006cc:	f000 f8a8 	bl	8000820 <print>

	while (pulses < MAX_PULSES_READ) {
 80006d0:	e029      	b.n	8000726 <get_pulses+0x6a>
		// Check the timer 2 capture flag (CCXIF flag (TIMx_SR register)) to go high and retrieve from CCR register
		if (TIM2->SR & TIM_SR_CC1IF) {
 80006d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d022      	beq.n	8000726 <get_pulses+0x6a>
			// First pulse
			if (prev_time == 0) { prev_time = TIM2->CCR1; }
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <get_pulses+0x84>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <get_pulses+0x38>
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <get_pulses+0x84>)
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e018      	b.n	8000726 <get_pulses+0x6a>
			// Past first pulse
			else {
				// Get the current time
				curr_time = TIM2->CCR1;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <get_pulses+0x88>)
 80006fc:	6013      	str	r3, [r2, #0]
				// Get the difference time
				diff_time = curr_time - prev_time;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <get_pulses+0x88>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <get_pulses+0x84>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <get_pulses+0x8c>)
 800070a:	6013      	str	r3, [r2, #0]
				// Set the current time to the previous time
				prev_time = curr_time;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <get_pulses+0x88>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <get_pulses+0x84>)
 8000712:	6013      	str	r3, [r2, #0]
				// Increase count of pulses
				pulses++;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
				// Update count with frequency
				add_to_bucket(buckets, diff_time);
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <get_pulses+0x8c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f813 	bl	800074c <add_to_bucket>
	while (pulses < MAX_PULSES_READ) {
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072c:	4293      	cmp	r3, r2
 800072e:	dbd0      	blt.n	80006d2 <get_pulses+0x16>
			}
		}
	}
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08005060 	.word	0x08005060
 8000740:	20000320 	.word	0x20000320
 8000744:	20000324 	.word	0x20000324
 8000748:	20000328 	.word	0x20000328

0800074c <add_to_bucket>:

void add_to_bucket(struct Bucket *buckets, uint32_t period) {
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	for	(int i = 0; i < BUCKET_AMOUNT; i++) {
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e018      	b.n	800078e <add_to_bucket+0x42>
		if (buckets[i].period == period) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	4413      	add	r3, r2
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4293      	cmp	r3, r2
 800076c:	d10c      	bne.n	8000788 <add_to_bucket+0x3c>
			buckets[i].count = buckets[i].count + 1;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	885a      	ldrh	r2, [r3, #2]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	440b      	add	r3, r1
 8000780:	3201      	adds	r2, #1
 8000782:	b292      	uxth	r2, r2
 8000784:	805a      	strh	r2, [r3, #2]
			return;
 8000786:	e007      	b.n	8000798 <add_to_bucket+0x4c>
	for	(int i = 0; i < BUCKET_AMOUNT; i++) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	461a      	mov	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4293      	cmp	r3, r2
 8000796:	dbe1      	blt.n	800075c <add_to_bucket+0x10>
		}
	}
}
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <print_buckets>:

void print_buckets(struct Bucket *buckets) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	char message[30];
	uint16_t n;

	print("\r\n BUCKETS");
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <print_buckets+0x70>)
 80007ae:	f000 f837 	bl	8000820 <print>

	for (int i = 0; i < BUCKET_AMOUNT; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b6:	e023      	b.n	8000800 <print_buckets+0x5c>
		if (buckets[i].count != 0) {
 80007b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	885b      	ldrh	r3, [r3, #2]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d019      	beq.n	80007fa <print_buckets+0x56>
			n = sprintf(message, "Period: %d, Count: %d\r\n", buckets[i].period, buckets[i].count);
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	885b      	ldrh	r3, [r3, #2]
 80007dc:	f107 000c 	add.w	r0, r7, #12
 80007e0:	460a      	mov	r2, r1
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <print_buckets+0x74>)
 80007e4:	f003 fef0 	bl	80045c8 <siprintf>
 80007e8:	4603      	mov	r3, r0
 80007ea:	857b      	strh	r3, [r7, #42]	; 0x2a
			USART_Write(USART2, message, n);
 80007ec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <print_buckets+0x78>)
 80007f6:	f000 fb38 	bl	8000e6a <USART_Write>
	for (int i = 0; i < BUCKET_AMOUNT; i++) {
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	3301      	adds	r3, #1
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	461a      	mov	r2, r3
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	4293      	cmp	r3, r2
 8000808:	dbd6      	blt.n	80007b8 <print_buckets+0x14>
		}
	}
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3730      	adds	r7, #48	; 0x30
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08005074 	.word	0x08005074
 8000818:	08005080 	.word	0x08005080
 800081c:	40004400 	.word	0x40004400

08000820 <print>:

void print(char *str) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint32_t n = sprintf(str, str);
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f003 fecc 	bl	80045c8 <siprintf>
 8000830:	4603      	mov	r3, r0
 8000832:	60fb      	str	r3, [r7, #12]
	USART_Write(USART2, str, n);
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <print+0x30>)
 800083a:	f000 fb16 	bl	8000e6a <USART_Write>
	USART_Write(USART2, "\r\n", 2);
 800083e:	2202      	movs	r2, #2
 8000840:	4904      	ldr	r1, [pc, #16]	; (8000854 <print+0x34>)
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <print+0x30>)
 8000844:	f000 fb11 	bl	8000e6a <USART_Write>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	08005098 	.word	0x08005098

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fb60 	bl	8000f20 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f844 	bl	80008ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f93c 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000868:	f000 f90a 	bl	8000a80 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800086c:	f000 f890 	bl	8000990 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Check to make sure power is on
  while( power_on_self_test() == 0);
 8000870:	bf00      	nop
 8000872:	f7ff fe7f 	bl	8000574 <power_on_self_test>
 8000876:	4603      	mov	r3, r0
 8000878:	f083 0301 	eor.w	r3, r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f7      	bne.n	8000872 <main+0x1a>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// 1. Print “Enter expected period or <CR> if no change�?. Wait for user response
		print(MESSAGE);
 8000882:	4816      	ldr	r0, [pc, #88]	; (80008dc <main+0x84>)
 8000884:	f7ff ffcc 	bl	8000820 <print>
		get_line(buffer, 10);
 8000888:	210a      	movs	r1, #10
 800088a:	4815      	ldr	r0, [pc, #84]	; (80008e0 <main+0x88>)
 800088c:	f7ff feec 	bl	8000668 <get_line>
		if (buffer[0] == CARRAIGE_RETURN) {
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <main+0x88>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	220d      	movs	r2, #13
 8000896:	4293      	cmp	r3, r2
 8000898:	d104      	bne.n	80008a4 <main+0x4c>
			period = DEFAULT_PERIOD;
 800089a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <main+0x8c>)
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	e006      	b.n	80008b2 <main+0x5a>
		}
		else {
			period = atoi(buffer);
 80008a4:	480e      	ldr	r0, [pc, #56]	; (80008e0 <main+0x88>)
 80008a6:	f003 fe58 	bl	800455a <atoi>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <main+0x8c>)
 80008b0:	601a      	str	r2, [r3, #0]
		}

		// 2. if yes, read new period then set up timer clock
		while( set_timer_base(period) == 0 );
 80008b2:	bf00      	nop
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <main+0x8c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe96 	bl	80005ec <set_timer_base>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f6      	beq.n	80008b4 <main+0x5c>

		// 3. read 100 pulses
		get_pulses(buckets, MAX_PULSES_READ);
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	4619      	mov	r1, r3
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <main+0x90>)
 80008ce:	f7ff fef5 	bl	80006bc <get_pulses>

		// 4. print out results
		print_buckets(buckets);
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <main+0x90>)
 80008d4:	f7ff ff66 	bl	80007a4 <print_buckets>
		print(MESSAGE);
 80008d8:	e7d3      	b.n	8000882 <main+0x2a>
 80008da:	bf00      	nop
 80008dc:	0800509c 	.word	0x0800509c
 80008e0:	2000015c 	.word	0x2000015c
 80008e4:	2000032c 	.word	0x2000032c
 80008e8:	20000190 	.word	0x20000190

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b096      	sub	sp, #88	; 0x58
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2244      	movs	r2, #68	; 0x44
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fe5c 	bl	80045b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800090e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000912:	f000 fe63 	bl	80015dc <HAL_PWREx_ControlVoltageScaling>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800091c:	f000 f946 	bl	8000bac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092a:	2310      	movs	r3, #16
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800093a:	230a      	movs	r3, #10
 800093c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800093e:	2307      	movs	r3, #7
 8000940:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fe9a 	bl	8001688 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800095a:	f000 f927 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2303      	movs	r3, #3
 8000964:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	2104      	movs	r1, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fa62 	bl	8001e40 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000982:	f000 f913 	bl	8000bac <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3758      	adds	r7, #88	; 0x58
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009c4:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009c6:	224f      	movs	r2, #79	; 0x4f
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d0:	4b2a      	ldr	r3, [pc, #168]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009de:	4b27      	ldr	r3, [pc, #156]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <MX_TIM2_Init+0xec>)
 80009e6:	f002 f90b 	bl	8002c00 <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80009f0:	f000 f8dc 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	4619      	mov	r1, r3
 8000a00:	481e      	ldr	r0, [pc, #120]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a02:	f002 fcd6 	bl	80033b2 <HAL_TIM_ConfigClockSource>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a0c:	f000 f8ce 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a12:	f002 f9b5 	bl	8002d80 <HAL_TIM_IC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 f8c6 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a30:	f003 f838 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000a3a:	f000 f8b7 	bl	8000bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a56:	f002 fc10 	bl	800327a <HAL_TIM_IC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000a60:	f000 f8a4 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a66:	f002 f923 	bl	8002cb0 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MX_TIM2_Init+0xec>)
 8000a6e:	f002 f9e9 	bl	8002e44 <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <MX_USART2_UART_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x58>)
 8000ac4:	f003 f894 	bl	8003bf0 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 f86d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000d8 	.word	0x200000d8
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_GPIO_Init+0xc4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 fd17 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b68:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <MX_GPIO_Init+0xc8>)
 8000b7a:	f000 fb5f 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b7e:	2320      	movs	r3, #32
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 fb50 	bl	800123c <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	48000800 	.word	0x48000800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6593      	str	r3, [r2, #88]	; 0x58
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c20:	d130      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_TIM_Base_MspInit+0x8c>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 fae4 	bl	800123c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	201c      	movs	r0, #28
 8000c7a:	f000 faa8 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 fac1 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ac      	sub	sp, #176	; 0xb0
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2288      	movs	r2, #136	; 0x88
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fc81 	bl	80045b8 <memset>
  if(huart->Instance==USART2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <HAL_UART_MspInit+0xb0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d13b      	bne.n	8000d38 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fadb 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd8:	f7ff ff68 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d34:	f000 fa82 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	37b0      	adds	r7, #176	; 0xb0
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f920 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM2_IRQHandler+0x10>)
 8000da2:	f002 f94b 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000008c 	.word	0x2000008c

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f003 fbc0 	bl	8004564 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20018000 	.word	0x20018000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000330 	.word	0x20000330
 8000e18:	20000348 	.word	0x20000348

08000e1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <USART_Read>:
	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
}


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000e48:	bf00      	nop
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f9      	beq.n	8000e4a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000e6a:	b480      	push	{r7}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e010      	b.n	8000e9e <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000e7c:	bf00      	nop
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f9      	beq.n	8000e7e <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d8ea      	bhi.n	8000e7c <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8000ea6:	bf00      	nop
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f9      	beq.n	8000ea8 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	61da      	str	r2, [r3, #28]
}   
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffa4 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f003 fb39 	bl	8004570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fcab 	bl	8000858 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f10:	0800526c 	.word	0x0800526c
  ldr r2, =_sbss
 8000f14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f18:	20000348 	.word	0x20000348

08000f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_2_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_Init+0x3c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x3c>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f93e 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 f80f 	bl	8000f60 <HAL_InitTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e001      	b.n	8000f52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4e:	f7ff fe33 	bl	8000bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d023      	beq.n	8000fbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_InitTick+0x70>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f949 	bl	8001222 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10f      	bne.n	8000fb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d809      	bhi.n	8000fb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f913 	bl	80011ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_InitTick+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e001      	b.n	8000fc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000334 	.word	0x20000334

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000334 	.word	0x20000334

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e17f      	b.n	800154c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8171 	beq.w	8001546 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 0201 	and.w	r2, r3, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d118      	bne.n	800131c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b03      	cmp	r3, #3
 8001326:	d017      	beq.n	8001358 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80ac 	beq.w	8001546 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_GPIO_Init+0x330>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_GPIO_Init+0x330>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6613      	str	r3, [r2, #96]	; 0x60
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_GPIO_Init+0x330>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001406:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x242>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4f      	ldr	r2, [pc, #316]	; (8001574 <HAL_GPIO_Init+0x338>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x23e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_GPIO_Init+0x33c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x23a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_GPIO_Init+0x340>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x236>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x344>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x232>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_GPIO_Init+0x348>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x22e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4a      	ldr	r2, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x34c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x22a>
 8001462:	2306      	movs	r3, #6
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001466:	2307      	movs	r3, #7
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800147e:	2300      	movs	r3, #0
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001490:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_Init+0x350>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_GPIO_Init+0x350>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_GPIO_Init+0x350>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_GPIO_Init+0x350>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_GPIO_Init+0x350>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x350>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	f47f ae78 	bne.w	800124c <HAL_GPIO_Init+0x10>
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800
 800157c:	48000c00 	.word	0x48000c00
 8001580:	48001000 	.word	0x48001000
 8001584:	48001400 	.word	0x48001400
 8001588:	48001800 	.word	0x48001800
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40007000 	.word	0x40007000

080015dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ea:	d130      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f8:	d038      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2232      	movs	r2, #50	; 0x32
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001620:	e002      	b.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3b01      	subs	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001634:	d102      	bne.n	800163c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f2      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001648:	d110      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e00f      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d007      	beq.n	800166c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83

08001688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e3ca      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169a:	4b97      	ldr	r3, [pc, #604]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a4:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80e4 	beq.w	8001884 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_RCC_OscConfig+0x4a>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b0c      	cmp	r3, #12
 80016c6:	f040 808b 	bne.w	80017e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	f040 8087 	bne.w	80017e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d2:	4b89      	ldr	r3, [pc, #548]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x62>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e3a2      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <HAL_RCC_OscConfig+0x7c>
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001702:	e005      	b.n	8001710 <HAL_RCC_OscConfig+0x88>
 8001704:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001710:	4293      	cmp	r3, r2
 8001712:	d223      	bcs.n	800175c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fd55 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e383      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a72      	ldr	r2, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	496d      	ldr	r1, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4968      	ldr	r1, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
 800175a:	e025      	b.n	80017a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a65      	ldr	r2, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4960      	ldr	r1, [pc, #384]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	495b      	ldr	r1, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fd15 	bl	80021c8 <RCC_SetFlashLatencyFromMSIRange>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e343      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017a8:	f000 fc4a 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b52      	ldr	r3, [pc, #328]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	4950      	ldr	r1, [pc, #320]	; (80018fc <HAL_RCC_OscConfig+0x274>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <HAL_RCC_OscConfig+0x278>)
 80017c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017c8:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fbc7 	bl	8000f60 <HAL_InitTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d052      	beq.n	8001882 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	e327      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d032      	beq.n	800184e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc04 	bl	8001000 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fc:	f7ff fc00 	bl	8001000 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e310      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4931      	ldr	r1, [pc, #196]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001838:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	492c      	ldr	r1, [pc, #176]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e01a      	b.n	8001884 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800185a:	f7ff fbd1 	bl	8001000 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001862:	f7ff fbcd 	bl	8001000 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e2dd      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x1da>
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001882:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d074      	beq.n	800197a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b08      	cmp	r3, #8
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x21a>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b0c      	cmp	r3, #12
 800189a:	d10e      	bne.n	80018ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d10b      	bne.n	80018ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d064      	beq.n	8001978 <HAL_RCC_OscConfig+0x2f0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d160      	bne.n	8001978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e2ba      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x24a>
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e026      	b.n	8001920 <HAL_RCC_OscConfig+0x298>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018da:	d115      	bne.n	8001908 <HAL_RCC_OscConfig+0x280>
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <HAL_RCC_OscConfig+0x270>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x298>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	080050e0 	.word	0x080050e0
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004
 8001908:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a9f      	ldr	r2, [pc, #636]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a9c      	ldr	r2, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb6a 	bl	8001000 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fb66 	bl	8001000 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e276      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x2a8>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fb56 	bl	8001000 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fb52 	bl	8001000 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e262      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x2d0>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d060      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x310>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d116      	bne.n	80019c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x328>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e23f      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	4973      	ldr	r1, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c4:	e040      	b.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d023      	beq.n	8001a16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ce:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff fb11 	bl	8001000 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fb0d 	bl	8001000 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e21d      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	495f      	ldr	r1, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff faed 	bl	8001000 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fae9 	bl	8001000 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1f9      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d03c      	beq.n	8001ace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	4a4a      	ldr	r2, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fac8 	bl	8001000 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fac4 	bl	8001000 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1d4      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ef      	beq.n	8001a74 <HAL_RCC_OscConfig+0x3ec>
 8001a94:	e01b      	b.n	8001ace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff faab 	bl	8001000 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aae:	f7ff faa7 	bl	8001000 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e1b7      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80a6 	beq.w	8001c28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d118      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fa6e 	bl	8001000 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b28:	f7ff fa6a 	bl	8001000 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e17a      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x508>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4d8>
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5e:	e029      	b.n	8001bb4 <HAL_RCC_OscConfig+0x52c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d115      	bne.n	8001b94 <HAL_RCC_OscConfig+0x50c>
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_RCC_OscConfig+0x504>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b88:	e014      	b.n	8001bb4 <HAL_RCC_OscConfig+0x52c>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40007000 	.word	0x40007000
 8001b94:	4b9c      	ldr	r3, [pc, #624]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba4:	4b98      	ldr	r3, [pc, #608]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a97      	ldr	r2, [pc, #604]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fa20 	bl	8001000 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fa1c 	bl	8001000 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e12a      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bda:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ed      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x53c>
 8001be8:	e015      	b.n	8001c16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff fa09 	bl	8001000 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fa05 	bl	8001000 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e113      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c08:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ed      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b7a      	ldr	r3, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	4a79      	ldr	r2, [pc, #484]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80fe 	beq.w	8001e2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	f040 80d0 	bne.w	8001ddc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c3c:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0203 	and.w	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d130      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d127      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d11f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c7c:	2a07      	cmp	r2, #7
 8001c7e:	bf14      	ite	ne
 8001c80:	2201      	movne	r2, #1
 8001c82:	2200      	moveq	r2, #0
 8001c84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d113      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	085b      	lsrs	r3, r3, #1
 8001c96:	3b01      	subs	r3, #1
 8001c98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	3b01      	subs	r3, #1
 8001cac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d06e      	beq.n	8001d90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d069      	beq.n	8001d8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cc4:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0ad      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce0:	f7ff f98e 	bl	8001000 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff f98a 	bl	8001000 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e09a      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d06:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_RCC_OscConfig+0x784>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d16:	3a01      	subs	r2, #1
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d20:	0212      	lsls	r2, r2, #8
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d28:	0852      	lsrs	r2, r2, #1
 8001d2a:	3a01      	subs	r2, #1
 8001d2c:	0552      	lsls	r2, r2, #21
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d34:	0852      	lsrs	r2, r2, #1
 8001d36:	3a01      	subs	r2, #1
 8001d38:	0652      	lsls	r2, r2, #25
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d40:	0912      	lsrs	r2, r2, #4
 8001d42:	0452      	lsls	r2, r2, #17
 8001d44:	430a      	orrs	r2, r1
 8001d46:	4930      	ldr	r1, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2d      	ldr	r2, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d64:	f7ff f94c 	bl	8001000 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f948 	bl	8001000 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e058      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8a:	e050      	b.n	8001e2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e04f      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d148      	bne.n	8001e2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001db4:	f7ff f924 	bl	8001000 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f920 	bl	8001000 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e030      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x734>
 8001dda:	e028      	b.n	8001e2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d023      	beq.n	8001e2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x780>)
 8001de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f907 	bl	8001000 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df4:	e00c      	b.n	8001e10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff f903 	bl	8001000 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d905      	bls.n	8001e10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_OscConfig+0x7b0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ec      	bne.n	8001df6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x7b0>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4905      	ldr	r1, [pc, #20]	; (8001e38 <HAL_RCC_OscConfig+0x7b0>)
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x7b4>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
 8001e28:	e001      	b.n	8001e2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	feeefffc 	.word	0xfeeefffc

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0e7      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d910      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b72      	ldr	r3, [pc, #456]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	4970      	ldr	r1, [pc, #448]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0cf      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d908      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4960      	ldr	r1, [pc, #384]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04c      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0a6      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e09a      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef6:	4b4e      	ldr	r3, [pc, #312]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e08e      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e086      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4943      	ldr	r1, [pc, #268]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f28:	f7ff f86a 	bl	8001000 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff f866 	bl	8001000 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e06e      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d208      	bcs.n	8001f86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	492b      	ldr	r1, [pc, #172]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d210      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0207 	bic.w	r2, r3, #7
 8001f9c:	4923      	ldr	r1, [pc, #140]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_ClockConfig+0x1ec>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e036      	b.n	8002024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4918      	ldr	r1, [pc, #96]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4910      	ldr	r1, [pc, #64]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff4:	f000 f824 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	490b      	ldr	r1, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x1f4>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1f8>)
 8002012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x1fc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe ffa1 	bl	8000f60 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	72fb      	strb	r3, [r7, #11]

  return status;
 8002022:	7afb      	ldrb	r3, [r7, #11]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	40021000 	.word	0x40021000
 8002034:	080050e0 	.word	0x080050e0
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x34>
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d121      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d11e      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002074:	4b34      	ldr	r3, [pc, #208]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <HAL_RCC_GetSysClockFreq+0x10c>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10d      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d102      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	e004      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_RCC_GetSysClockFreq+0x114>)
 80020c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d134      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d003      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0xac>
 80020e4:	e005      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_RCC_GetSysClockFreq+0x110>)
 80020e8:	617b      	str	r3, [r7, #20]
      break;
 80020ea:	e005      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_GetSysClockFreq+0x114>)
 80020ee:	617b      	str	r3, [r7, #20]
      break;
 80020f0:	e002      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	617b      	str	r3, [r7, #20]
      break;
 80020f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	3301      	adds	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_RCC_GetSysClockFreq+0x108>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	0e5b      	lsrs	r3, r3, #25
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	3301      	adds	r3, #1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002138:	69bb      	ldr	r3, [r7, #24]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	080050f8 	.word	0x080050f8
 8002150:	00f42400 	.word	0x00f42400
 8002154:	007a1200 	.word	0x007a1200

08002158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002174:	f7ff fff0 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	080050f0 	.word	0x080050f0

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021a0:	f7ff ffda 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	080050f0 	.word	0x080050f0

080021c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021e0:	f7ff f9ee 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 80021e4:	6178      	str	r0, [r7, #20]
 80021e6:	e014      	b.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff f9de 	bl	80015c0 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002218:	d10b      	bne.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d919      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2ba0      	cmp	r3, #160	; 0xa0
 8002224:	d902      	bls.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e013      	b.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800222c:	2301      	movs	r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	e010      	b.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	d902      	bls.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002238:	2303      	movs	r3, #3
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	e00a      	b.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d102      	bne.n	800224a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002244:	2302      	movs	r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e004      	b.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b70      	cmp	r3, #112	; 0x70
 800224e:	d101      	bne.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002250:	2301      	movs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 0207 	bic.w	r2, r3, #7
 800225c:	4909      	ldr	r1, [pc, #36]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002290:	2300      	movs	r3, #0
 8002292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002294:	2300      	movs	r3, #0
 8002296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d041      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ac:	d02a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022b2:	d824      	bhi.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022b8:	d008      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022be:	d81e      	bhi.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c8:	d010      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ca:	e018      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022cc:	4b86      	ldr	r3, [pc, #536]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a85      	ldr	r2, [pc, #532]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d8:	e015      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fabb 	bl	800285c <RCCEx_PLLSAI1_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ea:	e00c      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3320      	adds	r3, #32
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fba6 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022fc:	e003      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	74fb      	strb	r3, [r7, #19]
      break;
 8002302:	e000      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800230c:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231a:	4973      	ldr	r1, [pc, #460]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002322:	e001      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d041      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800233c:	d02a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800233e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002342:	d824      	bhi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002348:	d008      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800234a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800234e:	d81e      	bhi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d010      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800235a:	e018      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800235c:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a61      	ldr	r2, [pc, #388]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002368:	e015      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fa73 	bl	800285c <RCCEx_PLLSAI1_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800237a:	e00c      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3320      	adds	r3, #32
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fb5e 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800238c:	e003      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	74fb      	strb	r3, [r7, #19]
      break;
 8002392:	e000      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800239c:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023aa:	494f      	ldr	r1, [pc, #316]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b2:	e001      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a0 	beq.w	8002506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023da:	2300      	movs	r3, #0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	4a40      	ldr	r2, [pc, #256]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6593      	str	r3, [r2, #88]	; 0x58
 80023ec:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fc:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3a      	ldr	r2, [pc, #232]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002408:	f7fe fdfa 	bl	8001000 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800240e:	e009      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002410:	f7fe fdf6 	bl	8001000 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d902      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	74fb      	strb	r3, [r7, #19]
        break;
 8002422:	e005      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d15c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002436:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01f      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdb5 	bl	8001000 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdb1 	bl	8001000 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d6:	4904      	ldr	r1, [pc, #16]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024de:	e009      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
 80024e4:	e006      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f4:	7c7b      	ldrb	r3, [r7, #17]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a9d      	ldr	r2, [pc, #628]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002512:	4b98      	ldr	r3, [pc, #608]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f023 0203 	bic.w	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	4994      	ldr	r1, [pc, #592]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002534:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 020c 	bic.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	498c      	ldr	r1, [pc, #560]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002556:	4b87      	ldr	r3, [pc, #540]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4983      	ldr	r1, [pc, #524]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	497b      	ldr	r1, [pc, #492]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	4972      	ldr	r1, [pc, #456]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025bc:	4b6d      	ldr	r3, [pc, #436]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	496a      	ldr	r1, [pc, #424]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	4961      	ldr	r1, [pc, #388]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002600:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4959      	ldr	r1, [pc, #356]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002622:	4b54      	ldr	r3, [pc, #336]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	4950      	ldr	r1, [pc, #320]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002644:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	4948      	ldr	r1, [pc, #288]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	493f      	ldr	r1, [pc, #252]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d028      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	4937      	ldr	r1, [pc, #220]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b2:	60d3      	str	r3, [r2, #12]
 80026b4:	e011      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026be:	d10c      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f8c8 	bl	800285c <RCCEx_PLLSAI1_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d028      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	491f      	ldr	r1, [pc, #124]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002704:	d106      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002710:	60d3      	str	r3, [r2, #12]
 8002712:	e011      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271c:	d10c      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	2101      	movs	r1, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f000 f899 	bl	800285c <RCCEx_PLLSAI1_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02b      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002762:	d109      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a02      	ldr	r2, [pc, #8]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800276e:	60d3      	str	r3, [r2, #12]
 8002770:	e014      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002780:	d10c      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f867 	bl	800285c <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02f      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b6:	4928      	ldr	r1, [pc, #160]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f844 	bl	800285c <RCCEx_PLLSAI1_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	74bb      	strb	r3, [r7, #18]
 80027e2:	e011      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3320      	adds	r3, #32
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f925 	bl	8002a44 <RCCEx_PLLSAI2_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002822:	490d      	ldr	r1, [pc, #52]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002846:	4904      	ldr	r1, [pc, #16]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800284e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800286a:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d018      	beq.n	80028a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002876:	4b72      	ldr	r3, [pc, #456]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0203 	and.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d10d      	bne.n	80028a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
       ||
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800288e:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
       ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d047      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e044      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d018      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x86>
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d825      	bhi.n	8002900 <RCCEx_PLLSAI1_Config+0xa4>
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d002      	beq.n	80028be <RCCEx_PLLSAI1_Config+0x62>
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d009      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x74>
 80028bc:	e020      	b.n	8002900 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028be:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11d      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e01a      	b.n	8002906 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d116      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e0:	e013      	b.n	800290a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028fe:	e006      	b.n	800290e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e004      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	430b      	orrs	r3, r1
 800292c:	4944      	ldr	r1, [pc, #272]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d17d      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002944:	f7fe fb5c 	bl	8001000 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294a:	e009      	b.n	8002960 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800294c:	f7fe fb58 	bl	8001000 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	73fb      	strb	r3, [r7, #15]
        break;
 800295e:	e005      	b.n	800296c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ef      	bne.n	800294c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d160      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6892      	ldr	r2, [r2, #8]
 8002988:	0211      	lsls	r1, r2, #8
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68d2      	ldr	r2, [r2, #12]
 800298e:	0912      	lsrs	r2, r2, #4
 8002990:	0452      	lsls	r2, r2, #17
 8002992:	430a      	orrs	r2, r1
 8002994:	492a      	ldr	r1, [pc, #168]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	610b      	str	r3, [r1, #16]
 800299a:	e027      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d112      	bne.n	80029c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6892      	ldr	r2, [r2, #8]
 80029b2:	0211      	lsls	r1, r2, #8
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6912      	ldr	r2, [r2, #16]
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	3a01      	subs	r2, #1
 80029bc:	0552      	lsls	r2, r2, #21
 80029be:	430a      	orrs	r2, r1
 80029c0:	491f      	ldr	r1, [pc, #124]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	610b      	str	r3, [r1, #16]
 80029c6:	e011      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	0211      	lsls	r1, r2, #8
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6952      	ldr	r2, [r2, #20]
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0652      	lsls	r2, r2, #25
 80029e4:	430a      	orrs	r2, r1
 80029e6:	4916      	ldr	r1, [pc, #88]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fb02 	bl	8001000 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029fe:	e009      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a00:	f7fe fafe 	bl	8001000 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d902      	bls.n	8002a14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
          break;
 8002a12:	e005      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	4904      	ldr	r1, [pc, #16]	; (8002a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a52:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d018      	beq.n	8002a90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a5e:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
       ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a76:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
       ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d047      	beq.n	8002b1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e044      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d018      	beq.n	8002aca <RCCEx_PLLSAI2_Config+0x86>
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d825      	bhi.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa4>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d002      	beq.n	8002aa6 <RCCEx_PLLSAI2_Config+0x62>
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d009      	beq.n	8002ab8 <RCCEx_PLLSAI2_Config+0x74>
 8002aa4:	e020      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa6:	4b55      	ldr	r3, [pc, #340]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11d      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab6:	e01a      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d116      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e013      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae6:	e006      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e004      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	430b      	orrs	r3, r1
 8002b14:	4939      	ldr	r1, [pc, #228]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d167      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a35      	ldr	r2, [pc, #212]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fa68 	bl	8001000 <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b32:	e009      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b34:	f7fe fa64 	bl	8001000 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d902      	bls.n	8002b48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	73fb      	strb	r3, [r7, #15]
        break;
 8002b46:	e005      	b.n	8002b54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ef      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d14a      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	0211      	lsls	r1, r2, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	0912      	lsrs	r2, r2, #4
 8002b78:	0452      	lsls	r2, r2, #17
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	491f      	ldr	r1, [pc, #124]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	614b      	str	r3, [r1, #20]
 8002b82:	e011      	b.n	8002ba8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6892      	ldr	r2, [r2, #8]
 8002b94:	0211      	lsls	r1, r2, #8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6912      	ldr	r2, [r2, #16]
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0652      	lsls	r2, r2, #25
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4916      	ldr	r1, [pc, #88]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fa24 	bl	8001000 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bbc:	f7fe fa20 	bl	8001000 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4904      	ldr	r1, [pc, #16]	; (8002bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e049      	b.n	8002ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd ffea 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 fcb2 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e047      	b.n	8002d58 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_TIM_Base_Start+0xb4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01d      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d018      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_TIM_Base_Start+0xb8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <HAL_TIM_Base_Start+0xbc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_TIM_Base_Start+0xc0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_TIM_Base_Start+0xc4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_TIM_Base_Start+0x66>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <HAL_TIM_Base_Start+0xc8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d115      	bne.n	8002d42 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_TIM_Base_Start+0xcc>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d015      	beq.n	8002d54 <HAL_TIM_Base_Start+0xa4>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d011      	beq.n	8002d54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	e008      	b.n	8002d54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e000      	b.n	8002d56 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40013400 	.word	0x40013400
 8002d78:	40014000 	.word	0x40014000
 8002d7c:	00010007 	.word	0x00010007

08002d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e049      	b.n	8002e26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f841 	bl	8002e2e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fbf2 	bl	80035a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_IC_Start+0x1a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e023      	b.n	8002ea6 <HAL_TIM_IC_Start+0x62>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_IC_Start+0x2a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e01b      	b.n	8002ea6 <HAL_TIM_IC_Start+0x62>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_IC_Start+0x3a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_IC_Start+0x62>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_IC_Start+0x4a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_IC_Start+0x62>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_IC_Start+0x5a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e003      	b.n	8002ea6 <HAL_TIM_IC_Start+0x62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_TIM_IC_Start+0x74>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e013      	b.n	8002ee0 <HAL_TIM_IC_Start+0x9c>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d104      	bne.n	8002ec8 <HAL_TIM_IC_Start+0x84>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e00b      	b.n	8002ee0 <HAL_TIM_IC_Start+0x9c>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d104      	bne.n	8002ed8 <HAL_TIM_IC_Start+0x94>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e003      	b.n	8002ee0 <HAL_TIM_IC_Start+0x9c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e092      	b.n	8003018 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_IC_Start+0xbe>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	e023      	b.n	8002f4a <HAL_TIM_IC_Start+0x106>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_IC_Start+0xce>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f10:	e01b      	b.n	8002f4a <HAL_TIM_IC_Start+0x106>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start+0xde>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f20:	e013      	b.n	8002f4a <HAL_TIM_IC_Start+0x106>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Start+0xee>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f30:	e00b      	b.n	8002f4a <HAL_TIM_IC_Start+0x106>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_IC_Start+0xfe>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	e003      	b.n	8002f4a <HAL_TIM_IC_Start+0x106>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_IC_Start+0x116>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_IC_Start+0x13e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Start+0x126>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_IC_Start+0x13e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Start+0x136>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_IC_Start+0x13e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fd64 	bl	8003a58 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_TIM_IC_Start+0x1dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01d      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d018      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_TIM_IC_Start+0x1e0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_TIM_IC_Start+0x1e4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00e      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIM_IC_Start+0x1e8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_TIM_IC_Start+0x1ec>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x192>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_IC_Start+0x1f0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d115      	bne.n	8003002 <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_TIM_IC_Start+0x1f4>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d015      	beq.n	8003014 <HAL_TIM_IC_Start+0x1d0>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d011      	beq.n	8003014 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003000:	e008      	b.n	8003014 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e000      	b.n	8003016 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa74 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa66 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa77 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0204 	mvn.w	r2, #4
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa4a 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa3c 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa4d 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0208 	mvn.w	r2, #8
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa20 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa12 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa23 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0210 	mvn.w	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2208      	movs	r2, #8
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9f6 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9e8 	bl	8003558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9f9 	bl	8003580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0201 	mvn.w	r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9c2 	bl	8003544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d8:	2b80      	cmp	r3, #128	; 0x80
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fcee 	bl	8003bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d10e      	bne.n	800321a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d107      	bne.n	800321a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fce1 	bl	8003bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d10e      	bne.n	8003246 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d107      	bne.n	8003246 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f9a7 	bl	8003594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b20      	cmp	r3, #32
 8003252:	d10e      	bne.n	8003272 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b20      	cmp	r3, #32
 8003260:	d107      	bne.n	8003272 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f06f 0220 	mvn.w	r2, #32
 800326a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fca1 	bl	8003bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003294:	2302      	movs	r3, #2
 8003296:	e088      	b.n	80033aa <HAL_TIM_IC_ConfigChannel+0x130>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11b      	bne.n	80032de <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f000 fa11 	bl	80036dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 020c 	bic.w	r2, r2, #12
 80032c8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6999      	ldr	r1, [r3, #24]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	619a      	str	r2, [r3, #24]
 80032dc:	e060      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11c      	bne.n	800331e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f000 fa8f 	bl	8003816 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003306:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6999      	ldr	r1, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	619a      	str	r2, [r3, #24]
 800331c:	e040      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f000 fadc 	bl	80038f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 020c 	bic.w	r2, r2, #12
 8003346:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69d9      	ldr	r1, [r3, #28]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	61da      	str	r2, [r3, #28]
 800335a:	e021      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d11c      	bne.n	800339c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f000 faf9 	bl	8003968 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003384:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
 800339a:	e001      	b.n	80033a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_ConfigClockSource+0x1c>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0b6      	b.n	800353c <HAL_TIM_ConfigClockSource+0x18a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d03e      	beq.n	800348a <HAL_TIM_ConfigClockSource+0xd8>
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	f200 8087 	bhi.w	8003522 <HAL_TIM_ConfigClockSource+0x170>
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	f000 8086 	beq.w	8003528 <HAL_TIM_ConfigClockSource+0x176>
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	d87f      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 8003422:	2b70      	cmp	r3, #112	; 0x70
 8003424:	d01a      	beq.n	800345c <HAL_TIM_ConfigClockSource+0xaa>
 8003426:	2b70      	cmp	r3, #112	; 0x70
 8003428:	d87b      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 800342a:	2b60      	cmp	r3, #96	; 0x60
 800342c:	d050      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0x11e>
 800342e:	2b60      	cmp	r3, #96	; 0x60
 8003430:	d877      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 8003432:	2b50      	cmp	r3, #80	; 0x50
 8003434:	d03c      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xfe>
 8003436:	2b50      	cmp	r3, #80	; 0x50
 8003438:	d873      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d058      	beq.n	80034f0 <HAL_TIM_ConfigClockSource+0x13e>
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d86f      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d064      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x15e>
 8003446:	2b30      	cmp	r3, #48	; 0x30
 8003448:	d86b      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d060      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x15e>
 800344e:	2b20      	cmp	r3, #32
 8003450:	d867      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d05c      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x15e>
 8003456:	2b10      	cmp	r3, #16
 8003458:	d05a      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x15e>
 800345a:	e062      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f000 fad4 	bl	8003a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800347e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
      break;
 8003488:	e04f      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f000 fabd 	bl	8003a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ac:	609a      	str	r2, [r3, #8]
      break;
 80034ae:	e03c      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	461a      	mov	r2, r3
 80034be:	f000 f97b 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2150      	movs	r1, #80	; 0x50
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fa8a 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 80034ce:	e02c      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	461a      	mov	r2, r3
 80034de:	f000 f9d7 	bl	8003890 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2160      	movs	r1, #96	; 0x60
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fa7a 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 80034ee:	e01c      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	461a      	mov	r2, r3
 80034fe:	f000 f95b 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fa6a 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 800350e:	e00c      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 fa61 	bl	80039e2 <TIM_ITRx_SetConfig>
      break;
 8003520:	e003      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      break;
 8003526:	e000      	b.n	800352a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003528:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c6:	d00f      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3d      	ldr	r2, [pc, #244]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a3c      	ldr	r2, [pc, #240]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <TIM_Base_SetConfig+0x114>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <TIM_Base_SetConfig+0x118>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <TIM_Base_SetConfig+0x11c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <TIM_Base_SetConfig+0x120>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM_Base_SetConfig+0x124>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <TIM_Base_SetConfig+0x128>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <TIM_Base_SetConfig+0x12c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0x9a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	; (80036d8 <TIM_Base_SetConfig+0x130>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00f      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <TIM_Base_SetConfig+0x124>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00b      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <TIM_Base_SetConfig+0x128>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d007      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <TIM_Base_SetConfig+0x12c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d003      	beq.n	80036a0 <TIM_Base_SetConfig+0xf8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <TIM_Base_SetConfig+0x130>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	615a      	str	r2, [r3, #20]
}
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800

080036dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0201 	bic.w	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <TIM_TI1_SetConfig+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d017      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d013      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIM_TI1_SetConfig+0xc8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <TIM_TI1_SetConfig+0xcc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <TIM_TI1_SetConfig+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <TIM_TI1_SetConfig+0xd4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_TI1_SetConfig+0x5e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <TIM_TI1_SetConfig+0xd8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <TIM_TI1_SetConfig+0x62>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <TIM_TI1_SetConfig+0x64>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e003      	b.n	800375e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	b2db      	uxtb	r3, r3
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 030a 	bic.w	r3, r3, #10
 8003778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 030a 	and.w	r3, r3, #10
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000

080037b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 030a 	bic.w	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 0210 	bic.w	r2, r3, #16
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	b29b      	uxth	r3, r3
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003868:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0210 	bic.w	r2, r3, #16
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	031b      	lsls	r3, r3, #12
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f023 0303 	bic.w	r3, r3, #3
 800391c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800392c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	b2db      	uxtb	r3, r3
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003940:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003994:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	031b      	lsls	r3, r3, #12
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	031b      	lsls	r3, r3, #12
 80039c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 0307 	orr.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e068      	b.n	8003b8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01d      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d018      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d013      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00e      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d009      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d004      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d10c      	bne.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40013400 	.word	0x40013400
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40014000 	.word	0x40014000

08003bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e040      	b.n	8003c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f83c 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f82c 	bl	8003c8c <UART_SetConfig>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e022      	b.n	8003c84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fad8 	bl	80041fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fb5f 	bl	8004340 <UART_CheckIdleState>
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b08a      	sub	sp, #40	; 0x28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4ba4      	ldr	r3, [pc, #656]	; (8003f4c <UART_SetConfig+0x2c0>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a99      	ldr	r2, [pc, #612]	; (8003f50 <UART_SetConfig+0x2c4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a90      	ldr	r2, [pc, #576]	; (8003f54 <UART_SetConfig+0x2c8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d126      	bne.n	8003d64 <UART_SetConfig+0xd8>
 8003d16:	4b90      	ldr	r3, [pc, #576]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d81b      	bhi.n	8003d5c <UART_SetConfig+0xd0>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <UART_SetConfig+0xa0>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d4d 	.word	0x08003d4d
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d42:	e116      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4a:	e112      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d52:	e10e      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e10a      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e106      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a7c      	ldr	r2, [pc, #496]	; (8003f5c <UART_SetConfig+0x2d0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d138      	bne.n	8003de0 <UART_SetConfig+0x154>
 8003d6e:	4b7a      	ldr	r3, [pc, #488]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d82d      	bhi.n	8003dd8 <UART_SetConfig+0x14c>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <UART_SetConfig+0xf8>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003dd9 	.word	0x08003dd9
 8003d8c:	08003dd9 	.word	0x08003dd9
 8003d90:	08003dd9 	.word	0x08003dd9
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003dd9 	.word	0x08003dd9
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	08003dd9 	.word	0x08003dd9
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003dd1 	.word	0x08003dd1
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e0d8      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e0d4      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e0d0      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e0cc      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e0c8      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	; (8003f60 <UART_SetConfig+0x2d4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d125      	bne.n	8003e36 <UART_SetConfig+0x1aa>
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003df4:	2b30      	cmp	r3, #48	; 0x30
 8003df6:	d016      	beq.n	8003e26 <UART_SetConfig+0x19a>
 8003df8:	2b30      	cmp	r3, #48	; 0x30
 8003dfa:	d818      	bhi.n	8003e2e <UART_SetConfig+0x1a2>
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d00a      	beq.n	8003e16 <UART_SetConfig+0x18a>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d814      	bhi.n	8003e2e <UART_SetConfig+0x1a2>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <UART_SetConfig+0x182>
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d008      	beq.n	8003e1e <UART_SetConfig+0x192>
 8003e0c:	e00f      	b.n	8003e2e <UART_SetConfig+0x1a2>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e14:	e0ad      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e16:	2302      	movs	r3, #2
 8003e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1c:	e0a9      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e24:	e0a5      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e26:	2308      	movs	r3, #8
 8003e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2c:	e0a1      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e2e:	2310      	movs	r3, #16
 8003e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e34:	e09d      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <UART_SetConfig+0x2d8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d125      	bne.n	8003e8c <UART_SetConfig+0x200>
 8003e40:	4b45      	ldr	r3, [pc, #276]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e4c:	d016      	beq.n	8003e7c <UART_SetConfig+0x1f0>
 8003e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e50:	d818      	bhi.n	8003e84 <UART_SetConfig+0x1f8>
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d00a      	beq.n	8003e6c <UART_SetConfig+0x1e0>
 8003e56:	2b80      	cmp	r3, #128	; 0x80
 8003e58:	d814      	bhi.n	8003e84 <UART_SetConfig+0x1f8>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <UART_SetConfig+0x1d8>
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d008      	beq.n	8003e74 <UART_SetConfig+0x1e8>
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x1f8>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e082      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e72:	e07e      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e74:	2304      	movs	r3, #4
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e07a      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e076      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e072      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <UART_SetConfig+0x2dc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12a      	bne.n	8003eec <UART_SetConfig+0x260>
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d01a      	beq.n	8003edc <UART_SetConfig+0x250>
 8003ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eaa:	d81b      	bhi.n	8003ee4 <UART_SetConfig+0x258>
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d00c      	beq.n	8003ecc <UART_SetConfig+0x240>
 8003eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb6:	d815      	bhi.n	8003ee4 <UART_SetConfig+0x258>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <UART_SetConfig+0x238>
 8003ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec0:	d008      	beq.n	8003ed4 <UART_SetConfig+0x248>
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x258>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e052      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e04e      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e04a      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e046      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e042      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <UART_SetConfig+0x2c4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d13a      	bne.n	8003f6c <UART_SetConfig+0x2e0>
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <UART_SetConfig+0x2cc>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f04:	d01a      	beq.n	8003f3c <UART_SetConfig+0x2b0>
 8003f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f0a:	d81b      	bhi.n	8003f44 <UART_SetConfig+0x2b8>
 8003f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f10:	d00c      	beq.n	8003f2c <UART_SetConfig+0x2a0>
 8003f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f16:	d815      	bhi.n	8003f44 <UART_SetConfig+0x2b8>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <UART_SetConfig+0x298>
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f20:	d008      	beq.n	8003f34 <UART_SetConfig+0x2a8>
 8003f22:	e00f      	b.n	8003f44 <UART_SetConfig+0x2b8>
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e022      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e01e      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e01a      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e016      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4a:	e012      	b.n	8003f72 <UART_SetConfig+0x2e6>
 8003f4c:	efff69f3 	.word	0xefff69f3
 8003f50:	40008000 	.word	0x40008000
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	40004800 	.word	0x40004800
 8003f64:	40004c00 	.word	0x40004c00
 8003f68:	40005000 	.word	0x40005000
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a9f      	ldr	r2, [pc, #636]	; (80041f4 <UART_SetConfig+0x568>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d17a      	bne.n	8004072 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d824      	bhi.n	8003fce <UART_SetConfig+0x342>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x300>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fcf 	.word	0x08003fcf
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fcf 	.word	0x08003fcf
 8003f9c:	08003fbf 	.word	0x08003fbf
 8003fa0:	08003fcf 	.word	0x08003fcf
 8003fa4:	08003fcf 	.word	0x08003fcf
 8003fa8:	08003fcf 	.word	0x08003fcf
 8003fac:	08003fc7 	.word	0x08003fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe f8de 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61f8      	str	r0, [r7, #28]
        break;
 8003fb6:	e010      	b.n	8003fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b8f      	ldr	r3, [pc, #572]	; (80041f8 <UART_SetConfig+0x56c>)
 8003fba:	61fb      	str	r3, [r7, #28]
        break;
 8003fbc:	e00d      	b.n	8003fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe f83f 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003fc2:	61f8      	str	r0, [r7, #28]
        break;
 8003fc4:	e009      	b.n	8003fda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fca:	61fb      	str	r3, [r7, #28]
        break;
 8003fcc:	e005      	b.n	8003fda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80fb 	beq.w	80041d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d305      	bcc.n	8003ffe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d903      	bls.n	8004006 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004004:	e0e8      	b.n	80041d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	2200      	movs	r2, #0
 800400a:	461c      	mov	r4, r3
 800400c:	4615      	mov	r5, r2
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	022b      	lsls	r3, r5, #8
 8004018:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800401c:	0222      	lsls	r2, r4, #8
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	6849      	ldr	r1, [r1, #4]
 8004022:	0849      	lsrs	r1, r1, #1
 8004024:	2000      	movs	r0, #0
 8004026:	4688      	mov	r8, r1
 8004028:	4681      	mov	r9, r0
 800402a:	eb12 0a08 	adds.w	sl, r2, r8
 800402e:	eb43 0b09 	adc.w	fp, r3, r9
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004040:	4650      	mov	r0, sl
 8004042:	4659      	mov	r1, fp
 8004044:	f7fc f914 	bl	8000270 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004056:	d308      	bcc.n	800406a <UART_SetConfig+0x3de>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d204      	bcs.n	800406a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	e0b6      	b.n	80041d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004070:	e0b2      	b.n	80041d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d15e      	bne.n	800413a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800407c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004080:	2b08      	cmp	r3, #8
 8004082:	d828      	bhi.n	80040d6 <UART_SetConfig+0x44a>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x400>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040b1 	.word	0x080040b1
 8004090:	080040b9 	.word	0x080040b9
 8004094:	080040c1 	.word	0x080040c1
 8004098:	080040d7 	.word	0x080040d7
 800409c:	080040c7 	.word	0x080040c7
 80040a0:	080040d7 	.word	0x080040d7
 80040a4:	080040d7 	.word	0x080040d7
 80040a8:	080040d7 	.word	0x080040d7
 80040ac:	080040cf 	.word	0x080040cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040b0:	f7fe f85e 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80040b4:	61f8      	str	r0, [r7, #28]
        break;
 80040b6:	e014      	b.n	80040e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe f870 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 80040bc:	61f8      	str	r0, [r7, #28]
        break;
 80040be:	e010      	b.n	80040e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <UART_SetConfig+0x56c>)
 80040c2:	61fb      	str	r3, [r7, #28]
        break;
 80040c4:	e00d      	b.n	80040e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c6:	f7fd ffbb 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 80040ca:	61f8      	str	r0, [r7, #28]
        break;
 80040cc:	e009      	b.n	80040e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	61fb      	str	r3, [r7, #28]
        break;
 80040d4:	e005      	b.n	80040e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d077      	beq.n	80041d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	005a      	lsls	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d916      	bls.n	8004132 <UART_SetConfig+0x4a6>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d212      	bcs.n	8004132 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f023 030f 	bic.w	r3, r3, #15
 8004114:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	b29a      	uxth	r2, r3
 8004122:	8afb      	ldrh	r3, [r7, #22]
 8004124:	4313      	orrs	r3, r2
 8004126:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	8afa      	ldrh	r2, [r7, #22]
 800412e:	60da      	str	r2, [r3, #12]
 8004130:	e052      	b.n	80041d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004138:	e04e      	b.n	80041d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800413a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800413e:	2b08      	cmp	r3, #8
 8004140:	d827      	bhi.n	8004192 <UART_SetConfig+0x506>
 8004142:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x4bc>)
 8004144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004193 	.word	0x08004193
 8004158:	08004183 	.word	0x08004183
 800415c:	08004193 	.word	0x08004193
 8004160:	08004193 	.word	0x08004193
 8004164:	08004193 	.word	0x08004193
 8004168:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe f800 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7fe f812 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8004178:	61f8      	str	r0, [r7, #28]
        break;
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <UART_SetConfig+0x56c>)
 800417e:	61fb      	str	r3, [r7, #28]
        break;
 8004180:	e00d      	b.n	800419e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fd ff5d 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
        break;
 8004188:	e009      	b.n	800419e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	61fb      	str	r3, [r7, #28]
        break;
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800419c:	bf00      	nop
    }

    if (pclk != 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d019      	beq.n	80041d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	085a      	lsrs	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	441a      	add	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	d909      	bls.n	80041d2 <UART_SetConfig+0x546>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c4:	d205      	bcs.n	80041d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e002      	b.n	80041d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	40008000 	.word	0x40008000
 80041f8:	00f42400 	.word	0x00f42400

080041fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01a      	beq.n	8004312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fa:	d10a      	bne.n	8004312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004350:	f7fc fe56 	bl	8001000 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d10e      	bne.n	8004382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f82d 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e023      	b.n	80043ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d10e      	bne.n	80043ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f817 	bl	80043d2 <UART_WaitOnFlagUntilTimeout>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e00d      	b.n	80043ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b09c      	sub	sp, #112	; 0x70
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	e0a5      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	f000 80a1 	beq.w	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fc fe07 	bl	8001000 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <UART_WaitOnFlagUntilTimeout+0x32>
 80043fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004400:	2b00      	cmp	r3, #0
 8004402:	d13e      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004418:	667b      	str	r3, [r7, #100]	; 0x64
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004422:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004424:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004428:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e6      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3308      	adds	r3, #8
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	663b      	str	r3, [r7, #96]	; 0x60
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3308      	adds	r3, #8
 8004454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004456:	64ba      	str	r2, [r7, #72]	; 0x48
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800445c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e067      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d04f      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449e:	d147      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	613b      	str	r3, [r7, #16]
   return(result);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3308      	adds	r3, #8
 80044fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044fc:	623a      	str	r2, [r7, #32]
 80044fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	69f9      	ldr	r1, [r7, #28]
 8004502:	6a3a      	ldr	r2, [r7, #32]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	61bb      	str	r3, [r7, #24]
   return(result);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e010      	b.n	8004552 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	f43f af4a 	beq.w	80043e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3770      	adds	r7, #112	; 0x70
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <atoi>:
 800455a:	220a      	movs	r2, #10
 800455c:	2100      	movs	r1, #0
 800455e:	f000 b8d5 	b.w	800470c <strtol>
	...

08004564 <__errno>:
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <__errno+0x8>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c

08004570 <__libc_init_array>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	4d0d      	ldr	r5, [pc, #52]	; (80045a8 <__libc_init_array+0x38>)
 8004574:	4c0d      	ldr	r4, [pc, #52]	; (80045ac <__libc_init_array+0x3c>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	2600      	movs	r6, #0
 800457c:	42a6      	cmp	r6, r4
 800457e:	d109      	bne.n	8004594 <__libc_init_array+0x24>
 8004580:	4d0b      	ldr	r5, [pc, #44]	; (80045b0 <__libc_init_array+0x40>)
 8004582:	4c0c      	ldr	r4, [pc, #48]	; (80045b4 <__libc_init_array+0x44>)
 8004584:	f000 fd1a 	bl	8004fbc <_init>
 8004588:	1b64      	subs	r4, r4, r5
 800458a:	10a4      	asrs	r4, r4, #2
 800458c:	2600      	movs	r6, #0
 800458e:	42a6      	cmp	r6, r4
 8004590:	d105      	bne.n	800459e <__libc_init_array+0x2e>
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	f855 3b04 	ldr.w	r3, [r5], #4
 8004598:	4798      	blx	r3
 800459a:	3601      	adds	r6, #1
 800459c:	e7ee      	b.n	800457c <__libc_init_array+0xc>
 800459e:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a2:	4798      	blx	r3
 80045a4:	3601      	adds	r6, #1
 80045a6:	e7f2      	b.n	800458e <__libc_init_array+0x1e>
 80045a8:	08005264 	.word	0x08005264
 80045ac:	08005264 	.word	0x08005264
 80045b0:	08005264 	.word	0x08005264
 80045b4:	08005268 	.word	0x08005268

080045b8 <memset>:
 80045b8:	4402      	add	r2, r0
 80045ba:	4603      	mov	r3, r0
 80045bc:	4293      	cmp	r3, r2
 80045be:	d100      	bne.n	80045c2 <memset+0xa>
 80045c0:	4770      	bx	lr
 80045c2:	f803 1b01 	strb.w	r1, [r3], #1
 80045c6:	e7f9      	b.n	80045bc <memset+0x4>

080045c8 <siprintf>:
 80045c8:	b40e      	push	{r1, r2, r3}
 80045ca:	b500      	push	{lr}
 80045cc:	b09c      	sub	sp, #112	; 0x70
 80045ce:	ab1d      	add	r3, sp, #116	; 0x74
 80045d0:	9002      	str	r0, [sp, #8]
 80045d2:	9006      	str	r0, [sp, #24]
 80045d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045d8:	4809      	ldr	r0, [pc, #36]	; (8004600 <siprintf+0x38>)
 80045da:	9107      	str	r1, [sp, #28]
 80045dc:	9104      	str	r1, [sp, #16]
 80045de:	4909      	ldr	r1, [pc, #36]	; (8004604 <siprintf+0x3c>)
 80045e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e4:	9105      	str	r1, [sp, #20]
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	a902      	add	r1, sp, #8
 80045ec:	f000 f8f4 	bl	80047d8 <_svfiprintf_r>
 80045f0:	9b02      	ldr	r3, [sp, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	b01c      	add	sp, #112	; 0x70
 80045f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045fc:	b003      	add	sp, #12
 80045fe:	4770      	bx	lr
 8004600:	2000000c 	.word	0x2000000c
 8004604:	ffff0208 	.word	0xffff0208

08004608 <_strtol_l.constprop.0>:
 8004608:	2b01      	cmp	r3, #1
 800460a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460e:	d001      	beq.n	8004614 <_strtol_l.constprop.0+0xc>
 8004610:	2b24      	cmp	r3, #36	; 0x24
 8004612:	d906      	bls.n	8004622 <_strtol_l.constprop.0+0x1a>
 8004614:	f7ff ffa6 	bl	8004564 <__errno>
 8004618:	2316      	movs	r3, #22
 800461a:	6003      	str	r3, [r0, #0]
 800461c:	2000      	movs	r0, #0
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004708 <_strtol_l.constprop.0+0x100>
 8004626:	460d      	mov	r5, r1
 8004628:	462e      	mov	r6, r5
 800462a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800462e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004632:	f017 0708 	ands.w	r7, r7, #8
 8004636:	d1f7      	bne.n	8004628 <_strtol_l.constprop.0+0x20>
 8004638:	2c2d      	cmp	r4, #45	; 0x2d
 800463a:	d132      	bne.n	80046a2 <_strtol_l.constprop.0+0x9a>
 800463c:	782c      	ldrb	r4, [r5, #0]
 800463e:	2701      	movs	r7, #1
 8004640:	1cb5      	adds	r5, r6, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d05b      	beq.n	80046fe <_strtol_l.constprop.0+0xf6>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d109      	bne.n	800465e <_strtol_l.constprop.0+0x56>
 800464a:	2c30      	cmp	r4, #48	; 0x30
 800464c:	d107      	bne.n	800465e <_strtol_l.constprop.0+0x56>
 800464e:	782c      	ldrb	r4, [r5, #0]
 8004650:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004654:	2c58      	cmp	r4, #88	; 0x58
 8004656:	d14d      	bne.n	80046f4 <_strtol_l.constprop.0+0xec>
 8004658:	786c      	ldrb	r4, [r5, #1]
 800465a:	2310      	movs	r3, #16
 800465c:	3502      	adds	r5, #2
 800465e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004662:	f108 38ff 	add.w	r8, r8, #4294967295
 8004666:	f04f 0c00 	mov.w	ip, #0
 800466a:	fbb8 f9f3 	udiv	r9, r8, r3
 800466e:	4666      	mov	r6, ip
 8004670:	fb03 8a19 	mls	sl, r3, r9, r8
 8004674:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004678:	f1be 0f09 	cmp.w	lr, #9
 800467c:	d816      	bhi.n	80046ac <_strtol_l.constprop.0+0xa4>
 800467e:	4674      	mov	r4, lr
 8004680:	42a3      	cmp	r3, r4
 8004682:	dd24      	ble.n	80046ce <_strtol_l.constprop.0+0xc6>
 8004684:	f1bc 0f00 	cmp.w	ip, #0
 8004688:	db1e      	blt.n	80046c8 <_strtol_l.constprop.0+0xc0>
 800468a:	45b1      	cmp	r9, r6
 800468c:	d31c      	bcc.n	80046c8 <_strtol_l.constprop.0+0xc0>
 800468e:	d101      	bne.n	8004694 <_strtol_l.constprop.0+0x8c>
 8004690:	45a2      	cmp	sl, r4
 8004692:	db19      	blt.n	80046c8 <_strtol_l.constprop.0+0xc0>
 8004694:	fb06 4603 	mla	r6, r6, r3, r4
 8004698:	f04f 0c01 	mov.w	ip, #1
 800469c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046a0:	e7e8      	b.n	8004674 <_strtol_l.constprop.0+0x6c>
 80046a2:	2c2b      	cmp	r4, #43	; 0x2b
 80046a4:	bf04      	itt	eq
 80046a6:	782c      	ldrbeq	r4, [r5, #0]
 80046a8:	1cb5      	addeq	r5, r6, #2
 80046aa:	e7ca      	b.n	8004642 <_strtol_l.constprop.0+0x3a>
 80046ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80046b0:	f1be 0f19 	cmp.w	lr, #25
 80046b4:	d801      	bhi.n	80046ba <_strtol_l.constprop.0+0xb2>
 80046b6:	3c37      	subs	r4, #55	; 0x37
 80046b8:	e7e2      	b.n	8004680 <_strtol_l.constprop.0+0x78>
 80046ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80046be:	f1be 0f19 	cmp.w	lr, #25
 80046c2:	d804      	bhi.n	80046ce <_strtol_l.constprop.0+0xc6>
 80046c4:	3c57      	subs	r4, #87	; 0x57
 80046c6:	e7db      	b.n	8004680 <_strtol_l.constprop.0+0x78>
 80046c8:	f04f 3cff 	mov.w	ip, #4294967295
 80046cc:	e7e6      	b.n	800469c <_strtol_l.constprop.0+0x94>
 80046ce:	f1bc 0f00 	cmp.w	ip, #0
 80046d2:	da05      	bge.n	80046e0 <_strtol_l.constprop.0+0xd8>
 80046d4:	2322      	movs	r3, #34	; 0x22
 80046d6:	6003      	str	r3, [r0, #0]
 80046d8:	4646      	mov	r6, r8
 80046da:	b942      	cbnz	r2, 80046ee <_strtol_l.constprop.0+0xe6>
 80046dc:	4630      	mov	r0, r6
 80046de:	e79e      	b.n	800461e <_strtol_l.constprop.0+0x16>
 80046e0:	b107      	cbz	r7, 80046e4 <_strtol_l.constprop.0+0xdc>
 80046e2:	4276      	negs	r6, r6
 80046e4:	2a00      	cmp	r2, #0
 80046e6:	d0f9      	beq.n	80046dc <_strtol_l.constprop.0+0xd4>
 80046e8:	f1bc 0f00 	cmp.w	ip, #0
 80046ec:	d000      	beq.n	80046f0 <_strtol_l.constprop.0+0xe8>
 80046ee:	1e69      	subs	r1, r5, #1
 80046f0:	6011      	str	r1, [r2, #0]
 80046f2:	e7f3      	b.n	80046dc <_strtol_l.constprop.0+0xd4>
 80046f4:	2430      	movs	r4, #48	; 0x30
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1b1      	bne.n	800465e <_strtol_l.constprop.0+0x56>
 80046fa:	2308      	movs	r3, #8
 80046fc:	e7af      	b.n	800465e <_strtol_l.constprop.0+0x56>
 80046fe:	2c30      	cmp	r4, #48	; 0x30
 8004700:	d0a5      	beq.n	800464e <_strtol_l.constprop.0+0x46>
 8004702:	230a      	movs	r3, #10
 8004704:	e7ab      	b.n	800465e <_strtol_l.constprop.0+0x56>
 8004706:	bf00      	nop
 8004708:	08005129 	.word	0x08005129

0800470c <strtol>:
 800470c:	4613      	mov	r3, r2
 800470e:	460a      	mov	r2, r1
 8004710:	4601      	mov	r1, r0
 8004712:	4802      	ldr	r0, [pc, #8]	; (800471c <strtol+0x10>)
 8004714:	6800      	ldr	r0, [r0, #0]
 8004716:	f7ff bf77 	b.w	8004608 <_strtol_l.constprop.0>
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c

08004720 <__ssputs_r>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	688e      	ldr	r6, [r1, #8]
 8004726:	429e      	cmp	r6, r3
 8004728:	4682      	mov	sl, r0
 800472a:	460c      	mov	r4, r1
 800472c:	4690      	mov	r8, r2
 800472e:	461f      	mov	r7, r3
 8004730:	d838      	bhi.n	80047a4 <__ssputs_r+0x84>
 8004732:	898a      	ldrh	r2, [r1, #12]
 8004734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004738:	d032      	beq.n	80047a0 <__ssputs_r+0x80>
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	6909      	ldr	r1, [r1, #16]
 800473e:	eba5 0901 	sub.w	r9, r5, r1
 8004742:	6965      	ldr	r5, [r4, #20]
 8004744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800474c:	3301      	adds	r3, #1
 800474e:	444b      	add	r3, r9
 8004750:	106d      	asrs	r5, r5, #1
 8004752:	429d      	cmp	r5, r3
 8004754:	bf38      	it	cc
 8004756:	461d      	movcc	r5, r3
 8004758:	0553      	lsls	r3, r2, #21
 800475a:	d531      	bpl.n	80047c0 <__ssputs_r+0xa0>
 800475c:	4629      	mov	r1, r5
 800475e:	f000 fb63 	bl	8004e28 <_malloc_r>
 8004762:	4606      	mov	r6, r0
 8004764:	b950      	cbnz	r0, 800477c <__ssputs_r+0x5c>
 8004766:	230c      	movs	r3, #12
 8004768:	f8ca 3000 	str.w	r3, [sl]
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	464a      	mov	r2, r9
 8004780:	f000 fabe 	bl	8004d00 <memcpy>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	6126      	str	r6, [r4, #16]
 8004792:	6165      	str	r5, [r4, #20]
 8004794:	444e      	add	r6, r9
 8004796:	eba5 0509 	sub.w	r5, r5, r9
 800479a:	6026      	str	r6, [r4, #0]
 800479c:	60a5      	str	r5, [r4, #8]
 800479e:	463e      	mov	r6, r7
 80047a0:	42be      	cmp	r6, r7
 80047a2:	d900      	bls.n	80047a6 <__ssputs_r+0x86>
 80047a4:	463e      	mov	r6, r7
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	4632      	mov	r2, r6
 80047aa:	4641      	mov	r1, r8
 80047ac:	f000 fab6 	bl	8004d1c <memmove>
 80047b0:	68a3      	ldr	r3, [r4, #8]
 80047b2:	1b9b      	subs	r3, r3, r6
 80047b4:	60a3      	str	r3, [r4, #8]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	4433      	add	r3, r6
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	2000      	movs	r0, #0
 80047be:	e7db      	b.n	8004778 <__ssputs_r+0x58>
 80047c0:	462a      	mov	r2, r5
 80047c2:	f000 fba5 	bl	8004f10 <_realloc_r>
 80047c6:	4606      	mov	r6, r0
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d1e1      	bne.n	8004790 <__ssputs_r+0x70>
 80047cc:	6921      	ldr	r1, [r4, #16]
 80047ce:	4650      	mov	r0, sl
 80047d0:	f000 fabe 	bl	8004d50 <_free_r>
 80047d4:	e7c7      	b.n	8004766 <__ssputs_r+0x46>
	...

080047d8 <_svfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	4698      	mov	r8, r3
 80047de:	898b      	ldrh	r3, [r1, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	b09d      	sub	sp, #116	; 0x74
 80047e4:	4607      	mov	r7, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	d50e      	bpl.n	800480a <_svfiprintf_r+0x32>
 80047ec:	690b      	ldr	r3, [r1, #16]
 80047ee:	b963      	cbnz	r3, 800480a <_svfiprintf_r+0x32>
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	f000 fb19 	bl	8004e28 <_malloc_r>
 80047f6:	6028      	str	r0, [r5, #0]
 80047f8:	6128      	str	r0, [r5, #16]
 80047fa:	b920      	cbnz	r0, 8004806 <_svfiprintf_r+0x2e>
 80047fc:	230c      	movs	r3, #12
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e0d1      	b.n	80049aa <_svfiprintf_r+0x1d2>
 8004806:	2340      	movs	r3, #64	; 0x40
 8004808:	616b      	str	r3, [r5, #20]
 800480a:	2300      	movs	r3, #0
 800480c:	9309      	str	r3, [sp, #36]	; 0x24
 800480e:	2320      	movs	r3, #32
 8004810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004814:	f8cd 800c 	str.w	r8, [sp, #12]
 8004818:	2330      	movs	r3, #48	; 0x30
 800481a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049c4 <_svfiprintf_r+0x1ec>
 800481e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004822:	f04f 0901 	mov.w	r9, #1
 8004826:	4623      	mov	r3, r4
 8004828:	469a      	mov	sl, r3
 800482a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800482e:	b10a      	cbz	r2, 8004834 <_svfiprintf_r+0x5c>
 8004830:	2a25      	cmp	r2, #37	; 0x25
 8004832:	d1f9      	bne.n	8004828 <_svfiprintf_r+0x50>
 8004834:	ebba 0b04 	subs.w	fp, sl, r4
 8004838:	d00b      	beq.n	8004852 <_svfiprintf_r+0x7a>
 800483a:	465b      	mov	r3, fp
 800483c:	4622      	mov	r2, r4
 800483e:	4629      	mov	r1, r5
 8004840:	4638      	mov	r0, r7
 8004842:	f7ff ff6d 	bl	8004720 <__ssputs_r>
 8004846:	3001      	adds	r0, #1
 8004848:	f000 80aa 	beq.w	80049a0 <_svfiprintf_r+0x1c8>
 800484c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800484e:	445a      	add	r2, fp
 8004850:	9209      	str	r2, [sp, #36]	; 0x24
 8004852:	f89a 3000 	ldrb.w	r3, [sl]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80a2 	beq.w	80049a0 <_svfiprintf_r+0x1c8>
 800485c:	2300      	movs	r3, #0
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004866:	f10a 0a01 	add.w	sl, sl, #1
 800486a:	9304      	str	r3, [sp, #16]
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004872:	931a      	str	r3, [sp, #104]	; 0x68
 8004874:	4654      	mov	r4, sl
 8004876:	2205      	movs	r2, #5
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	4851      	ldr	r0, [pc, #324]	; (80049c4 <_svfiprintf_r+0x1ec>)
 800487e:	f7fb fca7 	bl	80001d0 <memchr>
 8004882:	9a04      	ldr	r2, [sp, #16]
 8004884:	b9d8      	cbnz	r0, 80048be <_svfiprintf_r+0xe6>
 8004886:	06d0      	lsls	r0, r2, #27
 8004888:	bf44      	itt	mi
 800488a:	2320      	movmi	r3, #32
 800488c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004890:	0711      	lsls	r1, r2, #28
 8004892:	bf44      	itt	mi
 8004894:	232b      	movmi	r3, #43	; 0x2b
 8004896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489a:	f89a 3000 	ldrb.w	r3, [sl]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d015      	beq.n	80048ce <_svfiprintf_r+0xf6>
 80048a2:	9a07      	ldr	r2, [sp, #28]
 80048a4:	4654      	mov	r4, sl
 80048a6:	2000      	movs	r0, #0
 80048a8:	f04f 0c0a 	mov.w	ip, #10
 80048ac:	4621      	mov	r1, r4
 80048ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048b2:	3b30      	subs	r3, #48	; 0x30
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d94e      	bls.n	8004956 <_svfiprintf_r+0x17e>
 80048b8:	b1b0      	cbz	r0, 80048e8 <_svfiprintf_r+0x110>
 80048ba:	9207      	str	r2, [sp, #28]
 80048bc:	e014      	b.n	80048e8 <_svfiprintf_r+0x110>
 80048be:	eba0 0308 	sub.w	r3, r0, r8
 80048c2:	fa09 f303 	lsl.w	r3, r9, r3
 80048c6:	4313      	orrs	r3, r2
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	46a2      	mov	sl, r4
 80048cc:	e7d2      	b.n	8004874 <_svfiprintf_r+0x9c>
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	1d19      	adds	r1, r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	9103      	str	r1, [sp, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfbb      	ittet	lt
 80048da:	425b      	neglt	r3, r3
 80048dc:	f042 0202 	orrlt.w	r2, r2, #2
 80048e0:	9307      	strge	r3, [sp, #28]
 80048e2:	9307      	strlt	r3, [sp, #28]
 80048e4:	bfb8      	it	lt
 80048e6:	9204      	strlt	r2, [sp, #16]
 80048e8:	7823      	ldrb	r3, [r4, #0]
 80048ea:	2b2e      	cmp	r3, #46	; 0x2e
 80048ec:	d10c      	bne.n	8004908 <_svfiprintf_r+0x130>
 80048ee:	7863      	ldrb	r3, [r4, #1]
 80048f0:	2b2a      	cmp	r3, #42	; 0x2a
 80048f2:	d135      	bne.n	8004960 <_svfiprintf_r+0x188>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	9203      	str	r2, [sp, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfb8      	it	lt
 8004900:	f04f 33ff 	movlt.w	r3, #4294967295
 8004904:	3402      	adds	r4, #2
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049d4 <_svfiprintf_r+0x1fc>
 800490c:	7821      	ldrb	r1, [r4, #0]
 800490e:	2203      	movs	r2, #3
 8004910:	4650      	mov	r0, sl
 8004912:	f7fb fc5d 	bl	80001d0 <memchr>
 8004916:	b140      	cbz	r0, 800492a <_svfiprintf_r+0x152>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	eba0 000a 	sub.w	r0, r0, sl
 800491e:	fa03 f000 	lsl.w	r0, r3, r0
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	4303      	orrs	r3, r0
 8004926:	3401      	adds	r4, #1
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4826      	ldr	r0, [pc, #152]	; (80049c8 <_svfiprintf_r+0x1f0>)
 8004930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004934:	2206      	movs	r2, #6
 8004936:	f7fb fc4b 	bl	80001d0 <memchr>
 800493a:	2800      	cmp	r0, #0
 800493c:	d038      	beq.n	80049b0 <_svfiprintf_r+0x1d8>
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <_svfiprintf_r+0x1f4>)
 8004940:	bb1b      	cbnz	r3, 800498a <_svfiprintf_r+0x1b2>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	3307      	adds	r3, #7
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	3308      	adds	r3, #8
 800494c:	9303      	str	r3, [sp, #12]
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	4433      	add	r3, r6
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	e767      	b.n	8004826 <_svfiprintf_r+0x4e>
 8004956:	fb0c 3202 	mla	r2, ip, r2, r3
 800495a:	460c      	mov	r4, r1
 800495c:	2001      	movs	r0, #1
 800495e:	e7a5      	b.n	80048ac <_svfiprintf_r+0xd4>
 8004960:	2300      	movs	r3, #0
 8004962:	3401      	adds	r4, #1
 8004964:	9305      	str	r3, [sp, #20]
 8004966:	4619      	mov	r1, r3
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4620      	mov	r0, r4
 800496e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004972:	3a30      	subs	r2, #48	; 0x30
 8004974:	2a09      	cmp	r2, #9
 8004976:	d903      	bls.n	8004980 <_svfiprintf_r+0x1a8>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0c5      	beq.n	8004908 <_svfiprintf_r+0x130>
 800497c:	9105      	str	r1, [sp, #20]
 800497e:	e7c3      	b.n	8004908 <_svfiprintf_r+0x130>
 8004980:	fb0c 2101 	mla	r1, ip, r1, r2
 8004984:	4604      	mov	r4, r0
 8004986:	2301      	movs	r3, #1
 8004988:	e7f0      	b.n	800496c <_svfiprintf_r+0x194>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	462a      	mov	r2, r5
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <_svfiprintf_r+0x1f8>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	4638      	mov	r0, r7
 8004996:	f3af 8000 	nop.w
 800499a:	1c42      	adds	r2, r0, #1
 800499c:	4606      	mov	r6, r0
 800499e:	d1d6      	bne.n	800494e <_svfiprintf_r+0x176>
 80049a0:	89ab      	ldrh	r3, [r5, #12]
 80049a2:	065b      	lsls	r3, r3, #25
 80049a4:	f53f af2c 	bmi.w	8004800 <_svfiprintf_r+0x28>
 80049a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049aa:	b01d      	add	sp, #116	; 0x74
 80049ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b0:	ab03      	add	r3, sp, #12
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	462a      	mov	r2, r5
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <_svfiprintf_r+0x1f8>)
 80049b8:	a904      	add	r1, sp, #16
 80049ba:	4638      	mov	r0, r7
 80049bc:	f000 f87a 	bl	8004ab4 <_printf_i>
 80049c0:	e7eb      	b.n	800499a <_svfiprintf_r+0x1c2>
 80049c2:	bf00      	nop
 80049c4:	08005229 	.word	0x08005229
 80049c8:	08005233 	.word	0x08005233
 80049cc:	00000000 	.word	0x00000000
 80049d0:	08004721 	.word	0x08004721
 80049d4:	0800522f 	.word	0x0800522f

080049d8 <_printf_common>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	4616      	mov	r6, r2
 80049de:	4699      	mov	r9, r3
 80049e0:	688a      	ldr	r2, [r1, #8]
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfb8      	it	lt
 80049ec:	4613      	movlt	r3, r2
 80049ee:	6033      	str	r3, [r6, #0]
 80049f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049f4:	4607      	mov	r7, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	b10a      	cbz	r2, 80049fe <_printf_common+0x26>
 80049fa:	3301      	adds	r3, #1
 80049fc:	6033      	str	r3, [r6, #0]
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	0699      	lsls	r1, r3, #26
 8004a02:	bf42      	ittt	mi
 8004a04:	6833      	ldrmi	r3, [r6, #0]
 8004a06:	3302      	addmi	r3, #2
 8004a08:	6033      	strmi	r3, [r6, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	f015 0506 	ands.w	r5, r5, #6
 8004a10:	d106      	bne.n	8004a20 <_printf_common+0x48>
 8004a12:	f104 0a19 	add.w	sl, r4, #25
 8004a16:	68e3      	ldr	r3, [r4, #12]
 8004a18:	6832      	ldr	r2, [r6, #0]
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	42ab      	cmp	r3, r5
 8004a1e:	dc26      	bgt.n	8004a6e <_printf_common+0x96>
 8004a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a24:	1e13      	subs	r3, r2, #0
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	bf18      	it	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	0692      	lsls	r2, r2, #26
 8004a2e:	d42b      	bmi.n	8004a88 <_printf_common+0xb0>
 8004a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a34:	4649      	mov	r1, r9
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c0      	blx	r8
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d01e      	beq.n	8004a7c <_printf_common+0xa4>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	68e5      	ldr	r5, [r4, #12]
 8004a42:	6832      	ldr	r2, [r6, #0]
 8004a44:	f003 0306 	and.w	r3, r3, #6
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	bf08      	it	eq
 8004a4c:	1aad      	subeq	r5, r5, r2
 8004a4e:	68a3      	ldr	r3, [r4, #8]
 8004a50:	6922      	ldr	r2, [r4, #16]
 8004a52:	bf0c      	ite	eq
 8004a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a58:	2500      	movne	r5, #0
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bfc4      	itt	gt
 8004a5e:	1a9b      	subgt	r3, r3, r2
 8004a60:	18ed      	addgt	r5, r5, r3
 8004a62:	2600      	movs	r6, #0
 8004a64:	341a      	adds	r4, #26
 8004a66:	42b5      	cmp	r5, r6
 8004a68:	d11a      	bne.n	8004aa0 <_printf_common+0xc8>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e008      	b.n	8004a80 <_printf_common+0xa8>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4652      	mov	r2, sl
 8004a72:	4649      	mov	r1, r9
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c0      	blx	r8
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d103      	bne.n	8004a84 <_printf_common+0xac>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	3501      	adds	r5, #1
 8004a86:	e7c6      	b.n	8004a16 <_printf_common+0x3e>
 8004a88:	18e1      	adds	r1, r4, r3
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	2030      	movs	r0, #48	; 0x30
 8004a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a92:	4422      	add	r2, r4
 8004a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	e7c7      	b.n	8004a30 <_printf_common+0x58>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d0e6      	beq.n	8004a7c <_printf_common+0xa4>
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7d9      	b.n	8004a66 <_printf_common+0x8e>
	...

08004ab4 <_printf_i>:
 8004ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	7e0f      	ldrb	r7, [r1, #24]
 8004aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004abc:	2f78      	cmp	r7, #120	; 0x78
 8004abe:	4691      	mov	r9, r2
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	469a      	mov	sl, r3
 8004ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aca:	d807      	bhi.n	8004adc <_printf_i+0x28>
 8004acc:	2f62      	cmp	r7, #98	; 0x62
 8004ace:	d80a      	bhi.n	8004ae6 <_printf_i+0x32>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	f000 80d8 	beq.w	8004c86 <_printf_i+0x1d2>
 8004ad6:	2f58      	cmp	r7, #88	; 0x58
 8004ad8:	f000 80a3 	beq.w	8004c22 <_printf_i+0x16e>
 8004adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ae4:	e03a      	b.n	8004b5c <_printf_i+0xa8>
 8004ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aea:	2b15      	cmp	r3, #21
 8004aec:	d8f6      	bhi.n	8004adc <_printf_i+0x28>
 8004aee:	a101      	add	r1, pc, #4	; (adr r1, 8004af4 <_printf_i+0x40>)
 8004af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b61 	.word	0x08004b61
 8004afc:	08004add 	.word	0x08004add
 8004b00:	08004add 	.word	0x08004add
 8004b04:	08004add 	.word	0x08004add
 8004b08:	08004add 	.word	0x08004add
 8004b0c:	08004b61 	.word	0x08004b61
 8004b10:	08004add 	.word	0x08004add
 8004b14:	08004add 	.word	0x08004add
 8004b18:	08004add 	.word	0x08004add
 8004b1c:	08004add 	.word	0x08004add
 8004b20:	08004c6d 	.word	0x08004c6d
 8004b24:	08004b91 	.word	0x08004b91
 8004b28:	08004c4f 	.word	0x08004c4f
 8004b2c:	08004add 	.word	0x08004add
 8004b30:	08004add 	.word	0x08004add
 8004b34:	08004c8f 	.word	0x08004c8f
 8004b38:	08004add 	.word	0x08004add
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004add 	.word	0x08004add
 8004b44:	08004add 	.word	0x08004add
 8004b48:	08004c57 	.word	0x08004c57
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0a3      	b.n	8004ca8 <_printf_i+0x1f4>
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	0606      	lsls	r6, r0, #24
 8004b66:	f101 0304 	add.w	r3, r1, #4
 8004b6a:	d50a      	bpl.n	8004b82 <_printf_i+0xce>
 8004b6c:	680e      	ldr	r6, [r1, #0]
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	da03      	bge.n	8004b7c <_printf_i+0xc8>
 8004b74:	232d      	movs	r3, #45	; 0x2d
 8004b76:	4276      	negs	r6, r6
 8004b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7c:	485e      	ldr	r0, [pc, #376]	; (8004cf8 <_printf_i+0x244>)
 8004b7e:	230a      	movs	r3, #10
 8004b80:	e019      	b.n	8004bb6 <_printf_i+0x102>
 8004b82:	680e      	ldr	r6, [r1, #0]
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b8a:	bf18      	it	ne
 8004b8c:	b236      	sxthne	r6, r6
 8004b8e:	e7ef      	b.n	8004b70 <_printf_i+0xbc>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	6029      	str	r1, [r5, #0]
 8004b98:	0601      	lsls	r1, r0, #24
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0xec>
 8004b9c:	681e      	ldr	r6, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0xf2>
 8004ba0:	0646      	lsls	r6, r0, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0xe8>
 8004ba4:	881e      	ldrh	r6, [r3, #0]
 8004ba6:	4854      	ldr	r0, [pc, #336]	; (8004cf8 <_printf_i+0x244>)
 8004ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8004baa:	bf0c      	ite	eq
 8004bac:	2308      	moveq	r3, #8
 8004bae:	230a      	movne	r3, #10
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bb6:	6865      	ldr	r5, [r4, #4]
 8004bb8:	60a5      	str	r5, [r4, #8]
 8004bba:	2d00      	cmp	r5, #0
 8004bbc:	bfa2      	ittt	ge
 8004bbe:	6821      	ldrge	r1, [r4, #0]
 8004bc0:	f021 0104 	bicge.w	r1, r1, #4
 8004bc4:	6021      	strge	r1, [r4, #0]
 8004bc6:	b90e      	cbnz	r6, 8004bcc <_printf_i+0x118>
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	d04d      	beq.n	8004c68 <_printf_i+0x1b4>
 8004bcc:	4615      	mov	r5, r2
 8004bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8004bd6:	5dc7      	ldrb	r7, [r0, r7]
 8004bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bdc:	4637      	mov	r7, r6
 8004bde:	42bb      	cmp	r3, r7
 8004be0:	460e      	mov	r6, r1
 8004be2:	d9f4      	bls.n	8004bce <_printf_i+0x11a>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d10b      	bne.n	8004c00 <_printf_i+0x14c>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07de      	lsls	r6, r3, #31
 8004bec:	d508      	bpl.n	8004c00 <_printf_i+0x14c>
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	4299      	cmp	r1, r3
 8004bf4:	bfde      	ittt	le
 8004bf6:	2330      	movle	r3, #48	; 0x30
 8004bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c00:	1b52      	subs	r2, r2, r5
 8004c02:	6122      	str	r2, [r4, #16]
 8004c04:	f8cd a000 	str.w	sl, [sp]
 8004c08:	464b      	mov	r3, r9
 8004c0a:	aa03      	add	r2, sp, #12
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff fee2 	bl	80049d8 <_printf_common>
 8004c14:	3001      	adds	r0, #1
 8004c16:	d14c      	bne.n	8004cb2 <_printf_i+0x1fe>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	b004      	add	sp, #16
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	4835      	ldr	r0, [pc, #212]	; (8004cf8 <_printf_i+0x244>)
 8004c24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c28:	6829      	ldr	r1, [r5, #0]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c30:	6029      	str	r1, [r5, #0]
 8004c32:	061d      	lsls	r5, r3, #24
 8004c34:	d514      	bpl.n	8004c60 <_printf_i+0x1ac>
 8004c36:	07df      	lsls	r7, r3, #31
 8004c38:	bf44      	itt	mi
 8004c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c3e:	6023      	strmi	r3, [r4, #0]
 8004c40:	b91e      	cbnz	r6, 8004c4a <_printf_i+0x196>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	f023 0320 	bic.w	r3, r3, #32
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	e7b0      	b.n	8004bb0 <_printf_i+0xfc>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	2378      	movs	r3, #120	; 0x78
 8004c58:	4828      	ldr	r0, [pc, #160]	; (8004cfc <_printf_i+0x248>)
 8004c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c5e:	e7e3      	b.n	8004c28 <_printf_i+0x174>
 8004c60:	0659      	lsls	r1, r3, #25
 8004c62:	bf48      	it	mi
 8004c64:	b2b6      	uxthmi	r6, r6
 8004c66:	e7e6      	b.n	8004c36 <_printf_i+0x182>
 8004c68:	4615      	mov	r5, r2
 8004c6a:	e7bb      	b.n	8004be4 <_printf_i+0x130>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6826      	ldr	r6, [r4, #0]
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6028      	str	r0, [r5, #0]
 8004c76:	0635      	lsls	r5, r6, #24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0x1cc>
 8004c7c:	6019      	str	r1, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0x1d2>
 8004c80:	0670      	lsls	r0, r6, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0x1c8>
 8004c84:	8019      	strh	r1, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4615      	mov	r5, r2
 8004c8c:	e7ba      	b.n	8004c04 <_printf_i+0x150>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	681d      	ldr	r5, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fb fa98 	bl	80001d0 <memchr>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_printf_i+0x1f2>
 8004ca2:	1b40      	subs	r0, r0, r5
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	e7a8      	b.n	8004c04 <_printf_i+0x150>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0ab      	beq.n	8004c18 <_printf_i+0x164>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d413      	bmi.n	8004cee <_printf_i+0x23a>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e7a4      	b.n	8004c1c <_printf_i+0x168>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d09b      	beq.n	8004c18 <_printf_i+0x164>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9903      	ldr	r1, [sp, #12]
 8004ce6:	1a5b      	subs	r3, r3, r1
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dcf2      	bgt.n	8004cd2 <_printf_i+0x21e>
 8004cec:	e7eb      	b.n	8004cc6 <_printf_i+0x212>
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f104 0619 	add.w	r6, r4, #25
 8004cf4:	e7f5      	b.n	8004ce2 <_printf_i+0x22e>
 8004cf6:	bf00      	nop
 8004cf8:	0800523a 	.word	0x0800523a
 8004cfc:	0800524b 	.word	0x0800524b

08004d00 <memcpy>:
 8004d00:	440a      	add	r2, r1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d08:	d100      	bne.n	8004d0c <memcpy+0xc>
 8004d0a:	4770      	bx	lr
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d16:	4291      	cmp	r1, r2
 8004d18:	d1f9      	bne.n	8004d0e <memcpy+0xe>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <memmove>:
 8004d1c:	4288      	cmp	r0, r1
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	eb01 0402 	add.w	r4, r1, r2
 8004d24:	d902      	bls.n	8004d2c <memmove+0x10>
 8004d26:	4284      	cmp	r4, r0
 8004d28:	4623      	mov	r3, r4
 8004d2a:	d807      	bhi.n	8004d3c <memmove+0x20>
 8004d2c:	1e43      	subs	r3, r0, #1
 8004d2e:	42a1      	cmp	r1, r4
 8004d30:	d008      	beq.n	8004d44 <memmove+0x28>
 8004d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d3a:	e7f8      	b.n	8004d2e <memmove+0x12>
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4601      	mov	r1, r0
 8004d40:	428a      	cmp	r2, r1
 8004d42:	d100      	bne.n	8004d46 <memmove+0x2a>
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4e:	e7f7      	b.n	8004d40 <memmove+0x24>

08004d50 <_free_r>:
 8004d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d52:	2900      	cmp	r1, #0
 8004d54:	d044      	beq.n	8004de0 <_free_r+0x90>
 8004d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d5a:	9001      	str	r0, [sp, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d62:	bfb8      	it	lt
 8004d64:	18e4      	addlt	r4, r4, r3
 8004d66:	f000 f913 	bl	8004f90 <__malloc_lock>
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <_free_r+0x94>)
 8004d6c:	9801      	ldr	r0, [sp, #4]
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	b933      	cbnz	r3, 8004d80 <_free_r+0x30>
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	6014      	str	r4, [r2, #0]
 8004d76:	b003      	add	sp, #12
 8004d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d7c:	f000 b90e 	b.w	8004f9c <__malloc_unlock>
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d908      	bls.n	8004d96 <_free_r+0x46>
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	1961      	adds	r1, r4, r5
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf01      	itttt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	1949      	addeq	r1, r1, r5
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	e7ed      	b.n	8004d72 <_free_r+0x22>
 8004d96:	461a      	mov	r2, r3
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	b10b      	cbz	r3, 8004da0 <_free_r+0x50>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d9fa      	bls.n	8004d96 <_free_r+0x46>
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	1855      	adds	r5, r2, r1
 8004da4:	42a5      	cmp	r5, r4
 8004da6:	d10b      	bne.n	8004dc0 <_free_r+0x70>
 8004da8:	6824      	ldr	r4, [r4, #0]
 8004daa:	4421      	add	r1, r4
 8004dac:	1854      	adds	r4, r2, r1
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	d1e0      	bne.n	8004d76 <_free_r+0x26>
 8004db4:	681c      	ldr	r4, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	6053      	str	r3, [r2, #4]
 8004dba:	4421      	add	r1, r4
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	e7da      	b.n	8004d76 <_free_r+0x26>
 8004dc0:	d902      	bls.n	8004dc8 <_free_r+0x78>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	6003      	str	r3, [r0, #0]
 8004dc6:	e7d6      	b.n	8004d76 <_free_r+0x26>
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	1961      	adds	r1, r4, r5
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	bf04      	itt	eq
 8004dd0:	6819      	ldreq	r1, [r3, #0]
 8004dd2:	685b      	ldreq	r3, [r3, #4]
 8004dd4:	6063      	str	r3, [r4, #4]
 8004dd6:	bf04      	itt	eq
 8004dd8:	1949      	addeq	r1, r1, r5
 8004dda:	6021      	streq	r1, [r4, #0]
 8004ddc:	6054      	str	r4, [r2, #4]
 8004dde:	e7ca      	b.n	8004d76 <_free_r+0x26>
 8004de0:	b003      	add	sp, #12
 8004de2:	bd30      	pop	{r4, r5, pc}
 8004de4:	20000338 	.word	0x20000338

08004de8 <sbrk_aligned>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4e0e      	ldr	r6, [pc, #56]	; (8004e24 <sbrk_aligned+0x3c>)
 8004dec:	460c      	mov	r4, r1
 8004dee:	6831      	ldr	r1, [r6, #0]
 8004df0:	4605      	mov	r5, r0
 8004df2:	b911      	cbnz	r1, 8004dfa <sbrk_aligned+0x12>
 8004df4:	f000 f8bc 	bl	8004f70 <_sbrk_r>
 8004df8:	6030      	str	r0, [r6, #0]
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 f8b7 	bl	8004f70 <_sbrk_r>
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d00a      	beq.n	8004e1c <sbrk_aligned+0x34>
 8004e06:	1cc4      	adds	r4, r0, #3
 8004e08:	f024 0403 	bic.w	r4, r4, #3
 8004e0c:	42a0      	cmp	r0, r4
 8004e0e:	d007      	beq.n	8004e20 <sbrk_aligned+0x38>
 8004e10:	1a21      	subs	r1, r4, r0
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f8ac 	bl	8004f70 <_sbrk_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d101      	bne.n	8004e20 <sbrk_aligned+0x38>
 8004e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	2000033c 	.word	0x2000033c

08004e28 <_malloc_r>:
 8004e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2c:	1ccd      	adds	r5, r1, #3
 8004e2e:	f025 0503 	bic.w	r5, r5, #3
 8004e32:	3508      	adds	r5, #8
 8004e34:	2d0c      	cmp	r5, #12
 8004e36:	bf38      	it	cc
 8004e38:	250c      	movcc	r5, #12
 8004e3a:	2d00      	cmp	r5, #0
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	db01      	blt.n	8004e44 <_malloc_r+0x1c>
 8004e40:	42a9      	cmp	r1, r5
 8004e42:	d905      	bls.n	8004e50 <_malloc_r+0x28>
 8004e44:	230c      	movs	r3, #12
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	2600      	movs	r6, #0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	4e2e      	ldr	r6, [pc, #184]	; (8004f0c <_malloc_r+0xe4>)
 8004e52:	f000 f89d 	bl	8004f90 <__malloc_lock>
 8004e56:	6833      	ldr	r3, [r6, #0]
 8004e58:	461c      	mov	r4, r3
 8004e5a:	bb34      	cbnz	r4, 8004eaa <_malloc_r+0x82>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f7ff ffc2 	bl	8004de8 <sbrk_aligned>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	4604      	mov	r4, r0
 8004e68:	d14d      	bne.n	8004f06 <_malloc_r+0xde>
 8004e6a:	6834      	ldr	r4, [r6, #0]
 8004e6c:	4626      	mov	r6, r4
 8004e6e:	2e00      	cmp	r6, #0
 8004e70:	d140      	bne.n	8004ef4 <_malloc_r+0xcc>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	4631      	mov	r1, r6
 8004e76:	4638      	mov	r0, r7
 8004e78:	eb04 0803 	add.w	r8, r4, r3
 8004e7c:	f000 f878 	bl	8004f70 <_sbrk_r>
 8004e80:	4580      	cmp	r8, r0
 8004e82:	d13a      	bne.n	8004efa <_malloc_r+0xd2>
 8004e84:	6821      	ldr	r1, [r4, #0]
 8004e86:	3503      	adds	r5, #3
 8004e88:	1a6d      	subs	r5, r5, r1
 8004e8a:	f025 0503 	bic.w	r5, r5, #3
 8004e8e:	3508      	adds	r5, #8
 8004e90:	2d0c      	cmp	r5, #12
 8004e92:	bf38      	it	cc
 8004e94:	250c      	movcc	r5, #12
 8004e96:	4629      	mov	r1, r5
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff ffa5 	bl	8004de8 <sbrk_aligned>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d02b      	beq.n	8004efa <_malloc_r+0xd2>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	442b      	add	r3, r5
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	e00e      	b.n	8004ec8 <_malloc_r+0xa0>
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	1b52      	subs	r2, r2, r5
 8004eae:	d41e      	bmi.n	8004eee <_malloc_r+0xc6>
 8004eb0:	2a0b      	cmp	r2, #11
 8004eb2:	d916      	bls.n	8004ee2 <_malloc_r+0xba>
 8004eb4:	1961      	adds	r1, r4, r5
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6025      	str	r5, [r4, #0]
 8004eba:	bf18      	it	ne
 8004ebc:	6059      	strne	r1, [r3, #4]
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	bf08      	it	eq
 8004ec2:	6031      	streq	r1, [r6, #0]
 8004ec4:	5162      	str	r2, [r4, r5]
 8004ec6:	604b      	str	r3, [r1, #4]
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f104 060b 	add.w	r6, r4, #11
 8004ece:	f000 f865 	bl	8004f9c <__malloc_unlock>
 8004ed2:	f026 0607 	bic.w	r6, r6, #7
 8004ed6:	1d23      	adds	r3, r4, #4
 8004ed8:	1af2      	subs	r2, r6, r3
 8004eda:	d0b6      	beq.n	8004e4a <_malloc_r+0x22>
 8004edc:	1b9b      	subs	r3, r3, r6
 8004ede:	50a3      	str	r3, [r4, r2]
 8004ee0:	e7b3      	b.n	8004e4a <_malloc_r+0x22>
 8004ee2:	6862      	ldr	r2, [r4, #4]
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	bf0c      	ite	eq
 8004ee8:	6032      	streq	r2, [r6, #0]
 8004eea:	605a      	strne	r2, [r3, #4]
 8004eec:	e7ec      	b.n	8004ec8 <_malloc_r+0xa0>
 8004eee:	4623      	mov	r3, r4
 8004ef0:	6864      	ldr	r4, [r4, #4]
 8004ef2:	e7b2      	b.n	8004e5a <_malloc_r+0x32>
 8004ef4:	4634      	mov	r4, r6
 8004ef6:	6876      	ldr	r6, [r6, #4]
 8004ef8:	e7b9      	b.n	8004e6e <_malloc_r+0x46>
 8004efa:	230c      	movs	r3, #12
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	4638      	mov	r0, r7
 8004f00:	f000 f84c 	bl	8004f9c <__malloc_unlock>
 8004f04:	e7a1      	b.n	8004e4a <_malloc_r+0x22>
 8004f06:	6025      	str	r5, [r4, #0]
 8004f08:	e7de      	b.n	8004ec8 <_malloc_r+0xa0>
 8004f0a:	bf00      	nop
 8004f0c:	20000338 	.word	0x20000338

08004f10 <_realloc_r>:
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	4680      	mov	r8, r0
 8004f16:	4614      	mov	r4, r2
 8004f18:	460e      	mov	r6, r1
 8004f1a:	b921      	cbnz	r1, 8004f26 <_realloc_r+0x16>
 8004f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	4611      	mov	r1, r2
 8004f22:	f7ff bf81 	b.w	8004e28 <_malloc_r>
 8004f26:	b92a      	cbnz	r2, 8004f34 <_realloc_r+0x24>
 8004f28:	f7ff ff12 	bl	8004d50 <_free_r>
 8004f2c:	4625      	mov	r5, r4
 8004f2e:	4628      	mov	r0, r5
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f34:	f000 f838 	bl	8004fa8 <_malloc_usable_size_r>
 8004f38:	4284      	cmp	r4, r0
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	d802      	bhi.n	8004f44 <_realloc_r+0x34>
 8004f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f42:	d812      	bhi.n	8004f6a <_realloc_r+0x5a>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4640      	mov	r0, r8
 8004f48:	f7ff ff6e 	bl	8004e28 <_malloc_r>
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d0ed      	beq.n	8004f2e <_realloc_r+0x1e>
 8004f52:	42bc      	cmp	r4, r7
 8004f54:	4622      	mov	r2, r4
 8004f56:	4631      	mov	r1, r6
 8004f58:	bf28      	it	cs
 8004f5a:	463a      	movcs	r2, r7
 8004f5c:	f7ff fed0 	bl	8004d00 <memcpy>
 8004f60:	4631      	mov	r1, r6
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fef4 	bl	8004d50 <_free_r>
 8004f68:	e7e1      	b.n	8004f2e <_realloc_r+0x1e>
 8004f6a:	4635      	mov	r5, r6
 8004f6c:	e7df      	b.n	8004f2e <_realloc_r+0x1e>
	...

08004f70 <_sbrk_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d06      	ldr	r5, [pc, #24]	; (8004f8c <_sbrk_r+0x1c>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fb ff18 	bl	8000db0 <_sbrk>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_sbrk_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_sbrk_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	20000340 	.word	0x20000340

08004f90 <__malloc_lock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__malloc_lock+0x8>)
 8004f92:	f000 b811 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8004f96:	bf00      	nop
 8004f98:	20000344 	.word	0x20000344

08004f9c <__malloc_unlock>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__malloc_unlock+0x8>)
 8004f9e:	f000 b80c 	b.w	8004fba <__retarget_lock_release_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	20000344 	.word	0x20000344

08004fa8 <_malloc_usable_size_r>:
 8004fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fac:	1f18      	subs	r0, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bfbc      	itt	lt
 8004fb2:	580b      	ldrlt	r3, [r1, r0]
 8004fb4:	18c0      	addlt	r0, r0, r3
 8004fb6:	4770      	bx	lr

08004fb8 <__retarget_lock_acquire_recursive>:
 8004fb8:	4770      	bx	lr

08004fba <__retarget_lock_release_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
