
Project05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  080098b8  080098b8  000198b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a040  0800a040  00020608  2**0
                  CONTENTS
  4 .ARM          00000008  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a048  0800a048  00020608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  0800a050  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000608  0800a658  00020608  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  0800a658  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ba  00000000  00000000  00020638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002910  00000000  00000000  00033af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00036408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00037568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b50  00000000  00000000  000385b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014847  00000000  00000000  00061100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f82a8  00000000  00000000  00075947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dbef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  0016dc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000608 	.word	0x20000608
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800989c 	.word	0x0800989c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000060c 	.word	0x2000060c
 80001cc:	0800989c 	.word	0x0800989c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b9aa 	b.w	8000f28 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f83c 	bl	8000c58 <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2lz>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	f7ff ff71 	bl	8000adc <__aeabi_dcmplt>
 8000bfa:	b928      	cbnz	r0, 8000c08 <__aeabi_d2lz+0x1c>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c04:	f000 b80a 	b.w	8000c1c <__aeabi_d2ulz>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0e:	f000 f805 	bl	8000c1c <__aeabi_d2ulz>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2ulz>:
 8000c1c:	b5d0      	push	{r4, r6, r7, lr}
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__aeabi_d2ulz+0x34>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	4606      	mov	r6, r0
 8000c24:	460f      	mov	r7, r1
 8000c26:	f7ff fce7 	bl	80005f8 <__aeabi_dmul>
 8000c2a:	f7ff ffa7 	bl	8000b7c <__aeabi_d2uiz>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fc68 	bl	8000504 <__aeabi_ui2d>
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <__aeabi_d2ulz+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f7ff fcde 	bl	80005f8 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4630      	mov	r0, r6
 8000c42:	4639      	mov	r1, r7
 8000c44:	f7ff fb20 	bl	8000288 <__aeabi_dsub>
 8000c48:	f7ff ff98 	bl	8000b7c <__aeabi_d2uiz>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c50:	3df00000 	.word	0x3df00000
 8000c54:	41f00000 	.word	0x41f00000

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <start_DAC_signal>:
 *      Author: liams
 */
#include "DAC.h"
#include <string.h>

void start_DAC_signal(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b09f      	sub	sp, #124	; 0x7c
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	char buffer[100];

	// Find the ARR of the wave
	TIM2->ARR = (BASE_CLOCK_SPEED/DAC_info->frequency)/WAVE_POINTS;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f40:	a15e      	add	r1, pc, #376	; (adr r1, 80010bc <start_DAC_signal+0x18c>)
 8000f42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f46:	f7ff fc81 	bl	800084c <__aeabi_ddiv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <start_DAC_signal+0x170>)
 8000f58:	f7ff fc78 	bl	800084c <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fe08 	bl	8000b7c <__aeabi_d2uiz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	62e3      	str	r3, [r4, #44]	; 0x2c

	// Need to set the wave_points array
	switch (DAC_info->signal) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7a5b      	ldrb	r3, [r3, #9]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d81f      	bhi.n	8000fb8 <start_DAC_signal+0x88>
 8000f78:	a201      	add	r2, pc, #4	; (adr r2, 8000f80 <start_DAC_signal+0x50>)
 8000f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7e:	bf00      	nop
 8000f80:	08000f91 	.word	0x08000f91
 8000f84:	08000fa5 	.word	0x08000fa5
 8000f88:	08000f9b 	.word	0x08000f9b
 8000f8c:	08000faf 	.word	0x08000faf
	case Rectangle:
		get_rectangle_wave(DAC_info, wave_points);
 8000f90:	6839      	ldr	r1, [r7, #0]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f896 	bl	80010c4 <get_rectangle_wave>
		break;
 8000f98:	e00e      	b.n	8000fb8 <start_DAC_signal+0x88>
	case Sine:
		get_sine_wave(DAC_info, wave_points);
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f8c3 	bl	8001128 <get_sine_wave>
		break;
 8000fa2:	e009      	b.n	8000fb8 <start_DAC_signal+0x88>
	case Triangle:
		get_triangle_wave(DAC_info, wave_points);
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f924 	bl	80011f4 <get_triangle_wave>
		break;
 8000fac:	e004      	b.n	8000fb8 <start_DAC_signal+0x88>
	case Arbitrary:
		get_arbitrary_wave(DAC_info, wave_points);
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f975 	bl	80012a0 <get_arbitrary_wave>
		break;
 8000fb6:	bf00      	nop
	}

   // Print out signal information
   sprintf(buffer, "Starting waveform on Channel %d\r\nType: %d\r\n", DAC_info->channel, DAC_info->signal);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a1b      	ldrb	r3, [r3, #8]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7a5b      	ldrb	r3, [r3, #9]
 8000fc2:	f107 000c 	add.w	r0, r7, #12
 8000fc6:	4937      	ldr	r1, [pc, #220]	; (80010a4 <start_DAC_signal+0x174>)
 8000fc8:	f004 fab8 	bl	800553c <siprintf>
   print(USART2, buffer);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4835      	ldr	r0, [pc, #212]	; (80010a8 <start_DAC_signal+0x178>)
 8000fd4:	f000 ff0d 	bl	8001df2 <print>
   sprintf(buffer, "Frequency: %d\r\n", (int)DAC_info->frequency);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fda3 	bl	8000b2c <__aeabi_d2iz>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	492f      	ldr	r1, [pc, #188]	; (80010ac <start_DAC_signal+0x17c>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 faa4 	bl	800553c <siprintf>
   print(USART2, buffer);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482b      	ldr	r0, [pc, #172]	; (80010a8 <start_DAC_signal+0x178>)
 8000ffc:	f000 fef9 	bl	8001df2 <print>
   sprintf(buffer, "DAC Output Rate: %d\r\n", (int)TIM2->ARR);
 8001000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001006:	461a      	mov	r2, r3
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4928      	ldr	r1, [pc, #160]	; (80010b0 <start_DAC_signal+0x180>)
 800100e:	4618      	mov	r0, r3
 8001010:	f004 fa94 	bl	800553c <siprintf>
   print(USART2, buffer);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4823      	ldr	r0, [pc, #140]	; (80010a8 <start_DAC_signal+0x178>)
 800101c:	f000 fee9 	bl	8001df2 <print>
   sprintf(buffer, "Samples in Signal: %d\r\n", (int)WAVE_POINTS);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001028:	4922      	ldr	r1, [pc, #136]	; (80010b4 <start_DAC_signal+0x184>)
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fa86 	bl	800553c <siprintf>
   print(USART2, buffer);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <start_DAC_signal+0x178>)
 8001038:	f000 fedb 	bl	8001df2 <print>
   sprintf(buffer, "DAC Codes, Max: %d, Min: %d\r\n", (int)DAC_info->maxv, (int)DAC_info->minv);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f107 000c 	add.w	r0, r7, #12
 800104a:	491b      	ldr	r1, [pc, #108]	; (80010b8 <start_DAC_signal+0x188>)
 800104c:	f004 fa76 	bl	800553c <siprintf>
   print(USART2, buffer);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <start_DAC_signal+0x178>)
 8001058:	f000 fecb 	bl	8001df2 <print>

	// Start output to DAC
	if (DAC_info->channel == 1)  { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_1, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10a      	bne.n	800107a <start_DAC_signal+0x14a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6858      	ldr	r0, [r3, #4]
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	2100      	movs	r1, #0
 8001074:	f001 f8d0 	bl	8002218 <HAL_DAC_Start_DMA>
	else if (DAC_info->channel == 2) { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_2, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
}
 8001078:	e00d      	b.n	8001096 <start_DAC_signal+0x166>
	else if (DAC_info->channel == 2) { HAL_DAC_Start_DMA(DAC_info->hdac, DAC_CHANNEL_2, wave_points, WAVE_POINTS, DAC_ALIGN_12B_R); }
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1b      	ldrb	r3, [r3, #8]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d109      	bne.n	8001096 <start_DAC_signal+0x166>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6858      	ldr	r0, [r3, #4]
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	2110      	movs	r1, #16
 8001092:	f001 f8c1 	bl	8002218 <HAL_DAC_Start_DMA>
}
 8001096:	bf00      	nop
 8001098:	3774      	adds	r7, #116	; 0x74
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	40700000 	.word	0x40700000
 80010a4:	080098b8 	.word	0x080098b8
 80010a8:	40004400 	.word	0x40004400
 80010ac:	080098e4 	.word	0x080098e4
 80010b0:	080098f4 	.word	0x080098f4
 80010b4:	0800990c 	.word	0x0800990c
 80010b8:	08009924 	.word	0x08009924
 80010bc:	00000000 	.word	0x00000000
 80010c0:	419312d0 	.word	0x419312d0

080010c4 <get_rectangle_wave>:

void get_rectangle_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < WAVE_POINTS; i ++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e01c      	b.n	800110e <get_rectangle_wave+0x4a>
		if (i < (WAVE_POINTS/2)) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b7f      	cmp	r3, #127	; 0x7f
 80010d8:	dc0b      	bgt.n	80010f2 <get_rectangle_wave+0x2e>
			wave_points[i] = DAC_info->maxv ^ DAC_info->noise_bits;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80010e2:	4618      	mov	r0, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	6839      	ldr	r1, [r7, #0]
 80010ea:	440b      	add	r3, r1
 80010ec:	4042      	eors	r2, r0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e00a      	b.n	8001108 <get_rectangle_wave+0x44>
		}
		else {
			wave_points[i] = DAC_info->minv ^ DAC_info->noise_bits;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80010fa:	4618      	mov	r0, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	6839      	ldr	r1, [r7, #0]
 8001102:	440b      	add	r3, r1
 8001104:	4042      	eors	r2, r0
 8001106:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < WAVE_POINTS; i ++) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	dddf      	ble.n	80010d4 <get_rectangle_wave+0x10>
		}
	}
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	0000      	movs	r0, r0
 8001124:	0000      	movs	r0, r0
	...

08001128 <get_sine_wave>:

void get_sine_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]

	// Get all wave points for sin
	for (i = 0; i < WAVE_POINTS; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e04a      	b.n	80011d2 <get_sine_wave+0xaa>
		wave_points[i] = (uint32_t)((sin((i * ((2.0*PI)/(double)WAVE_POINTS))) + 1.0) * (((double)DAC_info->maxv)/2.0));
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff f9f1 	bl	8000524 <__aeabi_i2d>
 8001142:	a32a      	add	r3, pc, #168	; (adr r3, 80011ec <get_sine_wave+0xc4>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa56 	bl	80005f8 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	ec43 2b17 	vmov	d7, r2, r3
 8001154:	eeb0 0a47 	vmov.f32	s0, s14
 8001158:	eef0 0a67 	vmov.f32	s1, s15
 800115c:	f007 fb54 	bl	8008808 <sin>
 8001160:	ec51 0b10 	vmov	r0, r1, d0
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <get_sine_wave+0xc0>)
 800116a:	f7ff f88f 	bl	800028c <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9c2 	bl	8000504 <__aeabi_ui2d>
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	f7ff fb60 	bl	800084c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff fa30 	bl	80005f8 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	18d4      	adds	r4, r2, r3
 80011a8:	f7ff fce8 	bl	8000b7c <__aeabi_d2uiz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	6023      	str	r3, [r4, #0]
		wave_points[i] ^= DAC_info->noise_bits;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011be:	4618      	mov	r0, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	440b      	add	r3, r1
 80011c8:	4042      	eors	r2, r0
 80011ca:	601a      	str	r2, [r3, #0]
	for (i = 0; i < WAVE_POINTS; i++) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2bff      	cmp	r3, #255	; 0xff
 80011d6:	ddb1      	ble.n	800113c <get_sine_wave+0x14>
	}

}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdb0      	pop	{r4, r5, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	3ff00000 	.word	0x3ff00000
 80011ec:	4d12d84a 	.word	0x4d12d84a
 80011f0:	3f9921fb 	.word	0x3f9921fb

080011f4 <get_triangle_wave>:

void get_triangle_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	// Get the increment for adding to the voltage
	uint32_t increment = (DAC_info->maxv - DAC_info->minv) / ((WAVE_POINTS - 1)/2);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69da      	ldr	r2, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <get_triangle_wave+0xa8>)
 800120a:	fba3 1302 	umull	r1, r3, r3, r2
 800120e:	1ad2      	subs	r2, r2, r3
 8001210:	0852      	lsrs	r2, r2, #1
 8001212:	4413      	add	r3, r2
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	60fb      	str	r3, [r7, #12]
	uint32_t voltage = DAC_info->minv;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	617b      	str	r3, [r7, #20]
	int i = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]

	// Set the incline of the triangle
	wave_points[0] = voltage;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]
	for (i = 1; i < (WAVE_POINTS/2); i++) {
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	e010      	b.n	8001250 <get_triangle_wave+0x5c>
		voltage += increment;
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
		wave_points[i] = voltage ^ DAC_info->noise_bits;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800123a:	4619      	mov	r1, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	404a      	eors	r2, r1
 8001248:	601a      	str	r2, [r3, #0]
	for (i = 1; i < (WAVE_POINTS/2); i++) {
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	3301      	adds	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b7f      	cmp	r3, #127	; 0x7f
 8001254:	ddeb      	ble.n	800122e <get_triangle_wave+0x3a>
	}
	// Set the decline of the triangle
	wave_points[WAVE_POINTS/2] = voltage;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]
	for (i = ((WAVE_POINTS/2) + 1); i < WAVE_POINTS; i++) {
 8001260:	2381      	movs	r3, #129	; 0x81
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	e010      	b.n	8001288 <get_triangle_wave+0x94>
		voltage -= increment;
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
		wave_points[i] = voltage ^ DAC_info->noise_bits;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001272:	4619      	mov	r1, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	4413      	add	r3, r2
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	404a      	eors	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
	for (i = ((WAVE_POINTS/2) + 1); i < WAVE_POINTS; i++) {
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3301      	adds	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	ddeb      	ble.n	8001266 <get_triangle_wave+0x72>
	}

}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	02040811 	.word	0x02040811

080012a0 <get_arbitrary_wave>:

void get_arbitrary_wave(DAC_info_t *DAC_info, uint32_t *wave_points) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	// Copy EKG contents over
	memcpy(wave_points, ekg, sizeof(ekg));
 80012aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ae:	4917      	ldr	r1, [pc, #92]	; (800130c <get_arbitrary_wave+0x6c>)
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f004 f92d 	bl	8005510 <memcpy>

	// Scale if need to
	if (DAC_info->maxv != MAX_DAC_OUTPUT || DAC_info->minv != MIN_DAC_OUTPUT) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012be:	4293      	cmp	r3, r2
 80012c0:	d103      	bne.n	80012ca <get_arbitrary_wave+0x2a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d003      	beq.n	80012d2 <get_arbitrary_wave+0x32>
		scale_wave_points(DAC_info, wave_points);
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f8d3 	bl	8001478 <scale_wave_points>
	}

	for (int i = 0; i < WAVE_POINTS; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e010      	b.n	80012fa <get_arbitrary_wave+0x5a>
		wave_points[i] ^= DAC_info->noise_bits;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80012e6:	4618      	mov	r0, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	440b      	add	r3, r1
 80012f0:	4042      	eors	r2, r0
 80012f2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < WAVE_POINTS; i++) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	ddeb      	ble.n	80012d8 <get_arbitrary_wave+0x38>
	}
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <get_DAC_info>:



void get_DAC_info(DAC_info_t *DAC_info) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b092      	sub	sp, #72	; 0x48
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	char entered[50];
	int cnt = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	647b      	str	r3, [r7, #68]	; 0x44

	print(USART2, "Welcome to STM32 Signal Generator\r\n");
 800131c:	4952      	ldr	r1, [pc, #328]	; (8001468 <get_DAC_info+0x158>)
 800131e:	4853      	ldr	r0, [pc, #332]	; (800146c <get_DAC_info+0x15c>)
 8001320:	f000 fd67 	bl	8001df2 <print>
	print(USART2, "> channel type freq minv maxv noise\r\n");
 8001324:	4952      	ldr	r1, [pc, #328]	; (8001470 <get_DAC_info+0x160>)
 8001326:	4851      	ldr	r0, [pc, #324]	; (800146c <get_DAC_info+0x15c>)
 8001328:	f000 fd63 	bl	8001df2 <print>

	// Get the user input
	get_line(entered, sizeof(entered));
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2132      	movs	r1, #50	; 0x32
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd04 	bl	8001d40 <get_line>

	char * token = strtok(entered, " ");
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	494d      	ldr	r1, [pc, #308]	; (8001474 <get_DAC_info+0x164>)
 800133e:	4618      	mov	r0, r3
 8001340:	f004 ff4c 	bl	80061dc <strtok>
 8001344:	6438      	str	r0, [r7, #64]	; 0x40
   // loop through the string to extract all other tokens
   while( token != NULL ) {
 8001346:	e086      	b.n	8001456 <get_DAC_info+0x146>
	   // Set the DAC Information
	   switch (cnt) {
 8001348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134a:	2b05      	cmp	r3, #5
 800134c:	d878      	bhi.n	8001440 <get_DAC_info+0x130>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <get_DAC_info+0x44>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	0800136d 	.word	0x0800136d
 8001358:	0800137d 	.word	0x0800137d
 800135c:	080013bd 	.word	0x080013bd
 8001360:	080013d3 	.word	0x080013d3
 8001364:	080013f5 	.word	0x080013f5
 8001368:	08001417 	.word	0x08001417
		   case 0:	// Channel
			   DAC_info->channel = atoi(token);
 800136c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800136e:	f004 f8a1 	bl	80054b4 <atoi>
 8001372:	4603      	mov	r3, r0
 8001374:	b2da      	uxtb	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	721a      	strb	r2, [r3, #8]
			   break;
 800137a:	e064      	b.n	8001446 <get_DAC_info+0x136>
		   case 1:	// Type
			   if (token[0] == 'R') { DAC_info->signal = Rectangle;}
 800137c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b52      	cmp	r3, #82	; 0x52
 8001382:	d103      	bne.n	800138c <get_DAC_info+0x7c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	725a      	strb	r2, [r3, #9]
			   else if (token[0] == 'S') {DAC_info->signal = Sine;}
			   else if (token[0] == 'T') {DAC_info->signal = Triangle;}
			   else if (token[0] == 'A') {DAC_info->signal = Arbitrary;}
			   break;
 800138a:	e05b      	b.n	8001444 <get_DAC_info+0x134>
			   else if (token[0] == 'S') {DAC_info->signal = Sine;}
 800138c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b53      	cmp	r3, #83	; 0x53
 8001392:	d103      	bne.n	800139c <get_DAC_info+0x8c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	725a      	strb	r2, [r3, #9]
			   break;
 800139a:	e053      	b.n	8001444 <get_DAC_info+0x134>
			   else if (token[0] == 'T') {DAC_info->signal = Triangle;}
 800139c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b54      	cmp	r3, #84	; 0x54
 80013a2:	d103      	bne.n	80013ac <get_DAC_info+0x9c>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	725a      	strb	r2, [r3, #9]
			   break;
 80013aa:	e04b      	b.n	8001444 <get_DAC_info+0x134>
			   else if (token[0] == 'A') {DAC_info->signal = Arbitrary;}
 80013ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b41      	cmp	r3, #65	; 0x41
 80013b2:	d147      	bne.n	8001444 <get_DAC_info+0x134>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2203      	movs	r2, #3
 80013b8:	725a      	strb	r2, [r3, #9]
			   break;
 80013ba:	e043      	b.n	8001444 <get_DAC_info+0x134>
		   case 2:	// Frequency
			   DAC_info->frequency = (double)atof(token);	// Need to change from Atoi so that Floating numbers can be inputted
 80013bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013be:	f004 f876 	bl	80054ae <atof>
 80013c2:	eeb0 7a40 	vmov.f32	s14, s0
 80013c6:	eef0 7a60 	vmov.f32	s15, s1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	ed83 7b04 	vstr	d7, [r3, #16]
			   break;
 80013d0:	e039      	b.n	8001446 <get_DAC_info+0x136>
		   case 3:	// Min Voltage
			   DAC_info->minv = convert_analogV_digitalV(atof(token));
 80013d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013d4:	f004 f86b 	bl	80054ae <atof>
 80013d8:	eeb0 7a40 	vmov.f32	s14, s0
 80013dc:	eef0 7a60 	vmov.f32	s15, s1
 80013e0:	eeb0 0a47 	vmov.f32	s0, s14
 80013e4:	eef0 0a67 	vmov.f32	s1, s15
 80013e8:	f000 f89e 	bl	8001528 <convert_analogV_digitalV>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
			   break;
 80013f2:	e028      	b.n	8001446 <get_DAC_info+0x136>
		   case 4:	// Max Voltage
			   DAC_info->maxv = convert_analogV_digitalV(atof(token));
 80013f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013f6:	f004 f85a 	bl	80054ae <atof>
 80013fa:	eeb0 7a40 	vmov.f32	s14, s0
 80013fe:	eef0 7a60 	vmov.f32	s15, s1
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	eef0 0a67 	vmov.f32	s1, s15
 800140a:	f000 f88d 	bl	8001528 <convert_analogV_digitalV>
 800140e:	4602      	mov	r2, r0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	61da      	str	r2, [r3, #28]
			   break;
 8001414:	e017      	b.n	8001446 <get_DAC_info+0x136>
		   case 5:	// Noise
			   DAC_info->noise = atoi(token);
 8001416:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001418:	f004 f84c 	bl	80054b4 <atoi>
 800141c:	4603      	mov	r3, r0
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f883 2020 	strb.w	r2, [r3, #32]
			   DAC_info->noise_bits = (~(0xFFFF << DAC_info->noise));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	461a      	mov	r2, r3
 800142e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001432:	4093      	lsls	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	845a      	strh	r2, [r3, #34]	; 0x22
			   break;
 800143e:	e002      	b.n	8001446 <get_DAC_info+0x136>
		   default:
			   break;
 8001440:	bf00      	nop
 8001442:	e000      	b.n	8001446 <get_DAC_info+0x136>
			   break;
 8001444:	bf00      	nop
	   }
	  // Get the next token
	  token = strtok(NULL, " ");
 8001446:	490b      	ldr	r1, [pc, #44]	; (8001474 <get_DAC_info+0x164>)
 8001448:	2000      	movs	r0, #0
 800144a:	f004 fec7 	bl	80061dc <strtok>
 800144e:	6438      	str	r0, [r7, #64]	; 0x40
	  cnt++;
 8001450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001452:	3301      	adds	r3, #1
 8001454:	647b      	str	r3, [r7, #68]	; 0x44
   while( token != NULL ) {
 8001456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f af75 	bne.w	8001348 <get_DAC_info+0x38>
   }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3748      	adds	r7, #72	; 0x48
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08009944 	.word	0x08009944
 800146c:	40004400 	.word	0x40004400
 8001470:	08009968 	.word	0x08009968
 8001474:	08009990 	.word	0x08009990

08001478 <scale_wave_points>:


void scale_wave_points(DAC_info_t *DAC_info, uint32_t *wave_points) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	double old_range = (MAX_DAC_OUTPUT - MIN_DAC_OUTPUT);
 8001482:	a327      	add	r3, pc, #156	; (adr r3, 8001520 <scale_wave_points+0xa8>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double new_range = (DAC_info->maxv - DAC_info->minv);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f834 	bl	8000504 <__aeabi_ui2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for (int i = 0; i < WAVE_POINTS; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e032      	b.n	8001510 <scale_wave_points+0x98>
	 	 wave_points[i] = ((((wave_points[i]) - MIN_DAC_OUTPUT) * new_range) / old_range) + DAC_info->minv;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f824 	bl	8000504 <__aeabi_ui2d>
 80014bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014c0:	f7ff f89a 	bl	80005f8 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014d0:	f7ff f9bc 	bl	800084c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f80f 	bl	8000504 <__aeabi_ui2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fecd 	bl	800028c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d4      	adds	r4, r2, r3
 8001502:	f7ff fb3b 	bl	8000b7c <__aeabi_d2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < WAVE_POINTS; i++) {
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	ddc9      	ble.n	80014aa <scale_wave_points+0x32>
	}
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bdb0      	pop	{r4, r5, r7, pc}
 8001520:	00000000 	.word	0x00000000
 8001524:	40affc00 	.word	0x40affc00

08001528 <convert_analogV_digitalV>:

uint32_t convert_analogV_digitalV(double voltage){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0b00 	vstr	d0, [r7]
	double old_range = (MAX_V_OUTPUT - MIN_V_OUTPUT);
 8001532:	a318      	add	r3, pc, #96	; (adr r3, 8001594 <convert_analogV_digitalV+0x6c>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double new_range = (MAX_DAC_OUTPUT - MIN_DAC_OUTPUT);
 800153c:	a317      	add	r3, pc, #92	; (adr r3, 800159c <convert_analogV_digitalV+0x74>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return ((((voltage) - MIN_V_OUTPUT) * new_range) / old_range) + MIN_DAC_OUTPUT;
 8001546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800154a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800154e:	f7ff f853 	bl	80005f8 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800155e:	f7ff f975 	bl	800084c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <convert_analogV_digitalV+0x68>)
 8001570:	f7fe fe8c 	bl	800028c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fafe 	bl	8000b7c <__aeabi_d2uiz>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	66666666 	.word	0x66666666
 8001598:	400a6666 	.word	0x400a6666
 800159c:	00000000 	.word	0x00000000
 80015a0:	40affc00 	.word	0x40affc00

080015a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f000 fc62 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f816 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 f940 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b4:	f000 f920 	bl	80017f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015b8:	f000 f8ee 	bl	8001798 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80015bc:	f000 f860 	bl	8001680 <MX_DAC1_Init>
  MX_TIM2_Init();
 80015c0:	f000 f89a 	bl	80016f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  get_DAC_info(&DAC_info);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <main+0x30>)
 80015c6:	f7ff fea3 	bl	8001310 <get_DAC_info>
  start_DAC_signal(&DAC_info, wave_points);
 80015ca:	4903      	ldr	r1, [pc, #12]	; (80015d8 <main+0x34>)
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <main+0x30>)
 80015ce:	f7ff fcaf 	bl	8000f30 <start_DAC_signal>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <main+0x2e>
 80015d4:	20000400 	.word	0x20000400
 80015d8:	20000750 	.word	0x20000750

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b096      	sub	sp, #88	; 0x58
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2244      	movs	r2, #68	; 0x44
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 ff9e 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001602:	f001 fc47 	bl	8002e94 <HAL_PWREx_ControlVoltageScaling>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800160c:	f000 f964 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161a:	2310      	movs	r3, #16
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001622:	2302      	movs	r3, #2
 8001624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800162a:	230a      	movs	r3, #10
 800162c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800162e:	2307      	movs	r3, #7
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fc7e 	bl	8002f40 <HAL_RCC_OscConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800164a:	f000 f945 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
 8001650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2303      	movs	r3, #3
 8001654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2104      	movs	r1, #4
 8001666:	4618      	mov	r0, r3
 8001668:	f002 f846 	bl	80036f8 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001672:	f000 f931 	bl	80018d8 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3758      	adds	r7, #88	; 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2224      	movs	r2, #36	; 0x24
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f003 ff4d 	bl	800552c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_DAC1_Init+0x70>)
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <MX_DAC1_Init+0x74>)
 8001696:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <MX_DAC1_Init+0x70>)
 800169a:	f000 fd9a 	bl	80021d2 <HAL_DAC_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016a4:	f000 f918 	bl	80018d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80016ac:	2324      	movs	r3, #36	; 0x24
 80016ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <MX_DAC1_Init+0x70>)
 80016c4:	f000 fe92 	bl	80023ec <HAL_DAC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f903 	bl	80018d8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2210      	movs	r2, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_DAC1_Init+0x70>)
 80016da:	f000 fe87 	bl	80023ec <HAL_DAC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80016e4:	f000 f8f8 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000624 	.word	0x20000624
 80016f4:	40007400 	.word	0x40007400

080016f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM2_Init+0x9c>)
 800172c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_TIM2_Init+0x9c>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001740:	f002 feba 	bl	80044b8 <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800174a:	f000 f8c5 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <MX_TIM2_Init+0x9c>)
 800175c:	f002 ff6c 	bl	8004638 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001766:	f000 f8b7 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800176a:	2320      	movs	r3, #32
 800176c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001778:	f003 f95c 	bl	8004a34 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001782:	f000 f8a9 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_TIM2_Init+0x9c>)
 8001788:	f002 feee 	bl	8004568 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000680 	.word	0x20000680

08001798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <MX_USART2_UART_Init+0x5c>)
 80017a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017be:	220c      	movs	r2, #12
 80017c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_USART2_UART_Init+0x58>)
 80017dc:	f003 f9b2 	bl	8004b44 <HAL_UART_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017e6:	f000 f877 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200006cc 	.word	0x200006cc
 80017f4:	40004400 	.word	0x40004400

080017f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_DMA_Init+0x38>)
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <MX_DMA_Init+0x38>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6493      	str	r3, [r2, #72]	; 0x48
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_DMA_Init+0x38>)
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	200d      	movs	r0, #13
 800181c:	f000 fca3 	bl	8002166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001820:	200d      	movs	r0, #13
 8001822:	f000 fcbc 	bl	800219e <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_GPIO_Init+0x9c>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_GPIO_Init+0x9c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <MX_GPIO_Init+0x9c>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_GPIO_Init+0x9c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_GPIO_Init+0xa0>)
 80018c2:	f001 f92f 	bl	8002b24 <HAL_GPIO_Init>

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <HAL_DAC_MspInit+0xcc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d150      	bne.n	80019f0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 8001954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a24      	ldr	r2, [pc, #144]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_DAC_MspInit+0xd0>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800197e:	2330      	movs	r3, #48	; 0x30
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 f8c6 	bl	8002b24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_DAC_MspInit+0xd8>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019a0:	2206      	movs	r2, #6
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019a6:	2210      	movs	r2, #16
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019c8:	2220      	movs	r2, #32
 80019ca:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019d6:	f000 fead 	bl	8002734 <HAL_DMA_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80019e0:	f7ff ff7a 	bl	80018d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_DAC_MspInit+0xd4>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40007400 	.word	0x40007400
 80019fc:	40021000 	.word	0x40021000
 8001a00:	20000638 	.word	0x20000638
 8001a04:	40020030 	.word	0x40020030

08001a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d10b      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_TIM_Base_MspInit+0x38>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_TIM_Base_MspInit+0x38>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_TIM_Base_MspInit+0x38>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0ac      	sub	sp, #176	; 0xb0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2288      	movs	r2, #136	; 0x88
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fd61 	bl	800552c <memset>
  if(huart->Instance==USART2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	; (8001af4 <HAL_UART_MspInit+0xb0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13b      	bne.n	8001aec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 f85d 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a8c:	f7ff ff24 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_UART_MspInit+0xb4>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae8:	f001 f81c 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	37b0      	adds	r7, #176	; 0xb0
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004400 	.word	0x40004400
 8001af8:	40021000 	.word	0x40021000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f9ee 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA1_Channel3_IRQHandler+0x10>)
 8001b56:	f000 ff05 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000638 	.word	0x20000638

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_kill>:

int _kill(int pid, int sig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b7e:	f003 fc9d 	bl	80054bc <__errno>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2216      	movs	r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffe7 	bl	8001b74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ba6:	e7fe      	b.n	8001ba6 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f003 fc02 	bl	80054bc <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20018000 	.word	0x20018000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	20000b50 	.word	0x20000b50
 8001cec:	20000b68 	.word	0x20000b68

08001cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <USART_Read>:
//	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
//	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
//}

// ***** MODIFIED TO NOT GET STUCK WAITING FOR INPUT *****
uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));
 8001d1c:	bf00      	nop
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f9      	beq.n	8001d1e <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <get_line>:

void get_line(char *buffer, int max_length) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	uint16_t count = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	81fb      	strh	r3, [r7, #14]

	do {
		// Get last entered Input
		buffer[count] = USART_Read(USART2);
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	18d4      	adds	r4, r2, r3
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <get_line+0x4c>)
 8001d56:	f7ff ffdd 	bl	8001d14 <USART_Read>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	7023      	strb	r3, [r4, #0]
		// Write it to the screen
		USART_Write(USART2, (uint8_t *)&buffer[count], 1);
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	2201      	movs	r2, #1
 8001d66:	4619      	mov	r1, r3
 8001d68:	4808      	ldr	r0, [pc, #32]	; (8001d8c <get_line+0x4c>)
 8001d6a:	f000 f811 	bl	8001d90 <USART_Write>
		// increase count so we know amount of characters inputed
		count++;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
 8001d70:	3301      	adds	r3, #1
 8001d72:	81fb      	strh	r3, [r7, #14]
	}
	// While we do no have an enter input
	while(buffer[count-1] != CARRAIGE_RETURN);
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b0d      	cmp	r3, #13
 8001d80:	d1e5      	bne.n	8001d4e <get_line+0xe>
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	40004400 	.word	0x40004400

08001d90 <USART_Write>:


void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e010      	b.n	8001dc4 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001da2:	bf00      	nop
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f9      	beq.n	8001da4 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8ea      	bhi.n	8001da2 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001dcc:	bf00      	nop
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f9      	beq.n	8001dce <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	61da      	str	r2, [r3, #28]
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <print>:

void print(USART_TypeDef * USARTx, char *string) {
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
	uint32_t size = sprintf(string, string);
 8001dfc:	6839      	ldr	r1, [r7, #0]
 8001dfe:	6838      	ldr	r0, [r7, #0]
 8001e00:	f003 fb9c 	bl	800553c <siprintf>
 8001e04:	4603      	mov	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
	USART_Write(USARTx, (uint8_t *)string, size);
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ffbf 	bl	8001d90 <USART_Write>
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e20:	f7ff ff66 	bl	8001cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f003 fb3d 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7ff fba9 	bl	80015a4 <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	20000608 	.word	0x20000608
  ldr r2, =_sidata
 8001e60:	0800a050 	.word	0x0800a050
  ldr r2, =_sbss
 8001e64:	20000608 	.word	0x20000608
  ldr r4, =_ebss
 8001e68:	20000b68 	.word	0x20000b68

08001e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_Init+0x3c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_Init+0x3c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 f962 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f80f 	bl	8001eb0 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	e001      	b.n	8001ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9e:	f7ff fd21 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_InitTick+0x6c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_InitTick+0x70>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_InitTick+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f96d 	bl	80021ba <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d809      	bhi.n	8001f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f000 f937 	bl	8002166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_InitTick+0x74>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e004      	b.n	8001f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e001      	b.n	8001f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000430 	.word	0x20000430
 8001f20:	20000428 	.word	0x20000428
 8001f24:	2000042c 	.word	0x2000042c

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000430 	.word	0x20000430
 8001f4c:	20000b54 	.word	0x20000b54

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000b54 	.word	0x20000b54

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000430 	.word	0x20000430

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800211c:	d301      	bcc.n	8002122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211e:	2301      	movs	r3, #1
 8002120:	e00f      	b.n	8002142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <SysTick_Config+0x40>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212a:	210f      	movs	r1, #15
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f7ff ff8e 	bl	8002050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <SysTick_Config+0x40>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SysTick_Config+0x40>)
 800213c:	2207      	movs	r2, #7
 800213e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000e010 	.word	0xe000e010

08002150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff29 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002178:	f7ff ff3e 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 800217c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f7ff ff8e 	bl	80020a4 <NVIC_EncodePriority>
 8002188:	4602      	mov	r2, r0
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff5d 	bl	8002050 <__NVIC_SetPriority>
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff31 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffa2 	bl	800210c <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e014      	b.n	800220e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fb99 	bl	800192c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	795b      	ldrb	r3, [r3, #5]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_DAC_Start_DMA+0x1e>
 8002232:	2302      	movs	r3, #2
 8002234:	e0ab      	b.n	800238e <HAL_DAC_Start_DMA+0x176>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2202      	movs	r2, #2
 8002240:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12f      	bne.n	80022a8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_DAC_Start_DMA+0x180>)
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a51      	ldr	r2, [pc, #324]	; (800239c <HAL_DAC_Start_DMA+0x184>)
 8002256:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_DAC_Start_DMA+0x188>)
 800225e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800226e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2b08      	cmp	r3, #8
 8002274:	d013      	beq.n	800229e <HAL_DAC_Start_DMA+0x86>
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d845      	bhi.n	8002308 <HAL_DAC_Start_DMA+0xf0>
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_DAC_Start_DMA+0x72>
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d005      	beq.n	8002294 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002288:	e03e      	b.n	8002308 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3308      	adds	r3, #8
 8002290:	613b      	str	r3, [r7, #16]
        break;
 8002292:	e03c      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	613b      	str	r3, [r7, #16]
        break;
 800229c:	e037      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3310      	adds	r3, #16
 80022a4:	613b      	str	r3, [r7, #16]
        break;
 80022a6:	e032      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <HAL_DAC_Start_DMA+0x18c>)
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <HAL_DAC_Start_DMA+0x190>)
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_DAC_Start_DMA+0x194>)
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d013      	beq.n	80022fe <HAL_DAC_Start_DMA+0xe6>
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d817      	bhi.n	800230c <HAL_DAC_Start_DMA+0xf4>
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_DAC_Start_DMA+0xd2>
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d005      	beq.n	80022f4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80022e8:	e010      	b.n	800230c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3314      	adds	r3, #20
 80022f0:	613b      	str	r3, [r7, #16]
        break;
 80022f2:	e00c      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3318      	adds	r3, #24
 80022fa:	613b      	str	r3, [r7, #16]
        break;
 80022fc:	e007      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	331c      	adds	r3, #28
 8002304:	613b      	str	r3, [r7, #16]
        break;
 8002306:	e002      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002308:	bf00      	nop
 800230a:	e000      	b.n	800230e <HAL_DAC_Start_DMA+0xf6>
        break;
 800230c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d111      	bne.n	8002338 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002322:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6898      	ldr	r0, [r3, #8]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	f000 fab9 	bl	80028a4 <HAL_DMA_Start_IT>
 8002332:	4603      	mov	r3, r0
 8002334:	75fb      	strb	r3, [r7, #23]
 8002336:	e010      	b.n	800235a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002346:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68d8      	ldr	r0, [r3, #12]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	f000 faa7 	bl	80028a4 <HAL_DMA_Start_IT>
 8002356:	4603      	mov	r3, r0
 8002358:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2201      	movs	r2, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e005      	b.n	800238c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	08002621 	.word	0x08002621
 800239c:	08002643 	.word	0x08002643
 80023a0:	0800265f 	.word	0x0800265f
 80023a4:	080026c9 	.word	0x080026c9
 80023a8:	080026eb 	.word	0x080026eb
 80023ac:	08002707 	.word	0x08002707

080023b0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	795b      	ldrb	r3, [r3, #5]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_DAC_ConfigChannel+0x1c>
 8002404:	2302      	movs	r3, #2
 8002406:	e107      	b.n	8002618 <HAL_DAC_ConfigChannel+0x22c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2202      	movs	r2, #2
 8002412:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d174      	bne.n	8002506 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800241c:	f7ff fd98 	bl	8001f50 <HAL_GetTick>
 8002420:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d134      	bne.n	8002492 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002428:	e011      	b.n	800244e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800242a:	f7ff fd91 	bl	8001f50 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d90a      	bls.n	800244e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f043 0208 	orr.w	r2, r3, #8
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2203      	movs	r2, #3
 8002448:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0e4      	b.n	8002618 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e6      	bne.n	800242a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fd83 	bl	8001f68 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	6992      	ldr	r2, [r2, #24]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
 800246c:	e01e      	b.n	80024ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800246e:	f7ff fd6f 	bl	8001f50 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d90a      	bls.n	8002492 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f043 0208 	orr.w	r2, r3, #8
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2203      	movs	r2, #3
 800248c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0c2      	b.n	8002618 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	2b00      	cmp	r3, #0
 800249a:	dbe8      	blt.n	800246e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800249c:	2001      	movs	r0, #1
 800249e:	f7ff fd63 	bl	8001f68 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	6992      	ldr	r2, [r2, #24]
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	ea02 0103 	and.w	r1, r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	21ff      	movs	r1, #255	; 0xff
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	ea02 0103 	and.w	r1, r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d11d      	bne.n	800254a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2207      	movs	r2, #7
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	431a      	orrs	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	f640 72fc 	movw	r2, #4092	; 0xffc
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	22c0      	movs	r2, #192	; 0xc0
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43da      	mvns	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	400a      	ands	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff febe 	bl	80023b0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	711a      	strb	r2, [r3, #4]
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff feb7 	bl	80023c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fead 	bl	80023d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	711a      	strb	r2, [r3, #4]
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff ffd8 	bl	800268c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	711a      	strb	r2, [r3, #4]
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff ffd1 	bl	80026a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff ffc7 	bl	80026b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	711a      	strb	r2, [r3, #4]
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e098      	b.n	8002878 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_DMA_Init+0x150>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d80f      	bhi.n	8002772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_DMA_Init+0x154>)
 800275a:	4413      	add	r3, r2
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_DMA_Init+0x158>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	009a      	lsls	r2, r3, #2
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a48      	ldr	r2, [pc, #288]	; (8002890 <HAL_DMA_Init+0x15c>)
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
 8002770:	e00e      	b.n	8002790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_DMA_Init+0x160>)
 800277a:	4413      	add	r3, r2
 800277c:	4a43      	ldr	r2, [pc, #268]	; (800288c <HAL_DMA_Init+0x158>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	009a      	lsls	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_DMA_Init+0x164>)
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ea:	d039      	beq.n	8002860 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_DMA_Init+0x15c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11a      	bne.n	800282c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <HAL_DMA_Init+0x168>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	210f      	movs	r1, #15
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4924      	ldr	r1, [pc, #144]	; (800289c <HAL_DMA_Init+0x168>)
 800280c:	4013      	ands	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_DMA_Init+0x168>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f003 031c 	and.w	r3, r3, #28
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	491d      	ldr	r1, [pc, #116]	; (800289c <HAL_DMA_Init+0x168>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
 800282a:	e019      	b.n	8002860 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_DMA_Init+0x16c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	f003 031c 	and.w	r3, r3, #28
 8002838:	210f      	movs	r1, #15
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	4917      	ldr	r1, [pc, #92]	; (80028a0 <HAL_DMA_Init+0x16c>)
 8002842:	4013      	ands	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_DMA_Init+0x16c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f003 031c 	and.w	r3, r3, #28
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	4911      	ldr	r1, [pc, #68]	; (80028a0 <HAL_DMA_Init+0x16c>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40020407 	.word	0x40020407
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000
 8002894:	bffdfbf8 	.word	0xbffdfbf8
 8002898:	40020400 	.word	0x40020400
 800289c:	400200a8 	.word	0x400200a8
 80028a0:	400204a8 	.word	0x400204a8

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Start_IT+0x20>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e04b      	b.n	800295c <HAL_DMA_Start_IT+0xb8>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d13a      	bne.n	800294e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f8e0 	bl	8002ac2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 020e 	orr.w	r2, r2, #14
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00f      	b.n	800293c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 020a 	orr.w	r2, r2, #10
 800293a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e005      	b.n	800295a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f003 031c 	and.w	r3, r3, #28
 8002984:	2204      	movs	r2, #4
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d026      	beq.n	80029de <HAL_DMA_IRQHandler+0x7a>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d021      	beq.n	80029de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f003 021c 	and.w	r2, r3, #28
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	2104      	movs	r1, #4
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d071      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	e06c      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 031c 	and.w	r3, r3, #28
 80029e6:	2202      	movs	r2, #2
 80029e8:	409a      	lsls	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d02e      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xec>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d029      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 020a 	bic.w	r2, r2, #10
 8002a18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f003 021c 	and.w	r2, r3, #28
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2102      	movs	r1, #2
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d038      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a4e:	e033      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f003 031c 	and.w	r3, r3, #28
 8002a58:	2208      	movs	r2, #8
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02a      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d025      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 020e 	bic.w	r2, r2, #14
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f003 021c 	and.w	r2, r3, #28
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
}
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f003 021c 	and.w	r2, r3, #28
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d108      	bne.n	8002b06 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b04:	e007      	b.n	8002b16 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	60da      	str	r2, [r3, #12]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e17f      	b.n	8002e34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8171 	beq.w	8002e2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x40>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d118      	bne.n	8002c04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80ac 	beq.w	8002e2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	; (8002e54 <HAL_GPIO_Init+0x330>)
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <HAL_GPIO_Init+0x330>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <HAL_GPIO_Init+0x330>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cee:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_GPIO_Init+0x334>)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d18:	d025      	beq.n	8002d66 <HAL_GPIO_Init+0x242>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_GPIO_Init+0x338>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01f      	beq.n	8002d62 <HAL_GPIO_Init+0x23e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4e      	ldr	r2, [pc, #312]	; (8002e60 <HAL_GPIO_Init+0x33c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d019      	beq.n	8002d5e <HAL_GPIO_Init+0x23a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_GPIO_Init+0x340>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_GPIO_Init+0x236>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_GPIO_Init+0x344>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00d      	beq.n	8002d56 <HAL_GPIO_Init+0x232>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <HAL_GPIO_Init+0x348>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <HAL_GPIO_Init+0x22e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	; (8002e70 <HAL_GPIO_Init+0x34c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_GPIO_Init+0x22a>
 8002d4a:	2306      	movs	r3, #6
 8002d4c:	e00c      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d4e:	2307      	movs	r3, #7
 8002d50:	e00a      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d52:	2305      	movs	r3, #5
 8002d54:	e008      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d56:	2304      	movs	r3, #4
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e004      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_GPIO_Init+0x244>
 8002d66:	2300      	movs	r3, #0
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	0092      	lsls	r2, r2, #2
 8002d70:	4093      	lsls	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d78:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_GPIO_Init+0x334>)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	3302      	adds	r3, #2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002daa:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002db0:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_GPIO_Init+0x350>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f47f ae78 	bne.w	8002b34 <HAL_GPIO_Init+0x10>
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	48000400 	.word	0x48000400
 8002e60:	48000800 	.word	0x48000800
 8002e64:	48000c00 	.word	0x48000c00
 8002e68:	48001000 	.word	0x48001000
 8002e6c:	48001400 	.word	0x48001400
 8002e70:	48001800 	.word	0x48001800
 8002e74:	40010400 	.word	0x40010400

08002e78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40007000 	.word	0x40007000

08002e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea2:	d130      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb0:	d038      	beq.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2232      	movs	r2, #50	; 0x32
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed8:	e002      	b.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d102      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f2      	bne.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d110      	bne.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e00f      	b.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d007      	beq.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40007000 	.word	0x40007000
 8002f38:	20000428 	.word	0x20000428
 8002f3c:	431bde83 	.word	0x431bde83

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e3ca      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b97      	ldr	r3, [pc, #604]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5c:	4b94      	ldr	r3, [pc, #592]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80e4 	beq.w	800313c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4a>
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	f040 808b 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 8087 	bne.w	8003098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e3a2      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_RCC_OscConfig+0x7c>
 8002fb2:	4b7f      	ldr	r3, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_OscConfig+0x88>
 8002fbc:	4b7c      	ldr	r3, [pc, #496]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d223      	bcs.n	8003014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd55 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e383      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	496d      	ldr	r1, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffe:	4b6c      	ldr	r3, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	4968      	ldr	r1, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
 8003012:	e025      	b.n	8003060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4960      	ldr	r1, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	495b      	ldr	r1, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fd15 	bl	8003a80 <RCC_SetFlashLatencyFromMSIRange>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e343      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003060:	f000 fc4a 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4950      	ldr	r1, [pc, #320]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x278>)
 800307e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe ff13 	bl	8001eb0 <HAL_InitTick>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d052      	beq.n	800313a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	e327      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d032      	beq.n	8003106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a0:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ac:	f7fe ff50 	bl	8001f50 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b4:	f7fe ff4c 	bl	8001f50 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e310      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4931      	ldr	r1, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	492c      	ldr	r1, [pc, #176]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e01a      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003112:	f7fe ff1d 	bl	8001f50 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800311a:	f7fe ff19 	bl	8001f50 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e2dd      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x1da>
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800313a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d074      	beq.n	8003232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x21a>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d10e      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d10b      	bne.n	8003172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d064      	beq.n	8003230 <HAL_RCC_OscConfig+0x2f0>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d160      	bne.n	8003230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e2ba      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x24a>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e026      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x280>
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 80031a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x298>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	08009994 	.word	0x08009994
 80031b8:	20000428 	.word	0x20000428
 80031bc:	2000042c 	.word	0x2000042c
 80031c0:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b9d      	ldr	r3, [pc, #628]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a9c      	ldr	r2, [pc, #624]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe feb6 	bl	8001f50 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe feb2 	bl	8001f50 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e276      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fa:	4b92      	ldr	r3, [pc, #584]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x2a8>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fea2 	bl	8001f50 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fe9e 	bl	8001f50 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e262      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d0>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d060      	beq.n	8003300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d005      	beq.n	8003250 <HAL_RCC_OscConfig+0x310>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d119      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d116      	bne.n	800327e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x328>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e23f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	4973      	ldr	r1, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e040      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d023      	beq.n	80032ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003286:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7fe fe5d 	bl	8001f50 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fe59 	bl	8001f50 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e21d      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	495f      	ldr	r1, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e018      	b.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fe39 	bl	8001f50 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fe35 	bl	8001f50 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1f9      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03c      	beq.n	8003386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01c      	beq.n	800334e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fe14 	bl	8001f50 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fe10 	bl	8001f50 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d4      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCC_OscConfig+0x3ec>
 800334c:	e01b      	b.n	8003386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334e:	4b3d      	ldr	r3, [pc, #244]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003354:	4a3b      	ldr	r2, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fdf7 	bl	8001f50 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003366:	f7fe fdf3 	bl	8001f50 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1b7      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003378:	4b32      	ldr	r3, [pc, #200]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ef      	bne.n	8003366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a6 	beq.w	80034e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d118      	bne.n	80033fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d8:	f7fe fdba 	bl	8001f50 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e0:	f7fe fdb6 	bl	8001f50 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e17a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x508>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_RCC_OscConfig+0x4d8>
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003416:	e029      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d115      	bne.n	800344c <HAL_RCC_OscConfig+0x50c>
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a07      	ldr	r2, [pc, #28]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003436:	4a03      	ldr	r2, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x504>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003440:	e014      	b.n	800346c <HAL_RCC_OscConfig+0x52c>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
 800344c:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a9b      	ldr	r2, [pc, #620]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800345c:	4b98      	ldr	r3, [pc, #608]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a97      	ldr	r2, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d016      	beq.n	80034a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fd6c 	bl	8001f50 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fd68 	bl	8001f50 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e12a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b8b      	ldr	r3, [pc, #556]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ed      	beq.n	800347c <HAL_RCC_OscConfig+0x53c>
 80034a0:	e015      	b.n	80034ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fd55 	bl	8001f50 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fe fd51 	bl	8001f50 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e113      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c0:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ed      	bne.n	80034aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ce:	7ffb      	ldrb	r3, [r7, #31]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d105      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	4a79      	ldr	r2, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80fe 	beq.w	80036e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f040 80d0 	bne.w	8003694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d130      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	3b01      	subs	r3, #1
 8003514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d127      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11f      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	2a07      	cmp	r2, #7
 8003536:	bf14      	ite	ne
 8003538:	2201      	movne	r2, #1
 800353a:	2200      	moveq	r2, #0
 800353c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	085b      	lsrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d109      	bne.n	800356a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d06e      	beq.n	8003648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d069      	beq.n	8003644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ad      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003598:	f7fe fcda 	bl	8001f50 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fcd6 	bl	8001f50 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e09a      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b40      	ldr	r3, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x784>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ce:	3a01      	subs	r2, #1
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	4311      	orrs	r1, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d8:	0212      	lsls	r2, r2, #8
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e0:	0852      	lsrs	r2, r2, #1
 80035e2:	3a01      	subs	r2, #1
 80035e4:	0552      	lsls	r2, r2, #21
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ec:	0852      	lsrs	r2, r2, #1
 80035ee:	3a01      	subs	r2, #1
 80035f0:	0652      	lsls	r2, r2, #25
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	0912      	lsrs	r2, r2, #4
 80035fa:	0452      	lsls	r2, r2, #17
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4930      	ldr	r1, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003600:	4313      	orrs	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361c:	f7fe fc98 	bl	8001f50 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fc94 	bl	8001f50 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e058      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003642:	e050      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d148      	bne.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fe fc70 	bl	8001f50 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fc6c 	bl	8001f50 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e030      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x734>
 8003692:	e028      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d023      	beq.n	80036e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe fc53 	bl	8001f50 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e00c      	b.n	80036c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe fc4f 	bl	8001f50 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d905      	bls.n	80036c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ec      	bne.n	80036ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4905      	ldr	r1, [pc, #20]	; (80036f0 <HAL_RCC_OscConfig+0x7b0>)
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_OscConfig+0x7b4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
 80036e0:	e001      	b.n	80036e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	feeefffc 	.word	0xfeeefffc

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0e7      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b75      	ldr	r3, [pc, #468]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4970      	ldr	r1, [pc, #448]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cf      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b66      	ldr	r3, [pc, #408]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003754:	429a      	cmp	r2, r3
 8003756:	d908      	bls.n	800376a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4960      	ldr	r1, [pc, #384]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04c      	beq.n	8003810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b03      	cmp	r3, #3
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0a6      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d115      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e09a      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	4b4e      	ldr	r3, [pc, #312]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e08e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e086      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f023 0203 	bic.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4943      	ldr	r1, [pc, #268]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe fbb6 	bl	8001f50 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fe fbb2 	bl	8001f50 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e06e      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 020c 	and.w	r2, r3, #12
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	429a      	cmp	r2, r3
 800380e:	d1eb      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	429a      	cmp	r2, r3
 800382a:	d208      	bcs.n	800383e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	492b      	ldr	r1, [pc, #172]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d210      	bcs.n	800386e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 0207 	bic.w	r2, r3, #7
 8003854:	4923      	ldr	r1, [pc, #140]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385c:	4b21      	ldr	r3, [pc, #132]	; (80038e4 <HAL_RCC_ClockConfig+0x1ec>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e036      	b.n	80038dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 f824 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	490b      	ldr	r1, [pc, #44]	; (80038ec <HAL_RCC_ClockConfig+0x1f4>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_ClockConfig+0x1fc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe faed 	bl	8001eb0 <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038da:	7afb      	ldrb	r3, [r7, #11]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08009994 	.word	0x08009994
 80038f0:	20000428 	.word	0x20000428
 80038f4:	2000042c 	.word	0x2000042c

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b3e      	ldr	r3, [pc, #248]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d121      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800392c:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e004      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d134      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xa6>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d003      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0xac>
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	617b      	str	r3, [r7, #20]
      break;
 80039ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fb03 f202 	mul.w	r2, r3, r2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	0e5b      	lsrs	r3, r3, #25
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	3301      	adds	r3, #1
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039f0:	69bb      	ldr	r3, [r7, #24]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	080099ac 	.word	0x080099ac
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000428 	.word	0x20000428

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	080099a4 	.word	0x080099a4

08003a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a58:	f7ff ffda 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0adb      	lsrs	r3, r3, #11
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	080099a4 	.word	0x080099a4

08003a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a98:	f7ff f9ee 	bl	8002e78 <HAL_PWREx_GetVoltageRange>
 8003a9c:	6178      	str	r0, [r7, #20]
 8003a9e:	e014      	b.n	8003aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003aac:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab8:	f7ff f9de 	bl	8002e78 <HAL_PWREx_GetVoltageRange>
 8003abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad0:	d10b      	bne.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d919      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2ba0      	cmp	r3, #160	; 0xa0
 8003adc:	d902      	bls.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ade:	2302      	movs	r3, #2
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e013      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e010      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b80      	cmp	r3, #128	; 0x80
 8003aee:	d902      	bls.n	8003af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003af0:	2303      	movs	r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e00a      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d102      	bne.n	8003b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003afc:	2302      	movs	r3, #2
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e004      	b.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d101      	bne.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 0207 	bic.w	r2, r3, #7
 8003b14:	4909      	ldr	r1, [pc, #36]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d041      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b64:	d02a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b6a:	d824      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b76:	d81e      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b80:	d010      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b84:	4b86      	ldr	r3, [pc, #536]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a85      	ldr	r2, [pc, #532]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b90:	e015      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fabb 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba2:	e00c      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3320      	adds	r3, #32
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fba6 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd2:	4973      	ldr	r1, [pc, #460]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d041      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bf4:	d02a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bfa:	d824      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c00:	d008      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c06:	d81e      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c10:	d010      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c12:	e018      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c20:	e015      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fa73 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c32:	e00c      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3320      	adds	r3, #32
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fb5e 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	74fb      	strb	r3, [r7, #19]
      break;
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c62:	494f      	ldr	r1, [pc, #316]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c6a:	e001      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80a0 	beq.w	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c82:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe f946 	bl	8001f50 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc6:	e009      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fe f942 	bl	8001f50 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cda:	e005      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d15c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d019      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe f901 	bl	8001f50 <HAL_GetTick>
 8003d4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d50:	e00b      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe f8fd 	bl	8001f50 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d902      	bls.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	74fb      	strb	r3, [r7, #19]
            break;
 8003d68:	e006      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ec      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dac:	7c7b      	ldrb	r3, [r7, #17]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b9e      	ldr	r3, [pc, #632]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	4a9d      	ldr	r2, [pc, #628]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dca:	4b98      	ldr	r3, [pc, #608]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f023 0203 	bic.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	4994      	ldr	r1, [pc, #592]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dec:	4b8f      	ldr	r3, [pc, #572]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 020c 	bic.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	498c      	ldr	r1, [pc, #560]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e0e:	4b87      	ldr	r3, [pc, #540]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	4983      	ldr	r1, [pc, #524]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e30:	4b7e      	ldr	r3, [pc, #504]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	497b      	ldr	r1, [pc, #492]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e52:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	4972      	ldr	r1, [pc, #456]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e74:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	496a      	ldr	r1, [pc, #424]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea4:	4961      	ldr	r1, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	4959      	ldr	r1, [pc, #356]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	4950      	ldr	r1, [pc, #320]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efc:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	4948      	ldr	r1, [pc, #288]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	493f      	ldr	r1, [pc, #252]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d028      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f40:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6a:	60d3      	str	r3, [r2, #12]
 8003f6c:	e011      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f76:	d10c      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f8c8 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d028      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	491f      	ldr	r1, [pc, #124]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc8:	60d3      	str	r3, [r2, #12]
 8003fca:	e011      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f899 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d02b      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4908      	ldr	r1, [pc, #32]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401a:	d109      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004026:	60d3      	str	r3, [r2, #12]
 8004028:	e014      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f867 	bl	8004114 <RCCEx_PLLSAI1_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02f      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004060:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406e:	4928      	ldr	r1, [pc, #160]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407e:	d10d      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f844 	bl	8004114 <RCCEx_PLLSAI1_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	74bb      	strb	r3, [r7, #18]
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3320      	adds	r3, #32
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f925 	bl	80042fc <RCCEx_PLLSAI2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040da:	490d      	ldr	r1, [pc, #52]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004106:	7cbb      	ldrb	r3, [r7, #18]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000

08004114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004122:	4b75      	ldr	r3, [pc, #468]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412e:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0203 	and.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
       ||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004146:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
       ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d047      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e044      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d018      	beq.n	800419a <RCCEx_PLLSAI1_Config+0x86>
 8004168:	2b03      	cmp	r3, #3
 800416a:	d825      	bhi.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x62>
 8004170:	2b02      	cmp	r3, #2
 8004172:	d009      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x74>
 8004174:	e020      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004176:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11d      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e01a      	b.n	80041be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004188:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d116      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004198:	e013      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419a:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a6:	4b54      	ldr	r3, [pc, #336]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b6:	e006      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e002      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e000      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ce:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	430b      	orrs	r3, r1
 80041e4:	4944      	ldr	r1, [pc, #272]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d17d      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041f0:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fd fea8 	bl	8001f50 <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004204:	f7fd fea4 	bl	8001f50 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
        break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004218:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ef      	bne.n	8004204 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d160      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d111      	bne.n	8004254 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004230:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	0912      	lsrs	r2, r2, #4
 8004248:	0452      	lsls	r2, r2, #17
 800424a:	430a      	orrs	r2, r1
 800424c:	492a      	ldr	r1, [pc, #168]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	610b      	str	r3, [r1, #16]
 8004252:	e027      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d112      	bne.n	8004280 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004262:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6892      	ldr	r2, [r2, #8]
 800426a:	0211      	lsls	r1, r2, #8
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6912      	ldr	r2, [r2, #16]
 8004270:	0852      	lsrs	r2, r2, #1
 8004272:	3a01      	subs	r2, #1
 8004274:	0552      	lsls	r2, r2, #21
 8004276:	430a      	orrs	r2, r1
 8004278:	491f      	ldr	r1, [pc, #124]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	610b      	str	r3, [r1, #16]
 800427e:	e011      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004280:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004288:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6892      	ldr	r2, [r2, #8]
 8004290:	0211      	lsls	r1, r2, #8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6952      	ldr	r2, [r2, #20]
 8004296:	0852      	lsrs	r2, r2, #1
 8004298:	3a01      	subs	r2, #1
 800429a:	0652      	lsls	r2, r2, #25
 800429c:	430a      	orrs	r2, r1
 800429e:	4916      	ldr	r1, [pc, #88]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fe4e 	bl	8001f50 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b6:	e009      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b8:	f7fd fe4a 	bl	8001f50 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d902      	bls.n	80042cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	73fb      	strb	r3, [r7, #15]
          break;
 80042ca:	e005      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0ef      	beq.n	80042b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000

080042fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d10d      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
       ||
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
       ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d047      	beq.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e044      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d018      	beq.n	8004382 <RCCEx_PLLSAI2_Config+0x86>
 8004350:	2b03      	cmp	r3, #3
 8004352:	d825      	bhi.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <RCCEx_PLLSAI2_Config+0x62>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d009      	beq.n	8004370 <RCCEx_PLLSAI2_Config+0x74>
 800435c:	e020      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435e:	4b55      	ldr	r3, [pc, #340]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11d      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436e:	e01a      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004380:	e013      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004382:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800438e:	4b49      	ldr	r3, [pc, #292]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800439e:	e006      	b.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e004      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6819      	ldr	r1, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	430b      	orrs	r3, r1
 80043cc:	4939      	ldr	r1, [pc, #228]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d167      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fd fdb4 	bl	8001f50 <HAL_GetTick>
 80043e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ea:	e009      	b.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ec:	f7fd fdb0 	bl	8001f50 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d902      	bls.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	73fb      	strb	r3, [r7, #15]
        break;
 80043fe:	e005      	b.n	800440c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004400:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ef      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d14a      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d111      	bne.n	800443c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	0211      	lsls	r1, r2, #8
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	0912      	lsrs	r2, r2, #4
 8004430:	0452      	lsls	r2, r2, #17
 8004432:	430a      	orrs	r2, r1
 8004434:	491f      	ldr	r1, [pc, #124]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	614b      	str	r3, [r1, #20]
 800443a:	e011      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004444:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	0211      	lsls	r1, r2, #8
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6912      	ldr	r2, [r2, #16]
 8004452:	0852      	lsrs	r2, r2, #1
 8004454:	3a01      	subs	r2, #1
 8004456:	0652      	lsls	r2, r2, #25
 8004458:	430a      	orrs	r2, r1
 800445a:	4916      	ldr	r1, [pc, #88]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445c:	4313      	orrs	r3, r2
 800445e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fd70 	bl	8001f50 <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004472:	e009      	b.n	8004488 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004474:	f7fd fd6c 	bl	8001f50 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	73fb      	strb	r3, [r7, #15]
          break;
 8004486:	e005      	b.n	8004494 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ef      	beq.n	8004474 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4904      	ldr	r1, [pc, #16]	; (80044b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000

080044b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e049      	b.n	800455e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fa92 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 f968 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d001      	beq.n	8004580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e047      	b.n	8004610 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <HAL_TIM_Base_Start+0xb4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d018      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <HAL_TIM_Base_Start+0xb8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <HAL_TIM_Base_Start+0xbc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <HAL_TIM_Base_Start+0xc0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1b      	ldr	r2, [pc, #108]	; (800462c <HAL_TIM_Base_Start+0xc4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_TIM_Base_Start+0x66>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_TIM_Base_Start+0xc8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d115      	bne.n	80045fa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b17      	ldr	r3, [pc, #92]	; (8004634 <HAL_TIM_Base_Start+0xcc>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b06      	cmp	r3, #6
 80045de:	d015      	beq.n	800460c <HAL_TIM_Base_Start+0xa4>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e6:	d011      	beq.n	800460c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e008      	b.n	800460c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e000      	b.n	800460e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	00010007 	.word	0x00010007

08004638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIM_ConfigClockSource+0x1c>
 8004650:	2302      	movs	r3, #2
 8004652:	e0b6      	b.n	80047c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d03e      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0xd8>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	f200 8087 	bhi.w	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	f000 8086 	beq.w	80047ae <HAL_TIM_ConfigClockSource+0x176>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d87f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d01a      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xaa>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d87b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d050      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x11e>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d877      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d03c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0xfe>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d873      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d058      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x13e>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d86f      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d064      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15e>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d86b      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d060      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15e>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d867      	bhi.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05c      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15e>
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d05a      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x15e>
 80046e0:	e062      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f000 f97f 	bl	80049f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	609a      	str	r2, [r3, #8]
      break;
 800470e:	e04f      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f000 f968 	bl	80049f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004732:	609a      	str	r2, [r3, #8]
      break;
 8004734:	e03c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 f8dc 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2150      	movs	r1, #80	; 0x50
 800474e:	4618      	mov	r0, r3
 8004750:	f000 f935 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 8004754:	e02c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 f8fb 	bl	800495e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2160      	movs	r1, #96	; 0x60
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f925 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 8004774:	e01c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	461a      	mov	r2, r3
 8004784:	f000 f8bc 	bl	8004900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2140      	movs	r1, #64	; 0x40
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f915 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f000 f90c 	bl	80049be <TIM_ITRx_SetConfig>
      break;
 80047a6:	e003      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d00f      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3d      	ldr	r2, [pc, #244]	; (80048e4 <TIM_Base_SetConfig+0x118>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3c      	ldr	r2, [pc, #240]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d007      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3b      	ldr	r2, [pc, #236]	; (80048ec <TIM_Base_SetConfig+0x120>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3a      	ldr	r2, [pc, #232]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d108      	bne.n	800481e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d01b      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <TIM_Base_SetConfig+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d017      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <TIM_Base_SetConfig+0x11c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <TIM_Base_SetConfig+0x120>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00f      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <TIM_Base_SetConfig+0x130>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <TIM_Base_SetConfig+0x114>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00f      	beq.n	80048c4 <TIM_Base_SetConfig+0xf8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <TIM_Base_SetConfig+0x124>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_Base_SetConfig+0xf8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <TIM_Base_SetConfig+0x128>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <TIM_Base_SetConfig+0x12c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_Base_SetConfig+0xf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <TIM_Base_SetConfig+0x130>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800

08004900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0201 	bic.w	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 030a 	bic.w	r3, r3, #10
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800495e:	b480      	push	{r7}
 8004960:	b087      	sub	sp, #28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 0210 	bic.w	r2, r3, #16
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	f043 0307 	orr.w	r3, r3, #7
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	021a      	lsls	r2, r3, #8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e068      	b.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2e      	ldr	r2, [pc, #184]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d018      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10c      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40014000 	.word	0x40014000

08004b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e040      	b.n	8004bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc ff6c 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f82c 	bl	8004be0 <UART_SetConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e022      	b.n	8004bd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fad8 	bl	8005150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fb5f 	bl	8005294 <UART_CheckIdleState>
 8004bd6:	4603      	mov	r3, r0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be4:	b08a      	sub	sp, #40	; 0x28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4ba4      	ldr	r3, [pc, #656]	; (8004ea0 <UART_SetConfig+0x2c0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a99      	ldr	r2, [pc, #612]	; (8004ea4 <UART_SetConfig+0x2c4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a90      	ldr	r2, [pc, #576]	; (8004ea8 <UART_SetConfig+0x2c8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d126      	bne.n	8004cb8 <UART_SetConfig+0xd8>
 8004c6a:	4b90      	ldr	r3, [pc, #576]	; (8004eac <UART_SetConfig+0x2cc>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d81b      	bhi.n	8004cb0 <UART_SetConfig+0xd0>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0xa0>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004ca9 	.word	0x08004ca9
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e116      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e112      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e10e      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e10a      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e106      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a7c      	ldr	r2, [pc, #496]	; (8004eb0 <UART_SetConfig+0x2d0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d138      	bne.n	8004d34 <UART_SetConfig+0x154>
 8004cc2:	4b7a      	ldr	r3, [pc, #488]	; (8004eac <UART_SetConfig+0x2cc>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d82d      	bhi.n	8004d2c <UART_SetConfig+0x14c>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0xf8>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004d2d 	.word	0x08004d2d
 8004ce0:	08004d2d 	.word	0x08004d2d
 8004ce4:	08004d2d 	.word	0x08004d2d
 8004ce8:	08004d1d 	.word	0x08004d1d
 8004cec:	08004d2d 	.word	0x08004d2d
 8004cf0:	08004d2d 	.word	0x08004d2d
 8004cf4:	08004d2d 	.word	0x08004d2d
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d2d 	.word	0x08004d2d
 8004d00:	08004d2d 	.word	0x08004d2d
 8004d04:	08004d2d 	.word	0x08004d2d
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e0d8      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e0d4      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e0d0      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e0cc      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d32:	e0c8      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a5e      	ldr	r2, [pc, #376]	; (8004eb4 <UART_SetConfig+0x2d4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d125      	bne.n	8004d8a <UART_SetConfig+0x1aa>
 8004d3e:	4b5b      	ldr	r3, [pc, #364]	; (8004eac <UART_SetConfig+0x2cc>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d016      	beq.n	8004d7a <UART_SetConfig+0x19a>
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d818      	bhi.n	8004d82 <UART_SetConfig+0x1a2>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d00a      	beq.n	8004d6a <UART_SetConfig+0x18a>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d814      	bhi.n	8004d82 <UART_SetConfig+0x1a2>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <UART_SetConfig+0x182>
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d008      	beq.n	8004d72 <UART_SetConfig+0x192>
 8004d60:	e00f      	b.n	8004d82 <UART_SetConfig+0x1a2>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d68:	e0ad      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d70:	e0a9      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d72:	2304      	movs	r3, #4
 8004d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d78:	e0a5      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d80:	e0a1      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d82:	2310      	movs	r3, #16
 8004d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d88:	e09d      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a4a      	ldr	r2, [pc, #296]	; (8004eb8 <UART_SetConfig+0x2d8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d125      	bne.n	8004de0 <UART_SetConfig+0x200>
 8004d94:	4b45      	ldr	r3, [pc, #276]	; (8004eac <UART_SetConfig+0x2cc>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004da0:	d016      	beq.n	8004dd0 <UART_SetConfig+0x1f0>
 8004da2:	2bc0      	cmp	r3, #192	; 0xc0
 8004da4:	d818      	bhi.n	8004dd8 <UART_SetConfig+0x1f8>
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d00a      	beq.n	8004dc0 <UART_SetConfig+0x1e0>
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d814      	bhi.n	8004dd8 <UART_SetConfig+0x1f8>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <UART_SetConfig+0x1d8>
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d008      	beq.n	8004dc8 <UART_SetConfig+0x1e8>
 8004db6:	e00f      	b.n	8004dd8 <UART_SetConfig+0x1f8>
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbe:	e082      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc6:	e07e      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e07a      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e076      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e072      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <UART_SetConfig+0x2dc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d12a      	bne.n	8004e40 <UART_SetConfig+0x260>
 8004dea:	4b30      	ldr	r3, [pc, #192]	; (8004eac <UART_SetConfig+0x2cc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df8:	d01a      	beq.n	8004e30 <UART_SetConfig+0x250>
 8004dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfe:	d81b      	bhi.n	8004e38 <UART_SetConfig+0x258>
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e04:	d00c      	beq.n	8004e20 <UART_SetConfig+0x240>
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0a:	d815      	bhi.n	8004e38 <UART_SetConfig+0x258>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <UART_SetConfig+0x238>
 8004e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e14:	d008      	beq.n	8004e28 <UART_SetConfig+0x248>
 8004e16:	e00f      	b.n	8004e38 <UART_SetConfig+0x258>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e052      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e20:	2302      	movs	r3, #2
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	e04e      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e04a      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e30:	2308      	movs	r3, #8
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e046      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e042      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <UART_SetConfig+0x2c4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d13a      	bne.n	8004ec0 <UART_SetConfig+0x2e0>
 8004e4a:	4b18      	ldr	r3, [pc, #96]	; (8004eac <UART_SetConfig+0x2cc>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e58:	d01a      	beq.n	8004e90 <UART_SetConfig+0x2b0>
 8004e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e5e:	d81b      	bhi.n	8004e98 <UART_SetConfig+0x2b8>
 8004e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e64:	d00c      	beq.n	8004e80 <UART_SetConfig+0x2a0>
 8004e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6a:	d815      	bhi.n	8004e98 <UART_SetConfig+0x2b8>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <UART_SetConfig+0x298>
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d008      	beq.n	8004e88 <UART_SetConfig+0x2a8>
 8004e76:	e00f      	b.n	8004e98 <UART_SetConfig+0x2b8>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e022      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e80:	2302      	movs	r3, #2
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e01e      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e01a      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e90:	2308      	movs	r3, #8
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e016      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e012      	b.n	8004ec6 <UART_SetConfig+0x2e6>
 8004ea0:	efff69f3 	.word	0xefff69f3
 8004ea4:	40008000 	.word	0x40008000
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40004400 	.word	0x40004400
 8004eb4:	40004800 	.word	0x40004800
 8004eb8:	40004c00 	.word	0x40004c00
 8004ebc:	40005000 	.word	0x40005000
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a9f      	ldr	r2, [pc, #636]	; (8005148 <UART_SetConfig+0x568>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d17a      	bne.n	8004fc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d824      	bhi.n	8004f22 <UART_SetConfig+0x342>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x300>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f23 	.word	0x08004f23
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f23 	.word	0x08004f23
 8004ef0:	08004f13 	.word	0x08004f13
 8004ef4:	08004f23 	.word	0x08004f23
 8004ef8:	08004f23 	.word	0x08004f23
 8004efc:	08004f23 	.word	0x08004f23
 8004f00:	08004f1b 	.word	0x08004f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7fe fd90 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8004f08:	61f8      	str	r0, [r7, #28]
        break;
 8004f0a:	e010      	b.n	8004f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f0c:	4b8f      	ldr	r3, [pc, #572]	; (800514c <UART_SetConfig+0x56c>)
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e00d      	b.n	8004f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f12:	f7fe fcf1 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8004f16:	61f8      	str	r0, [r7, #28]
        break;
 8004f18:	e009      	b.n	8004f2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1e:	61fb      	str	r3, [r7, #28]
        break;
 8004f20:	e005      	b.n	8004f2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80fb 	beq.w	800512c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d305      	bcc.n	8004f52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d903      	bls.n	8004f5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f58:	e0e8      	b.n	800512c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	461c      	mov	r4, r3
 8004f60:	4615      	mov	r5, r2
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	022b      	lsls	r3, r5, #8
 8004f6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f70:	0222      	lsls	r2, r4, #8
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	6849      	ldr	r1, [r1, #4]
 8004f76:	0849      	lsrs	r1, r1, #1
 8004f78:	2000      	movs	r0, #0
 8004f7a:	4688      	mov	r8, r1
 8004f7c:	4681      	mov	r9, r0
 8004f7e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f82:	eb43 0b09 	adc.w	fp, r3, r9
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f94:	4650      	mov	r0, sl
 8004f96:	4659      	mov	r1, fp
 8004f98:	f7fb fe10 	bl	8000bbc <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004faa:	d308      	bcc.n	8004fbe <UART_SetConfig+0x3de>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb2:	d204      	bcs.n	8004fbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	60da      	str	r2, [r3, #12]
 8004fbc:	e0b6      	b.n	800512c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fc4:	e0b2      	b.n	800512c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fce:	d15e      	bne.n	800508e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d828      	bhi.n	800502a <UART_SetConfig+0x44a>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x400>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005005 	.word	0x08005005
 8004fe4:	0800500d 	.word	0x0800500d
 8004fe8:	08005015 	.word	0x08005015
 8004fec:	0800502b 	.word	0x0800502b
 8004ff0:	0800501b 	.word	0x0800501b
 8004ff4:	0800502b 	.word	0x0800502b
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	0800502b 	.word	0x0800502b
 8005000:	08005023 	.word	0x08005023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fd10 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8005008:	61f8      	str	r0, [r7, #28]
        break;
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500c:	f7fe fd22 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 8005010:	61f8      	str	r0, [r7, #28]
        break;
 8005012:	e010      	b.n	8005036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005014:	4b4d      	ldr	r3, [pc, #308]	; (800514c <UART_SetConfig+0x56c>)
 8005016:	61fb      	str	r3, [r7, #28]
        break;
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800501a:	f7fe fc6d 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 800501e:	61f8      	str	r0, [r7, #28]
        break;
 8005020:	e009      	b.n	8005036 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005026:	61fb      	str	r3, [r7, #28]
        break;
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d077      	beq.n	800512c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	005a      	lsls	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	441a      	add	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b0f      	cmp	r3, #15
 8005056:	d916      	bls.n	8005086 <UART_SetConfig+0x4a6>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505e:	d212      	bcs.n	8005086 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f023 030f 	bic.w	r3, r3, #15
 8005068:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	b29a      	uxth	r2, r3
 8005076:	8afb      	ldrh	r3, [r7, #22]
 8005078:	4313      	orrs	r3, r2
 800507a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	8afa      	ldrh	r2, [r7, #22]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e052      	b.n	800512c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800508c:	e04e      	b.n	800512c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800508e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005092:	2b08      	cmp	r3, #8
 8005094:	d827      	bhi.n	80050e6 <UART_SetConfig+0x506>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x4bc>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fe fcb2 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 80050c4:	61f8      	str	r0, [r7, #28]
        break;
 80050c6:	e014      	b.n	80050f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fcc4 	bl	8003a54 <HAL_RCC_GetPCLK2Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b1e      	ldr	r3, [pc, #120]	; (800514c <UART_SetConfig+0x56c>)
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fe fc0f 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80050da:	61f8      	str	r0, [r7, #28]
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e2:	61fb      	str	r3, [r7, #28]
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050f0:	bf00      	nop
    }

    if (pclk != 0U)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d019      	beq.n	800512c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	085a      	lsrs	r2, r3, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	441a      	add	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	d909      	bls.n	8005126 <UART_SetConfig+0x546>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d205      	bcs.n	8005126 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e002      	b.n	800512c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005138:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800513c:	4618      	mov	r0, r3
 800513e:	3728      	adds	r7, #40	; 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005146:	bf00      	nop
 8005148:	40008000 	.word	0x40008000
 800514c:	00f42400 	.word	0x00f42400

08005150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01a      	beq.n	8005266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524e:	d10a      	bne.n	8005266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  }
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052a4:	f7fc fe54 	bl	8001f50 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d10e      	bne.n	80052d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f82d 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e023      	b.n	800531e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d10e      	bne.n	8005302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f817 	bl	8005326 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e00d      	b.n	800531e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b09c      	sub	sp, #112	; 0x70
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005336:	e0a5      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	f000 80a1 	beq.w	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005342:	f7fc fe05 	bl	8001f50 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <UART_WaitOnFlagUntilTimeout+0x32>
 8005352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005354:	2b00      	cmp	r3, #0
 8005356:	d13e      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800536c:	667b      	str	r3, [r7, #100]	; 0x64
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005378:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800537c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	663b      	str	r3, [r7, #96]	; 0x60
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e067      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d04f      	beq.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f2:	d147      	bne.n	8005484 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
 800541e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	66bb      	str	r3, [r7, #104]	; 0x68
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3308      	adds	r3, #8
 800544e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005450:	623a      	str	r2, [r7, #32]
 8005452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	61bb      	str	r3, [r7, #24]
   return(result);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e010      	b.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	429a      	cmp	r2, r3
 80054a0:	f43f af4a 	beq.w	8005338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3770      	adds	r7, #112	; 0x70
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <atof>:
 80054ae:	2100      	movs	r1, #0
 80054b0:	f000 be88 	b.w	80061c4 <strtod>

080054b4 <atoi>:
 80054b4:	220a      	movs	r2, #10
 80054b6:	2100      	movs	r1, #0
 80054b8:	f000 bf6e 	b.w	8006398 <strtol>

080054bc <__errno>:
 80054bc:	4b01      	ldr	r3, [pc, #4]	; (80054c4 <__errno+0x8>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000434 	.word	0x20000434

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	4d0d      	ldr	r5, [pc, #52]	; (8005500 <__libc_init_array+0x38>)
 80054cc:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054ce:	1b64      	subs	r4, r4, r5
 80054d0:	10a4      	asrs	r4, r4, #2
 80054d2:	2600      	movs	r6, #0
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	4d0b      	ldr	r5, [pc, #44]	; (8005508 <__libc_init_array+0x40>)
 80054da:	4c0c      	ldr	r4, [pc, #48]	; (800550c <__libc_init_array+0x44>)
 80054dc:	f004 f9de 	bl	800989c <_init>
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	2600      	movs	r6, #0
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	0800a048 	.word	0x0800a048
 8005504:	0800a048 	.word	0x0800a048
 8005508:	0800a048 	.word	0x0800a048
 800550c:	0800a04c 	.word	0x0800a04c

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005526:	4291      	cmp	r1, r2
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <siprintf>:
 800553c:	b40e      	push	{r1, r2, r3}
 800553e:	b500      	push	{lr}
 8005540:	b09c      	sub	sp, #112	; 0x70
 8005542:	ab1d      	add	r3, sp, #116	; 0x74
 8005544:	9002      	str	r0, [sp, #8]
 8005546:	9006      	str	r0, [sp, #24]
 8005548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800554c:	4809      	ldr	r0, [pc, #36]	; (8005574 <siprintf+0x38>)
 800554e:	9107      	str	r1, [sp, #28]
 8005550:	9104      	str	r1, [sp, #16]
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <siprintf+0x3c>)
 8005554:	f853 2b04 	ldr.w	r2, [r3], #4
 8005558:	9105      	str	r1, [sp, #20]
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	a902      	add	r1, sp, #8
 8005560:	f002 f8f2 	bl	8007748 <_svfiprintf_r>
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	b01c      	add	sp, #112	; 0x70
 800556c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005570:	b003      	add	sp, #12
 8005572:	4770      	bx	lr
 8005574:	20000434 	.word	0x20000434
 8005578:	ffff0208 	.word	0xffff0208

0800557c <sulp>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	ec45 4b10 	vmov	d0, r4, r5
 8005586:	4616      	mov	r6, r2
 8005588:	f001 fe3c 	bl	8007204 <__ulp>
 800558c:	ec51 0b10 	vmov	r0, r1, d0
 8005590:	b17e      	cbz	r6, 80055b2 <sulp+0x36>
 8005592:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005596:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800559a:	2b00      	cmp	r3, #0
 800559c:	dd09      	ble.n	80055b2 <sulp+0x36>
 800559e:	051b      	lsls	r3, r3, #20
 80055a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80055a4:	2400      	movs	r4, #0
 80055a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f7fb f823 	bl	80005f8 <__aeabi_dmul>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	0000      	movs	r0, r0
	...

080055b8 <_strtod_l>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	ed2d 8b02 	vpush	{d8}
 80055c0:	b09d      	sub	sp, #116	; 0x74
 80055c2:	461f      	mov	r7, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	9318      	str	r3, [sp, #96]	; 0x60
 80055c8:	4ba2      	ldr	r3, [pc, #648]	; (8005854 <_strtod_l+0x29c>)
 80055ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	9305      	str	r3, [sp, #20]
 80055d0:	4604      	mov	r4, r0
 80055d2:	4618      	mov	r0, r3
 80055d4:	4688      	mov	r8, r1
 80055d6:	f7fa fdfb 	bl	80001d0 <strlen>
 80055da:	f04f 0a00 	mov.w	sl, #0
 80055de:	4605      	mov	r5, r0
 80055e0:	f04f 0b00 	mov.w	fp, #0
 80055e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80055e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	2a2b      	cmp	r2, #43	; 0x2b
 80055ee:	d04e      	beq.n	800568e <_strtod_l+0xd6>
 80055f0:	d83b      	bhi.n	800566a <_strtod_l+0xb2>
 80055f2:	2a0d      	cmp	r2, #13
 80055f4:	d834      	bhi.n	8005660 <_strtod_l+0xa8>
 80055f6:	2a08      	cmp	r2, #8
 80055f8:	d834      	bhi.n	8005664 <_strtod_l+0xac>
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d03e      	beq.n	800567c <_strtod_l+0xc4>
 80055fe:	2300      	movs	r3, #0
 8005600:	930a      	str	r3, [sp, #40]	; 0x28
 8005602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005604:	7833      	ldrb	r3, [r6, #0]
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	f040 80b0 	bne.w	800576c <_strtod_l+0x1b4>
 800560c:	7873      	ldrb	r3, [r6, #1]
 800560e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005612:	2b58      	cmp	r3, #88	; 0x58
 8005614:	d168      	bne.n	80056e8 <_strtod_l+0x130>
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	ab18      	add	r3, sp, #96	; 0x60
 800561c:	9702      	str	r7, [sp, #8]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	4a8d      	ldr	r2, [pc, #564]	; (8005858 <_strtod_l+0x2a0>)
 8005622:	ab19      	add	r3, sp, #100	; 0x64
 8005624:	a917      	add	r1, sp, #92	; 0x5c
 8005626:	4620      	mov	r0, r4
 8005628:	f000 ff58 	bl	80064dc <__gethex>
 800562c:	f010 0707 	ands.w	r7, r0, #7
 8005630:	4605      	mov	r5, r0
 8005632:	d005      	beq.n	8005640 <_strtod_l+0x88>
 8005634:	2f06      	cmp	r7, #6
 8005636:	d12c      	bne.n	8005692 <_strtod_l+0xda>
 8005638:	3601      	adds	r6, #1
 800563a:	2300      	movs	r3, #0
 800563c:	9617      	str	r6, [sp, #92]	; 0x5c
 800563e:	930a      	str	r3, [sp, #40]	; 0x28
 8005640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 8590 	bne.w	8006168 <_strtod_l+0xbb0>
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	b1eb      	cbz	r3, 8005688 <_strtod_l+0xd0>
 800564c:	4652      	mov	r2, sl
 800564e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005652:	ec43 2b10 	vmov	d0, r2, r3
 8005656:	b01d      	add	sp, #116	; 0x74
 8005658:	ecbd 8b02 	vpop	{d8}
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005660:	2a20      	cmp	r2, #32
 8005662:	d1cc      	bne.n	80055fe <_strtod_l+0x46>
 8005664:	3301      	adds	r3, #1
 8005666:	9317      	str	r3, [sp, #92]	; 0x5c
 8005668:	e7be      	b.n	80055e8 <_strtod_l+0x30>
 800566a:	2a2d      	cmp	r2, #45	; 0x2d
 800566c:	d1c7      	bne.n	80055fe <_strtod_l+0x46>
 800566e:	2201      	movs	r2, #1
 8005670:	920a      	str	r2, [sp, #40]	; 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	9217      	str	r2, [sp, #92]	; 0x5c
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c2      	bne.n	8005602 <_strtod_l+0x4a>
 800567c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800567e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 856e 	bne.w	8006164 <_strtod_l+0xbac>
 8005688:	4652      	mov	r2, sl
 800568a:	465b      	mov	r3, fp
 800568c:	e7e1      	b.n	8005652 <_strtod_l+0x9a>
 800568e:	2200      	movs	r2, #0
 8005690:	e7ee      	b.n	8005670 <_strtod_l+0xb8>
 8005692:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005694:	b13a      	cbz	r2, 80056a6 <_strtod_l+0xee>
 8005696:	2135      	movs	r1, #53	; 0x35
 8005698:	a81a      	add	r0, sp, #104	; 0x68
 800569a:	f001 febe 	bl	800741a <__copybits>
 800569e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80056a0:	4620      	mov	r0, r4
 80056a2:	f001 fa7d 	bl	8006ba0 <_Bfree>
 80056a6:	3f01      	subs	r7, #1
 80056a8:	2f04      	cmp	r7, #4
 80056aa:	d806      	bhi.n	80056ba <_strtod_l+0x102>
 80056ac:	e8df f007 	tbb	[pc, r7]
 80056b0:	1714030a 	.word	0x1714030a
 80056b4:	0a          	.byte	0x0a
 80056b5:	00          	.byte	0x00
 80056b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80056ba:	0728      	lsls	r0, r5, #28
 80056bc:	d5c0      	bpl.n	8005640 <_strtod_l+0x88>
 80056be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80056c2:	e7bd      	b.n	8005640 <_strtod_l+0x88>
 80056c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80056c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80056d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80056d6:	e7f0      	b.n	80056ba <_strtod_l+0x102>
 80056d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800585c <_strtod_l+0x2a4>
 80056dc:	e7ed      	b.n	80056ba <_strtod_l+0x102>
 80056de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80056e2:	f04f 3aff 	mov.w	sl, #4294967295
 80056e6:	e7e8      	b.n	80056ba <_strtod_l+0x102>
 80056e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b30      	cmp	r3, #48	; 0x30
 80056f2:	d0f9      	beq.n	80056e8 <_strtod_l+0x130>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0a3      	beq.n	8005640 <_strtod_l+0x88>
 80056f8:	2301      	movs	r3, #1
 80056fa:	f04f 0900 	mov.w	r9, #0
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005702:	9308      	str	r3, [sp, #32]
 8005704:	f8cd 901c 	str.w	r9, [sp, #28]
 8005708:	464f      	mov	r7, r9
 800570a:	220a      	movs	r2, #10
 800570c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800570e:	7806      	ldrb	r6, [r0, #0]
 8005710:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005714:	b2d9      	uxtb	r1, r3
 8005716:	2909      	cmp	r1, #9
 8005718:	d92a      	bls.n	8005770 <_strtod_l+0x1b8>
 800571a:	9905      	ldr	r1, [sp, #20]
 800571c:	462a      	mov	r2, r5
 800571e:	f002 fc1b 	bl	8007f58 <strncmp>
 8005722:	b398      	cbz	r0, 800578c <_strtod_l+0x1d4>
 8005724:	2000      	movs	r0, #0
 8005726:	4632      	mov	r2, r6
 8005728:	463d      	mov	r5, r7
 800572a:	9005      	str	r0, [sp, #20]
 800572c:	4603      	mov	r3, r0
 800572e:	2a65      	cmp	r2, #101	; 0x65
 8005730:	d001      	beq.n	8005736 <_strtod_l+0x17e>
 8005732:	2a45      	cmp	r2, #69	; 0x45
 8005734:	d118      	bne.n	8005768 <_strtod_l+0x1b0>
 8005736:	b91d      	cbnz	r5, 8005740 <_strtod_l+0x188>
 8005738:	9a04      	ldr	r2, [sp, #16]
 800573a:	4302      	orrs	r2, r0
 800573c:	d09e      	beq.n	800567c <_strtod_l+0xc4>
 800573e:	2500      	movs	r5, #0
 8005740:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005744:	f108 0201 	add.w	r2, r8, #1
 8005748:	9217      	str	r2, [sp, #92]	; 0x5c
 800574a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800574e:	2a2b      	cmp	r2, #43	; 0x2b
 8005750:	d075      	beq.n	800583e <_strtod_l+0x286>
 8005752:	2a2d      	cmp	r2, #45	; 0x2d
 8005754:	d07b      	beq.n	800584e <_strtod_l+0x296>
 8005756:	f04f 0c00 	mov.w	ip, #0
 800575a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800575e:	2909      	cmp	r1, #9
 8005760:	f240 8082 	bls.w	8005868 <_strtod_l+0x2b0>
 8005764:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005768:	2600      	movs	r6, #0
 800576a:	e09d      	b.n	80058a8 <_strtod_l+0x2f0>
 800576c:	2300      	movs	r3, #0
 800576e:	e7c4      	b.n	80056fa <_strtod_l+0x142>
 8005770:	2f08      	cmp	r7, #8
 8005772:	bfd8      	it	le
 8005774:	9907      	ldrle	r1, [sp, #28]
 8005776:	f100 0001 	add.w	r0, r0, #1
 800577a:	bfda      	itte	le
 800577c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005780:	9307      	strle	r3, [sp, #28]
 8005782:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005786:	3701      	adds	r7, #1
 8005788:	9017      	str	r0, [sp, #92]	; 0x5c
 800578a:	e7bf      	b.n	800570c <_strtod_l+0x154>
 800578c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800578e:	195a      	adds	r2, r3, r5
 8005790:	9217      	str	r2, [sp, #92]	; 0x5c
 8005792:	5d5a      	ldrb	r2, [r3, r5]
 8005794:	2f00      	cmp	r7, #0
 8005796:	d037      	beq.n	8005808 <_strtod_l+0x250>
 8005798:	9005      	str	r0, [sp, #20]
 800579a:	463d      	mov	r5, r7
 800579c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80057a0:	2b09      	cmp	r3, #9
 80057a2:	d912      	bls.n	80057ca <_strtod_l+0x212>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e7c2      	b.n	800572e <_strtod_l+0x176>
 80057a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80057ae:	785a      	ldrb	r2, [r3, #1]
 80057b0:	3001      	adds	r0, #1
 80057b2:	2a30      	cmp	r2, #48	; 0x30
 80057b4:	d0f8      	beq.n	80057a8 <_strtod_l+0x1f0>
 80057b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	f200 84d9 	bhi.w	8006172 <_strtod_l+0xbba>
 80057c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057c2:	9005      	str	r0, [sp, #20]
 80057c4:	2000      	movs	r0, #0
 80057c6:	9308      	str	r3, [sp, #32]
 80057c8:	4605      	mov	r5, r0
 80057ca:	3a30      	subs	r2, #48	; 0x30
 80057cc:	f100 0301 	add.w	r3, r0, #1
 80057d0:	d014      	beq.n	80057fc <_strtod_l+0x244>
 80057d2:	9905      	ldr	r1, [sp, #20]
 80057d4:	4419      	add	r1, r3
 80057d6:	9105      	str	r1, [sp, #20]
 80057d8:	462b      	mov	r3, r5
 80057da:	eb00 0e05 	add.w	lr, r0, r5
 80057de:	210a      	movs	r1, #10
 80057e0:	4573      	cmp	r3, lr
 80057e2:	d113      	bne.n	800580c <_strtod_l+0x254>
 80057e4:	182b      	adds	r3, r5, r0
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	f105 0501 	add.w	r5, r5, #1
 80057ec:	4405      	add	r5, r0
 80057ee:	dc1c      	bgt.n	800582a <_strtod_l+0x272>
 80057f0:	9907      	ldr	r1, [sp, #28]
 80057f2:	230a      	movs	r3, #10
 80057f4:	fb03 2301 	mla	r3, r3, r1, r2
 80057f8:	9307      	str	r3, [sp, #28]
 80057fa:	2300      	movs	r3, #0
 80057fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057fe:	1c51      	adds	r1, r2, #1
 8005800:	9117      	str	r1, [sp, #92]	; 0x5c
 8005802:	7852      	ldrb	r2, [r2, #1]
 8005804:	4618      	mov	r0, r3
 8005806:	e7c9      	b.n	800579c <_strtod_l+0x1e4>
 8005808:	4638      	mov	r0, r7
 800580a:	e7d2      	b.n	80057b2 <_strtod_l+0x1fa>
 800580c:	2b08      	cmp	r3, #8
 800580e:	dc04      	bgt.n	800581a <_strtod_l+0x262>
 8005810:	9e07      	ldr	r6, [sp, #28]
 8005812:	434e      	muls	r6, r1
 8005814:	9607      	str	r6, [sp, #28]
 8005816:	3301      	adds	r3, #1
 8005818:	e7e2      	b.n	80057e0 <_strtod_l+0x228>
 800581a:	f103 0c01 	add.w	ip, r3, #1
 800581e:	f1bc 0f10 	cmp.w	ip, #16
 8005822:	bfd8      	it	le
 8005824:	fb01 f909 	mulle.w	r9, r1, r9
 8005828:	e7f5      	b.n	8005816 <_strtod_l+0x25e>
 800582a:	2d10      	cmp	r5, #16
 800582c:	bfdc      	itt	le
 800582e:	230a      	movle	r3, #10
 8005830:	fb03 2909 	mlale	r9, r3, r9, r2
 8005834:	e7e1      	b.n	80057fa <_strtod_l+0x242>
 8005836:	2300      	movs	r3, #0
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	2301      	movs	r3, #1
 800583c:	e77c      	b.n	8005738 <_strtod_l+0x180>
 800583e:	f04f 0c00 	mov.w	ip, #0
 8005842:	f108 0202 	add.w	r2, r8, #2
 8005846:	9217      	str	r2, [sp, #92]	; 0x5c
 8005848:	f898 2002 	ldrb.w	r2, [r8, #2]
 800584c:	e785      	b.n	800575a <_strtod_l+0x1a2>
 800584e:	f04f 0c01 	mov.w	ip, #1
 8005852:	e7f6      	b.n	8005842 <_strtod_l+0x28a>
 8005854:	08009c68 	.word	0x08009c68
 8005858:	080099ec 	.word	0x080099ec
 800585c:	7ff00000 	.word	0x7ff00000
 8005860:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005862:	1c51      	adds	r1, r2, #1
 8005864:	9117      	str	r1, [sp, #92]	; 0x5c
 8005866:	7852      	ldrb	r2, [r2, #1]
 8005868:	2a30      	cmp	r2, #48	; 0x30
 800586a:	d0f9      	beq.n	8005860 <_strtod_l+0x2a8>
 800586c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005870:	2908      	cmp	r1, #8
 8005872:	f63f af79 	bhi.w	8005768 <_strtod_l+0x1b0>
 8005876:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800587a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800587c:	9206      	str	r2, [sp, #24]
 800587e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005880:	1c51      	adds	r1, r2, #1
 8005882:	9117      	str	r1, [sp, #92]	; 0x5c
 8005884:	7852      	ldrb	r2, [r2, #1]
 8005886:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800588a:	2e09      	cmp	r6, #9
 800588c:	d937      	bls.n	80058fe <_strtod_l+0x346>
 800588e:	9e06      	ldr	r6, [sp, #24]
 8005890:	1b89      	subs	r1, r1, r6
 8005892:	2908      	cmp	r1, #8
 8005894:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005898:	dc02      	bgt.n	80058a0 <_strtod_l+0x2e8>
 800589a:	4576      	cmp	r6, lr
 800589c:	bfa8      	it	ge
 800589e:	4676      	movge	r6, lr
 80058a0:	f1bc 0f00 	cmp.w	ip, #0
 80058a4:	d000      	beq.n	80058a8 <_strtod_l+0x2f0>
 80058a6:	4276      	negs	r6, r6
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	d14d      	bne.n	8005948 <_strtod_l+0x390>
 80058ac:	9904      	ldr	r1, [sp, #16]
 80058ae:	4301      	orrs	r1, r0
 80058b0:	f47f aec6 	bne.w	8005640 <_strtod_l+0x88>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f47f aee1 	bne.w	800567c <_strtod_l+0xc4>
 80058ba:	2a69      	cmp	r2, #105	; 0x69
 80058bc:	d027      	beq.n	800590e <_strtod_l+0x356>
 80058be:	dc24      	bgt.n	800590a <_strtod_l+0x352>
 80058c0:	2a49      	cmp	r2, #73	; 0x49
 80058c2:	d024      	beq.n	800590e <_strtod_l+0x356>
 80058c4:	2a4e      	cmp	r2, #78	; 0x4e
 80058c6:	f47f aed9 	bne.w	800567c <_strtod_l+0xc4>
 80058ca:	499f      	ldr	r1, [pc, #636]	; (8005b48 <_strtod_l+0x590>)
 80058cc:	a817      	add	r0, sp, #92	; 0x5c
 80058ce:	f001 f85d 	bl	800698c <__match>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f43f aed2 	beq.w	800567c <_strtod_l+0xc4>
 80058d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b28      	cmp	r3, #40	; 0x28
 80058de:	d12d      	bne.n	800593c <_strtod_l+0x384>
 80058e0:	499a      	ldr	r1, [pc, #616]	; (8005b4c <_strtod_l+0x594>)
 80058e2:	aa1a      	add	r2, sp, #104	; 0x68
 80058e4:	a817      	add	r0, sp, #92	; 0x5c
 80058e6:	f001 f865 	bl	80069b4 <__hexnan>
 80058ea:	2805      	cmp	r0, #5
 80058ec:	d126      	bne.n	800593c <_strtod_l+0x384>
 80058ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80058f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80058f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80058fc:	e6a0      	b.n	8005640 <_strtod_l+0x88>
 80058fe:	210a      	movs	r1, #10
 8005900:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005904:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005908:	e7b9      	b.n	800587e <_strtod_l+0x2c6>
 800590a:	2a6e      	cmp	r2, #110	; 0x6e
 800590c:	e7db      	b.n	80058c6 <_strtod_l+0x30e>
 800590e:	4990      	ldr	r1, [pc, #576]	; (8005b50 <_strtod_l+0x598>)
 8005910:	a817      	add	r0, sp, #92	; 0x5c
 8005912:	f001 f83b 	bl	800698c <__match>
 8005916:	2800      	cmp	r0, #0
 8005918:	f43f aeb0 	beq.w	800567c <_strtod_l+0xc4>
 800591c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800591e:	498d      	ldr	r1, [pc, #564]	; (8005b54 <_strtod_l+0x59c>)
 8005920:	3b01      	subs	r3, #1
 8005922:	a817      	add	r0, sp, #92	; 0x5c
 8005924:	9317      	str	r3, [sp, #92]	; 0x5c
 8005926:	f001 f831 	bl	800698c <__match>
 800592a:	b910      	cbnz	r0, 8005932 <_strtod_l+0x37a>
 800592c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800592e:	3301      	adds	r3, #1
 8005930:	9317      	str	r3, [sp, #92]	; 0x5c
 8005932:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005b64 <_strtod_l+0x5ac>
 8005936:	f04f 0a00 	mov.w	sl, #0
 800593a:	e681      	b.n	8005640 <_strtod_l+0x88>
 800593c:	4886      	ldr	r0, [pc, #536]	; (8005b58 <_strtod_l+0x5a0>)
 800593e:	f002 faf3 	bl	8007f28 <nan>
 8005942:	ec5b ab10 	vmov	sl, fp, d0
 8005946:	e67b      	b.n	8005640 <_strtod_l+0x88>
 8005948:	9b05      	ldr	r3, [sp, #20]
 800594a:	9807      	ldr	r0, [sp, #28]
 800594c:	1af3      	subs	r3, r6, r3
 800594e:	2f00      	cmp	r7, #0
 8005950:	bf08      	it	eq
 8005952:	462f      	moveq	r7, r5
 8005954:	2d10      	cmp	r5, #16
 8005956:	9306      	str	r3, [sp, #24]
 8005958:	46a8      	mov	r8, r5
 800595a:	bfa8      	it	ge
 800595c:	f04f 0810 	movge.w	r8, #16
 8005960:	f7fa fdd0 	bl	8000504 <__aeabi_ui2d>
 8005964:	2d09      	cmp	r5, #9
 8005966:	4682      	mov	sl, r0
 8005968:	468b      	mov	fp, r1
 800596a:	dd13      	ble.n	8005994 <_strtod_l+0x3dc>
 800596c:	4b7b      	ldr	r3, [pc, #492]	; (8005b5c <_strtod_l+0x5a4>)
 800596e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005976:	f7fa fe3f 	bl	80005f8 <__aeabi_dmul>
 800597a:	4682      	mov	sl, r0
 800597c:	4648      	mov	r0, r9
 800597e:	468b      	mov	fp, r1
 8005980:	f7fa fdc0 	bl	8000504 <__aeabi_ui2d>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4650      	mov	r0, sl
 800598a:	4659      	mov	r1, fp
 800598c:	f7fa fc7e 	bl	800028c <__adddf3>
 8005990:	4682      	mov	sl, r0
 8005992:	468b      	mov	fp, r1
 8005994:	2d0f      	cmp	r5, #15
 8005996:	dc38      	bgt.n	8005a0a <_strtod_l+0x452>
 8005998:	9b06      	ldr	r3, [sp, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f43f ae50 	beq.w	8005640 <_strtod_l+0x88>
 80059a0:	dd24      	ble.n	80059ec <_strtod_l+0x434>
 80059a2:	2b16      	cmp	r3, #22
 80059a4:	dc0b      	bgt.n	80059be <_strtod_l+0x406>
 80059a6:	496d      	ldr	r1, [pc, #436]	; (8005b5c <_strtod_l+0x5a4>)
 80059a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b0:	4652      	mov	r2, sl
 80059b2:	465b      	mov	r3, fp
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	4682      	mov	sl, r0
 80059ba:	468b      	mov	fp, r1
 80059bc:	e640      	b.n	8005640 <_strtod_l+0x88>
 80059be:	9a06      	ldr	r2, [sp, #24]
 80059c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80059c4:	4293      	cmp	r3, r2
 80059c6:	db20      	blt.n	8005a0a <_strtod_l+0x452>
 80059c8:	4c64      	ldr	r4, [pc, #400]	; (8005b5c <_strtod_l+0x5a4>)
 80059ca:	f1c5 050f 	rsb	r5, r5, #15
 80059ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80059d2:	4652      	mov	r2, sl
 80059d4:	465b      	mov	r3, fp
 80059d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059da:	f7fa fe0d 	bl	80005f8 <__aeabi_dmul>
 80059de:	9b06      	ldr	r3, [sp, #24]
 80059e0:	1b5d      	subs	r5, r3, r5
 80059e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80059e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80059ea:	e7e3      	b.n	80059b4 <_strtod_l+0x3fc>
 80059ec:	9b06      	ldr	r3, [sp, #24]
 80059ee:	3316      	adds	r3, #22
 80059f0:	db0b      	blt.n	8005a0a <_strtod_l+0x452>
 80059f2:	9b05      	ldr	r3, [sp, #20]
 80059f4:	1b9e      	subs	r6, r3, r6
 80059f6:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <_strtod_l+0x5a4>)
 80059f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80059fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a00:	4650      	mov	r0, sl
 8005a02:	4659      	mov	r1, fp
 8005a04:	f7fa ff22 	bl	800084c <__aeabi_ddiv>
 8005a08:	e7d6      	b.n	80059b8 <_strtod_l+0x400>
 8005a0a:	9b06      	ldr	r3, [sp, #24]
 8005a0c:	eba5 0808 	sub.w	r8, r5, r8
 8005a10:	4498      	add	r8, r3
 8005a12:	f1b8 0f00 	cmp.w	r8, #0
 8005a16:	dd74      	ble.n	8005b02 <_strtod_l+0x54a>
 8005a18:	f018 030f 	ands.w	r3, r8, #15
 8005a1c:	d00a      	beq.n	8005a34 <_strtod_l+0x47c>
 8005a1e:	494f      	ldr	r1, [pc, #316]	; (8005b5c <_strtod_l+0x5a4>)
 8005a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a24:	4652      	mov	r2, sl
 8005a26:	465b      	mov	r3, fp
 8005a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a2c:	f7fa fde4 	bl	80005f8 <__aeabi_dmul>
 8005a30:	4682      	mov	sl, r0
 8005a32:	468b      	mov	fp, r1
 8005a34:	f038 080f 	bics.w	r8, r8, #15
 8005a38:	d04f      	beq.n	8005ada <_strtod_l+0x522>
 8005a3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a3e:	dd22      	ble.n	8005a86 <_strtod_l+0x4ce>
 8005a40:	2500      	movs	r5, #0
 8005a42:	462e      	mov	r6, r5
 8005a44:	9507      	str	r5, [sp, #28]
 8005a46:	9505      	str	r5, [sp, #20]
 8005a48:	2322      	movs	r3, #34	; 0x22
 8005a4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005b64 <_strtod_l+0x5ac>
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	f04f 0a00 	mov.w	sl, #0
 8005a54:	9b07      	ldr	r3, [sp, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f43f adf2 	beq.w	8005640 <_strtod_l+0x88>
 8005a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f001 f89e 	bl	8006ba0 <_Bfree>
 8005a64:	9905      	ldr	r1, [sp, #20]
 8005a66:	4620      	mov	r0, r4
 8005a68:	f001 f89a 	bl	8006ba0 <_Bfree>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f001 f896 	bl	8006ba0 <_Bfree>
 8005a74:	9907      	ldr	r1, [sp, #28]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f001 f892 	bl	8006ba0 <_Bfree>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f001 f88e 	bl	8006ba0 <_Bfree>
 8005a84:	e5dc      	b.n	8005640 <_strtod_l+0x88>
 8005a86:	4b36      	ldr	r3, [pc, #216]	; (8005b60 <_strtod_l+0x5a8>)
 8005a88:	9304      	str	r3, [sp, #16]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a90:	4650      	mov	r0, sl
 8005a92:	4659      	mov	r1, fp
 8005a94:	4699      	mov	r9, r3
 8005a96:	f1b8 0f01 	cmp.w	r8, #1
 8005a9a:	dc21      	bgt.n	8005ae0 <_strtod_l+0x528>
 8005a9c:	b10b      	cbz	r3, 8005aa2 <_strtod_l+0x4ea>
 8005a9e:	4682      	mov	sl, r0
 8005aa0:	468b      	mov	fp, r1
 8005aa2:	4b2f      	ldr	r3, [pc, #188]	; (8005b60 <_strtod_l+0x5a8>)
 8005aa4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005aa8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005aac:	4652      	mov	r2, sl
 8005aae:	465b      	mov	r3, fp
 8005ab0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005ab4:	f7fa fda0 	bl	80005f8 <__aeabi_dmul>
 8005ab8:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <_strtod_l+0x5ac>)
 8005aba:	460a      	mov	r2, r1
 8005abc:	400b      	ands	r3, r1
 8005abe:	492a      	ldr	r1, [pc, #168]	; (8005b68 <_strtod_l+0x5b0>)
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	d8bc      	bhi.n	8005a40 <_strtod_l+0x488>
 8005ac6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005aca:	428b      	cmp	r3, r1
 8005acc:	bf86      	itte	hi
 8005ace:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005b6c <_strtod_l+0x5b4>
 8005ad2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ad6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005ada:	2300      	movs	r3, #0
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	e084      	b.n	8005bea <_strtod_l+0x632>
 8005ae0:	f018 0f01 	tst.w	r8, #1
 8005ae4:	d005      	beq.n	8005af2 <_strtod_l+0x53a>
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f7fa fd84 	bl	80005f8 <__aeabi_dmul>
 8005af0:	2301      	movs	r3, #1
 8005af2:	9a04      	ldr	r2, [sp, #16]
 8005af4:	3208      	adds	r2, #8
 8005af6:	f109 0901 	add.w	r9, r9, #1
 8005afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005afe:	9204      	str	r2, [sp, #16]
 8005b00:	e7c9      	b.n	8005a96 <_strtod_l+0x4de>
 8005b02:	d0ea      	beq.n	8005ada <_strtod_l+0x522>
 8005b04:	f1c8 0800 	rsb	r8, r8, #0
 8005b08:	f018 020f 	ands.w	r2, r8, #15
 8005b0c:	d00a      	beq.n	8005b24 <_strtod_l+0x56c>
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <_strtod_l+0x5a4>)
 8005b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b14:	4650      	mov	r0, sl
 8005b16:	4659      	mov	r1, fp
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	f7fa fe96 	bl	800084c <__aeabi_ddiv>
 8005b20:	4682      	mov	sl, r0
 8005b22:	468b      	mov	fp, r1
 8005b24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b28:	d0d7      	beq.n	8005ada <_strtod_l+0x522>
 8005b2a:	f1b8 0f1f 	cmp.w	r8, #31
 8005b2e:	dd1f      	ble.n	8005b70 <_strtod_l+0x5b8>
 8005b30:	2500      	movs	r5, #0
 8005b32:	462e      	mov	r6, r5
 8005b34:	9507      	str	r5, [sp, #28]
 8005b36:	9505      	str	r5, [sp, #20]
 8005b38:	2322      	movs	r3, #34	; 0x22
 8005b3a:	f04f 0a00 	mov.w	sl, #0
 8005b3e:	f04f 0b00 	mov.w	fp, #0
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	e786      	b.n	8005a54 <_strtod_l+0x49c>
 8005b46:	bf00      	nop
 8005b48:	080099e9 	.word	0x080099e9
 8005b4c:	08009a00 	.word	0x08009a00
 8005b50:	080099e0 	.word	0x080099e0
 8005b54:	080099e3 	.word	0x080099e3
 8005b58:	08009aef 	.word	0x08009aef
 8005b5c:	08009d00 	.word	0x08009d00
 8005b60:	08009cd8 	.word	0x08009cd8
 8005b64:	7ff00000 	.word	0x7ff00000
 8005b68:	7ca00000 	.word	0x7ca00000
 8005b6c:	7fefffff 	.word	0x7fefffff
 8005b70:	f018 0310 	ands.w	r3, r8, #16
 8005b74:	bf18      	it	ne
 8005b76:	236a      	movne	r3, #106	; 0x6a
 8005b78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005f28 <_strtod_l+0x970>
 8005b7c:	9304      	str	r3, [sp, #16]
 8005b7e:	4650      	mov	r0, sl
 8005b80:	4659      	mov	r1, fp
 8005b82:	2300      	movs	r3, #0
 8005b84:	f018 0f01 	tst.w	r8, #1
 8005b88:	d004      	beq.n	8005b94 <_strtod_l+0x5dc>
 8005b8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	2301      	movs	r3, #1
 8005b94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b98:	f109 0908 	add.w	r9, r9, #8
 8005b9c:	d1f2      	bne.n	8005b84 <_strtod_l+0x5cc>
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_strtod_l+0x5ec>
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	468b      	mov	fp, r1
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	b1c3      	cbz	r3, 8005bda <_strtod_l+0x622>
 8005ba8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	dd11      	ble.n	8005bda <_strtod_l+0x622>
 8005bb6:	2b1f      	cmp	r3, #31
 8005bb8:	f340 8124 	ble.w	8005e04 <_strtod_l+0x84c>
 8005bbc:	2b34      	cmp	r3, #52	; 0x34
 8005bbe:	bfde      	ittt	le
 8005bc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005bc4:	f04f 33ff 	movle.w	r3, #4294967295
 8005bc8:	fa03 f202 	lslle.w	r2, r3, r2
 8005bcc:	f04f 0a00 	mov.w	sl, #0
 8005bd0:	bfcc      	ite	gt
 8005bd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005bd6:	ea02 0b01 	andle.w	fp, r2, r1
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4650      	mov	r0, sl
 8005be0:	4659      	mov	r1, fp
 8005be2:	f7fa ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d1a2      	bne.n	8005b30 <_strtod_l+0x578>
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	9908      	ldr	r1, [sp, #32]
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f001 f83b 	bl	8006c70 <__s2b>
 8005bfa:	9007      	str	r0, [sp, #28]
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f43f af1f 	beq.w	8005a40 <_strtod_l+0x488>
 8005c02:	9b05      	ldr	r3, [sp, #20]
 8005c04:	1b9e      	subs	r6, r3, r6
 8005c06:	9b06      	ldr	r3, [sp, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bfb4      	ite	lt
 8005c0c:	4633      	movlt	r3, r6
 8005c0e:	2300      	movge	r3, #0
 8005c10:	930c      	str	r3, [sp, #48]	; 0x30
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	2500      	movs	r5, #0
 8005c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8005c1c:	462e      	mov	r6, r5
 8005c1e:	9b07      	ldr	r3, [sp, #28]
 8005c20:	4620      	mov	r0, r4
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	f000 ff7c 	bl	8006b20 <_Balloc>
 8005c28:	9005      	str	r0, [sp, #20]
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f43f af0c 	beq.w	8005a48 <_strtod_l+0x490>
 8005c30:	9b07      	ldr	r3, [sp, #28]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	3202      	adds	r2, #2
 8005c36:	f103 010c 	add.w	r1, r3, #12
 8005c3a:	0092      	lsls	r2, r2, #2
 8005c3c:	300c      	adds	r0, #12
 8005c3e:	f7ff fc67 	bl	8005510 <memcpy>
 8005c42:	ec4b ab10 	vmov	d0, sl, fp
 8005c46:	aa1a      	add	r2, sp, #104	; 0x68
 8005c48:	a919      	add	r1, sp, #100	; 0x64
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f001 fb56 	bl	80072fc <__d2b>
 8005c50:	ec4b ab18 	vmov	d8, sl, fp
 8005c54:	9018      	str	r0, [sp, #96]	; 0x60
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f43f aef6 	beq.w	8005a48 <_strtod_l+0x490>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f001 f8a0 	bl	8006da4 <__i2b>
 8005c64:	4606      	mov	r6, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f43f aeee 	beq.w	8005a48 <_strtod_l+0x490>
 8005c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c6e:	9904      	ldr	r1, [sp, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfab      	itete	ge
 8005c74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005c76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005c78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005c7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005c7e:	bfac      	ite	ge
 8005c80:	eb03 0902 	addge.w	r9, r3, r2
 8005c84:	1ad7      	sublt	r7, r2, r3
 8005c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c88:	eba3 0801 	sub.w	r8, r3, r1
 8005c8c:	4490      	add	r8, r2
 8005c8e:	4ba1      	ldr	r3, [pc, #644]	; (8005f14 <_strtod_l+0x95c>)
 8005c90:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c94:	4598      	cmp	r8, r3
 8005c96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c9a:	f280 80c7 	bge.w	8005e2c <_strtod_l+0x874>
 8005c9e:	eba3 0308 	sub.w	r3, r3, r8
 8005ca2:	2b1f      	cmp	r3, #31
 8005ca4:	eba2 0203 	sub.w	r2, r2, r3
 8005ca8:	f04f 0101 	mov.w	r1, #1
 8005cac:	f300 80b1 	bgt.w	8005e12 <_strtod_l+0x85a>
 8005cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb4:	930d      	str	r3, [sp, #52]	; 0x34
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9308      	str	r3, [sp, #32]
 8005cba:	eb09 0802 	add.w	r8, r9, r2
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	45c1      	cmp	r9, r8
 8005cc2:	4417      	add	r7, r2
 8005cc4:	441f      	add	r7, r3
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	bfa8      	it	ge
 8005cca:	4643      	movge	r3, r8
 8005ccc:	42bb      	cmp	r3, r7
 8005cce:	bfa8      	it	ge
 8005cd0:	463b      	movge	r3, r7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfc2      	ittt	gt
 8005cd6:	eba8 0803 	subgt.w	r8, r8, r3
 8005cda:	1aff      	subgt	r7, r7, r3
 8005cdc:	eba9 0903 	subgt.w	r9, r9, r3
 8005ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dd17      	ble.n	8005d16 <_strtod_l+0x75e>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4620      	mov	r0, r4
 8005cec:	f001 f91a 	bl	8006f24 <__pow5mult>
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f43f aea8 	beq.w	8005a48 <_strtod_l+0x490>
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 f867 	bl	8006dd0 <__multiply>
 8005d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f43f ae9f 	beq.w	8005a48 <_strtod_l+0x490>
 8005d0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 ff47 	bl	8006ba0 <_Bfree>
 8005d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d14:	9318      	str	r3, [sp, #96]	; 0x60
 8005d16:	f1b8 0f00 	cmp.w	r8, #0
 8005d1a:	f300 808c 	bgt.w	8005e36 <_strtod_l+0x87e>
 8005d1e:	9b06      	ldr	r3, [sp, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dd08      	ble.n	8005d36 <_strtod_l+0x77e>
 8005d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d26:	9905      	ldr	r1, [sp, #20]
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f001 f8fb 	bl	8006f24 <__pow5mult>
 8005d2e:	9005      	str	r0, [sp, #20]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	f43f ae89 	beq.w	8005a48 <_strtod_l+0x490>
 8005d36:	2f00      	cmp	r7, #0
 8005d38:	dd08      	ble.n	8005d4c <_strtod_l+0x794>
 8005d3a:	9905      	ldr	r1, [sp, #20]
 8005d3c:	463a      	mov	r2, r7
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f001 f94a 	bl	8006fd8 <__lshift>
 8005d44:	9005      	str	r0, [sp, #20]
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f ae7e 	beq.w	8005a48 <_strtod_l+0x490>
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	dd08      	ble.n	8005d64 <_strtod_l+0x7ac>
 8005d52:	4631      	mov	r1, r6
 8005d54:	464a      	mov	r2, r9
 8005d56:	4620      	mov	r0, r4
 8005d58:	f001 f93e 	bl	8006fd8 <__lshift>
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f ae72 	beq.w	8005a48 <_strtod_l+0x490>
 8005d64:	9a05      	ldr	r2, [sp, #20]
 8005d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f001 f9c1 	bl	80070f0 <__mdiff>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	2800      	cmp	r0, #0
 8005d72:	f43f ae69 	beq.w	8005a48 <_strtod_l+0x490>
 8005d76:	68c3      	ldr	r3, [r0, #12]
 8005d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60c3      	str	r3, [r0, #12]
 8005d7e:	4631      	mov	r1, r6
 8005d80:	f001 f99a 	bl	80070b8 <__mcmp>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	da60      	bge.n	8005e4a <_strtod_l+0x892>
 8005d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8005d8e:	f040 8082 	bne.w	8005e96 <_strtod_l+0x8de>
 8005d92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d17d      	bne.n	8005e96 <_strtod_l+0x8de>
 8005d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d9e:	0d1b      	lsrs	r3, r3, #20
 8005da0:	051b      	lsls	r3, r3, #20
 8005da2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005da6:	d976      	bls.n	8005e96 <_strtod_l+0x8de>
 8005da8:	696b      	ldr	r3, [r5, #20]
 8005daa:	b913      	cbnz	r3, 8005db2 <_strtod_l+0x7fa>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	dd71      	ble.n	8005e96 <_strtod_l+0x8de>
 8005db2:	4629      	mov	r1, r5
 8005db4:	2201      	movs	r2, #1
 8005db6:	4620      	mov	r0, r4
 8005db8:	f001 f90e 	bl	8006fd8 <__lshift>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	f001 f97a 	bl	80070b8 <__mcmp>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	dd66      	ble.n	8005e96 <_strtod_l+0x8de>
 8005dc8:	9904      	ldr	r1, [sp, #16]
 8005dca:	4a53      	ldr	r2, [pc, #332]	; (8005f18 <_strtod_l+0x960>)
 8005dcc:	465b      	mov	r3, fp
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	f000 8081 	beq.w	8005ed6 <_strtod_l+0x91e>
 8005dd4:	ea02 010b 	and.w	r1, r2, fp
 8005dd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ddc:	dc7b      	bgt.n	8005ed6 <_strtod_l+0x91e>
 8005dde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005de2:	f77f aea9 	ble.w	8005b38 <_strtod_l+0x580>
 8005de6:	4b4d      	ldr	r3, [pc, #308]	; (8005f1c <_strtod_l+0x964>)
 8005de8:	4650      	mov	r0, sl
 8005dea:	4659      	mov	r1, fp
 8005dec:	2200      	movs	r2, #0
 8005dee:	f7fa fc03 	bl	80005f8 <__aeabi_dmul>
 8005df2:	460b      	mov	r3, r1
 8005df4:	4303      	orrs	r3, r0
 8005df6:	bf08      	it	eq
 8005df8:	2322      	moveq	r3, #34	; 0x22
 8005dfa:	4682      	mov	sl, r0
 8005dfc:	468b      	mov	fp, r1
 8005dfe:	bf08      	it	eq
 8005e00:	6023      	streq	r3, [r4, #0]
 8005e02:	e62b      	b.n	8005a5c <_strtod_l+0x4a4>
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	ea03 0a0a 	and.w	sl, r3, sl
 8005e10:	e6e3      	b.n	8005bda <_strtod_l+0x622>
 8005e12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005e16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005e1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005e1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005e22:	fa01 f308 	lsl.w	r3, r1, r8
 8005e26:	9308      	str	r3, [sp, #32]
 8005e28:	910d      	str	r1, [sp, #52]	; 0x34
 8005e2a:	e746      	b.n	8005cba <_strtod_l+0x702>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9308      	str	r3, [sp, #32]
 8005e30:	2301      	movs	r3, #1
 8005e32:	930d      	str	r3, [sp, #52]	; 0x34
 8005e34:	e741      	b.n	8005cba <_strtod_l+0x702>
 8005e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e38:	4642      	mov	r2, r8
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f001 f8cc 	bl	8006fd8 <__lshift>
 8005e40:	9018      	str	r0, [sp, #96]	; 0x60
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f47f af6b 	bne.w	8005d1e <_strtod_l+0x766>
 8005e48:	e5fe      	b.n	8005a48 <_strtod_l+0x490>
 8005e4a:	465f      	mov	r7, fp
 8005e4c:	d16e      	bne.n	8005f2c <_strtod_l+0x974>
 8005e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e54:	b342      	cbz	r2, 8005ea8 <_strtod_l+0x8f0>
 8005e56:	4a32      	ldr	r2, [pc, #200]	; (8005f20 <_strtod_l+0x968>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d128      	bne.n	8005eae <_strtod_l+0x8f6>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	4651      	mov	r1, sl
 8005e60:	b1eb      	cbz	r3, 8005e9e <_strtod_l+0x8e6>
 8005e62:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <_strtod_l+0x960>)
 8005e64:	403b      	ands	r3, r7
 8005e66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6e:	d819      	bhi.n	8005ea4 <_strtod_l+0x8ec>
 8005e70:	0d1b      	lsrs	r3, r3, #20
 8005e72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	d117      	bne.n	8005eae <_strtod_l+0x8f6>
 8005e7e:	4b29      	ldr	r3, [pc, #164]	; (8005f24 <_strtod_l+0x96c>)
 8005e80:	429f      	cmp	r7, r3
 8005e82:	d102      	bne.n	8005e8a <_strtod_l+0x8d2>
 8005e84:	3101      	adds	r1, #1
 8005e86:	f43f addf 	beq.w	8005a48 <_strtod_l+0x490>
 8005e8a:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <_strtod_l+0x960>)
 8005e8c:	403b      	ands	r3, r7
 8005e8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e92:	f04f 0a00 	mov.w	sl, #0
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1a4      	bne.n	8005de6 <_strtod_l+0x82e>
 8005e9c:	e5de      	b.n	8005a5c <_strtod_l+0x4a4>
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	e7ea      	b.n	8005e7a <_strtod_l+0x8c2>
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	e7e8      	b.n	8005e7a <_strtod_l+0x8c2>
 8005ea8:	ea53 030a 	orrs.w	r3, r3, sl
 8005eac:	d08c      	beq.n	8005dc8 <_strtod_l+0x810>
 8005eae:	9b08      	ldr	r3, [sp, #32]
 8005eb0:	b1db      	cbz	r3, 8005eea <_strtod_l+0x932>
 8005eb2:	423b      	tst	r3, r7
 8005eb4:	d0ef      	beq.n	8005e96 <_strtod_l+0x8de>
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb8:	9a04      	ldr	r2, [sp, #16]
 8005eba:	4650      	mov	r0, sl
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	b1c3      	cbz	r3, 8005ef2 <_strtod_l+0x93a>
 8005ec0:	f7ff fb5c 	bl	800557c <sulp>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	ec51 0b18 	vmov	r0, r1, d8
 8005ecc:	f7fa f9de 	bl	800028c <__adddf3>
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	468b      	mov	fp, r1
 8005ed4:	e7df      	b.n	8005e96 <_strtod_l+0x8de>
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005edc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ee4:	f04f 3aff 	mov.w	sl, #4294967295
 8005ee8:	e7d5      	b.n	8005e96 <_strtod_l+0x8de>
 8005eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eec:	ea13 0f0a 	tst.w	r3, sl
 8005ef0:	e7e0      	b.n	8005eb4 <_strtod_l+0x8fc>
 8005ef2:	f7ff fb43 	bl	800557c <sulp>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	ec51 0b18 	vmov	r0, r1, d8
 8005efe:	f7fa f9c3 	bl	8000288 <__aeabi_dsub>
 8005f02:	2200      	movs	r2, #0
 8005f04:	2300      	movs	r3, #0
 8005f06:	4682      	mov	sl, r0
 8005f08:	468b      	mov	fp, r1
 8005f0a:	f7fa fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d0c1      	beq.n	8005e96 <_strtod_l+0x8de>
 8005f12:	e611      	b.n	8005b38 <_strtod_l+0x580>
 8005f14:	fffffc02 	.word	0xfffffc02
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	39500000 	.word	0x39500000
 8005f20:	000fffff 	.word	0x000fffff
 8005f24:	7fefffff 	.word	0x7fefffff
 8005f28:	08009a18 	.word	0x08009a18
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f001 fa40 	bl	80073b4 <__ratio>
 8005f34:	ec59 8b10 	vmov	r8, r9, d0
 8005f38:	ee10 0a10 	vmov	r0, s0
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fdd4 	bl	8000af0 <__aeabi_dcmple>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d07a      	beq.n	8006042 <_strtod_l+0xa8a>
 8005f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04a      	beq.n	8005fe8 <_strtod_l+0xa30>
 8005f52:	4b95      	ldr	r3, [pc, #596]	; (80061a8 <_strtod_l+0xbf0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80061a8 <_strtod_l+0xbf0>
 8005f5e:	f04f 0800 	mov.w	r8, #0
 8005f62:	4b92      	ldr	r3, [pc, #584]	; (80061ac <_strtod_l+0xbf4>)
 8005f64:	403b      	ands	r3, r7
 8005f66:	930d      	str	r3, [sp, #52]	; 0x34
 8005f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f6a:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <_strtod_l+0xbf8>)
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	f040 80b0 	bne.w	80060d2 <_strtod_l+0xb1a>
 8005f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f7a:	ec4b ab10 	vmov	d0, sl, fp
 8005f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f82:	f001 f93f 	bl	8007204 <__ulp>
 8005f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f8a:	ec53 2b10 	vmov	r2, r3, d0
 8005f8e:	f7fa fb33 	bl	80005f8 <__aeabi_dmul>
 8005f92:	4652      	mov	r2, sl
 8005f94:	465b      	mov	r3, fp
 8005f96:	f7fa f979 	bl	800028c <__adddf3>
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4983      	ldr	r1, [pc, #524]	; (80061ac <_strtod_l+0xbf4>)
 8005f9e:	4a85      	ldr	r2, [pc, #532]	; (80061b4 <_strtod_l+0xbfc>)
 8005fa0:	4019      	ands	r1, r3
 8005fa2:	4291      	cmp	r1, r2
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	d960      	bls.n	800606a <_strtod_l+0xab2>
 8005fa8:	ee18 3a90 	vmov	r3, s17
 8005fac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d104      	bne.n	8005fbe <_strtod_l+0xa06>
 8005fb4:	ee18 3a10 	vmov	r3, s16
 8005fb8:	3301      	adds	r3, #1
 8005fba:	f43f ad45 	beq.w	8005a48 <_strtod_l+0x490>
 8005fbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 80061c0 <_strtod_l+0xc08>
 8005fc2:	f04f 3aff 	mov.w	sl, #4294967295
 8005fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fde9 	bl	8006ba0 <_Bfree>
 8005fce:	9905      	ldr	r1, [sp, #20]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fde5 	bl	8006ba0 <_Bfree>
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 fde1 	bl	8006ba0 <_Bfree>
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 fddd 	bl	8006ba0 <_Bfree>
 8005fe6:	e61a      	b.n	8005c1e <_strtod_l+0x666>
 8005fe8:	f1ba 0f00 	cmp.w	sl, #0
 8005fec:	d11b      	bne.n	8006026 <_strtod_l+0xa6e>
 8005fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ff2:	b9f3      	cbnz	r3, 8006032 <_strtod_l+0xa7a>
 8005ff4:	4b6c      	ldr	r3, [pc, #432]	; (80061a8 <_strtod_l+0xbf0>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fd6e 	bl	8000adc <__aeabi_dcmplt>
 8006000:	b9d0      	cbnz	r0, 8006038 <_strtod_l+0xa80>
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	4b6c      	ldr	r3, [pc, #432]	; (80061b8 <_strtod_l+0xc00>)
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa faf5 	bl	80005f8 <__aeabi_dmul>
 800600e:	4680      	mov	r8, r0
 8006010:	4689      	mov	r9, r1
 8006012:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006016:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800601a:	9315      	str	r3, [sp, #84]	; 0x54
 800601c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006020:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006024:	e79d      	b.n	8005f62 <_strtod_l+0x9aa>
 8006026:	f1ba 0f01 	cmp.w	sl, #1
 800602a:	d102      	bne.n	8006032 <_strtod_l+0xa7a>
 800602c:	2f00      	cmp	r7, #0
 800602e:	f43f ad83 	beq.w	8005b38 <_strtod_l+0x580>
 8006032:	4b62      	ldr	r3, [pc, #392]	; (80061bc <_strtod_l+0xc04>)
 8006034:	2200      	movs	r2, #0
 8006036:	e78e      	b.n	8005f56 <_strtod_l+0x99e>
 8006038:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80061b8 <_strtod_l+0xc00>
 800603c:	f04f 0800 	mov.w	r8, #0
 8006040:	e7e7      	b.n	8006012 <_strtod_l+0xa5a>
 8006042:	4b5d      	ldr	r3, [pc, #372]	; (80061b8 <_strtod_l+0xc00>)
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	2200      	movs	r2, #0
 800604a:	f7fa fad5 	bl	80005f8 <__aeabi_dmul>
 800604e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006050:	4680      	mov	r8, r0
 8006052:	4689      	mov	r9, r1
 8006054:	b933      	cbnz	r3, 8006064 <_strtod_l+0xaac>
 8006056:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800605a:	900e      	str	r0, [sp, #56]	; 0x38
 800605c:	930f      	str	r3, [sp, #60]	; 0x3c
 800605e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006062:	e7dd      	b.n	8006020 <_strtod_l+0xa68>
 8006064:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006068:	e7f9      	b.n	800605e <_strtod_l+0xaa6>
 800606a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800606e:	9b04      	ldr	r3, [sp, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1a8      	bne.n	8005fc6 <_strtod_l+0xa0e>
 8006074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800607a:	0d1b      	lsrs	r3, r3, #20
 800607c:	051b      	lsls	r3, r3, #20
 800607e:	429a      	cmp	r2, r3
 8006080:	d1a1      	bne.n	8005fc6 <_strtod_l+0xa0e>
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa fdb1 	bl	8000bec <__aeabi_d2lz>
 800608a:	f7fa fa87 	bl	800059c <__aeabi_l2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa f8f7 	bl	8000288 <__aeabi_dsub>
 800609a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800609c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060a0:	ea43 030a 	orr.w	r3, r3, sl
 80060a4:	4313      	orrs	r3, r2
 80060a6:	4680      	mov	r8, r0
 80060a8:	4689      	mov	r9, r1
 80060aa:	d055      	beq.n	8006158 <_strtod_l+0xba0>
 80060ac:	a336      	add	r3, pc, #216	; (adr r3, 8006188 <_strtod_l+0xbd0>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa fd13 	bl	8000adc <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f47f acd0 	bne.w	8005a5c <_strtod_l+0x4a4>
 80060bc:	a334      	add	r3, pc, #208	; (adr r3, 8006190 <_strtod_l+0xbd8>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	4640      	mov	r0, r8
 80060c4:	4649      	mov	r1, r9
 80060c6:	f7fa fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	f43f af7b 	beq.w	8005fc6 <_strtod_l+0xa0e>
 80060d0:	e4c4      	b.n	8005a5c <_strtod_l+0x4a4>
 80060d2:	9b04      	ldr	r3, [sp, #16]
 80060d4:	b333      	cbz	r3, 8006124 <_strtod_l+0xb6c>
 80060d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060dc:	d822      	bhi.n	8006124 <_strtod_l+0xb6c>
 80060de:	a32e      	add	r3, pc, #184	; (adr r3, 8006198 <_strtod_l+0xbe0>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4640      	mov	r0, r8
 80060e6:	4649      	mov	r1, r9
 80060e8:	f7fa fd02 	bl	8000af0 <__aeabi_dcmple>
 80060ec:	b1a0      	cbz	r0, 8006118 <_strtod_l+0xb60>
 80060ee:	4649      	mov	r1, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	f7fa fd43 	bl	8000b7c <__aeabi_d2uiz>
 80060f6:	2801      	cmp	r0, #1
 80060f8:	bf38      	it	cc
 80060fa:	2001      	movcc	r0, #1
 80060fc:	f7fa fa02 	bl	8000504 <__aeabi_ui2d>
 8006100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006102:	4680      	mov	r8, r0
 8006104:	4689      	mov	r9, r1
 8006106:	bb23      	cbnz	r3, 8006152 <_strtod_l+0xb9a>
 8006108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800610c:	9010      	str	r0, [sp, #64]	; 0x40
 800610e:	9311      	str	r3, [sp, #68]	; 0x44
 8006110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006114:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800611c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	9309      	str	r3, [sp, #36]	; 0x24
 8006124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006128:	eeb0 0a48 	vmov.f32	s0, s16
 800612c:	eef0 0a68 	vmov.f32	s1, s17
 8006130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006134:	f001 f866 	bl	8007204 <__ulp>
 8006138:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800613c:	ec53 2b10 	vmov	r2, r3, d0
 8006140:	f7fa fa5a 	bl	80005f8 <__aeabi_dmul>
 8006144:	ec53 2b18 	vmov	r2, r3, d8
 8006148:	f7fa f8a0 	bl	800028c <__adddf3>
 800614c:	4682      	mov	sl, r0
 800614e:	468b      	mov	fp, r1
 8006150:	e78d      	b.n	800606e <_strtod_l+0xab6>
 8006152:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006156:	e7db      	b.n	8006110 <_strtod_l+0xb58>
 8006158:	a311      	add	r3, pc, #68	; (adr r3, 80061a0 <_strtod_l+0xbe8>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa fcbd 	bl	8000adc <__aeabi_dcmplt>
 8006162:	e7b2      	b.n	80060ca <_strtod_l+0xb12>
 8006164:	2300      	movs	r3, #0
 8006166:	930a      	str	r3, [sp, #40]	; 0x28
 8006168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800616a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	f7ff ba6b 	b.w	8005648 <_strtod_l+0x90>
 8006172:	2a65      	cmp	r2, #101	; 0x65
 8006174:	f43f ab5f 	beq.w	8005836 <_strtod_l+0x27e>
 8006178:	2a45      	cmp	r2, #69	; 0x45
 800617a:	f43f ab5c 	beq.w	8005836 <_strtod_l+0x27e>
 800617e:	2301      	movs	r3, #1
 8006180:	f7ff bb94 	b.w	80058ac <_strtod_l+0x2f4>
 8006184:	f3af 8000 	nop.w
 8006188:	94a03595 	.word	0x94a03595
 800618c:	3fdfffff 	.word	0x3fdfffff
 8006190:	35afe535 	.word	0x35afe535
 8006194:	3fe00000 	.word	0x3fe00000
 8006198:	ffc00000 	.word	0xffc00000
 800619c:	41dfffff 	.word	0x41dfffff
 80061a0:	94a03595 	.word	0x94a03595
 80061a4:	3fcfffff 	.word	0x3fcfffff
 80061a8:	3ff00000 	.word	0x3ff00000
 80061ac:	7ff00000 	.word	0x7ff00000
 80061b0:	7fe00000 	.word	0x7fe00000
 80061b4:	7c9fffff 	.word	0x7c9fffff
 80061b8:	3fe00000 	.word	0x3fe00000
 80061bc:	bff00000 	.word	0xbff00000
 80061c0:	7fefffff 	.word	0x7fefffff

080061c4 <strtod>:
 80061c4:	460a      	mov	r2, r1
 80061c6:	4601      	mov	r1, r0
 80061c8:	4802      	ldr	r0, [pc, #8]	; (80061d4 <strtod+0x10>)
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <strtod+0x14>)
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f7ff b9f3 	b.w	80055b8 <_strtod_l>
 80061d2:	bf00      	nop
 80061d4:	20000434 	.word	0x20000434
 80061d8:	2000049c 	.word	0x2000049c

080061dc <strtok>:
 80061dc:	4b16      	ldr	r3, [pc, #88]	; (8006238 <strtok+0x5c>)
 80061de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80061e4:	4605      	mov	r5, r0
 80061e6:	b9fc      	cbnz	r4, 8006228 <strtok+0x4c>
 80061e8:	2050      	movs	r0, #80	; 0x50
 80061ea:	9101      	str	r1, [sp, #4]
 80061ec:	f000 fc7e 	bl	8006aec <malloc>
 80061f0:	9901      	ldr	r1, [sp, #4]
 80061f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80061f4:	4602      	mov	r2, r0
 80061f6:	b920      	cbnz	r0, 8006202 <strtok+0x26>
 80061f8:	4b10      	ldr	r3, [pc, #64]	; (800623c <strtok+0x60>)
 80061fa:	4811      	ldr	r0, [pc, #68]	; (8006240 <strtok+0x64>)
 80061fc:	2157      	movs	r1, #87	; 0x57
 80061fe:	f000 f8d5 	bl	80063ac <__assert_func>
 8006202:	e9c0 4400 	strd	r4, r4, [r0]
 8006206:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800620a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800620e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006212:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006216:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800621a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800621e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006222:	6184      	str	r4, [r0, #24]
 8006224:	7704      	strb	r4, [r0, #28]
 8006226:	6244      	str	r4, [r0, #36]	; 0x24
 8006228:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800622a:	2301      	movs	r3, #1
 800622c:	4628      	mov	r0, r5
 800622e:	b002      	add	sp, #8
 8006230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006234:	f000 b806 	b.w	8006244 <__strtok_r>
 8006238:	20000434 	.word	0x20000434
 800623c:	08009a40 	.word	0x08009a40
 8006240:	08009a57 	.word	0x08009a57

08006244 <__strtok_r>:
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b908      	cbnz	r0, 800624c <__strtok_r+0x8>
 8006248:	6810      	ldr	r0, [r2, #0]
 800624a:	b188      	cbz	r0, 8006270 <__strtok_r+0x2c>
 800624c:	4604      	mov	r4, r0
 800624e:	4620      	mov	r0, r4
 8006250:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006254:	460f      	mov	r7, r1
 8006256:	f817 6b01 	ldrb.w	r6, [r7], #1
 800625a:	b91e      	cbnz	r6, 8006264 <__strtok_r+0x20>
 800625c:	b965      	cbnz	r5, 8006278 <__strtok_r+0x34>
 800625e:	6015      	str	r5, [r2, #0]
 8006260:	4628      	mov	r0, r5
 8006262:	e005      	b.n	8006270 <__strtok_r+0x2c>
 8006264:	42b5      	cmp	r5, r6
 8006266:	d1f6      	bne.n	8006256 <__strtok_r+0x12>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f0      	bne.n	800624e <__strtok_r+0xa>
 800626c:	6014      	str	r4, [r2, #0]
 800626e:	7003      	strb	r3, [r0, #0]
 8006270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006272:	461c      	mov	r4, r3
 8006274:	e00c      	b.n	8006290 <__strtok_r+0x4c>
 8006276:	b915      	cbnz	r5, 800627e <__strtok_r+0x3a>
 8006278:	f814 3b01 	ldrb.w	r3, [r4], #1
 800627c:	460e      	mov	r6, r1
 800627e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006282:	42ab      	cmp	r3, r5
 8006284:	d1f7      	bne.n	8006276 <__strtok_r+0x32>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f3      	beq.n	8006272 <__strtok_r+0x2e>
 800628a:	2300      	movs	r3, #0
 800628c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	e7ed      	b.n	8006270 <__strtok_r+0x2c>

08006294 <_strtol_l.constprop.0>:
 8006294:	2b01      	cmp	r3, #1
 8006296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629a:	d001      	beq.n	80062a0 <_strtol_l.constprop.0+0xc>
 800629c:	2b24      	cmp	r3, #36	; 0x24
 800629e:	d906      	bls.n	80062ae <_strtol_l.constprop.0+0x1a>
 80062a0:	f7ff f90c 	bl	80054bc <__errno>
 80062a4:	2316      	movs	r3, #22
 80062a6:	6003      	str	r3, [r0, #0]
 80062a8:	2000      	movs	r0, #0
 80062aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006394 <_strtol_l.constprop.0+0x100>
 80062b2:	460d      	mov	r5, r1
 80062b4:	462e      	mov	r6, r5
 80062b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80062be:	f017 0708 	ands.w	r7, r7, #8
 80062c2:	d1f7      	bne.n	80062b4 <_strtol_l.constprop.0+0x20>
 80062c4:	2c2d      	cmp	r4, #45	; 0x2d
 80062c6:	d132      	bne.n	800632e <_strtol_l.constprop.0+0x9a>
 80062c8:	782c      	ldrb	r4, [r5, #0]
 80062ca:	2701      	movs	r7, #1
 80062cc:	1cb5      	adds	r5, r6, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d05b      	beq.n	800638a <_strtol_l.constprop.0+0xf6>
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d109      	bne.n	80062ea <_strtol_l.constprop.0+0x56>
 80062d6:	2c30      	cmp	r4, #48	; 0x30
 80062d8:	d107      	bne.n	80062ea <_strtol_l.constprop.0+0x56>
 80062da:	782c      	ldrb	r4, [r5, #0]
 80062dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062e0:	2c58      	cmp	r4, #88	; 0x58
 80062e2:	d14d      	bne.n	8006380 <_strtol_l.constprop.0+0xec>
 80062e4:	786c      	ldrb	r4, [r5, #1]
 80062e6:	2310      	movs	r3, #16
 80062e8:	3502      	adds	r5, #2
 80062ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80062f2:	f04f 0c00 	mov.w	ip, #0
 80062f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80062fa:	4666      	mov	r6, ip
 80062fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006300:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006304:	f1be 0f09 	cmp.w	lr, #9
 8006308:	d816      	bhi.n	8006338 <_strtol_l.constprop.0+0xa4>
 800630a:	4674      	mov	r4, lr
 800630c:	42a3      	cmp	r3, r4
 800630e:	dd24      	ble.n	800635a <_strtol_l.constprop.0+0xc6>
 8006310:	f1bc 0f00 	cmp.w	ip, #0
 8006314:	db1e      	blt.n	8006354 <_strtol_l.constprop.0+0xc0>
 8006316:	45b1      	cmp	r9, r6
 8006318:	d31c      	bcc.n	8006354 <_strtol_l.constprop.0+0xc0>
 800631a:	d101      	bne.n	8006320 <_strtol_l.constprop.0+0x8c>
 800631c:	45a2      	cmp	sl, r4
 800631e:	db19      	blt.n	8006354 <_strtol_l.constprop.0+0xc0>
 8006320:	fb06 4603 	mla	r6, r6, r3, r4
 8006324:	f04f 0c01 	mov.w	ip, #1
 8006328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800632c:	e7e8      	b.n	8006300 <_strtol_l.constprop.0+0x6c>
 800632e:	2c2b      	cmp	r4, #43	; 0x2b
 8006330:	bf04      	itt	eq
 8006332:	782c      	ldrbeq	r4, [r5, #0]
 8006334:	1cb5      	addeq	r5, r6, #2
 8006336:	e7ca      	b.n	80062ce <_strtol_l.constprop.0+0x3a>
 8006338:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800633c:	f1be 0f19 	cmp.w	lr, #25
 8006340:	d801      	bhi.n	8006346 <_strtol_l.constprop.0+0xb2>
 8006342:	3c37      	subs	r4, #55	; 0x37
 8006344:	e7e2      	b.n	800630c <_strtol_l.constprop.0+0x78>
 8006346:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800634a:	f1be 0f19 	cmp.w	lr, #25
 800634e:	d804      	bhi.n	800635a <_strtol_l.constprop.0+0xc6>
 8006350:	3c57      	subs	r4, #87	; 0x57
 8006352:	e7db      	b.n	800630c <_strtol_l.constprop.0+0x78>
 8006354:	f04f 3cff 	mov.w	ip, #4294967295
 8006358:	e7e6      	b.n	8006328 <_strtol_l.constprop.0+0x94>
 800635a:	f1bc 0f00 	cmp.w	ip, #0
 800635e:	da05      	bge.n	800636c <_strtol_l.constprop.0+0xd8>
 8006360:	2322      	movs	r3, #34	; 0x22
 8006362:	6003      	str	r3, [r0, #0]
 8006364:	4646      	mov	r6, r8
 8006366:	b942      	cbnz	r2, 800637a <_strtol_l.constprop.0+0xe6>
 8006368:	4630      	mov	r0, r6
 800636a:	e79e      	b.n	80062aa <_strtol_l.constprop.0+0x16>
 800636c:	b107      	cbz	r7, 8006370 <_strtol_l.constprop.0+0xdc>
 800636e:	4276      	negs	r6, r6
 8006370:	2a00      	cmp	r2, #0
 8006372:	d0f9      	beq.n	8006368 <_strtol_l.constprop.0+0xd4>
 8006374:	f1bc 0f00 	cmp.w	ip, #0
 8006378:	d000      	beq.n	800637c <_strtol_l.constprop.0+0xe8>
 800637a:	1e69      	subs	r1, r5, #1
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	e7f3      	b.n	8006368 <_strtol_l.constprop.0+0xd4>
 8006380:	2430      	movs	r4, #48	; 0x30
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1b1      	bne.n	80062ea <_strtol_l.constprop.0+0x56>
 8006386:	2308      	movs	r3, #8
 8006388:	e7af      	b.n	80062ea <_strtol_l.constprop.0+0x56>
 800638a:	2c30      	cmp	r4, #48	; 0x30
 800638c:	d0a5      	beq.n	80062da <_strtol_l.constprop.0+0x46>
 800638e:	230a      	movs	r3, #10
 8006390:	e7ab      	b.n	80062ea <_strtol_l.constprop.0+0x56>
 8006392:	bf00      	nop
 8006394:	08009af1 	.word	0x08009af1

08006398 <strtol>:
 8006398:	4613      	mov	r3, r2
 800639a:	460a      	mov	r2, r1
 800639c:	4601      	mov	r1, r0
 800639e:	4802      	ldr	r0, [pc, #8]	; (80063a8 <strtol+0x10>)
 80063a0:	6800      	ldr	r0, [r0, #0]
 80063a2:	f7ff bf77 	b.w	8006294 <_strtol_l.constprop.0>
 80063a6:	bf00      	nop
 80063a8:	20000434 	.word	0x20000434

080063ac <__assert_func>:
 80063ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063ae:	4614      	mov	r4, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <__assert_func+0x2c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4605      	mov	r5, r0
 80063b8:	68d8      	ldr	r0, [r3, #12]
 80063ba:	b14c      	cbz	r4, 80063d0 <__assert_func+0x24>
 80063bc:	4b07      	ldr	r3, [pc, #28]	; (80063dc <__assert_func+0x30>)
 80063be:	9100      	str	r1, [sp, #0]
 80063c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c4:	4906      	ldr	r1, [pc, #24]	; (80063e0 <__assert_func+0x34>)
 80063c6:	462b      	mov	r3, r5
 80063c8:	f000 f80e 	bl	80063e8 <fiprintf>
 80063cc:	f001 fea6 	bl	800811c <abort>
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <__assert_func+0x38>)
 80063d2:	461c      	mov	r4, r3
 80063d4:	e7f3      	b.n	80063be <__assert_func+0x12>
 80063d6:	bf00      	nop
 80063d8:	20000434 	.word	0x20000434
 80063dc:	08009ab4 	.word	0x08009ab4
 80063e0:	08009ac1 	.word	0x08009ac1
 80063e4:	08009aef 	.word	0x08009aef

080063e8 <fiprintf>:
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b503      	push	{r0, r1, lr}
 80063ec:	4601      	mov	r1, r0
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	4805      	ldr	r0, [pc, #20]	; (8006408 <fiprintf+0x20>)
 80063f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f6:	6800      	ldr	r0, [r0, #0]
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	f001 facf 	bl	800799c <_vfiprintf_r>
 80063fe:	b002      	add	sp, #8
 8006400:	f85d eb04 	ldr.w	lr, [sp], #4
 8006404:	b003      	add	sp, #12
 8006406:	4770      	bx	lr
 8006408:	20000434 	.word	0x20000434

0800640c <rshift>:
 800640c:	6903      	ldr	r3, [r0, #16]
 800640e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006416:	ea4f 1261 	mov.w	r2, r1, asr #5
 800641a:	f100 0414 	add.w	r4, r0, #20
 800641e:	dd45      	ble.n	80064ac <rshift+0xa0>
 8006420:	f011 011f 	ands.w	r1, r1, #31
 8006424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800642c:	d10c      	bne.n	8006448 <rshift+0x3c>
 800642e:	f100 0710 	add.w	r7, r0, #16
 8006432:	4629      	mov	r1, r5
 8006434:	42b1      	cmp	r1, r6
 8006436:	d334      	bcc.n	80064a2 <rshift+0x96>
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	1eea      	subs	r2, r5, #3
 800643e:	4296      	cmp	r6, r2
 8006440:	bf38      	it	cc
 8006442:	2300      	movcc	r3, #0
 8006444:	4423      	add	r3, r4
 8006446:	e015      	b.n	8006474 <rshift+0x68>
 8006448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800644c:	f1c1 0820 	rsb	r8, r1, #32
 8006450:	40cf      	lsrs	r7, r1
 8006452:	f105 0e04 	add.w	lr, r5, #4
 8006456:	46a1      	mov	r9, r4
 8006458:	4576      	cmp	r6, lr
 800645a:	46f4      	mov	ip, lr
 800645c:	d815      	bhi.n	800648a <rshift+0x7e>
 800645e:	1a9a      	subs	r2, r3, r2
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	3a04      	subs	r2, #4
 8006464:	3501      	adds	r5, #1
 8006466:	42ae      	cmp	r6, r5
 8006468:	bf38      	it	cc
 800646a:	2200      	movcc	r2, #0
 800646c:	18a3      	adds	r3, r4, r2
 800646e:	50a7      	str	r7, [r4, r2]
 8006470:	b107      	cbz	r7, 8006474 <rshift+0x68>
 8006472:	3304      	adds	r3, #4
 8006474:	1b1a      	subs	r2, r3, r4
 8006476:	42a3      	cmp	r3, r4
 8006478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800647c:	bf08      	it	eq
 800647e:	2300      	moveq	r3, #0
 8006480:	6102      	str	r2, [r0, #16]
 8006482:	bf08      	it	eq
 8006484:	6143      	streq	r3, [r0, #20]
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	f8dc c000 	ldr.w	ip, [ip]
 800648e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006492:	ea4c 0707 	orr.w	r7, ip, r7
 8006496:	f849 7b04 	str.w	r7, [r9], #4
 800649a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800649e:	40cf      	lsrs	r7, r1
 80064a0:	e7da      	b.n	8006458 <rshift+0x4c>
 80064a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80064a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80064aa:	e7c3      	b.n	8006434 <rshift+0x28>
 80064ac:	4623      	mov	r3, r4
 80064ae:	e7e1      	b.n	8006474 <rshift+0x68>

080064b0 <__hexdig_fun>:
 80064b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	d802      	bhi.n	80064be <__hexdig_fun+0xe>
 80064b8:	3820      	subs	r0, #32
 80064ba:	b2c0      	uxtb	r0, r0
 80064bc:	4770      	bx	lr
 80064be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d801      	bhi.n	80064ca <__hexdig_fun+0x1a>
 80064c6:	3847      	subs	r0, #71	; 0x47
 80064c8:	e7f7      	b.n	80064ba <__hexdig_fun+0xa>
 80064ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d801      	bhi.n	80064d6 <__hexdig_fun+0x26>
 80064d2:	3827      	subs	r0, #39	; 0x27
 80064d4:	e7f1      	b.n	80064ba <__hexdig_fun+0xa>
 80064d6:	2000      	movs	r0, #0
 80064d8:	4770      	bx	lr
	...

080064dc <__gethex>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	ed2d 8b02 	vpush	{d8}
 80064e4:	b089      	sub	sp, #36	; 0x24
 80064e6:	ee08 0a10 	vmov	s16, r0
 80064ea:	9304      	str	r3, [sp, #16]
 80064ec:	4bb4      	ldr	r3, [pc, #720]	; (80067c0 <__gethex+0x2e4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	468b      	mov	fp, r1
 80064f6:	4690      	mov	r8, r2
 80064f8:	f7f9 fe6a 	bl	80001d0 <strlen>
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	f8db 2000 	ldr.w	r2, [fp]
 8006502:	4403      	add	r3, r0
 8006504:	4682      	mov	sl, r0
 8006506:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800650a:	9305      	str	r3, [sp, #20]
 800650c:	1c93      	adds	r3, r2, #2
 800650e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006512:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006516:	32fe      	adds	r2, #254	; 0xfe
 8006518:	18d1      	adds	r1, r2, r3
 800651a:	461f      	mov	r7, r3
 800651c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006520:	9100      	str	r1, [sp, #0]
 8006522:	2830      	cmp	r0, #48	; 0x30
 8006524:	d0f8      	beq.n	8006518 <__gethex+0x3c>
 8006526:	f7ff ffc3 	bl	80064b0 <__hexdig_fun>
 800652a:	4604      	mov	r4, r0
 800652c:	2800      	cmp	r0, #0
 800652e:	d13a      	bne.n	80065a6 <__gethex+0xca>
 8006530:	9901      	ldr	r1, [sp, #4]
 8006532:	4652      	mov	r2, sl
 8006534:	4638      	mov	r0, r7
 8006536:	f001 fd0f 	bl	8007f58 <strncmp>
 800653a:	4605      	mov	r5, r0
 800653c:	2800      	cmp	r0, #0
 800653e:	d168      	bne.n	8006612 <__gethex+0x136>
 8006540:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006544:	eb07 060a 	add.w	r6, r7, sl
 8006548:	f7ff ffb2 	bl	80064b0 <__hexdig_fun>
 800654c:	2800      	cmp	r0, #0
 800654e:	d062      	beq.n	8006616 <__gethex+0x13a>
 8006550:	4633      	mov	r3, r6
 8006552:	7818      	ldrb	r0, [r3, #0]
 8006554:	2830      	cmp	r0, #48	; 0x30
 8006556:	461f      	mov	r7, r3
 8006558:	f103 0301 	add.w	r3, r3, #1
 800655c:	d0f9      	beq.n	8006552 <__gethex+0x76>
 800655e:	f7ff ffa7 	bl	80064b0 <__hexdig_fun>
 8006562:	2301      	movs	r3, #1
 8006564:	fab0 f480 	clz	r4, r0
 8006568:	0964      	lsrs	r4, r4, #5
 800656a:	4635      	mov	r5, r6
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	463a      	mov	r2, r7
 8006570:	4616      	mov	r6, r2
 8006572:	3201      	adds	r2, #1
 8006574:	7830      	ldrb	r0, [r6, #0]
 8006576:	f7ff ff9b 	bl	80064b0 <__hexdig_fun>
 800657a:	2800      	cmp	r0, #0
 800657c:	d1f8      	bne.n	8006570 <__gethex+0x94>
 800657e:	9901      	ldr	r1, [sp, #4]
 8006580:	4652      	mov	r2, sl
 8006582:	4630      	mov	r0, r6
 8006584:	f001 fce8 	bl	8007f58 <strncmp>
 8006588:	b980      	cbnz	r0, 80065ac <__gethex+0xd0>
 800658a:	b94d      	cbnz	r5, 80065a0 <__gethex+0xc4>
 800658c:	eb06 050a 	add.w	r5, r6, sl
 8006590:	462a      	mov	r2, r5
 8006592:	4616      	mov	r6, r2
 8006594:	3201      	adds	r2, #1
 8006596:	7830      	ldrb	r0, [r6, #0]
 8006598:	f7ff ff8a 	bl	80064b0 <__hexdig_fun>
 800659c:	2800      	cmp	r0, #0
 800659e:	d1f8      	bne.n	8006592 <__gethex+0xb6>
 80065a0:	1bad      	subs	r5, r5, r6
 80065a2:	00ad      	lsls	r5, r5, #2
 80065a4:	e004      	b.n	80065b0 <__gethex+0xd4>
 80065a6:	2400      	movs	r4, #0
 80065a8:	4625      	mov	r5, r4
 80065aa:	e7e0      	b.n	800656e <__gethex+0x92>
 80065ac:	2d00      	cmp	r5, #0
 80065ae:	d1f7      	bne.n	80065a0 <__gethex+0xc4>
 80065b0:	7833      	ldrb	r3, [r6, #0]
 80065b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065b6:	2b50      	cmp	r3, #80	; 0x50
 80065b8:	d13b      	bne.n	8006632 <__gethex+0x156>
 80065ba:	7873      	ldrb	r3, [r6, #1]
 80065bc:	2b2b      	cmp	r3, #43	; 0x2b
 80065be:	d02c      	beq.n	800661a <__gethex+0x13e>
 80065c0:	2b2d      	cmp	r3, #45	; 0x2d
 80065c2:	d02e      	beq.n	8006622 <__gethex+0x146>
 80065c4:	1c71      	adds	r1, r6, #1
 80065c6:	f04f 0900 	mov.w	r9, #0
 80065ca:	7808      	ldrb	r0, [r1, #0]
 80065cc:	f7ff ff70 	bl	80064b0 <__hexdig_fun>
 80065d0:	1e43      	subs	r3, r0, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b18      	cmp	r3, #24
 80065d6:	d82c      	bhi.n	8006632 <__gethex+0x156>
 80065d8:	f1a0 0210 	sub.w	r2, r0, #16
 80065dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065e0:	f7ff ff66 	bl	80064b0 <__hexdig_fun>
 80065e4:	1e43      	subs	r3, r0, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b18      	cmp	r3, #24
 80065ea:	d91d      	bls.n	8006628 <__gethex+0x14c>
 80065ec:	f1b9 0f00 	cmp.w	r9, #0
 80065f0:	d000      	beq.n	80065f4 <__gethex+0x118>
 80065f2:	4252      	negs	r2, r2
 80065f4:	4415      	add	r5, r2
 80065f6:	f8cb 1000 	str.w	r1, [fp]
 80065fa:	b1e4      	cbz	r4, 8006636 <__gethex+0x15a>
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2700      	movne	r7, #0
 8006604:	2706      	moveq	r7, #6
 8006606:	4638      	mov	r0, r7
 8006608:	b009      	add	sp, #36	; 0x24
 800660a:	ecbd 8b02 	vpop	{d8}
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	463e      	mov	r6, r7
 8006614:	4625      	mov	r5, r4
 8006616:	2401      	movs	r4, #1
 8006618:	e7ca      	b.n	80065b0 <__gethex+0xd4>
 800661a:	f04f 0900 	mov.w	r9, #0
 800661e:	1cb1      	adds	r1, r6, #2
 8006620:	e7d3      	b.n	80065ca <__gethex+0xee>
 8006622:	f04f 0901 	mov.w	r9, #1
 8006626:	e7fa      	b.n	800661e <__gethex+0x142>
 8006628:	230a      	movs	r3, #10
 800662a:	fb03 0202 	mla	r2, r3, r2, r0
 800662e:	3a10      	subs	r2, #16
 8006630:	e7d4      	b.n	80065dc <__gethex+0x100>
 8006632:	4631      	mov	r1, r6
 8006634:	e7df      	b.n	80065f6 <__gethex+0x11a>
 8006636:	1bf3      	subs	r3, r6, r7
 8006638:	3b01      	subs	r3, #1
 800663a:	4621      	mov	r1, r4
 800663c:	2b07      	cmp	r3, #7
 800663e:	dc0b      	bgt.n	8006658 <__gethex+0x17c>
 8006640:	ee18 0a10 	vmov	r0, s16
 8006644:	f000 fa6c 	bl	8006b20 <_Balloc>
 8006648:	4604      	mov	r4, r0
 800664a:	b940      	cbnz	r0, 800665e <__gethex+0x182>
 800664c:	4b5d      	ldr	r3, [pc, #372]	; (80067c4 <__gethex+0x2e8>)
 800664e:	4602      	mov	r2, r0
 8006650:	21de      	movs	r1, #222	; 0xde
 8006652:	485d      	ldr	r0, [pc, #372]	; (80067c8 <__gethex+0x2ec>)
 8006654:	f7ff feaa 	bl	80063ac <__assert_func>
 8006658:	3101      	adds	r1, #1
 800665a:	105b      	asrs	r3, r3, #1
 800665c:	e7ee      	b.n	800663c <__gethex+0x160>
 800665e:	f100 0914 	add.w	r9, r0, #20
 8006662:	f04f 0b00 	mov.w	fp, #0
 8006666:	f1ca 0301 	rsb	r3, sl, #1
 800666a:	f8cd 9008 	str.w	r9, [sp, #8]
 800666e:	f8cd b000 	str.w	fp, [sp]
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	42b7      	cmp	r7, r6
 8006676:	d340      	bcc.n	80066fa <__gethex+0x21e>
 8006678:	9802      	ldr	r0, [sp, #8]
 800667a:	9b00      	ldr	r3, [sp, #0]
 800667c:	f840 3b04 	str.w	r3, [r0], #4
 8006680:	eba0 0009 	sub.w	r0, r0, r9
 8006684:	1080      	asrs	r0, r0, #2
 8006686:	0146      	lsls	r6, r0, #5
 8006688:	6120      	str	r0, [r4, #16]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fb3a 	bl	8006d04 <__hi0bits>
 8006690:	1a30      	subs	r0, r6, r0
 8006692:	f8d8 6000 	ldr.w	r6, [r8]
 8006696:	42b0      	cmp	r0, r6
 8006698:	dd63      	ble.n	8006762 <__gethex+0x286>
 800669a:	1b87      	subs	r7, r0, r6
 800669c:	4639      	mov	r1, r7
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fede 	bl	8007460 <__any_on>
 80066a4:	4682      	mov	sl, r0
 80066a6:	b1a8      	cbz	r0, 80066d4 <__gethex+0x1f8>
 80066a8:	1e7b      	subs	r3, r7, #1
 80066aa:	1159      	asrs	r1, r3, #5
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80066b4:	f04f 0a01 	mov.w	sl, #1
 80066b8:	fa0a f202 	lsl.w	r2, sl, r2
 80066bc:	420a      	tst	r2, r1
 80066be:	d009      	beq.n	80066d4 <__gethex+0x1f8>
 80066c0:	4553      	cmp	r3, sl
 80066c2:	dd05      	ble.n	80066d0 <__gethex+0x1f4>
 80066c4:	1eb9      	subs	r1, r7, #2
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 feca 	bl	8007460 <__any_on>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d145      	bne.n	800675c <__gethex+0x280>
 80066d0:	f04f 0a02 	mov.w	sl, #2
 80066d4:	4639      	mov	r1, r7
 80066d6:	4620      	mov	r0, r4
 80066d8:	f7ff fe98 	bl	800640c <rshift>
 80066dc:	443d      	add	r5, r7
 80066de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066e2:	42ab      	cmp	r3, r5
 80066e4:	da4c      	bge.n	8006780 <__gethex+0x2a4>
 80066e6:	ee18 0a10 	vmov	r0, s16
 80066ea:	4621      	mov	r1, r4
 80066ec:	f000 fa58 	bl	8006ba0 <_Bfree>
 80066f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066f2:	2300      	movs	r3, #0
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	27a3      	movs	r7, #163	; 0xa3
 80066f8:	e785      	b.n	8006606 <__gethex+0x12a>
 80066fa:	1e73      	subs	r3, r6, #1
 80066fc:	9a05      	ldr	r2, [sp, #20]
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006704:	4293      	cmp	r3, r2
 8006706:	d019      	beq.n	800673c <__gethex+0x260>
 8006708:	f1bb 0f20 	cmp.w	fp, #32
 800670c:	d107      	bne.n	800671e <__gethex+0x242>
 800670e:	9b02      	ldr	r3, [sp, #8]
 8006710:	9a00      	ldr	r2, [sp, #0]
 8006712:	f843 2b04 	str.w	r2, [r3], #4
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	469b      	mov	fp, r3
 800671e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006722:	f7ff fec5 	bl	80064b0 <__hexdig_fun>
 8006726:	9b00      	ldr	r3, [sp, #0]
 8006728:	f000 000f 	and.w	r0, r0, #15
 800672c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006730:	4303      	orrs	r3, r0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	f10b 0b04 	add.w	fp, fp, #4
 8006738:	9b03      	ldr	r3, [sp, #12]
 800673a:	e00d      	b.n	8006758 <__gethex+0x27c>
 800673c:	9b03      	ldr	r3, [sp, #12]
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	4413      	add	r3, r2
 8006742:	42bb      	cmp	r3, r7
 8006744:	d3e0      	bcc.n	8006708 <__gethex+0x22c>
 8006746:	4618      	mov	r0, r3
 8006748:	9901      	ldr	r1, [sp, #4]
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	4652      	mov	r2, sl
 800674e:	f001 fc03 	bl	8007f58 <strncmp>
 8006752:	9b07      	ldr	r3, [sp, #28]
 8006754:	2800      	cmp	r0, #0
 8006756:	d1d7      	bne.n	8006708 <__gethex+0x22c>
 8006758:	461e      	mov	r6, r3
 800675a:	e78b      	b.n	8006674 <__gethex+0x198>
 800675c:	f04f 0a03 	mov.w	sl, #3
 8006760:	e7b8      	b.n	80066d4 <__gethex+0x1f8>
 8006762:	da0a      	bge.n	800677a <__gethex+0x29e>
 8006764:	1a37      	subs	r7, r6, r0
 8006766:	4621      	mov	r1, r4
 8006768:	ee18 0a10 	vmov	r0, s16
 800676c:	463a      	mov	r2, r7
 800676e:	f000 fc33 	bl	8006fd8 <__lshift>
 8006772:	1bed      	subs	r5, r5, r7
 8006774:	4604      	mov	r4, r0
 8006776:	f100 0914 	add.w	r9, r0, #20
 800677a:	f04f 0a00 	mov.w	sl, #0
 800677e:	e7ae      	b.n	80066de <__gethex+0x202>
 8006780:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006784:	42a8      	cmp	r0, r5
 8006786:	dd72      	ble.n	800686e <__gethex+0x392>
 8006788:	1b45      	subs	r5, r0, r5
 800678a:	42ae      	cmp	r6, r5
 800678c:	dc36      	bgt.n	80067fc <__gethex+0x320>
 800678e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d02a      	beq.n	80067ec <__gethex+0x310>
 8006796:	2b03      	cmp	r3, #3
 8006798:	d02c      	beq.n	80067f4 <__gethex+0x318>
 800679a:	2b01      	cmp	r3, #1
 800679c:	d11c      	bne.n	80067d8 <__gethex+0x2fc>
 800679e:	42ae      	cmp	r6, r5
 80067a0:	d11a      	bne.n	80067d8 <__gethex+0x2fc>
 80067a2:	2e01      	cmp	r6, #1
 80067a4:	d112      	bne.n	80067cc <__gethex+0x2f0>
 80067a6:	9a04      	ldr	r2, [sp, #16]
 80067a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	2301      	movs	r3, #1
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	f8c9 3000 	str.w	r3, [r9]
 80067b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067b8:	2762      	movs	r7, #98	; 0x62
 80067ba:	601c      	str	r4, [r3, #0]
 80067bc:	e723      	b.n	8006606 <__gethex+0x12a>
 80067be:	bf00      	nop
 80067c0:	08009c68 	.word	0x08009c68
 80067c4:	08009bf1 	.word	0x08009bf1
 80067c8:	08009c02 	.word	0x08009c02
 80067cc:	1e71      	subs	r1, r6, #1
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fe46 	bl	8007460 <__any_on>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d1e6      	bne.n	80067a6 <__gethex+0x2ca>
 80067d8:	ee18 0a10 	vmov	r0, s16
 80067dc:	4621      	mov	r1, r4
 80067de:	f000 f9df 	bl	8006ba0 <_Bfree>
 80067e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067e4:	2300      	movs	r3, #0
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	2750      	movs	r7, #80	; 0x50
 80067ea:	e70c      	b.n	8006606 <__gethex+0x12a>
 80067ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f2      	bne.n	80067d8 <__gethex+0x2fc>
 80067f2:	e7d8      	b.n	80067a6 <__gethex+0x2ca>
 80067f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1d5      	bne.n	80067a6 <__gethex+0x2ca>
 80067fa:	e7ed      	b.n	80067d8 <__gethex+0x2fc>
 80067fc:	1e6f      	subs	r7, r5, #1
 80067fe:	f1ba 0f00 	cmp.w	sl, #0
 8006802:	d131      	bne.n	8006868 <__gethex+0x38c>
 8006804:	b127      	cbz	r7, 8006810 <__gethex+0x334>
 8006806:	4639      	mov	r1, r7
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fe29 	bl	8007460 <__any_on>
 800680e:	4682      	mov	sl, r0
 8006810:	117b      	asrs	r3, r7, #5
 8006812:	2101      	movs	r1, #1
 8006814:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006818:	f007 071f 	and.w	r7, r7, #31
 800681c:	fa01 f707 	lsl.w	r7, r1, r7
 8006820:	421f      	tst	r7, r3
 8006822:	4629      	mov	r1, r5
 8006824:	4620      	mov	r0, r4
 8006826:	bf18      	it	ne
 8006828:	f04a 0a02 	orrne.w	sl, sl, #2
 800682c:	1b76      	subs	r6, r6, r5
 800682e:	f7ff fded 	bl	800640c <rshift>
 8006832:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006836:	2702      	movs	r7, #2
 8006838:	f1ba 0f00 	cmp.w	sl, #0
 800683c:	d048      	beq.n	80068d0 <__gethex+0x3f4>
 800683e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d015      	beq.n	8006872 <__gethex+0x396>
 8006846:	2b03      	cmp	r3, #3
 8006848:	d017      	beq.n	800687a <__gethex+0x39e>
 800684a:	2b01      	cmp	r3, #1
 800684c:	d109      	bne.n	8006862 <__gethex+0x386>
 800684e:	f01a 0f02 	tst.w	sl, #2
 8006852:	d006      	beq.n	8006862 <__gethex+0x386>
 8006854:	f8d9 0000 	ldr.w	r0, [r9]
 8006858:	ea4a 0a00 	orr.w	sl, sl, r0
 800685c:	f01a 0f01 	tst.w	sl, #1
 8006860:	d10e      	bne.n	8006880 <__gethex+0x3a4>
 8006862:	f047 0710 	orr.w	r7, r7, #16
 8006866:	e033      	b.n	80068d0 <__gethex+0x3f4>
 8006868:	f04f 0a01 	mov.w	sl, #1
 800686c:	e7d0      	b.n	8006810 <__gethex+0x334>
 800686e:	2701      	movs	r7, #1
 8006870:	e7e2      	b.n	8006838 <__gethex+0x35c>
 8006872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006874:	f1c3 0301 	rsb	r3, r3, #1
 8006878:	9315      	str	r3, [sp, #84]	; 0x54
 800687a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <__gethex+0x386>
 8006880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006884:	f104 0314 	add.w	r3, r4, #20
 8006888:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800688c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006890:	f04f 0c00 	mov.w	ip, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f853 2b04 	ldr.w	r2, [r3], #4
 800689a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800689e:	d01c      	beq.n	80068da <__gethex+0x3fe>
 80068a0:	3201      	adds	r2, #1
 80068a2:	6002      	str	r2, [r0, #0]
 80068a4:	2f02      	cmp	r7, #2
 80068a6:	f104 0314 	add.w	r3, r4, #20
 80068aa:	d13f      	bne.n	800692c <__gethex+0x450>
 80068ac:	f8d8 2000 	ldr.w	r2, [r8]
 80068b0:	3a01      	subs	r2, #1
 80068b2:	42b2      	cmp	r2, r6
 80068b4:	d10a      	bne.n	80068cc <__gethex+0x3f0>
 80068b6:	1171      	asrs	r1, r6, #5
 80068b8:	2201      	movs	r2, #1
 80068ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068be:	f006 061f 	and.w	r6, r6, #31
 80068c2:	fa02 f606 	lsl.w	r6, r2, r6
 80068c6:	421e      	tst	r6, r3
 80068c8:	bf18      	it	ne
 80068ca:	4617      	movne	r7, r2
 80068cc:	f047 0720 	orr.w	r7, r7, #32
 80068d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068d2:	601c      	str	r4, [r3, #0]
 80068d4:	9b04      	ldr	r3, [sp, #16]
 80068d6:	601d      	str	r5, [r3, #0]
 80068d8:	e695      	b.n	8006606 <__gethex+0x12a>
 80068da:	4299      	cmp	r1, r3
 80068dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80068e0:	d8d8      	bhi.n	8006894 <__gethex+0x3b8>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	459b      	cmp	fp, r3
 80068e6:	db19      	blt.n	800691c <__gethex+0x440>
 80068e8:	6861      	ldr	r1, [r4, #4]
 80068ea:	ee18 0a10 	vmov	r0, s16
 80068ee:	3101      	adds	r1, #1
 80068f0:	f000 f916 	bl	8006b20 <_Balloc>
 80068f4:	4681      	mov	r9, r0
 80068f6:	b918      	cbnz	r0, 8006900 <__gethex+0x424>
 80068f8:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <__gethex+0x488>)
 80068fa:	4602      	mov	r2, r0
 80068fc:	2184      	movs	r1, #132	; 0x84
 80068fe:	e6a8      	b.n	8006652 <__gethex+0x176>
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	3202      	adds	r2, #2
 8006904:	f104 010c 	add.w	r1, r4, #12
 8006908:	0092      	lsls	r2, r2, #2
 800690a:	300c      	adds	r0, #12
 800690c:	f7fe fe00 	bl	8005510 <memcpy>
 8006910:	4621      	mov	r1, r4
 8006912:	ee18 0a10 	vmov	r0, s16
 8006916:	f000 f943 	bl	8006ba0 <_Bfree>
 800691a:	464c      	mov	r4, r9
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006924:	6122      	str	r2, [r4, #16]
 8006926:	2201      	movs	r2, #1
 8006928:	615a      	str	r2, [r3, #20]
 800692a:	e7bb      	b.n	80068a4 <__gethex+0x3c8>
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	455a      	cmp	r2, fp
 8006930:	dd0b      	ble.n	800694a <__gethex+0x46e>
 8006932:	2101      	movs	r1, #1
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff fd69 	bl	800640c <rshift>
 800693a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800693e:	3501      	adds	r5, #1
 8006940:	42ab      	cmp	r3, r5
 8006942:	f6ff aed0 	blt.w	80066e6 <__gethex+0x20a>
 8006946:	2701      	movs	r7, #1
 8006948:	e7c0      	b.n	80068cc <__gethex+0x3f0>
 800694a:	f016 061f 	ands.w	r6, r6, #31
 800694e:	d0fa      	beq.n	8006946 <__gethex+0x46a>
 8006950:	4453      	add	r3, sl
 8006952:	f1c6 0620 	rsb	r6, r6, #32
 8006956:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800695a:	f000 f9d3 	bl	8006d04 <__hi0bits>
 800695e:	42b0      	cmp	r0, r6
 8006960:	dbe7      	blt.n	8006932 <__gethex+0x456>
 8006962:	e7f0      	b.n	8006946 <__gethex+0x46a>
 8006964:	08009bf1 	.word	0x08009bf1

08006968 <L_shift>:
 8006968:	f1c2 0208 	rsb	r2, r2, #8
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	b570      	push	{r4, r5, r6, lr}
 8006970:	f1c2 0620 	rsb	r6, r2, #32
 8006974:	6843      	ldr	r3, [r0, #4]
 8006976:	6804      	ldr	r4, [r0, #0]
 8006978:	fa03 f506 	lsl.w	r5, r3, r6
 800697c:	432c      	orrs	r4, r5
 800697e:	40d3      	lsrs	r3, r2
 8006980:	6004      	str	r4, [r0, #0]
 8006982:	f840 3f04 	str.w	r3, [r0, #4]!
 8006986:	4288      	cmp	r0, r1
 8006988:	d3f4      	bcc.n	8006974 <L_shift+0xc>
 800698a:	bd70      	pop	{r4, r5, r6, pc}

0800698c <__match>:
 800698c:	b530      	push	{r4, r5, lr}
 800698e:	6803      	ldr	r3, [r0, #0]
 8006990:	3301      	adds	r3, #1
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	b914      	cbnz	r4, 800699e <__match+0x12>
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	2001      	movs	r0, #1
 800699c:	bd30      	pop	{r4, r5, pc}
 800699e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80069a6:	2d19      	cmp	r5, #25
 80069a8:	bf98      	it	ls
 80069aa:	3220      	addls	r2, #32
 80069ac:	42a2      	cmp	r2, r4
 80069ae:	d0f0      	beq.n	8006992 <__match+0x6>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e7f3      	b.n	800699c <__match+0x10>

080069b4 <__hexnan>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	680b      	ldr	r3, [r1, #0]
 80069ba:	115e      	asrs	r6, r3, #5
 80069bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069c0:	f013 031f 	ands.w	r3, r3, #31
 80069c4:	b087      	sub	sp, #28
 80069c6:	bf18      	it	ne
 80069c8:	3604      	addne	r6, #4
 80069ca:	2500      	movs	r5, #0
 80069cc:	1f37      	subs	r7, r6, #4
 80069ce:	4690      	mov	r8, r2
 80069d0:	6802      	ldr	r2, [r0, #0]
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	4682      	mov	sl, r0
 80069d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80069da:	46b9      	mov	r9, r7
 80069dc:	463c      	mov	r4, r7
 80069de:	9502      	str	r5, [sp, #8]
 80069e0:	46ab      	mov	fp, r5
 80069e2:	7851      	ldrb	r1, [r2, #1]
 80069e4:	1c53      	adds	r3, r2, #1
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	b341      	cbz	r1, 8006a3c <__hexnan+0x88>
 80069ea:	4608      	mov	r0, r1
 80069ec:	9205      	str	r2, [sp, #20]
 80069ee:	9104      	str	r1, [sp, #16]
 80069f0:	f7ff fd5e 	bl	80064b0 <__hexdig_fun>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d14f      	bne.n	8006a98 <__hexnan+0xe4>
 80069f8:	9904      	ldr	r1, [sp, #16]
 80069fa:	9a05      	ldr	r2, [sp, #20]
 80069fc:	2920      	cmp	r1, #32
 80069fe:	d818      	bhi.n	8006a32 <__hexnan+0x7e>
 8006a00:	9b02      	ldr	r3, [sp, #8]
 8006a02:	459b      	cmp	fp, r3
 8006a04:	dd13      	ble.n	8006a2e <__hexnan+0x7a>
 8006a06:	454c      	cmp	r4, r9
 8006a08:	d206      	bcs.n	8006a18 <__hexnan+0x64>
 8006a0a:	2d07      	cmp	r5, #7
 8006a0c:	dc04      	bgt.n	8006a18 <__hexnan+0x64>
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4649      	mov	r1, r9
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff ffa8 	bl	8006968 <L_shift>
 8006a18:	4544      	cmp	r4, r8
 8006a1a:	d950      	bls.n	8006abe <__hexnan+0x10a>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f1a4 0904 	sub.w	r9, r4, #4
 8006a22:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a26:	f8cd b008 	str.w	fp, [sp, #8]
 8006a2a:	464c      	mov	r4, r9
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	e7d7      	b.n	80069e2 <__hexnan+0x2e>
 8006a32:	2929      	cmp	r1, #41	; 0x29
 8006a34:	d156      	bne.n	8006ae4 <__hexnan+0x130>
 8006a36:	3202      	adds	r2, #2
 8006a38:	f8ca 2000 	str.w	r2, [sl]
 8006a3c:	f1bb 0f00 	cmp.w	fp, #0
 8006a40:	d050      	beq.n	8006ae4 <__hexnan+0x130>
 8006a42:	454c      	cmp	r4, r9
 8006a44:	d206      	bcs.n	8006a54 <__hexnan+0xa0>
 8006a46:	2d07      	cmp	r5, #7
 8006a48:	dc04      	bgt.n	8006a54 <__hexnan+0xa0>
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff ff8a 	bl	8006968 <L_shift>
 8006a54:	4544      	cmp	r4, r8
 8006a56:	d934      	bls.n	8006ac2 <__hexnan+0x10e>
 8006a58:	f1a8 0204 	sub.w	r2, r8, #4
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a62:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a66:	429f      	cmp	r7, r3
 8006a68:	d2f9      	bcs.n	8006a5e <__hexnan+0xaa>
 8006a6a:	1b3b      	subs	r3, r7, r4
 8006a6c:	f023 0303 	bic.w	r3, r3, #3
 8006a70:	3304      	adds	r3, #4
 8006a72:	3401      	adds	r4, #1
 8006a74:	3e03      	subs	r6, #3
 8006a76:	42b4      	cmp	r4, r6
 8006a78:	bf88      	it	hi
 8006a7a:	2304      	movhi	r3, #4
 8006a7c:	4443      	add	r3, r8
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f843 2b04 	str.w	r2, [r3], #4
 8006a84:	429f      	cmp	r7, r3
 8006a86:	d2fb      	bcs.n	8006a80 <__hexnan+0xcc>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	b91b      	cbnz	r3, 8006a94 <__hexnan+0xe0>
 8006a8c:	4547      	cmp	r7, r8
 8006a8e:	d127      	bne.n	8006ae0 <__hexnan+0x12c>
 8006a90:	2301      	movs	r3, #1
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	2005      	movs	r0, #5
 8006a96:	e026      	b.n	8006ae6 <__hexnan+0x132>
 8006a98:	3501      	adds	r5, #1
 8006a9a:	2d08      	cmp	r5, #8
 8006a9c:	f10b 0b01 	add.w	fp, fp, #1
 8006aa0:	dd06      	ble.n	8006ab0 <__hexnan+0xfc>
 8006aa2:	4544      	cmp	r4, r8
 8006aa4:	d9c3      	bls.n	8006a2e <__hexnan+0x7a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006aac:	2501      	movs	r5, #1
 8006aae:	3c04      	subs	r4, #4
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	f000 000f 	and.w	r0, r0, #15
 8006ab6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	e7b7      	b.n	8006a2e <__hexnan+0x7a>
 8006abe:	2508      	movs	r5, #8
 8006ac0:	e7b5      	b.n	8006a2e <__hexnan+0x7a>
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0df      	beq.n	8006a88 <__hexnan+0xd4>
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	f1c3 0320 	rsb	r3, r3, #32
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ad8:	401a      	ands	r2, r3
 8006ada:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ade:	e7d3      	b.n	8006a88 <__hexnan+0xd4>
 8006ae0:	3f04      	subs	r7, #4
 8006ae2:	e7d1      	b.n	8006a88 <__hexnan+0xd4>
 8006ae4:	2004      	movs	r0, #4
 8006ae6:	b007      	add	sp, #28
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006aec <malloc>:
 8006aec:	4b02      	ldr	r3, [pc, #8]	; (8006af8 <malloc+0xc>)
 8006aee:	4601      	mov	r1, r0
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f000 bd59 	b.w	80075a8 <_malloc_r>
 8006af6:	bf00      	nop
 8006af8:	20000434 	.word	0x20000434

08006afc <__ascii_mbtowc>:
 8006afc:	b082      	sub	sp, #8
 8006afe:	b901      	cbnz	r1, 8006b02 <__ascii_mbtowc+0x6>
 8006b00:	a901      	add	r1, sp, #4
 8006b02:	b142      	cbz	r2, 8006b16 <__ascii_mbtowc+0x1a>
 8006b04:	b14b      	cbz	r3, 8006b1a <__ascii_mbtowc+0x1e>
 8006b06:	7813      	ldrb	r3, [r2, #0]
 8006b08:	600b      	str	r3, [r1, #0]
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	1e10      	subs	r0, r2, #0
 8006b0e:	bf18      	it	ne
 8006b10:	2001      	movne	r0, #1
 8006b12:	b002      	add	sp, #8
 8006b14:	4770      	bx	lr
 8006b16:	4610      	mov	r0, r2
 8006b18:	e7fb      	b.n	8006b12 <__ascii_mbtowc+0x16>
 8006b1a:	f06f 0001 	mvn.w	r0, #1
 8006b1e:	e7f8      	b.n	8006b12 <__ascii_mbtowc+0x16>

08006b20 <_Balloc>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b24:	4604      	mov	r4, r0
 8006b26:	460d      	mov	r5, r1
 8006b28:	b976      	cbnz	r6, 8006b48 <_Balloc+0x28>
 8006b2a:	2010      	movs	r0, #16
 8006b2c:	f7ff ffde 	bl	8006aec <malloc>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6260      	str	r0, [r4, #36]	; 0x24
 8006b34:	b920      	cbnz	r0, 8006b40 <_Balloc+0x20>
 8006b36:	4b18      	ldr	r3, [pc, #96]	; (8006b98 <_Balloc+0x78>)
 8006b38:	4818      	ldr	r0, [pc, #96]	; (8006b9c <_Balloc+0x7c>)
 8006b3a:	2166      	movs	r1, #102	; 0x66
 8006b3c:	f7ff fc36 	bl	80063ac <__assert_func>
 8006b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b44:	6006      	str	r6, [r0, #0]
 8006b46:	60c6      	str	r6, [r0, #12]
 8006b48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b4a:	68f3      	ldr	r3, [r6, #12]
 8006b4c:	b183      	cbz	r3, 8006b70 <_Balloc+0x50>
 8006b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b56:	b9b8      	cbnz	r0, 8006b88 <_Balloc+0x68>
 8006b58:	2101      	movs	r1, #1
 8006b5a:	fa01 f605 	lsl.w	r6, r1, r5
 8006b5e:	1d72      	adds	r2, r6, #5
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fc9d 	bl	80074a2 <_calloc_r>
 8006b68:	b160      	cbz	r0, 8006b84 <_Balloc+0x64>
 8006b6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b6e:	e00e      	b.n	8006b8e <_Balloc+0x6e>
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	2104      	movs	r1, #4
 8006b74:	4620      	mov	r0, r4
 8006b76:	f000 fc94 	bl	80074a2 <_calloc_r>
 8006b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b7c:	60f0      	str	r0, [r6, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e4      	bne.n	8006b4e <_Balloc+0x2e>
 8006b84:	2000      	movs	r0, #0
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	6802      	ldr	r2, [r0, #0]
 8006b8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b94:	e7f7      	b.n	8006b86 <_Balloc+0x66>
 8006b96:	bf00      	nop
 8006b98:	08009a40 	.word	0x08009a40
 8006b9c:	08009c7c 	.word	0x08009c7c

08006ba0 <_Bfree>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	b976      	cbnz	r6, 8006bc8 <_Bfree+0x28>
 8006baa:	2010      	movs	r0, #16
 8006bac:	f7ff ff9e 	bl	8006aec <malloc>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6268      	str	r0, [r5, #36]	; 0x24
 8006bb4:	b920      	cbnz	r0, 8006bc0 <_Bfree+0x20>
 8006bb6:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <_Bfree+0x3c>)
 8006bb8:	4809      	ldr	r0, [pc, #36]	; (8006be0 <_Bfree+0x40>)
 8006bba:	218a      	movs	r1, #138	; 0x8a
 8006bbc:	f7ff fbf6 	bl	80063ac <__assert_func>
 8006bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bc4:	6006      	str	r6, [r0, #0]
 8006bc6:	60c6      	str	r6, [r0, #12]
 8006bc8:	b13c      	cbz	r4, 8006bda <_Bfree+0x3a>
 8006bca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bcc:	6862      	ldr	r2, [r4, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bd4:	6021      	str	r1, [r4, #0]
 8006bd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	08009a40 	.word	0x08009a40
 8006be0:	08009c7c 	.word	0x08009c7c

08006be4 <__multadd>:
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	690d      	ldr	r5, [r1, #16]
 8006bea:	4607      	mov	r7, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	461e      	mov	r6, r3
 8006bf0:	f101 0c14 	add.w	ip, r1, #20
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8006bfa:	b299      	uxth	r1, r3
 8006bfc:	fb02 6101 	mla	r1, r2, r1, r6
 8006c00:	0c1e      	lsrs	r6, r3, #16
 8006c02:	0c0b      	lsrs	r3, r1, #16
 8006c04:	fb02 3306 	mla	r3, r2, r6, r3
 8006c08:	b289      	uxth	r1, r1
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c10:	4285      	cmp	r5, r0
 8006c12:	f84c 1b04 	str.w	r1, [ip], #4
 8006c16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c1a:	dcec      	bgt.n	8006bf6 <__multadd+0x12>
 8006c1c:	b30e      	cbz	r6, 8006c62 <__multadd+0x7e>
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc19      	bgt.n	8006c58 <__multadd+0x74>
 8006c24:	6861      	ldr	r1, [r4, #4]
 8006c26:	4638      	mov	r0, r7
 8006c28:	3101      	adds	r1, #1
 8006c2a:	f7ff ff79 	bl	8006b20 <_Balloc>
 8006c2e:	4680      	mov	r8, r0
 8006c30:	b928      	cbnz	r0, 8006c3e <__multadd+0x5a>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <__multadd+0x84>)
 8006c36:	480d      	ldr	r0, [pc, #52]	; (8006c6c <__multadd+0x88>)
 8006c38:	21b5      	movs	r1, #181	; 0xb5
 8006c3a:	f7ff fbb7 	bl	80063ac <__assert_func>
 8006c3e:	6922      	ldr	r2, [r4, #16]
 8006c40:	3202      	adds	r2, #2
 8006c42:	f104 010c 	add.w	r1, r4, #12
 8006c46:	0092      	lsls	r2, r2, #2
 8006c48:	300c      	adds	r0, #12
 8006c4a:	f7fe fc61 	bl	8005510 <memcpy>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7ff ffa5 	bl	8006ba0 <_Bfree>
 8006c56:	4644      	mov	r4, r8
 8006c58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c5c:	3501      	adds	r5, #1
 8006c5e:	615e      	str	r6, [r3, #20]
 8006c60:	6125      	str	r5, [r4, #16]
 8006c62:	4620      	mov	r0, r4
 8006c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c68:	08009bf1 	.word	0x08009bf1
 8006c6c:	08009c7c 	.word	0x08009c7c

08006c70 <__s2b>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	4615      	mov	r5, r2
 8006c78:	461f      	mov	r7, r3
 8006c7a:	2209      	movs	r2, #9
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	4606      	mov	r6, r0
 8006c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c84:	2100      	movs	r1, #0
 8006c86:	2201      	movs	r2, #1
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	db09      	blt.n	8006ca0 <__s2b+0x30>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff ff47 	bl	8006b20 <_Balloc>
 8006c92:	b940      	cbnz	r0, 8006ca6 <__s2b+0x36>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <__s2b+0x8c>)
 8006c98:	4819      	ldr	r0, [pc, #100]	; (8006d00 <__s2b+0x90>)
 8006c9a:	21ce      	movs	r1, #206	; 0xce
 8006c9c:	f7ff fb86 	bl	80063ac <__assert_func>
 8006ca0:	0052      	lsls	r2, r2, #1
 8006ca2:	3101      	adds	r1, #1
 8006ca4:	e7f0      	b.n	8006c88 <__s2b+0x18>
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	6143      	str	r3, [r0, #20]
 8006caa:	2d09      	cmp	r5, #9
 8006cac:	f04f 0301 	mov.w	r3, #1
 8006cb0:	6103      	str	r3, [r0, #16]
 8006cb2:	dd16      	ble.n	8006ce2 <__s2b+0x72>
 8006cb4:	f104 0909 	add.w	r9, r4, #9
 8006cb8:	46c8      	mov	r8, r9
 8006cba:	442c      	add	r4, r5
 8006cbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	3b30      	subs	r3, #48	; 0x30
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff8c 	bl	8006be4 <__multadd>
 8006ccc:	45a0      	cmp	r8, r4
 8006cce:	d1f5      	bne.n	8006cbc <__s2b+0x4c>
 8006cd0:	f1a5 0408 	sub.w	r4, r5, #8
 8006cd4:	444c      	add	r4, r9
 8006cd6:	1b2d      	subs	r5, r5, r4
 8006cd8:	1963      	adds	r3, r4, r5
 8006cda:	42bb      	cmp	r3, r7
 8006cdc:	db04      	blt.n	8006ce8 <__s2b+0x78>
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	340a      	adds	r4, #10
 8006ce4:	2509      	movs	r5, #9
 8006ce6:	e7f6      	b.n	8006cd6 <__s2b+0x66>
 8006ce8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cec:	4601      	mov	r1, r0
 8006cee:	3b30      	subs	r3, #48	; 0x30
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff ff76 	bl	8006be4 <__multadd>
 8006cf8:	e7ee      	b.n	8006cd8 <__s2b+0x68>
 8006cfa:	bf00      	nop
 8006cfc:	08009bf1 	.word	0x08009bf1
 8006d00:	08009c7c 	.word	0x08009c7c

08006d04 <__hi0bits>:
 8006d04:	0c03      	lsrs	r3, r0, #16
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	b9d3      	cbnz	r3, 8006d40 <__hi0bits+0x3c>
 8006d0a:	0400      	lsls	r0, r0, #16
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d12:	bf04      	itt	eq
 8006d14:	0200      	lsleq	r0, r0, #8
 8006d16:	3308      	addeq	r3, #8
 8006d18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d1c:	bf04      	itt	eq
 8006d1e:	0100      	lsleq	r0, r0, #4
 8006d20:	3304      	addeq	r3, #4
 8006d22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d26:	bf04      	itt	eq
 8006d28:	0080      	lsleq	r0, r0, #2
 8006d2a:	3302      	addeq	r3, #2
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	db05      	blt.n	8006d3c <__hi0bits+0x38>
 8006d30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d34:	f103 0301 	add.w	r3, r3, #1
 8006d38:	bf08      	it	eq
 8006d3a:	2320      	moveq	r3, #32
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	4770      	bx	lr
 8006d40:	2300      	movs	r3, #0
 8006d42:	e7e4      	b.n	8006d0e <__hi0bits+0xa>

08006d44 <__lo0bits>:
 8006d44:	6803      	ldr	r3, [r0, #0]
 8006d46:	f013 0207 	ands.w	r2, r3, #7
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	d00b      	beq.n	8006d66 <__lo0bits+0x22>
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d423      	bmi.n	8006d9a <__lo0bits+0x56>
 8006d52:	0798      	lsls	r0, r3, #30
 8006d54:	bf49      	itett	mi
 8006d56:	085b      	lsrmi	r3, r3, #1
 8006d58:	089b      	lsrpl	r3, r3, #2
 8006d5a:	2001      	movmi	r0, #1
 8006d5c:	600b      	strmi	r3, [r1, #0]
 8006d5e:	bf5c      	itt	pl
 8006d60:	600b      	strpl	r3, [r1, #0]
 8006d62:	2002      	movpl	r0, #2
 8006d64:	4770      	bx	lr
 8006d66:	b298      	uxth	r0, r3
 8006d68:	b9a8      	cbnz	r0, 8006d96 <__lo0bits+0x52>
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	2010      	movs	r0, #16
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	b90a      	cbnz	r2, 8006d76 <__lo0bits+0x32>
 8006d72:	3008      	adds	r0, #8
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	071a      	lsls	r2, r3, #28
 8006d78:	bf04      	itt	eq
 8006d7a:	091b      	lsreq	r3, r3, #4
 8006d7c:	3004      	addeq	r0, #4
 8006d7e:	079a      	lsls	r2, r3, #30
 8006d80:	bf04      	itt	eq
 8006d82:	089b      	lsreq	r3, r3, #2
 8006d84:	3002      	addeq	r0, #2
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d403      	bmi.n	8006d92 <__lo0bits+0x4e>
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	f100 0001 	add.w	r0, r0, #1
 8006d90:	d005      	beq.n	8006d9e <__lo0bits+0x5a>
 8006d92:	600b      	str	r3, [r1, #0]
 8006d94:	4770      	bx	lr
 8006d96:	4610      	mov	r0, r2
 8006d98:	e7e9      	b.n	8006d6e <__lo0bits+0x2a>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	4770      	bx	lr
 8006d9e:	2020      	movs	r0, #32
 8006da0:	4770      	bx	lr
	...

08006da4 <__i2b>:
 8006da4:	b510      	push	{r4, lr}
 8006da6:	460c      	mov	r4, r1
 8006da8:	2101      	movs	r1, #1
 8006daa:	f7ff feb9 	bl	8006b20 <_Balloc>
 8006dae:	4602      	mov	r2, r0
 8006db0:	b928      	cbnz	r0, 8006dbe <__i2b+0x1a>
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <__i2b+0x24>)
 8006db4:	4805      	ldr	r0, [pc, #20]	; (8006dcc <__i2b+0x28>)
 8006db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dba:	f7ff faf7 	bl	80063ac <__assert_func>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	6144      	str	r4, [r0, #20]
 8006dc2:	6103      	str	r3, [r0, #16]
 8006dc4:	bd10      	pop	{r4, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08009bf1 	.word	0x08009bf1
 8006dcc:	08009c7c 	.word	0x08009c7c

08006dd0 <__multiply>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	4691      	mov	r9, r2
 8006dd6:	690a      	ldr	r2, [r1, #16]
 8006dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	bfb8      	it	lt
 8006de0:	460b      	movlt	r3, r1
 8006de2:	460c      	mov	r4, r1
 8006de4:	bfbc      	itt	lt
 8006de6:	464c      	movlt	r4, r9
 8006de8:	4699      	movlt	r9, r3
 8006dea:	6927      	ldr	r7, [r4, #16]
 8006dec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	6861      	ldr	r1, [r4, #4]
 8006df4:	eb07 060a 	add.w	r6, r7, sl
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	bfb8      	it	lt
 8006dfe:	3101      	addlt	r1, #1
 8006e00:	f7ff fe8e 	bl	8006b20 <_Balloc>
 8006e04:	b930      	cbnz	r0, 8006e14 <__multiply+0x44>
 8006e06:	4602      	mov	r2, r0
 8006e08:	4b44      	ldr	r3, [pc, #272]	; (8006f1c <__multiply+0x14c>)
 8006e0a:	4845      	ldr	r0, [pc, #276]	; (8006f20 <__multiply+0x150>)
 8006e0c:	f240 115d 	movw	r1, #349	; 0x15d
 8006e10:	f7ff facc 	bl	80063ac <__assert_func>
 8006e14:	f100 0514 	add.w	r5, r0, #20
 8006e18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4543      	cmp	r3, r8
 8006e22:	d321      	bcc.n	8006e68 <__multiply+0x98>
 8006e24:	f104 0314 	add.w	r3, r4, #20
 8006e28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e2c:	f109 0314 	add.w	r3, r9, #20
 8006e30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e34:	9202      	str	r2, [sp, #8]
 8006e36:	1b3a      	subs	r2, r7, r4
 8006e38:	3a15      	subs	r2, #21
 8006e3a:	f022 0203 	bic.w	r2, r2, #3
 8006e3e:	3204      	adds	r2, #4
 8006e40:	f104 0115 	add.w	r1, r4, #21
 8006e44:	428f      	cmp	r7, r1
 8006e46:	bf38      	it	cc
 8006e48:	2204      	movcc	r2, #4
 8006e4a:	9201      	str	r2, [sp, #4]
 8006e4c:	9a02      	ldr	r2, [sp, #8]
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d80c      	bhi.n	8006e6e <__multiply+0x9e>
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	dd03      	ble.n	8006e60 <__multiply+0x90>
 8006e58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d05a      	beq.n	8006f16 <__multiply+0x146>
 8006e60:	6106      	str	r6, [r0, #16]
 8006e62:	b005      	add	sp, #20
 8006e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	f843 2b04 	str.w	r2, [r3], #4
 8006e6c:	e7d8      	b.n	8006e20 <__multiply+0x50>
 8006e6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e72:	f1ba 0f00 	cmp.w	sl, #0
 8006e76:	d024      	beq.n	8006ec2 <__multiply+0xf2>
 8006e78:	f104 0e14 	add.w	lr, r4, #20
 8006e7c:	46a9      	mov	r9, r5
 8006e7e:	f04f 0c00 	mov.w	ip, #0
 8006e82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e86:	f8d9 1000 	ldr.w	r1, [r9]
 8006e8a:	fa1f fb82 	uxth.w	fp, r2
 8006e8e:	b289      	uxth	r1, r1
 8006e90:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e98:	f8d9 2000 	ldr.w	r2, [r9]
 8006e9c:	4461      	add	r1, ip
 8006e9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ea2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ea6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006eaa:	b289      	uxth	r1, r1
 8006eac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006eb0:	4577      	cmp	r7, lr
 8006eb2:	f849 1b04 	str.w	r1, [r9], #4
 8006eb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eba:	d8e2      	bhi.n	8006e82 <__multiply+0xb2>
 8006ebc:	9a01      	ldr	r2, [sp, #4]
 8006ebe:	f845 c002 	str.w	ip, [r5, r2]
 8006ec2:	9a03      	ldr	r2, [sp, #12]
 8006ec4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	d020      	beq.n	8006f12 <__multiply+0x142>
 8006ed0:	6829      	ldr	r1, [r5, #0]
 8006ed2:	f104 0c14 	add.w	ip, r4, #20
 8006ed6:	46ae      	mov	lr, r5
 8006ed8:	f04f 0a00 	mov.w	sl, #0
 8006edc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ee0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ee4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ee8:	4492      	add	sl, r2
 8006eea:	b289      	uxth	r1, r1
 8006eec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ef0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ef4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ef8:	f8be 1000 	ldrh.w	r1, [lr]
 8006efc:	0c12      	lsrs	r2, r2, #16
 8006efe:	fb09 1102 	mla	r1, r9, r2, r1
 8006f02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f06:	4567      	cmp	r7, ip
 8006f08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f0c:	d8e6      	bhi.n	8006edc <__multiply+0x10c>
 8006f0e:	9a01      	ldr	r2, [sp, #4]
 8006f10:	50a9      	str	r1, [r5, r2]
 8006f12:	3504      	adds	r5, #4
 8006f14:	e79a      	b.n	8006e4c <__multiply+0x7c>
 8006f16:	3e01      	subs	r6, #1
 8006f18:	e79c      	b.n	8006e54 <__multiply+0x84>
 8006f1a:	bf00      	nop
 8006f1c:	08009bf1 	.word	0x08009bf1
 8006f20:	08009c7c 	.word	0x08009c7c

08006f24 <__pow5mult>:
 8006f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	4615      	mov	r5, r2
 8006f2a:	f012 0203 	ands.w	r2, r2, #3
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460f      	mov	r7, r1
 8006f32:	d007      	beq.n	8006f44 <__pow5mult+0x20>
 8006f34:	4c25      	ldr	r4, [pc, #148]	; (8006fcc <__pow5mult+0xa8>)
 8006f36:	3a01      	subs	r2, #1
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f3e:	f7ff fe51 	bl	8006be4 <__multadd>
 8006f42:	4607      	mov	r7, r0
 8006f44:	10ad      	asrs	r5, r5, #2
 8006f46:	d03d      	beq.n	8006fc4 <__pow5mult+0xa0>
 8006f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f4a:	b97c      	cbnz	r4, 8006f6c <__pow5mult+0x48>
 8006f4c:	2010      	movs	r0, #16
 8006f4e:	f7ff fdcd 	bl	8006aec <malloc>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6270      	str	r0, [r6, #36]	; 0x24
 8006f56:	b928      	cbnz	r0, 8006f64 <__pow5mult+0x40>
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <__pow5mult+0xac>)
 8006f5a:	481e      	ldr	r0, [pc, #120]	; (8006fd4 <__pow5mult+0xb0>)
 8006f5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f60:	f7ff fa24 	bl	80063ac <__assert_func>
 8006f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f68:	6004      	str	r4, [r0, #0]
 8006f6a:	60c4      	str	r4, [r0, #12]
 8006f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f74:	b94c      	cbnz	r4, 8006f8a <__pow5mult+0x66>
 8006f76:	f240 2171 	movw	r1, #625	; 0x271
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff ff12 	bl	8006da4 <__i2b>
 8006f80:	2300      	movs	r3, #0
 8006f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f86:	4604      	mov	r4, r0
 8006f88:	6003      	str	r3, [r0, #0]
 8006f8a:	f04f 0900 	mov.w	r9, #0
 8006f8e:	07eb      	lsls	r3, r5, #31
 8006f90:	d50a      	bpl.n	8006fa8 <__pow5mult+0x84>
 8006f92:	4639      	mov	r1, r7
 8006f94:	4622      	mov	r2, r4
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff ff1a 	bl	8006dd0 <__multiply>
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff fdfd 	bl	8006ba0 <_Bfree>
 8006fa6:	4647      	mov	r7, r8
 8006fa8:	106d      	asrs	r5, r5, #1
 8006faa:	d00b      	beq.n	8006fc4 <__pow5mult+0xa0>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	b938      	cbnz	r0, 8006fc0 <__pow5mult+0x9c>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff ff0b 	bl	8006dd0 <__multiply>
 8006fba:	6020      	str	r0, [r4, #0]
 8006fbc:	f8c0 9000 	str.w	r9, [r0]
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	e7e4      	b.n	8006f8e <__pow5mult+0x6a>
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fca:	bf00      	nop
 8006fcc:	08009dc8 	.word	0x08009dc8
 8006fd0:	08009a40 	.word	0x08009a40
 8006fd4:	08009c7c 	.word	0x08009c7c

08006fd8 <__lshift>:
 8006fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	6849      	ldr	r1, [r1, #4]
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	4607      	mov	r7, r0
 8006fea:	4691      	mov	r9, r2
 8006fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ff0:	f108 0601 	add.w	r6, r8, #1
 8006ff4:	42b3      	cmp	r3, r6
 8006ff6:	db0b      	blt.n	8007010 <__lshift+0x38>
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff fd91 	bl	8006b20 <_Balloc>
 8006ffe:	4605      	mov	r5, r0
 8007000:	b948      	cbnz	r0, 8007016 <__lshift+0x3e>
 8007002:	4602      	mov	r2, r0
 8007004:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <__lshift+0xd8>)
 8007006:	482b      	ldr	r0, [pc, #172]	; (80070b4 <__lshift+0xdc>)
 8007008:	f240 11d9 	movw	r1, #473	; 0x1d9
 800700c:	f7ff f9ce 	bl	80063ac <__assert_func>
 8007010:	3101      	adds	r1, #1
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	e7ee      	b.n	8006ff4 <__lshift+0x1c>
 8007016:	2300      	movs	r3, #0
 8007018:	f100 0114 	add.w	r1, r0, #20
 800701c:	f100 0210 	add.w	r2, r0, #16
 8007020:	4618      	mov	r0, r3
 8007022:	4553      	cmp	r3, sl
 8007024:	db37      	blt.n	8007096 <__lshift+0xbe>
 8007026:	6920      	ldr	r0, [r4, #16]
 8007028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800702c:	f104 0314 	add.w	r3, r4, #20
 8007030:	f019 091f 	ands.w	r9, r9, #31
 8007034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800703c:	d02f      	beq.n	800709e <__lshift+0xc6>
 800703e:	f1c9 0e20 	rsb	lr, r9, #32
 8007042:	468a      	mov	sl, r1
 8007044:	f04f 0c00 	mov.w	ip, #0
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	fa02 f209 	lsl.w	r2, r2, r9
 800704e:	ea42 020c 	orr.w	r2, r2, ip
 8007052:	f84a 2b04 	str.w	r2, [sl], #4
 8007056:	f853 2b04 	ldr.w	r2, [r3], #4
 800705a:	4298      	cmp	r0, r3
 800705c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007060:	d8f2      	bhi.n	8007048 <__lshift+0x70>
 8007062:	1b03      	subs	r3, r0, r4
 8007064:	3b15      	subs	r3, #21
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	3304      	adds	r3, #4
 800706c:	f104 0215 	add.w	r2, r4, #21
 8007070:	4290      	cmp	r0, r2
 8007072:	bf38      	it	cc
 8007074:	2304      	movcc	r3, #4
 8007076:	f841 c003 	str.w	ip, [r1, r3]
 800707a:	f1bc 0f00 	cmp.w	ip, #0
 800707e:	d001      	beq.n	8007084 <__lshift+0xac>
 8007080:	f108 0602 	add.w	r6, r8, #2
 8007084:	3e01      	subs	r6, #1
 8007086:	4638      	mov	r0, r7
 8007088:	612e      	str	r6, [r5, #16]
 800708a:	4621      	mov	r1, r4
 800708c:	f7ff fd88 	bl	8006ba0 <_Bfree>
 8007090:	4628      	mov	r0, r5
 8007092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007096:	f842 0f04 	str.w	r0, [r2, #4]!
 800709a:	3301      	adds	r3, #1
 800709c:	e7c1      	b.n	8007022 <__lshift+0x4a>
 800709e:	3904      	subs	r1, #4
 80070a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80070a8:	4298      	cmp	r0, r3
 80070aa:	d8f9      	bhi.n	80070a0 <__lshift+0xc8>
 80070ac:	e7ea      	b.n	8007084 <__lshift+0xac>
 80070ae:	bf00      	nop
 80070b0:	08009bf1 	.word	0x08009bf1
 80070b4:	08009c7c 	.word	0x08009c7c

080070b8 <__mcmp>:
 80070b8:	b530      	push	{r4, r5, lr}
 80070ba:	6902      	ldr	r2, [r0, #16]
 80070bc:	690c      	ldr	r4, [r1, #16]
 80070be:	1b12      	subs	r2, r2, r4
 80070c0:	d10e      	bne.n	80070e0 <__mcmp+0x28>
 80070c2:	f100 0314 	add.w	r3, r0, #20
 80070c6:	3114      	adds	r1, #20
 80070c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070d8:	42a5      	cmp	r5, r4
 80070da:	d003      	beq.n	80070e4 <__mcmp+0x2c>
 80070dc:	d305      	bcc.n	80070ea <__mcmp+0x32>
 80070de:	2201      	movs	r2, #1
 80070e0:	4610      	mov	r0, r2
 80070e2:	bd30      	pop	{r4, r5, pc}
 80070e4:	4283      	cmp	r3, r0
 80070e6:	d3f3      	bcc.n	80070d0 <__mcmp+0x18>
 80070e8:	e7fa      	b.n	80070e0 <__mcmp+0x28>
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	e7f7      	b.n	80070e0 <__mcmp+0x28>

080070f0 <__mdiff>:
 80070f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f4:	460c      	mov	r4, r1
 80070f6:	4606      	mov	r6, r0
 80070f8:	4611      	mov	r1, r2
 80070fa:	4620      	mov	r0, r4
 80070fc:	4690      	mov	r8, r2
 80070fe:	f7ff ffdb 	bl	80070b8 <__mcmp>
 8007102:	1e05      	subs	r5, r0, #0
 8007104:	d110      	bne.n	8007128 <__mdiff+0x38>
 8007106:	4629      	mov	r1, r5
 8007108:	4630      	mov	r0, r6
 800710a:	f7ff fd09 	bl	8006b20 <_Balloc>
 800710e:	b930      	cbnz	r0, 800711e <__mdiff+0x2e>
 8007110:	4b3a      	ldr	r3, [pc, #232]	; (80071fc <__mdiff+0x10c>)
 8007112:	4602      	mov	r2, r0
 8007114:	f240 2132 	movw	r1, #562	; 0x232
 8007118:	4839      	ldr	r0, [pc, #228]	; (8007200 <__mdiff+0x110>)
 800711a:	f7ff f947 	bl	80063ac <__assert_func>
 800711e:	2301      	movs	r3, #1
 8007120:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007128:	bfa4      	itt	ge
 800712a:	4643      	movge	r3, r8
 800712c:	46a0      	movge	r8, r4
 800712e:	4630      	mov	r0, r6
 8007130:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007134:	bfa6      	itte	ge
 8007136:	461c      	movge	r4, r3
 8007138:	2500      	movge	r5, #0
 800713a:	2501      	movlt	r5, #1
 800713c:	f7ff fcf0 	bl	8006b20 <_Balloc>
 8007140:	b920      	cbnz	r0, 800714c <__mdiff+0x5c>
 8007142:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <__mdiff+0x10c>)
 8007144:	4602      	mov	r2, r0
 8007146:	f44f 7110 	mov.w	r1, #576	; 0x240
 800714a:	e7e5      	b.n	8007118 <__mdiff+0x28>
 800714c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007150:	6926      	ldr	r6, [r4, #16]
 8007152:	60c5      	str	r5, [r0, #12]
 8007154:	f104 0914 	add.w	r9, r4, #20
 8007158:	f108 0514 	add.w	r5, r8, #20
 800715c:	f100 0e14 	add.w	lr, r0, #20
 8007160:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007164:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007168:	f108 0210 	add.w	r2, r8, #16
 800716c:	46f2      	mov	sl, lr
 800716e:	2100      	movs	r1, #0
 8007170:	f859 3b04 	ldr.w	r3, [r9], #4
 8007174:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007178:	fa1f f883 	uxth.w	r8, r3
 800717c:	fa11 f18b 	uxtah	r1, r1, fp
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	eba1 0808 	sub.w	r8, r1, r8
 8007186:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800718a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800718e:	fa1f f888 	uxth.w	r8, r8
 8007192:	1419      	asrs	r1, r3, #16
 8007194:	454e      	cmp	r6, r9
 8007196:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800719a:	f84a 3b04 	str.w	r3, [sl], #4
 800719e:	d8e7      	bhi.n	8007170 <__mdiff+0x80>
 80071a0:	1b33      	subs	r3, r6, r4
 80071a2:	3b15      	subs	r3, #21
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	3304      	adds	r3, #4
 80071aa:	3415      	adds	r4, #21
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	bf38      	it	cc
 80071b0:	2304      	movcc	r3, #4
 80071b2:	441d      	add	r5, r3
 80071b4:	4473      	add	r3, lr
 80071b6:	469e      	mov	lr, r3
 80071b8:	462e      	mov	r6, r5
 80071ba:	4566      	cmp	r6, ip
 80071bc:	d30e      	bcc.n	80071dc <__mdiff+0xec>
 80071be:	f10c 0203 	add.w	r2, ip, #3
 80071c2:	1b52      	subs	r2, r2, r5
 80071c4:	f022 0203 	bic.w	r2, r2, #3
 80071c8:	3d03      	subs	r5, #3
 80071ca:	45ac      	cmp	ip, r5
 80071cc:	bf38      	it	cc
 80071ce:	2200      	movcc	r2, #0
 80071d0:	441a      	add	r2, r3
 80071d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071d6:	b17b      	cbz	r3, 80071f8 <__mdiff+0x108>
 80071d8:	6107      	str	r7, [r0, #16]
 80071da:	e7a3      	b.n	8007124 <__mdiff+0x34>
 80071dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80071e0:	fa11 f288 	uxtah	r2, r1, r8
 80071e4:	1414      	asrs	r4, r2, #16
 80071e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071ea:	b292      	uxth	r2, r2
 80071ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071f0:	f84e 2b04 	str.w	r2, [lr], #4
 80071f4:	1421      	asrs	r1, r4, #16
 80071f6:	e7e0      	b.n	80071ba <__mdiff+0xca>
 80071f8:	3f01      	subs	r7, #1
 80071fa:	e7ea      	b.n	80071d2 <__mdiff+0xe2>
 80071fc:	08009bf1 	.word	0x08009bf1
 8007200:	08009c7c 	.word	0x08009c7c

08007204 <__ulp>:
 8007204:	b082      	sub	sp, #8
 8007206:	ed8d 0b00 	vstr	d0, [sp]
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	4912      	ldr	r1, [pc, #72]	; (8007258 <__ulp+0x54>)
 800720e:	4019      	ands	r1, r3
 8007210:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007214:	2900      	cmp	r1, #0
 8007216:	dd05      	ble.n	8007224 <__ulp+0x20>
 8007218:	2200      	movs	r2, #0
 800721a:	460b      	mov	r3, r1
 800721c:	ec43 2b10 	vmov	d0, r2, r3
 8007220:	b002      	add	sp, #8
 8007222:	4770      	bx	lr
 8007224:	4249      	negs	r1, r1
 8007226:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800722a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	da04      	bge.n	8007242 <__ulp+0x3e>
 8007238:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800723c:	fa41 f300 	asr.w	r3, r1, r0
 8007240:	e7ec      	b.n	800721c <__ulp+0x18>
 8007242:	f1a0 0114 	sub.w	r1, r0, #20
 8007246:	291e      	cmp	r1, #30
 8007248:	bfda      	itte	le
 800724a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800724e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007252:	2101      	movgt	r1, #1
 8007254:	460a      	mov	r2, r1
 8007256:	e7e1      	b.n	800721c <__ulp+0x18>
 8007258:	7ff00000 	.word	0x7ff00000

0800725c <__b2d>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	6905      	ldr	r5, [r0, #16]
 8007260:	f100 0714 	add.w	r7, r0, #20
 8007264:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007268:	1f2e      	subs	r6, r5, #4
 800726a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800726e:	4620      	mov	r0, r4
 8007270:	f7ff fd48 	bl	8006d04 <__hi0bits>
 8007274:	f1c0 0320 	rsb	r3, r0, #32
 8007278:	280a      	cmp	r0, #10
 800727a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80072f8 <__b2d+0x9c>
 800727e:	600b      	str	r3, [r1, #0]
 8007280:	dc14      	bgt.n	80072ac <__b2d+0x50>
 8007282:	f1c0 0e0b 	rsb	lr, r0, #11
 8007286:	fa24 f10e 	lsr.w	r1, r4, lr
 800728a:	42b7      	cmp	r7, r6
 800728c:	ea41 030c 	orr.w	r3, r1, ip
 8007290:	bf34      	ite	cc
 8007292:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007296:	2100      	movcs	r1, #0
 8007298:	3015      	adds	r0, #21
 800729a:	fa04 f000 	lsl.w	r0, r4, r0
 800729e:	fa21 f10e 	lsr.w	r1, r1, lr
 80072a2:	ea40 0201 	orr.w	r2, r0, r1
 80072a6:	ec43 2b10 	vmov	d0, r2, r3
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ac:	42b7      	cmp	r7, r6
 80072ae:	bf3a      	itte	cc
 80072b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80072b8:	2100      	movcs	r1, #0
 80072ba:	380b      	subs	r0, #11
 80072bc:	d017      	beq.n	80072ee <__b2d+0x92>
 80072be:	f1c0 0c20 	rsb	ip, r0, #32
 80072c2:	fa04 f500 	lsl.w	r5, r4, r0
 80072c6:	42be      	cmp	r6, r7
 80072c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80072cc:	ea45 0504 	orr.w	r5, r5, r4
 80072d0:	bf8c      	ite	hi
 80072d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80072d6:	2400      	movls	r4, #0
 80072d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80072dc:	fa01 f000 	lsl.w	r0, r1, r0
 80072e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80072e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072e8:	ea40 0204 	orr.w	r2, r0, r4
 80072ec:	e7db      	b.n	80072a6 <__b2d+0x4a>
 80072ee:	ea44 030c 	orr.w	r3, r4, ip
 80072f2:	460a      	mov	r2, r1
 80072f4:	e7d7      	b.n	80072a6 <__b2d+0x4a>
 80072f6:	bf00      	nop
 80072f8:	3ff00000 	.word	0x3ff00000

080072fc <__d2b>:
 80072fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007300:	4689      	mov	r9, r1
 8007302:	2101      	movs	r1, #1
 8007304:	ec57 6b10 	vmov	r6, r7, d0
 8007308:	4690      	mov	r8, r2
 800730a:	f7ff fc09 	bl	8006b20 <_Balloc>
 800730e:	4604      	mov	r4, r0
 8007310:	b930      	cbnz	r0, 8007320 <__d2b+0x24>
 8007312:	4602      	mov	r2, r0
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <__d2b+0xb0>)
 8007316:	4826      	ldr	r0, [pc, #152]	; (80073b0 <__d2b+0xb4>)
 8007318:	f240 310a 	movw	r1, #778	; 0x30a
 800731c:	f7ff f846 	bl	80063ac <__assert_func>
 8007320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007328:	bb35      	cbnz	r5, 8007378 <__d2b+0x7c>
 800732a:	2e00      	cmp	r6, #0
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	d028      	beq.n	8007382 <__d2b+0x86>
 8007330:	4668      	mov	r0, sp
 8007332:	9600      	str	r6, [sp, #0]
 8007334:	f7ff fd06 	bl	8006d44 <__lo0bits>
 8007338:	9900      	ldr	r1, [sp, #0]
 800733a:	b300      	cbz	r0, 800737e <__d2b+0x82>
 800733c:	9a01      	ldr	r2, [sp, #4]
 800733e:	f1c0 0320 	rsb	r3, r0, #32
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	430b      	orrs	r3, r1
 8007348:	40c2      	lsrs	r2, r0
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	9201      	str	r2, [sp, #4]
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	61a3      	str	r3, [r4, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	bf14      	ite	ne
 8007356:	2202      	movne	r2, #2
 8007358:	2201      	moveq	r2, #1
 800735a:	6122      	str	r2, [r4, #16]
 800735c:	b1d5      	cbz	r5, 8007394 <__d2b+0x98>
 800735e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007362:	4405      	add	r5, r0
 8007364:	f8c9 5000 	str.w	r5, [r9]
 8007368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800736c:	f8c8 0000 	str.w	r0, [r8]
 8007370:	4620      	mov	r0, r4
 8007372:	b003      	add	sp, #12
 8007374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800737c:	e7d5      	b.n	800732a <__d2b+0x2e>
 800737e:	6161      	str	r1, [r4, #20]
 8007380:	e7e5      	b.n	800734e <__d2b+0x52>
 8007382:	a801      	add	r0, sp, #4
 8007384:	f7ff fcde 	bl	8006d44 <__lo0bits>
 8007388:	9b01      	ldr	r3, [sp, #4]
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	2201      	movs	r2, #1
 800738e:	6122      	str	r2, [r4, #16]
 8007390:	3020      	adds	r0, #32
 8007392:	e7e3      	b.n	800735c <__d2b+0x60>
 8007394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800739c:	f8c9 0000 	str.w	r0, [r9]
 80073a0:	6918      	ldr	r0, [r3, #16]
 80073a2:	f7ff fcaf 	bl	8006d04 <__hi0bits>
 80073a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073aa:	e7df      	b.n	800736c <__d2b+0x70>
 80073ac:	08009bf1 	.word	0x08009bf1
 80073b0:	08009c7c 	.word	0x08009c7c

080073b4 <__ratio>:
 80073b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	4688      	mov	r8, r1
 80073ba:	4669      	mov	r1, sp
 80073bc:	4681      	mov	r9, r0
 80073be:	f7ff ff4d 	bl	800725c <__b2d>
 80073c2:	a901      	add	r1, sp, #4
 80073c4:	4640      	mov	r0, r8
 80073c6:	ec55 4b10 	vmov	r4, r5, d0
 80073ca:	f7ff ff47 	bl	800725c <__b2d>
 80073ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073d6:	eba3 0c02 	sub.w	ip, r3, r2
 80073da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073e4:	ec51 0b10 	vmov	r0, r1, d0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfd6      	itet	le
 80073ec:	460a      	movle	r2, r1
 80073ee:	462a      	movgt	r2, r5
 80073f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073f4:	468b      	mov	fp, r1
 80073f6:	462f      	mov	r7, r5
 80073f8:	bfd4      	ite	le
 80073fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80073fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007402:	4620      	mov	r0, r4
 8007404:	ee10 2a10 	vmov	r2, s0
 8007408:	465b      	mov	r3, fp
 800740a:	4639      	mov	r1, r7
 800740c:	f7f9 fa1e 	bl	800084c <__aeabi_ddiv>
 8007410:	ec41 0b10 	vmov	d0, r0, r1
 8007414:	b003      	add	sp, #12
 8007416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800741a <__copybits>:
 800741a:	3901      	subs	r1, #1
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	1149      	asrs	r1, r1, #5
 8007420:	6914      	ldr	r4, [r2, #16]
 8007422:	3101      	adds	r1, #1
 8007424:	f102 0314 	add.w	r3, r2, #20
 8007428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800742c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007430:	1f05      	subs	r5, r0, #4
 8007432:	42a3      	cmp	r3, r4
 8007434:	d30c      	bcc.n	8007450 <__copybits+0x36>
 8007436:	1aa3      	subs	r3, r4, r2
 8007438:	3b11      	subs	r3, #17
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	3211      	adds	r2, #17
 8007440:	42a2      	cmp	r2, r4
 8007442:	bf88      	it	hi
 8007444:	2300      	movhi	r3, #0
 8007446:	4418      	add	r0, r3
 8007448:	2300      	movs	r3, #0
 800744a:	4288      	cmp	r0, r1
 800744c:	d305      	bcc.n	800745a <__copybits+0x40>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f853 6b04 	ldr.w	r6, [r3], #4
 8007454:	f845 6f04 	str.w	r6, [r5, #4]!
 8007458:	e7eb      	b.n	8007432 <__copybits+0x18>
 800745a:	f840 3b04 	str.w	r3, [r0], #4
 800745e:	e7f4      	b.n	800744a <__copybits+0x30>

08007460 <__any_on>:
 8007460:	f100 0214 	add.w	r2, r0, #20
 8007464:	6900      	ldr	r0, [r0, #16]
 8007466:	114b      	asrs	r3, r1, #5
 8007468:	4298      	cmp	r0, r3
 800746a:	b510      	push	{r4, lr}
 800746c:	db11      	blt.n	8007492 <__any_on+0x32>
 800746e:	dd0a      	ble.n	8007486 <__any_on+0x26>
 8007470:	f011 011f 	ands.w	r1, r1, #31
 8007474:	d007      	beq.n	8007486 <__any_on+0x26>
 8007476:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800747a:	fa24 f001 	lsr.w	r0, r4, r1
 800747e:	fa00 f101 	lsl.w	r1, r0, r1
 8007482:	428c      	cmp	r4, r1
 8007484:	d10b      	bne.n	800749e <__any_on+0x3e>
 8007486:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800748a:	4293      	cmp	r3, r2
 800748c:	d803      	bhi.n	8007496 <__any_on+0x36>
 800748e:	2000      	movs	r0, #0
 8007490:	bd10      	pop	{r4, pc}
 8007492:	4603      	mov	r3, r0
 8007494:	e7f7      	b.n	8007486 <__any_on+0x26>
 8007496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800749a:	2900      	cmp	r1, #0
 800749c:	d0f5      	beq.n	800748a <__any_on+0x2a>
 800749e:	2001      	movs	r0, #1
 80074a0:	e7f6      	b.n	8007490 <__any_on+0x30>

080074a2 <_calloc_r>:
 80074a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074a4:	fba1 2402 	umull	r2, r4, r1, r2
 80074a8:	b94c      	cbnz	r4, 80074be <_calloc_r+0x1c>
 80074aa:	4611      	mov	r1, r2
 80074ac:	9201      	str	r2, [sp, #4]
 80074ae:	f000 f87b 	bl	80075a8 <_malloc_r>
 80074b2:	9a01      	ldr	r2, [sp, #4]
 80074b4:	4605      	mov	r5, r0
 80074b6:	b930      	cbnz	r0, 80074c6 <_calloc_r+0x24>
 80074b8:	4628      	mov	r0, r5
 80074ba:	b003      	add	sp, #12
 80074bc:	bd30      	pop	{r4, r5, pc}
 80074be:	220c      	movs	r2, #12
 80074c0:	6002      	str	r2, [r0, #0]
 80074c2:	2500      	movs	r5, #0
 80074c4:	e7f8      	b.n	80074b8 <_calloc_r+0x16>
 80074c6:	4621      	mov	r1, r4
 80074c8:	f7fe f830 	bl	800552c <memset>
 80074cc:	e7f4      	b.n	80074b8 <_calloc_r+0x16>
	...

080074d0 <_free_r>:
 80074d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074d2:	2900      	cmp	r1, #0
 80074d4:	d044      	beq.n	8007560 <_free_r+0x90>
 80074d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074da:	9001      	str	r0, [sp, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f1a1 0404 	sub.w	r4, r1, #4
 80074e2:	bfb8      	it	lt
 80074e4:	18e4      	addlt	r4, r4, r3
 80074e6:	f001 f85b 	bl	80085a0 <__malloc_lock>
 80074ea:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <_free_r+0x94>)
 80074ec:	9801      	ldr	r0, [sp, #4]
 80074ee:	6813      	ldr	r3, [r2, #0]
 80074f0:	b933      	cbnz	r3, 8007500 <_free_r+0x30>
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	6014      	str	r4, [r2, #0]
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074fc:	f001 b856 	b.w	80085ac <__malloc_unlock>
 8007500:	42a3      	cmp	r3, r4
 8007502:	d908      	bls.n	8007516 <_free_r+0x46>
 8007504:	6825      	ldr	r5, [r4, #0]
 8007506:	1961      	adds	r1, r4, r5
 8007508:	428b      	cmp	r3, r1
 800750a:	bf01      	itttt	eq
 800750c:	6819      	ldreq	r1, [r3, #0]
 800750e:	685b      	ldreq	r3, [r3, #4]
 8007510:	1949      	addeq	r1, r1, r5
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	e7ed      	b.n	80074f2 <_free_r+0x22>
 8007516:	461a      	mov	r2, r3
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b10b      	cbz	r3, 8007520 <_free_r+0x50>
 800751c:	42a3      	cmp	r3, r4
 800751e:	d9fa      	bls.n	8007516 <_free_r+0x46>
 8007520:	6811      	ldr	r1, [r2, #0]
 8007522:	1855      	adds	r5, r2, r1
 8007524:	42a5      	cmp	r5, r4
 8007526:	d10b      	bne.n	8007540 <_free_r+0x70>
 8007528:	6824      	ldr	r4, [r4, #0]
 800752a:	4421      	add	r1, r4
 800752c:	1854      	adds	r4, r2, r1
 800752e:	42a3      	cmp	r3, r4
 8007530:	6011      	str	r1, [r2, #0]
 8007532:	d1e0      	bne.n	80074f6 <_free_r+0x26>
 8007534:	681c      	ldr	r4, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	6053      	str	r3, [r2, #4]
 800753a:	4421      	add	r1, r4
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	e7da      	b.n	80074f6 <_free_r+0x26>
 8007540:	d902      	bls.n	8007548 <_free_r+0x78>
 8007542:	230c      	movs	r3, #12
 8007544:	6003      	str	r3, [r0, #0]
 8007546:	e7d6      	b.n	80074f6 <_free_r+0x26>
 8007548:	6825      	ldr	r5, [r4, #0]
 800754a:	1961      	adds	r1, r4, r5
 800754c:	428b      	cmp	r3, r1
 800754e:	bf04      	itt	eq
 8007550:	6819      	ldreq	r1, [r3, #0]
 8007552:	685b      	ldreq	r3, [r3, #4]
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	bf04      	itt	eq
 8007558:	1949      	addeq	r1, r1, r5
 800755a:	6021      	streq	r1, [r4, #0]
 800755c:	6054      	str	r4, [r2, #4]
 800755e:	e7ca      	b.n	80074f6 <_free_r+0x26>
 8007560:	b003      	add	sp, #12
 8007562:	bd30      	pop	{r4, r5, pc}
 8007564:	20000b58 	.word	0x20000b58

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0e      	ldr	r6, [pc, #56]	; (80075a4 <sbrk_aligned+0x3c>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f000 fce0 	bl	8007f38 <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fcdb 	bl	8007f38 <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d00a      	beq.n	800759c <sbrk_aligned+0x34>
 8007586:	1cc4      	adds	r4, r0, #3
 8007588:	f024 0403 	bic.w	r4, r4, #3
 800758c:	42a0      	cmp	r0, r4
 800758e:	d007      	beq.n	80075a0 <sbrk_aligned+0x38>
 8007590:	1a21      	subs	r1, r4, r0
 8007592:	4628      	mov	r0, r5
 8007594:	f000 fcd0 	bl	8007f38 <_sbrk_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d101      	bne.n	80075a0 <sbrk_aligned+0x38>
 800759c:	f04f 34ff 	mov.w	r4, #4294967295
 80075a0:	4620      	mov	r0, r4
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	20000b5c 	.word	0x20000b5c

080075a8 <_malloc_r>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	1ccd      	adds	r5, r1, #3
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	4607      	mov	r7, r0
 80075be:	db01      	blt.n	80075c4 <_malloc_r+0x1c>
 80075c0:	42a9      	cmp	r1, r5
 80075c2:	d905      	bls.n	80075d0 <_malloc_r+0x28>
 80075c4:	230c      	movs	r3, #12
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	2600      	movs	r6, #0
 80075ca:	4630      	mov	r0, r6
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	4e2e      	ldr	r6, [pc, #184]	; (800768c <_malloc_r+0xe4>)
 80075d2:	f000 ffe5 	bl	80085a0 <__malloc_lock>
 80075d6:	6833      	ldr	r3, [r6, #0]
 80075d8:	461c      	mov	r4, r3
 80075da:	bb34      	cbnz	r4, 800762a <_malloc_r+0x82>
 80075dc:	4629      	mov	r1, r5
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ffc2 	bl	8007568 <sbrk_aligned>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	4604      	mov	r4, r0
 80075e8:	d14d      	bne.n	8007686 <_malloc_r+0xde>
 80075ea:	6834      	ldr	r4, [r6, #0]
 80075ec:	4626      	mov	r6, r4
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d140      	bne.n	8007674 <_malloc_r+0xcc>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	4631      	mov	r1, r6
 80075f6:	4638      	mov	r0, r7
 80075f8:	eb04 0803 	add.w	r8, r4, r3
 80075fc:	f000 fc9c 	bl	8007f38 <_sbrk_r>
 8007600:	4580      	cmp	r8, r0
 8007602:	d13a      	bne.n	800767a <_malloc_r+0xd2>
 8007604:	6821      	ldr	r1, [r4, #0]
 8007606:	3503      	adds	r5, #3
 8007608:	1a6d      	subs	r5, r5, r1
 800760a:	f025 0503 	bic.w	r5, r5, #3
 800760e:	3508      	adds	r5, #8
 8007610:	2d0c      	cmp	r5, #12
 8007612:	bf38      	it	cc
 8007614:	250c      	movcc	r5, #12
 8007616:	4629      	mov	r1, r5
 8007618:	4638      	mov	r0, r7
 800761a:	f7ff ffa5 	bl	8007568 <sbrk_aligned>
 800761e:	3001      	adds	r0, #1
 8007620:	d02b      	beq.n	800767a <_malloc_r+0xd2>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	442b      	add	r3, r5
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	e00e      	b.n	8007648 <_malloc_r+0xa0>
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	1b52      	subs	r2, r2, r5
 800762e:	d41e      	bmi.n	800766e <_malloc_r+0xc6>
 8007630:	2a0b      	cmp	r2, #11
 8007632:	d916      	bls.n	8007662 <_malloc_r+0xba>
 8007634:	1961      	adds	r1, r4, r5
 8007636:	42a3      	cmp	r3, r4
 8007638:	6025      	str	r5, [r4, #0]
 800763a:	bf18      	it	ne
 800763c:	6059      	strne	r1, [r3, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	bf08      	it	eq
 8007642:	6031      	streq	r1, [r6, #0]
 8007644:	5162      	str	r2, [r4, r5]
 8007646:	604b      	str	r3, [r1, #4]
 8007648:	4638      	mov	r0, r7
 800764a:	f104 060b 	add.w	r6, r4, #11
 800764e:	f000 ffad 	bl	80085ac <__malloc_unlock>
 8007652:	f026 0607 	bic.w	r6, r6, #7
 8007656:	1d23      	adds	r3, r4, #4
 8007658:	1af2      	subs	r2, r6, r3
 800765a:	d0b6      	beq.n	80075ca <_malloc_r+0x22>
 800765c:	1b9b      	subs	r3, r3, r6
 800765e:	50a3      	str	r3, [r4, r2]
 8007660:	e7b3      	b.n	80075ca <_malloc_r+0x22>
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	bf0c      	ite	eq
 8007668:	6032      	streq	r2, [r6, #0]
 800766a:	605a      	strne	r2, [r3, #4]
 800766c:	e7ec      	b.n	8007648 <_malloc_r+0xa0>
 800766e:	4623      	mov	r3, r4
 8007670:	6864      	ldr	r4, [r4, #4]
 8007672:	e7b2      	b.n	80075da <_malloc_r+0x32>
 8007674:	4634      	mov	r4, r6
 8007676:	6876      	ldr	r6, [r6, #4]
 8007678:	e7b9      	b.n	80075ee <_malloc_r+0x46>
 800767a:	230c      	movs	r3, #12
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4638      	mov	r0, r7
 8007680:	f000 ff94 	bl	80085ac <__malloc_unlock>
 8007684:	e7a1      	b.n	80075ca <_malloc_r+0x22>
 8007686:	6025      	str	r5, [r4, #0]
 8007688:	e7de      	b.n	8007648 <_malloc_r+0xa0>
 800768a:	bf00      	nop
 800768c:	20000b58 	.word	0x20000b58

08007690 <__ssputs_r>:
 8007690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	688e      	ldr	r6, [r1, #8]
 8007696:	429e      	cmp	r6, r3
 8007698:	4682      	mov	sl, r0
 800769a:	460c      	mov	r4, r1
 800769c:	4690      	mov	r8, r2
 800769e:	461f      	mov	r7, r3
 80076a0:	d838      	bhi.n	8007714 <__ssputs_r+0x84>
 80076a2:	898a      	ldrh	r2, [r1, #12]
 80076a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076a8:	d032      	beq.n	8007710 <__ssputs_r+0x80>
 80076aa:	6825      	ldr	r5, [r4, #0]
 80076ac:	6909      	ldr	r1, [r1, #16]
 80076ae:	eba5 0901 	sub.w	r9, r5, r1
 80076b2:	6965      	ldr	r5, [r4, #20]
 80076b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076bc:	3301      	adds	r3, #1
 80076be:	444b      	add	r3, r9
 80076c0:	106d      	asrs	r5, r5, #1
 80076c2:	429d      	cmp	r5, r3
 80076c4:	bf38      	it	cc
 80076c6:	461d      	movcc	r5, r3
 80076c8:	0553      	lsls	r3, r2, #21
 80076ca:	d531      	bpl.n	8007730 <__ssputs_r+0xa0>
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7ff ff6b 	bl	80075a8 <_malloc_r>
 80076d2:	4606      	mov	r6, r0
 80076d4:	b950      	cbnz	r0, 80076ec <__ssputs_r+0x5c>
 80076d6:	230c      	movs	r3, #12
 80076d8:	f8ca 3000 	str.w	r3, [sl]
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	6921      	ldr	r1, [r4, #16]
 80076ee:	464a      	mov	r2, r9
 80076f0:	f7fd ff0e 	bl	8005510 <memcpy>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	6126      	str	r6, [r4, #16]
 8007702:	6165      	str	r5, [r4, #20]
 8007704:	444e      	add	r6, r9
 8007706:	eba5 0509 	sub.w	r5, r5, r9
 800770a:	6026      	str	r6, [r4, #0]
 800770c:	60a5      	str	r5, [r4, #8]
 800770e:	463e      	mov	r6, r7
 8007710:	42be      	cmp	r6, r7
 8007712:	d900      	bls.n	8007716 <__ssputs_r+0x86>
 8007714:	463e      	mov	r6, r7
 8007716:	6820      	ldr	r0, [r4, #0]
 8007718:	4632      	mov	r2, r6
 800771a:	4641      	mov	r1, r8
 800771c:	f000 ff26 	bl	800856c <memmove>
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	1b9b      	subs	r3, r3, r6
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	4433      	add	r3, r6
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	e7db      	b.n	80076e8 <__ssputs_r+0x58>
 8007730:	462a      	mov	r2, r5
 8007732:	f000 ff41 	bl	80085b8 <_realloc_r>
 8007736:	4606      	mov	r6, r0
 8007738:	2800      	cmp	r0, #0
 800773a:	d1e1      	bne.n	8007700 <__ssputs_r+0x70>
 800773c:	6921      	ldr	r1, [r4, #16]
 800773e:	4650      	mov	r0, sl
 8007740:	f7ff fec6 	bl	80074d0 <_free_r>
 8007744:	e7c7      	b.n	80076d6 <__ssputs_r+0x46>
	...

08007748 <_svfiprintf_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	4698      	mov	r8, r3
 800774e:	898b      	ldrh	r3, [r1, #12]
 8007750:	061b      	lsls	r3, r3, #24
 8007752:	b09d      	sub	sp, #116	; 0x74
 8007754:	4607      	mov	r7, r0
 8007756:	460d      	mov	r5, r1
 8007758:	4614      	mov	r4, r2
 800775a:	d50e      	bpl.n	800777a <_svfiprintf_r+0x32>
 800775c:	690b      	ldr	r3, [r1, #16]
 800775e:	b963      	cbnz	r3, 800777a <_svfiprintf_r+0x32>
 8007760:	2140      	movs	r1, #64	; 0x40
 8007762:	f7ff ff21 	bl	80075a8 <_malloc_r>
 8007766:	6028      	str	r0, [r5, #0]
 8007768:	6128      	str	r0, [r5, #16]
 800776a:	b920      	cbnz	r0, 8007776 <_svfiprintf_r+0x2e>
 800776c:	230c      	movs	r3, #12
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	f04f 30ff 	mov.w	r0, #4294967295
 8007774:	e0d1      	b.n	800791a <_svfiprintf_r+0x1d2>
 8007776:	2340      	movs	r3, #64	; 0x40
 8007778:	616b      	str	r3, [r5, #20]
 800777a:	2300      	movs	r3, #0
 800777c:	9309      	str	r3, [sp, #36]	; 0x24
 800777e:	2320      	movs	r3, #32
 8007780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007784:	f8cd 800c 	str.w	r8, [sp, #12]
 8007788:	2330      	movs	r3, #48	; 0x30
 800778a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007934 <_svfiprintf_r+0x1ec>
 800778e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007792:	f04f 0901 	mov.w	r9, #1
 8007796:	4623      	mov	r3, r4
 8007798:	469a      	mov	sl, r3
 800779a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800779e:	b10a      	cbz	r2, 80077a4 <_svfiprintf_r+0x5c>
 80077a0:	2a25      	cmp	r2, #37	; 0x25
 80077a2:	d1f9      	bne.n	8007798 <_svfiprintf_r+0x50>
 80077a4:	ebba 0b04 	subs.w	fp, sl, r4
 80077a8:	d00b      	beq.n	80077c2 <_svfiprintf_r+0x7a>
 80077aa:	465b      	mov	r3, fp
 80077ac:	4622      	mov	r2, r4
 80077ae:	4629      	mov	r1, r5
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff ff6d 	bl	8007690 <__ssputs_r>
 80077b6:	3001      	adds	r0, #1
 80077b8:	f000 80aa 	beq.w	8007910 <_svfiprintf_r+0x1c8>
 80077bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077be:	445a      	add	r2, fp
 80077c0:	9209      	str	r2, [sp, #36]	; 0x24
 80077c2:	f89a 3000 	ldrb.w	r3, [sl]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80a2 	beq.w	8007910 <_svfiprintf_r+0x1c8>
 80077cc:	2300      	movs	r3, #0
 80077ce:	f04f 32ff 	mov.w	r2, #4294967295
 80077d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d6:	f10a 0a01 	add.w	sl, sl, #1
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	9307      	str	r3, [sp, #28]
 80077de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e2:	931a      	str	r3, [sp, #104]	; 0x68
 80077e4:	4654      	mov	r4, sl
 80077e6:	2205      	movs	r2, #5
 80077e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ec:	4851      	ldr	r0, [pc, #324]	; (8007934 <_svfiprintf_r+0x1ec>)
 80077ee:	f7f8 fcf7 	bl	80001e0 <memchr>
 80077f2:	9a04      	ldr	r2, [sp, #16]
 80077f4:	b9d8      	cbnz	r0, 800782e <_svfiprintf_r+0xe6>
 80077f6:	06d0      	lsls	r0, r2, #27
 80077f8:	bf44      	itt	mi
 80077fa:	2320      	movmi	r3, #32
 80077fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007800:	0711      	lsls	r1, r2, #28
 8007802:	bf44      	itt	mi
 8007804:	232b      	movmi	r3, #43	; 0x2b
 8007806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780a:	f89a 3000 	ldrb.w	r3, [sl]
 800780e:	2b2a      	cmp	r3, #42	; 0x2a
 8007810:	d015      	beq.n	800783e <_svfiprintf_r+0xf6>
 8007812:	9a07      	ldr	r2, [sp, #28]
 8007814:	4654      	mov	r4, sl
 8007816:	2000      	movs	r0, #0
 8007818:	f04f 0c0a 	mov.w	ip, #10
 800781c:	4621      	mov	r1, r4
 800781e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007822:	3b30      	subs	r3, #48	; 0x30
 8007824:	2b09      	cmp	r3, #9
 8007826:	d94e      	bls.n	80078c6 <_svfiprintf_r+0x17e>
 8007828:	b1b0      	cbz	r0, 8007858 <_svfiprintf_r+0x110>
 800782a:	9207      	str	r2, [sp, #28]
 800782c:	e014      	b.n	8007858 <_svfiprintf_r+0x110>
 800782e:	eba0 0308 	sub.w	r3, r0, r8
 8007832:	fa09 f303 	lsl.w	r3, r9, r3
 8007836:	4313      	orrs	r3, r2
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	46a2      	mov	sl, r4
 800783c:	e7d2      	b.n	80077e4 <_svfiprintf_r+0x9c>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	1d19      	adds	r1, r3, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	9103      	str	r1, [sp, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	bfbb      	ittet	lt
 800784a:	425b      	neglt	r3, r3
 800784c:	f042 0202 	orrlt.w	r2, r2, #2
 8007850:	9307      	strge	r3, [sp, #28]
 8007852:	9307      	strlt	r3, [sp, #28]
 8007854:	bfb8      	it	lt
 8007856:	9204      	strlt	r2, [sp, #16]
 8007858:	7823      	ldrb	r3, [r4, #0]
 800785a:	2b2e      	cmp	r3, #46	; 0x2e
 800785c:	d10c      	bne.n	8007878 <_svfiprintf_r+0x130>
 800785e:	7863      	ldrb	r3, [r4, #1]
 8007860:	2b2a      	cmp	r3, #42	; 0x2a
 8007862:	d135      	bne.n	80078d0 <_svfiprintf_r+0x188>
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	9203      	str	r2, [sp, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfb8      	it	lt
 8007870:	f04f 33ff 	movlt.w	r3, #4294967295
 8007874:	3402      	adds	r4, #2
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007944 <_svfiprintf_r+0x1fc>
 800787c:	7821      	ldrb	r1, [r4, #0]
 800787e:	2203      	movs	r2, #3
 8007880:	4650      	mov	r0, sl
 8007882:	f7f8 fcad 	bl	80001e0 <memchr>
 8007886:	b140      	cbz	r0, 800789a <_svfiprintf_r+0x152>
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	eba0 000a 	sub.w	r0, r0, sl
 800788e:	fa03 f000 	lsl.w	r0, r3, r0
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	4303      	orrs	r3, r0
 8007896:	3401      	adds	r4, #1
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789e:	4826      	ldr	r0, [pc, #152]	; (8007938 <_svfiprintf_r+0x1f0>)
 80078a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a4:	2206      	movs	r2, #6
 80078a6:	f7f8 fc9b 	bl	80001e0 <memchr>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d038      	beq.n	8007920 <_svfiprintf_r+0x1d8>
 80078ae:	4b23      	ldr	r3, [pc, #140]	; (800793c <_svfiprintf_r+0x1f4>)
 80078b0:	bb1b      	cbnz	r3, 80078fa <_svfiprintf_r+0x1b2>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	3307      	adds	r3, #7
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	3308      	adds	r3, #8
 80078bc:	9303      	str	r3, [sp, #12]
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	4433      	add	r3, r6
 80078c2:	9309      	str	r3, [sp, #36]	; 0x24
 80078c4:	e767      	b.n	8007796 <_svfiprintf_r+0x4e>
 80078c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ca:	460c      	mov	r4, r1
 80078cc:	2001      	movs	r0, #1
 80078ce:	e7a5      	b.n	800781c <_svfiprintf_r+0xd4>
 80078d0:	2300      	movs	r3, #0
 80078d2:	3401      	adds	r4, #1
 80078d4:	9305      	str	r3, [sp, #20]
 80078d6:	4619      	mov	r1, r3
 80078d8:	f04f 0c0a 	mov.w	ip, #10
 80078dc:	4620      	mov	r0, r4
 80078de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e2:	3a30      	subs	r2, #48	; 0x30
 80078e4:	2a09      	cmp	r2, #9
 80078e6:	d903      	bls.n	80078f0 <_svfiprintf_r+0x1a8>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0c5      	beq.n	8007878 <_svfiprintf_r+0x130>
 80078ec:	9105      	str	r1, [sp, #20]
 80078ee:	e7c3      	b.n	8007878 <_svfiprintf_r+0x130>
 80078f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f4:	4604      	mov	r4, r0
 80078f6:	2301      	movs	r3, #1
 80078f8:	e7f0      	b.n	80078dc <_svfiprintf_r+0x194>
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	462a      	mov	r2, r5
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <_svfiprintf_r+0x1f8>)
 8007902:	a904      	add	r1, sp, #16
 8007904:	4638      	mov	r0, r7
 8007906:	f3af 8000 	nop.w
 800790a:	1c42      	adds	r2, r0, #1
 800790c:	4606      	mov	r6, r0
 800790e:	d1d6      	bne.n	80078be <_svfiprintf_r+0x176>
 8007910:	89ab      	ldrh	r3, [r5, #12]
 8007912:	065b      	lsls	r3, r3, #25
 8007914:	f53f af2c 	bmi.w	8007770 <_svfiprintf_r+0x28>
 8007918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800791a:	b01d      	add	sp, #116	; 0x74
 800791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	462a      	mov	r2, r5
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <_svfiprintf_r+0x1f8>)
 8007928:	a904      	add	r1, sp, #16
 800792a:	4638      	mov	r0, r7
 800792c:	f000 f9d4 	bl	8007cd8 <_printf_i>
 8007930:	e7eb      	b.n	800790a <_svfiprintf_r+0x1c2>
 8007932:	bf00      	nop
 8007934:	08009dd4 	.word	0x08009dd4
 8007938:	08009dde 	.word	0x08009dde
 800793c:	00000000 	.word	0x00000000
 8007940:	08007691 	.word	0x08007691
 8007944:	08009dda 	.word	0x08009dda

08007948 <__sfputc_r>:
 8007948:	6893      	ldr	r3, [r2, #8]
 800794a:	3b01      	subs	r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	b410      	push	{r4}
 8007950:	6093      	str	r3, [r2, #8]
 8007952:	da08      	bge.n	8007966 <__sfputc_r+0x1e>
 8007954:	6994      	ldr	r4, [r2, #24]
 8007956:	42a3      	cmp	r3, r4
 8007958:	db01      	blt.n	800795e <__sfputc_r+0x16>
 800795a:	290a      	cmp	r1, #10
 800795c:	d103      	bne.n	8007966 <__sfputc_r+0x1e>
 800795e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007962:	f000 bb0d 	b.w	8007f80 <__swbuf_r>
 8007966:	6813      	ldr	r3, [r2, #0]
 8007968:	1c58      	adds	r0, r3, #1
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	7019      	strb	r1, [r3, #0]
 800796e:	4608      	mov	r0, r1
 8007970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007974:	4770      	bx	lr

08007976 <__sfputs_r>:
 8007976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4614      	mov	r4, r2
 800797e:	18d5      	adds	r5, r2, r3
 8007980:	42ac      	cmp	r4, r5
 8007982:	d101      	bne.n	8007988 <__sfputs_r+0x12>
 8007984:	2000      	movs	r0, #0
 8007986:	e007      	b.n	8007998 <__sfputs_r+0x22>
 8007988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798c:	463a      	mov	r2, r7
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ffda 	bl	8007948 <__sfputc_r>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d1f3      	bne.n	8007980 <__sfputs_r+0xa>
 8007998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800799c <_vfiprintf_r>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	460d      	mov	r5, r1
 80079a2:	b09d      	sub	sp, #116	; 0x74
 80079a4:	4614      	mov	r4, r2
 80079a6:	4698      	mov	r8, r3
 80079a8:	4606      	mov	r6, r0
 80079aa:	b118      	cbz	r0, 80079b4 <_vfiprintf_r+0x18>
 80079ac:	6983      	ldr	r3, [r0, #24]
 80079ae:	b90b      	cbnz	r3, 80079b4 <_vfiprintf_r+0x18>
 80079b0:	f000 fcd6 	bl	8008360 <__sinit>
 80079b4:	4b89      	ldr	r3, [pc, #548]	; (8007bdc <_vfiprintf_r+0x240>)
 80079b6:	429d      	cmp	r5, r3
 80079b8:	d11b      	bne.n	80079f2 <_vfiprintf_r+0x56>
 80079ba:	6875      	ldr	r5, [r6, #4]
 80079bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079be:	07d9      	lsls	r1, r3, #31
 80079c0:	d405      	bmi.n	80079ce <_vfiprintf_r+0x32>
 80079c2:	89ab      	ldrh	r3, [r5, #12]
 80079c4:	059a      	lsls	r2, r3, #22
 80079c6:	d402      	bmi.n	80079ce <_vfiprintf_r+0x32>
 80079c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ca:	f000 fd67 	bl	800849c <__retarget_lock_acquire_recursive>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	071b      	lsls	r3, r3, #28
 80079d2:	d501      	bpl.n	80079d8 <_vfiprintf_r+0x3c>
 80079d4:	692b      	ldr	r3, [r5, #16]
 80079d6:	b9eb      	cbnz	r3, 8007a14 <_vfiprintf_r+0x78>
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f000 fb30 	bl	8008040 <__swsetup_r>
 80079e0:	b1c0      	cbz	r0, 8007a14 <_vfiprintf_r+0x78>
 80079e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e4:	07dc      	lsls	r4, r3, #31
 80079e6:	d50e      	bpl.n	8007a06 <_vfiprintf_r+0x6a>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	b01d      	add	sp, #116	; 0x74
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f2:	4b7b      	ldr	r3, [pc, #492]	; (8007be0 <_vfiprintf_r+0x244>)
 80079f4:	429d      	cmp	r5, r3
 80079f6:	d101      	bne.n	80079fc <_vfiprintf_r+0x60>
 80079f8:	68b5      	ldr	r5, [r6, #8]
 80079fa:	e7df      	b.n	80079bc <_vfiprintf_r+0x20>
 80079fc:	4b79      	ldr	r3, [pc, #484]	; (8007be4 <_vfiprintf_r+0x248>)
 80079fe:	429d      	cmp	r5, r3
 8007a00:	bf08      	it	eq
 8007a02:	68f5      	ldreq	r5, [r6, #12]
 8007a04:	e7da      	b.n	80079bc <_vfiprintf_r+0x20>
 8007a06:	89ab      	ldrh	r3, [r5, #12]
 8007a08:	0598      	lsls	r0, r3, #22
 8007a0a:	d4ed      	bmi.n	80079e8 <_vfiprintf_r+0x4c>
 8007a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a0e:	f000 fd46 	bl	800849e <__retarget_lock_release_recursive>
 8007a12:	e7e9      	b.n	80079e8 <_vfiprintf_r+0x4c>
 8007a14:	2300      	movs	r3, #0
 8007a16:	9309      	str	r3, [sp, #36]	; 0x24
 8007a18:	2320      	movs	r3, #32
 8007a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a22:	2330      	movs	r3, #48	; 0x30
 8007a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007be8 <_vfiprintf_r+0x24c>
 8007a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a2c:	f04f 0901 	mov.w	r9, #1
 8007a30:	4623      	mov	r3, r4
 8007a32:	469a      	mov	sl, r3
 8007a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a38:	b10a      	cbz	r2, 8007a3e <_vfiprintf_r+0xa2>
 8007a3a:	2a25      	cmp	r2, #37	; 0x25
 8007a3c:	d1f9      	bne.n	8007a32 <_vfiprintf_r+0x96>
 8007a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a42:	d00b      	beq.n	8007a5c <_vfiprintf_r+0xc0>
 8007a44:	465b      	mov	r3, fp
 8007a46:	4622      	mov	r2, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ff93 	bl	8007976 <__sfputs_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	f000 80aa 	beq.w	8007baa <_vfiprintf_r+0x20e>
 8007a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a58:	445a      	add	r2, fp
 8007a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80a2 	beq.w	8007baa <_vfiprintf_r+0x20e>
 8007a66:	2300      	movs	r3, #0
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a70:	f10a 0a01 	add.w	sl, sl, #1
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	9307      	str	r3, [sp, #28]
 8007a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a7e:	4654      	mov	r4, sl
 8007a80:	2205      	movs	r2, #5
 8007a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a86:	4858      	ldr	r0, [pc, #352]	; (8007be8 <_vfiprintf_r+0x24c>)
 8007a88:	f7f8 fbaa 	bl	80001e0 <memchr>
 8007a8c:	9a04      	ldr	r2, [sp, #16]
 8007a8e:	b9d8      	cbnz	r0, 8007ac8 <_vfiprintf_r+0x12c>
 8007a90:	06d1      	lsls	r1, r2, #27
 8007a92:	bf44      	itt	mi
 8007a94:	2320      	movmi	r3, #32
 8007a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9a:	0713      	lsls	r3, r2, #28
 8007a9c:	bf44      	itt	mi
 8007a9e:	232b      	movmi	r3, #43	; 0x2b
 8007aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aaa:	d015      	beq.n	8007ad8 <_vfiprintf_r+0x13c>
 8007aac:	9a07      	ldr	r2, [sp, #28]
 8007aae:	4654      	mov	r4, sl
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f04f 0c0a 	mov.w	ip, #10
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007abc:	3b30      	subs	r3, #48	; 0x30
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d94e      	bls.n	8007b60 <_vfiprintf_r+0x1c4>
 8007ac2:	b1b0      	cbz	r0, 8007af2 <_vfiprintf_r+0x156>
 8007ac4:	9207      	str	r2, [sp, #28]
 8007ac6:	e014      	b.n	8007af2 <_vfiprintf_r+0x156>
 8007ac8:	eba0 0308 	sub.w	r3, r0, r8
 8007acc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	46a2      	mov	sl, r4
 8007ad6:	e7d2      	b.n	8007a7e <_vfiprintf_r+0xe2>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	1d19      	adds	r1, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9103      	str	r1, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfbb      	ittet	lt
 8007ae4:	425b      	neglt	r3, r3
 8007ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8007aea:	9307      	strge	r3, [sp, #28]
 8007aec:	9307      	strlt	r3, [sp, #28]
 8007aee:	bfb8      	it	lt
 8007af0:	9204      	strlt	r2, [sp, #16]
 8007af2:	7823      	ldrb	r3, [r4, #0]
 8007af4:	2b2e      	cmp	r3, #46	; 0x2e
 8007af6:	d10c      	bne.n	8007b12 <_vfiprintf_r+0x176>
 8007af8:	7863      	ldrb	r3, [r4, #1]
 8007afa:	2b2a      	cmp	r3, #42	; 0x2a
 8007afc:	d135      	bne.n	8007b6a <_vfiprintf_r+0x1ce>
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	9203      	str	r2, [sp, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b0e:	3402      	adds	r4, #2
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bf8 <_vfiprintf_r+0x25c>
 8007b16:	7821      	ldrb	r1, [r4, #0]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f7f8 fb60 	bl	80001e0 <memchr>
 8007b20:	b140      	cbz	r0, 8007b34 <_vfiprintf_r+0x198>
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	eba0 000a 	sub.w	r0, r0, sl
 8007b28:	fa03 f000 	lsl.w	r0, r3, r0
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	4303      	orrs	r3, r0
 8007b30:	3401      	adds	r4, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b38:	482c      	ldr	r0, [pc, #176]	; (8007bec <_vfiprintf_r+0x250>)
 8007b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b3e:	2206      	movs	r2, #6
 8007b40:	f7f8 fb4e 	bl	80001e0 <memchr>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d03f      	beq.n	8007bc8 <_vfiprintf_r+0x22c>
 8007b48:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <_vfiprintf_r+0x254>)
 8007b4a:	bb1b      	cbnz	r3, 8007b94 <_vfiprintf_r+0x1f8>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	3307      	adds	r3, #7
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	3308      	adds	r3, #8
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	443b      	add	r3, r7
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	e767      	b.n	8007a30 <_vfiprintf_r+0x94>
 8007b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b64:	460c      	mov	r4, r1
 8007b66:	2001      	movs	r0, #1
 8007b68:	e7a5      	b.n	8007ab6 <_vfiprintf_r+0x11a>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	9305      	str	r3, [sp, #20]
 8007b70:	4619      	mov	r1, r3
 8007b72:	f04f 0c0a 	mov.w	ip, #10
 8007b76:	4620      	mov	r0, r4
 8007b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b7c:	3a30      	subs	r2, #48	; 0x30
 8007b7e:	2a09      	cmp	r2, #9
 8007b80:	d903      	bls.n	8007b8a <_vfiprintf_r+0x1ee>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c5      	beq.n	8007b12 <_vfiprintf_r+0x176>
 8007b86:	9105      	str	r1, [sp, #20]
 8007b88:	e7c3      	b.n	8007b12 <_vfiprintf_r+0x176>
 8007b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b8e:	4604      	mov	r4, r0
 8007b90:	2301      	movs	r3, #1
 8007b92:	e7f0      	b.n	8007b76 <_vfiprintf_r+0x1da>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <_vfiprintf_r+0x258>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f3af 8000 	nop.w
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	1c78      	adds	r0, r7, #1
 8007ba8:	d1d6      	bne.n	8007b58 <_vfiprintf_r+0x1bc>
 8007baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	d405      	bmi.n	8007bbc <_vfiprintf_r+0x220>
 8007bb0:	89ab      	ldrh	r3, [r5, #12]
 8007bb2:	059a      	lsls	r2, r3, #22
 8007bb4:	d402      	bmi.n	8007bbc <_vfiprintf_r+0x220>
 8007bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bb8:	f000 fc71 	bl	800849e <__retarget_lock_release_recursive>
 8007bbc:	89ab      	ldrh	r3, [r5, #12]
 8007bbe:	065b      	lsls	r3, r3, #25
 8007bc0:	f53f af12 	bmi.w	80079e8 <_vfiprintf_r+0x4c>
 8007bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bc6:	e711      	b.n	80079ec <_vfiprintf_r+0x50>
 8007bc8:	ab03      	add	r3, sp, #12
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_vfiprintf_r+0x258>)
 8007bd0:	a904      	add	r1, sp, #16
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f000 f880 	bl	8007cd8 <_printf_i>
 8007bd8:	e7e4      	b.n	8007ba4 <_vfiprintf_r+0x208>
 8007bda:	bf00      	nop
 8007bdc:	08009e28 	.word	0x08009e28
 8007be0:	08009e48 	.word	0x08009e48
 8007be4:	08009e08 	.word	0x08009e08
 8007be8:	08009dd4 	.word	0x08009dd4
 8007bec:	08009dde 	.word	0x08009dde
 8007bf0:	00000000 	.word	0x00000000
 8007bf4:	08007977 	.word	0x08007977
 8007bf8:	08009dda 	.word	0x08009dda

08007bfc <_printf_common>:
 8007bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	4616      	mov	r6, r2
 8007c02:	4699      	mov	r9, r3
 8007c04:	688a      	ldr	r2, [r1, #8]
 8007c06:	690b      	ldr	r3, [r1, #16]
 8007c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	bfb8      	it	lt
 8007c10:	4613      	movlt	r3, r2
 8007c12:	6033      	str	r3, [r6, #0]
 8007c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c18:	4607      	mov	r7, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b10a      	cbz	r2, 8007c22 <_printf_common+0x26>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	6033      	str	r3, [r6, #0]
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	0699      	lsls	r1, r3, #26
 8007c26:	bf42      	ittt	mi
 8007c28:	6833      	ldrmi	r3, [r6, #0]
 8007c2a:	3302      	addmi	r3, #2
 8007c2c:	6033      	strmi	r3, [r6, #0]
 8007c2e:	6825      	ldr	r5, [r4, #0]
 8007c30:	f015 0506 	ands.w	r5, r5, #6
 8007c34:	d106      	bne.n	8007c44 <_printf_common+0x48>
 8007c36:	f104 0a19 	add.w	sl, r4, #25
 8007c3a:	68e3      	ldr	r3, [r4, #12]
 8007c3c:	6832      	ldr	r2, [r6, #0]
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	42ab      	cmp	r3, r5
 8007c42:	dc26      	bgt.n	8007c92 <_printf_common+0x96>
 8007c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c48:	1e13      	subs	r3, r2, #0
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	bf18      	it	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	0692      	lsls	r2, r2, #26
 8007c52:	d42b      	bmi.n	8007cac <_printf_common+0xb0>
 8007c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	47c0      	blx	r8
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d01e      	beq.n	8007ca0 <_printf_common+0xa4>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	68e5      	ldr	r5, [r4, #12]
 8007c66:	6832      	ldr	r2, [r6, #0]
 8007c68:	f003 0306 	and.w	r3, r3, #6
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	bf08      	it	eq
 8007c70:	1aad      	subeq	r5, r5, r2
 8007c72:	68a3      	ldr	r3, [r4, #8]
 8007c74:	6922      	ldr	r2, [r4, #16]
 8007c76:	bf0c      	ite	eq
 8007c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c7c:	2500      	movne	r5, #0
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	bfc4      	itt	gt
 8007c82:	1a9b      	subgt	r3, r3, r2
 8007c84:	18ed      	addgt	r5, r5, r3
 8007c86:	2600      	movs	r6, #0
 8007c88:	341a      	adds	r4, #26
 8007c8a:	42b5      	cmp	r5, r6
 8007c8c:	d11a      	bne.n	8007cc4 <_printf_common+0xc8>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e008      	b.n	8007ca4 <_printf_common+0xa8>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4652      	mov	r2, sl
 8007c96:	4649      	mov	r1, r9
 8007c98:	4638      	mov	r0, r7
 8007c9a:	47c0      	blx	r8
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d103      	bne.n	8007ca8 <_printf_common+0xac>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca8:	3501      	adds	r5, #1
 8007caa:	e7c6      	b.n	8007c3a <_printf_common+0x3e>
 8007cac:	18e1      	adds	r1, r4, r3
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	2030      	movs	r0, #48	; 0x30
 8007cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cb6:	4422      	add	r2, r4
 8007cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	e7c7      	b.n	8007c54 <_printf_common+0x58>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	4649      	mov	r1, r9
 8007cca:	4638      	mov	r0, r7
 8007ccc:	47c0      	blx	r8
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d0e6      	beq.n	8007ca0 <_printf_common+0xa4>
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7d9      	b.n	8007c8a <_printf_common+0x8e>
	...

08007cd8 <_printf_i>:
 8007cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cdc:	7e0f      	ldrb	r7, [r1, #24]
 8007cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce0:	2f78      	cmp	r7, #120	; 0x78
 8007ce2:	4691      	mov	r9, r2
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	469a      	mov	sl, r3
 8007cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cee:	d807      	bhi.n	8007d00 <_printf_i+0x28>
 8007cf0:	2f62      	cmp	r7, #98	; 0x62
 8007cf2:	d80a      	bhi.n	8007d0a <_printf_i+0x32>
 8007cf4:	2f00      	cmp	r7, #0
 8007cf6:	f000 80d8 	beq.w	8007eaa <_printf_i+0x1d2>
 8007cfa:	2f58      	cmp	r7, #88	; 0x58
 8007cfc:	f000 80a3 	beq.w	8007e46 <_printf_i+0x16e>
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d08:	e03a      	b.n	8007d80 <_printf_i+0xa8>
 8007d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d0e:	2b15      	cmp	r3, #21
 8007d10:	d8f6      	bhi.n	8007d00 <_printf_i+0x28>
 8007d12:	a101      	add	r1, pc, #4	; (adr r1, 8007d18 <_printf_i+0x40>)
 8007d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d85 	.word	0x08007d85
 8007d20:	08007d01 	.word	0x08007d01
 8007d24:	08007d01 	.word	0x08007d01
 8007d28:	08007d01 	.word	0x08007d01
 8007d2c:	08007d01 	.word	0x08007d01
 8007d30:	08007d85 	.word	0x08007d85
 8007d34:	08007d01 	.word	0x08007d01
 8007d38:	08007d01 	.word	0x08007d01
 8007d3c:	08007d01 	.word	0x08007d01
 8007d40:	08007d01 	.word	0x08007d01
 8007d44:	08007e91 	.word	0x08007e91
 8007d48:	08007db5 	.word	0x08007db5
 8007d4c:	08007e73 	.word	0x08007e73
 8007d50:	08007d01 	.word	0x08007d01
 8007d54:	08007d01 	.word	0x08007d01
 8007d58:	08007eb3 	.word	0x08007eb3
 8007d5c:	08007d01 	.word	0x08007d01
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007d01 	.word	0x08007d01
 8007d68:	08007d01 	.word	0x08007d01
 8007d6c:	08007e7b 	.word	0x08007e7b
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	1d1a      	adds	r2, r3, #4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	602a      	str	r2, [r5, #0]
 8007d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0a3      	b.n	8007ecc <_printf_i+0x1f4>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	6829      	ldr	r1, [r5, #0]
 8007d88:	0606      	lsls	r6, r0, #24
 8007d8a:	f101 0304 	add.w	r3, r1, #4
 8007d8e:	d50a      	bpl.n	8007da6 <_printf_i+0xce>
 8007d90:	680e      	ldr	r6, [r1, #0]
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	da03      	bge.n	8007da0 <_printf_i+0xc8>
 8007d98:	232d      	movs	r3, #45	; 0x2d
 8007d9a:	4276      	negs	r6, r6
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da0:	485e      	ldr	r0, [pc, #376]	; (8007f1c <_printf_i+0x244>)
 8007da2:	230a      	movs	r3, #10
 8007da4:	e019      	b.n	8007dda <_printf_i+0x102>
 8007da6:	680e      	ldr	r6, [r1, #0]
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dae:	bf18      	it	ne
 8007db0:	b236      	sxthne	r6, r6
 8007db2:	e7ef      	b.n	8007d94 <_printf_i+0xbc>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1d19      	adds	r1, r3, #4
 8007dba:	6029      	str	r1, [r5, #0]
 8007dbc:	0601      	lsls	r1, r0, #24
 8007dbe:	d501      	bpl.n	8007dc4 <_printf_i+0xec>
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <_printf_i+0xf2>
 8007dc4:	0646      	lsls	r6, r0, #25
 8007dc6:	d5fb      	bpl.n	8007dc0 <_printf_i+0xe8>
 8007dc8:	881e      	ldrh	r6, [r3, #0]
 8007dca:	4854      	ldr	r0, [pc, #336]	; (8007f1c <_printf_i+0x244>)
 8007dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dce:	bf0c      	ite	eq
 8007dd0:	2308      	moveq	r3, #8
 8007dd2:	230a      	movne	r3, #10
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dda:	6865      	ldr	r5, [r4, #4]
 8007ddc:	60a5      	str	r5, [r4, #8]
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	bfa2      	ittt	ge
 8007de2:	6821      	ldrge	r1, [r4, #0]
 8007de4:	f021 0104 	bicge.w	r1, r1, #4
 8007de8:	6021      	strge	r1, [r4, #0]
 8007dea:	b90e      	cbnz	r6, 8007df0 <_printf_i+0x118>
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d04d      	beq.n	8007e8c <_printf_i+0x1b4>
 8007df0:	4615      	mov	r5, r2
 8007df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007df6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dfa:	5dc7      	ldrb	r7, [r0, r7]
 8007dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e00:	4637      	mov	r7, r6
 8007e02:	42bb      	cmp	r3, r7
 8007e04:	460e      	mov	r6, r1
 8007e06:	d9f4      	bls.n	8007df2 <_printf_i+0x11a>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d10b      	bne.n	8007e24 <_printf_i+0x14c>
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	07de      	lsls	r6, r3, #31
 8007e10:	d508      	bpl.n	8007e24 <_printf_i+0x14c>
 8007e12:	6923      	ldr	r3, [r4, #16]
 8007e14:	6861      	ldr	r1, [r4, #4]
 8007e16:	4299      	cmp	r1, r3
 8007e18:	bfde      	ittt	le
 8007e1a:	2330      	movle	r3, #48	; 0x30
 8007e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e24:	1b52      	subs	r2, r2, r5
 8007e26:	6122      	str	r2, [r4, #16]
 8007e28:	f8cd a000 	str.w	sl, [sp]
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	aa03      	add	r2, sp, #12
 8007e30:	4621      	mov	r1, r4
 8007e32:	4640      	mov	r0, r8
 8007e34:	f7ff fee2 	bl	8007bfc <_printf_common>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d14c      	bne.n	8007ed6 <_printf_i+0x1fe>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	b004      	add	sp, #16
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	4835      	ldr	r0, [pc, #212]	; (8007f1c <_printf_i+0x244>)
 8007e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e4c:	6829      	ldr	r1, [r5, #0]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e54:	6029      	str	r1, [r5, #0]
 8007e56:	061d      	lsls	r5, r3, #24
 8007e58:	d514      	bpl.n	8007e84 <_printf_i+0x1ac>
 8007e5a:	07df      	lsls	r7, r3, #31
 8007e5c:	bf44      	itt	mi
 8007e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e62:	6023      	strmi	r3, [r4, #0]
 8007e64:	b91e      	cbnz	r6, 8007e6e <_printf_i+0x196>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	f023 0320 	bic.w	r3, r3, #32
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	2310      	movs	r3, #16
 8007e70:	e7b0      	b.n	8007dd4 <_printf_i+0xfc>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	f043 0320 	orr.w	r3, r3, #32
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	2378      	movs	r3, #120	; 0x78
 8007e7c:	4828      	ldr	r0, [pc, #160]	; (8007f20 <_printf_i+0x248>)
 8007e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e82:	e7e3      	b.n	8007e4c <_printf_i+0x174>
 8007e84:	0659      	lsls	r1, r3, #25
 8007e86:	bf48      	it	mi
 8007e88:	b2b6      	uxthmi	r6, r6
 8007e8a:	e7e6      	b.n	8007e5a <_printf_i+0x182>
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	e7bb      	b.n	8007e08 <_printf_i+0x130>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	6826      	ldr	r6, [r4, #0]
 8007e94:	6961      	ldr	r1, [r4, #20]
 8007e96:	1d18      	adds	r0, r3, #4
 8007e98:	6028      	str	r0, [r5, #0]
 8007e9a:	0635      	lsls	r5, r6, #24
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	d501      	bpl.n	8007ea4 <_printf_i+0x1cc>
 8007ea0:	6019      	str	r1, [r3, #0]
 8007ea2:	e002      	b.n	8007eaa <_printf_i+0x1d2>
 8007ea4:	0670      	lsls	r0, r6, #25
 8007ea6:	d5fb      	bpl.n	8007ea0 <_printf_i+0x1c8>
 8007ea8:	8019      	strh	r1, [r3, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	4615      	mov	r5, r2
 8007eb0:	e7ba      	b.n	8007e28 <_printf_i+0x150>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	1d1a      	adds	r2, r3, #4
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	681d      	ldr	r5, [r3, #0]
 8007eba:	6862      	ldr	r2, [r4, #4]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	b108      	cbz	r0, 8007eca <_printf_i+0x1f2>
 8007ec6:	1b40      	subs	r0, r0, r5
 8007ec8:	6060      	str	r0, [r4, #4]
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed4:	e7a8      	b.n	8007e28 <_printf_i+0x150>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4649      	mov	r1, r9
 8007edc:	4640      	mov	r0, r8
 8007ede:	47d0      	blx	sl
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d0ab      	beq.n	8007e3c <_printf_i+0x164>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	079b      	lsls	r3, r3, #30
 8007ee8:	d413      	bmi.n	8007f12 <_printf_i+0x23a>
 8007eea:	68e0      	ldr	r0, [r4, #12]
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	4298      	cmp	r0, r3
 8007ef0:	bfb8      	it	lt
 8007ef2:	4618      	movlt	r0, r3
 8007ef4:	e7a4      	b.n	8007e40 <_printf_i+0x168>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	4632      	mov	r2, r6
 8007efa:	4649      	mov	r1, r9
 8007efc:	4640      	mov	r0, r8
 8007efe:	47d0      	blx	sl
 8007f00:	3001      	adds	r0, #1
 8007f02:	d09b      	beq.n	8007e3c <_printf_i+0x164>
 8007f04:	3501      	adds	r5, #1
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	9903      	ldr	r1, [sp, #12]
 8007f0a:	1a5b      	subs	r3, r3, r1
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dcf2      	bgt.n	8007ef6 <_printf_i+0x21e>
 8007f10:	e7eb      	b.n	8007eea <_printf_i+0x212>
 8007f12:	2500      	movs	r5, #0
 8007f14:	f104 0619 	add.w	r6, r4, #25
 8007f18:	e7f5      	b.n	8007f06 <_printf_i+0x22e>
 8007f1a:	bf00      	nop
 8007f1c:	08009de5 	.word	0x08009de5
 8007f20:	08009df6 	.word	0x08009df6
 8007f24:	00000000 	.word	0x00000000

08007f28 <nan>:
 8007f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007f30 <nan+0x8>
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	00000000 	.word	0x00000000
 8007f34:	7ff80000 	.word	0x7ff80000

08007f38 <_sbrk_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d06      	ldr	r5, [pc, #24]	; (8007f54 <_sbrk_r+0x1c>)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	602b      	str	r3, [r5, #0]
 8007f44:	f7f9 fe9e 	bl	8001c84 <_sbrk>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_sbrk_r+0x1a>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_sbrk_r+0x1a>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000b64 	.word	0x20000b64

08007f58 <strncmp>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	b17a      	cbz	r2, 8007f7c <strncmp+0x24>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	3901      	subs	r1, #1
 8007f60:	1884      	adds	r4, r0, r2
 8007f62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f6a:	4290      	cmp	r0, r2
 8007f6c:	d101      	bne.n	8007f72 <strncmp+0x1a>
 8007f6e:	42a3      	cmp	r3, r4
 8007f70:	d101      	bne.n	8007f76 <strncmp+0x1e>
 8007f72:	1a80      	subs	r0, r0, r2
 8007f74:	bd10      	pop	{r4, pc}
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1f3      	bne.n	8007f62 <strncmp+0xa>
 8007f7a:	e7fa      	b.n	8007f72 <strncmp+0x1a>
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	e7f9      	b.n	8007f74 <strncmp+0x1c>

08007f80 <__swbuf_r>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	460e      	mov	r6, r1
 8007f84:	4614      	mov	r4, r2
 8007f86:	4605      	mov	r5, r0
 8007f88:	b118      	cbz	r0, 8007f92 <__swbuf_r+0x12>
 8007f8a:	6983      	ldr	r3, [r0, #24]
 8007f8c:	b90b      	cbnz	r3, 8007f92 <__swbuf_r+0x12>
 8007f8e:	f000 f9e7 	bl	8008360 <__sinit>
 8007f92:	4b21      	ldr	r3, [pc, #132]	; (8008018 <__swbuf_r+0x98>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d12b      	bne.n	8007ff0 <__swbuf_r+0x70>
 8007f98:	686c      	ldr	r4, [r5, #4]
 8007f9a:	69a3      	ldr	r3, [r4, #24]
 8007f9c:	60a3      	str	r3, [r4, #8]
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	071a      	lsls	r2, r3, #28
 8007fa2:	d52f      	bpl.n	8008004 <__swbuf_r+0x84>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	b36b      	cbz	r3, 8008004 <__swbuf_r+0x84>
 8007fa8:	6923      	ldr	r3, [r4, #16]
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	1ac0      	subs	r0, r0, r3
 8007fae:	6963      	ldr	r3, [r4, #20]
 8007fb0:	b2f6      	uxtb	r6, r6
 8007fb2:	4283      	cmp	r3, r0
 8007fb4:	4637      	mov	r7, r6
 8007fb6:	dc04      	bgt.n	8007fc2 <__swbuf_r+0x42>
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 f93c 	bl	8008238 <_fflush_r>
 8007fc0:	bb30      	cbnz	r0, 8008010 <__swbuf_r+0x90>
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	60a3      	str	r3, [r4, #8]
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	6022      	str	r2, [r4, #0]
 8007fce:	701e      	strb	r6, [r3, #0]
 8007fd0:	6963      	ldr	r3, [r4, #20]
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	4283      	cmp	r3, r0
 8007fd6:	d004      	beq.n	8007fe2 <__swbuf_r+0x62>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	07db      	lsls	r3, r3, #31
 8007fdc:	d506      	bpl.n	8007fec <__swbuf_r+0x6c>
 8007fde:	2e0a      	cmp	r6, #10
 8007fe0:	d104      	bne.n	8007fec <__swbuf_r+0x6c>
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f000 f927 	bl	8008238 <_fflush_r>
 8007fea:	b988      	cbnz	r0, 8008010 <__swbuf_r+0x90>
 8007fec:	4638      	mov	r0, r7
 8007fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <__swbuf_r+0x9c>)
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d101      	bne.n	8007ffa <__swbuf_r+0x7a>
 8007ff6:	68ac      	ldr	r4, [r5, #8]
 8007ff8:	e7cf      	b.n	8007f9a <__swbuf_r+0x1a>
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <__swbuf_r+0xa0>)
 8007ffc:	429c      	cmp	r4, r3
 8007ffe:	bf08      	it	eq
 8008000:	68ec      	ldreq	r4, [r5, #12]
 8008002:	e7ca      	b.n	8007f9a <__swbuf_r+0x1a>
 8008004:	4621      	mov	r1, r4
 8008006:	4628      	mov	r0, r5
 8008008:	f000 f81a 	bl	8008040 <__swsetup_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	d0cb      	beq.n	8007fa8 <__swbuf_r+0x28>
 8008010:	f04f 37ff 	mov.w	r7, #4294967295
 8008014:	e7ea      	b.n	8007fec <__swbuf_r+0x6c>
 8008016:	bf00      	nop
 8008018:	08009e28 	.word	0x08009e28
 800801c:	08009e48 	.word	0x08009e48
 8008020:	08009e08 	.word	0x08009e08

08008024 <__ascii_wctomb>:
 8008024:	b149      	cbz	r1, 800803a <__ascii_wctomb+0x16>
 8008026:	2aff      	cmp	r2, #255	; 0xff
 8008028:	bf85      	ittet	hi
 800802a:	238a      	movhi	r3, #138	; 0x8a
 800802c:	6003      	strhi	r3, [r0, #0]
 800802e:	700a      	strbls	r2, [r1, #0]
 8008030:	f04f 30ff 	movhi.w	r0, #4294967295
 8008034:	bf98      	it	ls
 8008036:	2001      	movls	r0, #1
 8008038:	4770      	bx	lr
 800803a:	4608      	mov	r0, r1
 800803c:	4770      	bx	lr
	...

08008040 <__swsetup_r>:
 8008040:	4b32      	ldr	r3, [pc, #200]	; (800810c <__swsetup_r+0xcc>)
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	681d      	ldr	r5, [r3, #0]
 8008046:	4606      	mov	r6, r0
 8008048:	460c      	mov	r4, r1
 800804a:	b125      	cbz	r5, 8008056 <__swsetup_r+0x16>
 800804c:	69ab      	ldr	r3, [r5, #24]
 800804e:	b913      	cbnz	r3, 8008056 <__swsetup_r+0x16>
 8008050:	4628      	mov	r0, r5
 8008052:	f000 f985 	bl	8008360 <__sinit>
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <__swsetup_r+0xd0>)
 8008058:	429c      	cmp	r4, r3
 800805a:	d10f      	bne.n	800807c <__swsetup_r+0x3c>
 800805c:	686c      	ldr	r4, [r5, #4]
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008064:	0719      	lsls	r1, r3, #28
 8008066:	d42c      	bmi.n	80080c2 <__swsetup_r+0x82>
 8008068:	06dd      	lsls	r5, r3, #27
 800806a:	d411      	bmi.n	8008090 <__swsetup_r+0x50>
 800806c:	2309      	movs	r3, #9
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	e03e      	b.n	80080fa <__swsetup_r+0xba>
 800807c:	4b25      	ldr	r3, [pc, #148]	; (8008114 <__swsetup_r+0xd4>)
 800807e:	429c      	cmp	r4, r3
 8008080:	d101      	bne.n	8008086 <__swsetup_r+0x46>
 8008082:	68ac      	ldr	r4, [r5, #8]
 8008084:	e7eb      	b.n	800805e <__swsetup_r+0x1e>
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <__swsetup_r+0xd8>)
 8008088:	429c      	cmp	r4, r3
 800808a:	bf08      	it	eq
 800808c:	68ec      	ldreq	r4, [r5, #12]
 800808e:	e7e6      	b.n	800805e <__swsetup_r+0x1e>
 8008090:	0758      	lsls	r0, r3, #29
 8008092:	d512      	bpl.n	80080ba <__swsetup_r+0x7a>
 8008094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008096:	b141      	cbz	r1, 80080aa <__swsetup_r+0x6a>
 8008098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800809c:	4299      	cmp	r1, r3
 800809e:	d002      	beq.n	80080a6 <__swsetup_r+0x66>
 80080a0:	4630      	mov	r0, r6
 80080a2:	f7ff fa15 	bl	80074d0 <_free_r>
 80080a6:	2300      	movs	r3, #0
 80080a8:	6363      	str	r3, [r4, #52]	; 0x34
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	2300      	movs	r3, #0
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f043 0308 	orr.w	r3, r3, #8
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	b94b      	cbnz	r3, 80080da <__swsetup_r+0x9a>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d0:	d003      	beq.n	80080da <__swsetup_r+0x9a>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 fa09 	bl	80084ec <__smakebuf_r>
 80080da:	89a0      	ldrh	r0, [r4, #12]
 80080dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e0:	f010 0301 	ands.w	r3, r0, #1
 80080e4:	d00a      	beq.n	80080fc <__swsetup_r+0xbc>
 80080e6:	2300      	movs	r3, #0
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6963      	ldr	r3, [r4, #20]
 80080ec:	425b      	negs	r3, r3
 80080ee:	61a3      	str	r3, [r4, #24]
 80080f0:	6923      	ldr	r3, [r4, #16]
 80080f2:	b943      	cbnz	r3, 8008106 <__swsetup_r+0xc6>
 80080f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080f8:	d1ba      	bne.n	8008070 <__swsetup_r+0x30>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	0781      	lsls	r1, r0, #30
 80080fe:	bf58      	it	pl
 8008100:	6963      	ldrpl	r3, [r4, #20]
 8008102:	60a3      	str	r3, [r4, #8]
 8008104:	e7f4      	b.n	80080f0 <__swsetup_r+0xb0>
 8008106:	2000      	movs	r0, #0
 8008108:	e7f7      	b.n	80080fa <__swsetup_r+0xba>
 800810a:	bf00      	nop
 800810c:	20000434 	.word	0x20000434
 8008110:	08009e28 	.word	0x08009e28
 8008114:	08009e48 	.word	0x08009e48
 8008118:	08009e08 	.word	0x08009e08

0800811c <abort>:
 800811c:	b508      	push	{r3, lr}
 800811e:	2006      	movs	r0, #6
 8008120:	f000 faa2 	bl	8008668 <raise>
 8008124:	2001      	movs	r0, #1
 8008126:	f7f9 fd35 	bl	8001b94 <_exit>
	...

0800812c <__sflush_r>:
 800812c:	898a      	ldrh	r2, [r1, #12]
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	4605      	mov	r5, r0
 8008134:	0710      	lsls	r0, r2, #28
 8008136:	460c      	mov	r4, r1
 8008138:	d458      	bmi.n	80081ec <__sflush_r+0xc0>
 800813a:	684b      	ldr	r3, [r1, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dc05      	bgt.n	800814c <__sflush_r+0x20>
 8008140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008142:	2b00      	cmp	r3, #0
 8008144:	dc02      	bgt.n	800814c <__sflush_r+0x20>
 8008146:	2000      	movs	r0, #0
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814e:	2e00      	cmp	r6, #0
 8008150:	d0f9      	beq.n	8008146 <__sflush_r+0x1a>
 8008152:	2300      	movs	r3, #0
 8008154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008158:	682f      	ldr	r7, [r5, #0]
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	d032      	beq.n	80081c4 <__sflush_r+0x98>
 800815e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	075a      	lsls	r2, r3, #29
 8008164:	d505      	bpl.n	8008172 <__sflush_r+0x46>
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	1ac0      	subs	r0, r0, r3
 800816a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800816c:	b10b      	cbz	r3, 8008172 <__sflush_r+0x46>
 800816e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008170:	1ac0      	subs	r0, r0, r3
 8008172:	2300      	movs	r3, #0
 8008174:	4602      	mov	r2, r0
 8008176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008178:	6a21      	ldr	r1, [r4, #32]
 800817a:	4628      	mov	r0, r5
 800817c:	47b0      	blx	r6
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	d106      	bne.n	8008192 <__sflush_r+0x66>
 8008184:	6829      	ldr	r1, [r5, #0]
 8008186:	291d      	cmp	r1, #29
 8008188:	d82c      	bhi.n	80081e4 <__sflush_r+0xb8>
 800818a:	4a2a      	ldr	r2, [pc, #168]	; (8008234 <__sflush_r+0x108>)
 800818c:	40ca      	lsrs	r2, r1
 800818e:	07d6      	lsls	r6, r2, #31
 8008190:	d528      	bpl.n	80081e4 <__sflush_r+0xb8>
 8008192:	2200      	movs	r2, #0
 8008194:	6062      	str	r2, [r4, #4]
 8008196:	04d9      	lsls	r1, r3, #19
 8008198:	6922      	ldr	r2, [r4, #16]
 800819a:	6022      	str	r2, [r4, #0]
 800819c:	d504      	bpl.n	80081a8 <__sflush_r+0x7c>
 800819e:	1c42      	adds	r2, r0, #1
 80081a0:	d101      	bne.n	80081a6 <__sflush_r+0x7a>
 80081a2:	682b      	ldr	r3, [r5, #0]
 80081a4:	b903      	cbnz	r3, 80081a8 <__sflush_r+0x7c>
 80081a6:	6560      	str	r0, [r4, #84]	; 0x54
 80081a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081aa:	602f      	str	r7, [r5, #0]
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d0ca      	beq.n	8008146 <__sflush_r+0x1a>
 80081b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b4:	4299      	cmp	r1, r3
 80081b6:	d002      	beq.n	80081be <__sflush_r+0x92>
 80081b8:	4628      	mov	r0, r5
 80081ba:	f7ff f989 	bl	80074d0 <_free_r>
 80081be:	2000      	movs	r0, #0
 80081c0:	6360      	str	r0, [r4, #52]	; 0x34
 80081c2:	e7c1      	b.n	8008148 <__sflush_r+0x1c>
 80081c4:	6a21      	ldr	r1, [r4, #32]
 80081c6:	2301      	movs	r3, #1
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b0      	blx	r6
 80081cc:	1c41      	adds	r1, r0, #1
 80081ce:	d1c7      	bne.n	8008160 <__sflush_r+0x34>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0c4      	beq.n	8008160 <__sflush_r+0x34>
 80081d6:	2b1d      	cmp	r3, #29
 80081d8:	d001      	beq.n	80081de <__sflush_r+0xb2>
 80081da:	2b16      	cmp	r3, #22
 80081dc:	d101      	bne.n	80081e2 <__sflush_r+0xb6>
 80081de:	602f      	str	r7, [r5, #0]
 80081e0:	e7b1      	b.n	8008146 <__sflush_r+0x1a>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	e7ad      	b.n	8008148 <__sflush_r+0x1c>
 80081ec:	690f      	ldr	r7, [r1, #16]
 80081ee:	2f00      	cmp	r7, #0
 80081f0:	d0a9      	beq.n	8008146 <__sflush_r+0x1a>
 80081f2:	0793      	lsls	r3, r2, #30
 80081f4:	680e      	ldr	r6, [r1, #0]
 80081f6:	bf08      	it	eq
 80081f8:	694b      	ldreq	r3, [r1, #20]
 80081fa:	600f      	str	r7, [r1, #0]
 80081fc:	bf18      	it	ne
 80081fe:	2300      	movne	r3, #0
 8008200:	eba6 0807 	sub.w	r8, r6, r7
 8008204:	608b      	str	r3, [r1, #8]
 8008206:	f1b8 0f00 	cmp.w	r8, #0
 800820a:	dd9c      	ble.n	8008146 <__sflush_r+0x1a>
 800820c:	6a21      	ldr	r1, [r4, #32]
 800820e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008210:	4643      	mov	r3, r8
 8008212:	463a      	mov	r2, r7
 8008214:	4628      	mov	r0, r5
 8008216:	47b0      	blx	r6
 8008218:	2800      	cmp	r0, #0
 800821a:	dc06      	bgt.n	800822a <__sflush_r+0xfe>
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e78e      	b.n	8008148 <__sflush_r+0x1c>
 800822a:	4407      	add	r7, r0
 800822c:	eba8 0800 	sub.w	r8, r8, r0
 8008230:	e7e9      	b.n	8008206 <__sflush_r+0xda>
 8008232:	bf00      	nop
 8008234:	20400001 	.word	0x20400001

08008238 <_fflush_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	690b      	ldr	r3, [r1, #16]
 800823c:	4605      	mov	r5, r0
 800823e:	460c      	mov	r4, r1
 8008240:	b913      	cbnz	r3, 8008248 <_fflush_r+0x10>
 8008242:	2500      	movs	r5, #0
 8008244:	4628      	mov	r0, r5
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	b118      	cbz	r0, 8008252 <_fflush_r+0x1a>
 800824a:	6983      	ldr	r3, [r0, #24]
 800824c:	b90b      	cbnz	r3, 8008252 <_fflush_r+0x1a>
 800824e:	f000 f887 	bl	8008360 <__sinit>
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <_fflush_r+0x6c>)
 8008254:	429c      	cmp	r4, r3
 8008256:	d11b      	bne.n	8008290 <_fflush_r+0x58>
 8008258:	686c      	ldr	r4, [r5, #4]
 800825a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0ef      	beq.n	8008242 <_fflush_r+0xa>
 8008262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008264:	07d0      	lsls	r0, r2, #31
 8008266:	d404      	bmi.n	8008272 <_fflush_r+0x3a>
 8008268:	0599      	lsls	r1, r3, #22
 800826a:	d402      	bmi.n	8008272 <_fflush_r+0x3a>
 800826c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826e:	f000 f915 	bl	800849c <__retarget_lock_acquire_recursive>
 8008272:	4628      	mov	r0, r5
 8008274:	4621      	mov	r1, r4
 8008276:	f7ff ff59 	bl	800812c <__sflush_r>
 800827a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800827c:	07da      	lsls	r2, r3, #31
 800827e:	4605      	mov	r5, r0
 8008280:	d4e0      	bmi.n	8008244 <_fflush_r+0xc>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	059b      	lsls	r3, r3, #22
 8008286:	d4dd      	bmi.n	8008244 <_fflush_r+0xc>
 8008288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828a:	f000 f908 	bl	800849e <__retarget_lock_release_recursive>
 800828e:	e7d9      	b.n	8008244 <_fflush_r+0xc>
 8008290:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <_fflush_r+0x70>)
 8008292:	429c      	cmp	r4, r3
 8008294:	d101      	bne.n	800829a <_fflush_r+0x62>
 8008296:	68ac      	ldr	r4, [r5, #8]
 8008298:	e7df      	b.n	800825a <_fflush_r+0x22>
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <_fflush_r+0x74>)
 800829c:	429c      	cmp	r4, r3
 800829e:	bf08      	it	eq
 80082a0:	68ec      	ldreq	r4, [r5, #12]
 80082a2:	e7da      	b.n	800825a <_fflush_r+0x22>
 80082a4:	08009e28 	.word	0x08009e28
 80082a8:	08009e48 	.word	0x08009e48
 80082ac:	08009e08 	.word	0x08009e08

080082b0 <std>:
 80082b0:	2300      	movs	r3, #0
 80082b2:	b510      	push	{r4, lr}
 80082b4:	4604      	mov	r4, r0
 80082b6:	e9c0 3300 	strd	r3, r3, [r0]
 80082ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082be:	6083      	str	r3, [r0, #8]
 80082c0:	8181      	strh	r1, [r0, #12]
 80082c2:	6643      	str	r3, [r0, #100]	; 0x64
 80082c4:	81c2      	strh	r2, [r0, #14]
 80082c6:	6183      	str	r3, [r0, #24]
 80082c8:	4619      	mov	r1, r3
 80082ca:	2208      	movs	r2, #8
 80082cc:	305c      	adds	r0, #92	; 0x5c
 80082ce:	f7fd f92d 	bl	800552c <memset>
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <std+0x38>)
 80082d4:	6263      	str	r3, [r4, #36]	; 0x24
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <std+0x3c>)
 80082d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x40>)
 80082dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082de:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <std+0x44>)
 80082e0:	6224      	str	r4, [r4, #32]
 80082e2:	6323      	str	r3, [r4, #48]	; 0x30
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	bf00      	nop
 80082e8:	080086a1 	.word	0x080086a1
 80082ec:	080086c3 	.word	0x080086c3
 80082f0:	080086fb 	.word	0x080086fb
 80082f4:	0800871f 	.word	0x0800871f

080082f8 <_cleanup_r>:
 80082f8:	4901      	ldr	r1, [pc, #4]	; (8008300 <_cleanup_r+0x8>)
 80082fa:	f000 b8af 	b.w	800845c <_fwalk_reent>
 80082fe:	bf00      	nop
 8008300:	08008239 	.word	0x08008239

08008304 <__sfmoreglue>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	2268      	movs	r2, #104	; 0x68
 8008308:	1e4d      	subs	r5, r1, #1
 800830a:	4355      	muls	r5, r2
 800830c:	460e      	mov	r6, r1
 800830e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008312:	f7ff f949 	bl	80075a8 <_malloc_r>
 8008316:	4604      	mov	r4, r0
 8008318:	b140      	cbz	r0, 800832c <__sfmoreglue+0x28>
 800831a:	2100      	movs	r1, #0
 800831c:	e9c0 1600 	strd	r1, r6, [r0]
 8008320:	300c      	adds	r0, #12
 8008322:	60a0      	str	r0, [r4, #8]
 8008324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008328:	f7fd f900 	bl	800552c <memset>
 800832c:	4620      	mov	r0, r4
 800832e:	bd70      	pop	{r4, r5, r6, pc}

08008330 <__sfp_lock_acquire>:
 8008330:	4801      	ldr	r0, [pc, #4]	; (8008338 <__sfp_lock_acquire+0x8>)
 8008332:	f000 b8b3 	b.w	800849c <__retarget_lock_acquire_recursive>
 8008336:	bf00      	nop
 8008338:	20000b61 	.word	0x20000b61

0800833c <__sfp_lock_release>:
 800833c:	4801      	ldr	r0, [pc, #4]	; (8008344 <__sfp_lock_release+0x8>)
 800833e:	f000 b8ae 	b.w	800849e <__retarget_lock_release_recursive>
 8008342:	bf00      	nop
 8008344:	20000b61 	.word	0x20000b61

08008348 <__sinit_lock_acquire>:
 8008348:	4801      	ldr	r0, [pc, #4]	; (8008350 <__sinit_lock_acquire+0x8>)
 800834a:	f000 b8a7 	b.w	800849c <__retarget_lock_acquire_recursive>
 800834e:	bf00      	nop
 8008350:	20000b62 	.word	0x20000b62

08008354 <__sinit_lock_release>:
 8008354:	4801      	ldr	r0, [pc, #4]	; (800835c <__sinit_lock_release+0x8>)
 8008356:	f000 b8a2 	b.w	800849e <__retarget_lock_release_recursive>
 800835a:	bf00      	nop
 800835c:	20000b62 	.word	0x20000b62

08008360 <__sinit>:
 8008360:	b510      	push	{r4, lr}
 8008362:	4604      	mov	r4, r0
 8008364:	f7ff fff0 	bl	8008348 <__sinit_lock_acquire>
 8008368:	69a3      	ldr	r3, [r4, #24]
 800836a:	b11b      	cbz	r3, 8008374 <__sinit+0x14>
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f7ff bff0 	b.w	8008354 <__sinit_lock_release>
 8008374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008378:	6523      	str	r3, [r4, #80]	; 0x50
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <__sinit+0x68>)
 800837c:	4a13      	ldr	r2, [pc, #76]	; (80083cc <__sinit+0x6c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	62a2      	str	r2, [r4, #40]	; 0x28
 8008382:	42a3      	cmp	r3, r4
 8008384:	bf04      	itt	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	61a3      	streq	r3, [r4, #24]
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f820 	bl	80083d0 <__sfp>
 8008390:	6060      	str	r0, [r4, #4]
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f81c 	bl	80083d0 <__sfp>
 8008398:	60a0      	str	r0, [r4, #8]
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f818 	bl	80083d0 <__sfp>
 80083a0:	2200      	movs	r2, #0
 80083a2:	60e0      	str	r0, [r4, #12]
 80083a4:	2104      	movs	r1, #4
 80083a6:	6860      	ldr	r0, [r4, #4]
 80083a8:	f7ff ff82 	bl	80082b0 <std>
 80083ac:	68a0      	ldr	r0, [r4, #8]
 80083ae:	2201      	movs	r2, #1
 80083b0:	2109      	movs	r1, #9
 80083b2:	f7ff ff7d 	bl	80082b0 <std>
 80083b6:	68e0      	ldr	r0, [r4, #12]
 80083b8:	2202      	movs	r2, #2
 80083ba:	2112      	movs	r1, #18
 80083bc:	f7ff ff78 	bl	80082b0 <std>
 80083c0:	2301      	movs	r3, #1
 80083c2:	61a3      	str	r3, [r4, #24]
 80083c4:	e7d2      	b.n	800836c <__sinit+0xc>
 80083c6:	bf00      	nop
 80083c8:	080099dc 	.word	0x080099dc
 80083cc:	080082f9 	.word	0x080082f9

080083d0 <__sfp>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	4607      	mov	r7, r0
 80083d4:	f7ff ffac 	bl	8008330 <__sfp_lock_acquire>
 80083d8:	4b1e      	ldr	r3, [pc, #120]	; (8008454 <__sfp+0x84>)
 80083da:	681e      	ldr	r6, [r3, #0]
 80083dc:	69b3      	ldr	r3, [r6, #24]
 80083de:	b913      	cbnz	r3, 80083e6 <__sfp+0x16>
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff ffbd 	bl	8008360 <__sinit>
 80083e6:	3648      	adds	r6, #72	; 0x48
 80083e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	d503      	bpl.n	80083f8 <__sfp+0x28>
 80083f0:	6833      	ldr	r3, [r6, #0]
 80083f2:	b30b      	cbz	r3, 8008438 <__sfp+0x68>
 80083f4:	6836      	ldr	r6, [r6, #0]
 80083f6:	e7f7      	b.n	80083e8 <__sfp+0x18>
 80083f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083fc:	b9d5      	cbnz	r5, 8008434 <__sfp+0x64>
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <__sfp+0x88>)
 8008400:	60e3      	str	r3, [r4, #12]
 8008402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008406:	6665      	str	r5, [r4, #100]	; 0x64
 8008408:	f000 f847 	bl	800849a <__retarget_lock_init_recursive>
 800840c:	f7ff ff96 	bl	800833c <__sfp_lock_release>
 8008410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008418:	6025      	str	r5, [r4, #0]
 800841a:	61a5      	str	r5, [r4, #24]
 800841c:	2208      	movs	r2, #8
 800841e:	4629      	mov	r1, r5
 8008420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008424:	f7fd f882 	bl	800552c <memset>
 8008428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800842c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008430:	4620      	mov	r0, r4
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008434:	3468      	adds	r4, #104	; 0x68
 8008436:	e7d9      	b.n	80083ec <__sfp+0x1c>
 8008438:	2104      	movs	r1, #4
 800843a:	4638      	mov	r0, r7
 800843c:	f7ff ff62 	bl	8008304 <__sfmoreglue>
 8008440:	4604      	mov	r4, r0
 8008442:	6030      	str	r0, [r6, #0]
 8008444:	2800      	cmp	r0, #0
 8008446:	d1d5      	bne.n	80083f4 <__sfp+0x24>
 8008448:	f7ff ff78 	bl	800833c <__sfp_lock_release>
 800844c:	230c      	movs	r3, #12
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	e7ee      	b.n	8008430 <__sfp+0x60>
 8008452:	bf00      	nop
 8008454:	080099dc 	.word	0x080099dc
 8008458:	ffff0001 	.word	0xffff0001

0800845c <_fwalk_reent>:
 800845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008460:	4606      	mov	r6, r0
 8008462:	4688      	mov	r8, r1
 8008464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008468:	2700      	movs	r7, #0
 800846a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846e:	f1b9 0901 	subs.w	r9, r9, #1
 8008472:	d505      	bpl.n	8008480 <_fwalk_reent+0x24>
 8008474:	6824      	ldr	r4, [r4, #0]
 8008476:	2c00      	cmp	r4, #0
 8008478:	d1f7      	bne.n	800846a <_fwalk_reent+0xe>
 800847a:	4638      	mov	r0, r7
 800847c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008480:	89ab      	ldrh	r3, [r5, #12]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d907      	bls.n	8008496 <_fwalk_reent+0x3a>
 8008486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800848a:	3301      	adds	r3, #1
 800848c:	d003      	beq.n	8008496 <_fwalk_reent+0x3a>
 800848e:	4629      	mov	r1, r5
 8008490:	4630      	mov	r0, r6
 8008492:	47c0      	blx	r8
 8008494:	4307      	orrs	r7, r0
 8008496:	3568      	adds	r5, #104	; 0x68
 8008498:	e7e9      	b.n	800846e <_fwalk_reent+0x12>

0800849a <__retarget_lock_init_recursive>:
 800849a:	4770      	bx	lr

0800849c <__retarget_lock_acquire_recursive>:
 800849c:	4770      	bx	lr

0800849e <__retarget_lock_release_recursive>:
 800849e:	4770      	bx	lr

080084a0 <__swhatbuf_r>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	460e      	mov	r6, r1
 80084a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a8:	2900      	cmp	r1, #0
 80084aa:	b096      	sub	sp, #88	; 0x58
 80084ac:	4614      	mov	r4, r2
 80084ae:	461d      	mov	r5, r3
 80084b0:	da08      	bge.n	80084c4 <__swhatbuf_r+0x24>
 80084b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	061a      	lsls	r2, r3, #24
 80084bc:	d410      	bmi.n	80084e0 <__swhatbuf_r+0x40>
 80084be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c2:	e00e      	b.n	80084e2 <__swhatbuf_r+0x42>
 80084c4:	466a      	mov	r2, sp
 80084c6:	f000 f951 	bl	800876c <_fstat_r>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	dbf1      	blt.n	80084b2 <__swhatbuf_r+0x12>
 80084ce:	9a01      	ldr	r2, [sp, #4]
 80084d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084d8:	425a      	negs	r2, r3
 80084da:	415a      	adcs	r2, r3
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	e7ee      	b.n	80084be <__swhatbuf_r+0x1e>
 80084e0:	2340      	movs	r3, #64	; 0x40
 80084e2:	2000      	movs	r0, #0
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	b016      	add	sp, #88	; 0x58
 80084e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080084ec <__smakebuf_r>:
 80084ec:	898b      	ldrh	r3, [r1, #12]
 80084ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084f0:	079d      	lsls	r5, r3, #30
 80084f2:	4606      	mov	r6, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	d507      	bpl.n	8008508 <__smakebuf_r+0x1c>
 80084f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	2301      	movs	r3, #1
 8008502:	6163      	str	r3, [r4, #20]
 8008504:	b002      	add	sp, #8
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	ab01      	add	r3, sp, #4
 800850a:	466a      	mov	r2, sp
 800850c:	f7ff ffc8 	bl	80084a0 <__swhatbuf_r>
 8008510:	9900      	ldr	r1, [sp, #0]
 8008512:	4605      	mov	r5, r0
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff f847 	bl	80075a8 <_malloc_r>
 800851a:	b948      	cbnz	r0, 8008530 <__smakebuf_r+0x44>
 800851c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008520:	059a      	lsls	r2, r3, #22
 8008522:	d4ef      	bmi.n	8008504 <__smakebuf_r+0x18>
 8008524:	f023 0303 	bic.w	r3, r3, #3
 8008528:	f043 0302 	orr.w	r3, r3, #2
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	e7e3      	b.n	80084f8 <__smakebuf_r+0xc>
 8008530:	4b0d      	ldr	r3, [pc, #52]	; (8008568 <__smakebuf_r+0x7c>)
 8008532:	62b3      	str	r3, [r6, #40]	; 0x28
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	6020      	str	r0, [r4, #0]
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	6163      	str	r3, [r4, #20]
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	6120      	str	r0, [r4, #16]
 8008546:	b15b      	cbz	r3, 8008560 <__smakebuf_r+0x74>
 8008548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f91f 	bl	8008790 <_isatty_r>
 8008552:	b128      	cbz	r0, 8008560 <__smakebuf_r+0x74>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	89a0      	ldrh	r0, [r4, #12]
 8008562:	4305      	orrs	r5, r0
 8008564:	81a5      	strh	r5, [r4, #12]
 8008566:	e7cd      	b.n	8008504 <__smakebuf_r+0x18>
 8008568:	080082f9 	.word	0x080082f9

0800856c <memmove>:
 800856c:	4288      	cmp	r0, r1
 800856e:	b510      	push	{r4, lr}
 8008570:	eb01 0402 	add.w	r4, r1, r2
 8008574:	d902      	bls.n	800857c <memmove+0x10>
 8008576:	4284      	cmp	r4, r0
 8008578:	4623      	mov	r3, r4
 800857a:	d807      	bhi.n	800858c <memmove+0x20>
 800857c:	1e43      	subs	r3, r0, #1
 800857e:	42a1      	cmp	r1, r4
 8008580:	d008      	beq.n	8008594 <memmove+0x28>
 8008582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800858a:	e7f8      	b.n	800857e <memmove+0x12>
 800858c:	4402      	add	r2, r0
 800858e:	4601      	mov	r1, r0
 8008590:	428a      	cmp	r2, r1
 8008592:	d100      	bne.n	8008596 <memmove+0x2a>
 8008594:	bd10      	pop	{r4, pc}
 8008596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800859e:	e7f7      	b.n	8008590 <memmove+0x24>

080085a0 <__malloc_lock>:
 80085a0:	4801      	ldr	r0, [pc, #4]	; (80085a8 <__malloc_lock+0x8>)
 80085a2:	f7ff bf7b 	b.w	800849c <__retarget_lock_acquire_recursive>
 80085a6:	bf00      	nop
 80085a8:	20000b60 	.word	0x20000b60

080085ac <__malloc_unlock>:
 80085ac:	4801      	ldr	r0, [pc, #4]	; (80085b4 <__malloc_unlock+0x8>)
 80085ae:	f7ff bf76 	b.w	800849e <__retarget_lock_release_recursive>
 80085b2:	bf00      	nop
 80085b4:	20000b60 	.word	0x20000b60

080085b8 <_realloc_r>:
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085bc:	4680      	mov	r8, r0
 80085be:	4614      	mov	r4, r2
 80085c0:	460e      	mov	r6, r1
 80085c2:	b921      	cbnz	r1, 80085ce <_realloc_r+0x16>
 80085c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	4611      	mov	r1, r2
 80085ca:	f7fe bfed 	b.w	80075a8 <_malloc_r>
 80085ce:	b92a      	cbnz	r2, 80085dc <_realloc_r+0x24>
 80085d0:	f7fe ff7e 	bl	80074d0 <_free_r>
 80085d4:	4625      	mov	r5, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	f000 f8fa 	bl	80087d4 <_malloc_usable_size_r>
 80085e0:	4284      	cmp	r4, r0
 80085e2:	4607      	mov	r7, r0
 80085e4:	d802      	bhi.n	80085ec <_realloc_r+0x34>
 80085e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085ea:	d812      	bhi.n	8008612 <_realloc_r+0x5a>
 80085ec:	4621      	mov	r1, r4
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7fe ffda 	bl	80075a8 <_malloc_r>
 80085f4:	4605      	mov	r5, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d0ed      	beq.n	80085d6 <_realloc_r+0x1e>
 80085fa:	42bc      	cmp	r4, r7
 80085fc:	4622      	mov	r2, r4
 80085fe:	4631      	mov	r1, r6
 8008600:	bf28      	it	cs
 8008602:	463a      	movcs	r2, r7
 8008604:	f7fc ff84 	bl	8005510 <memcpy>
 8008608:	4631      	mov	r1, r6
 800860a:	4640      	mov	r0, r8
 800860c:	f7fe ff60 	bl	80074d0 <_free_r>
 8008610:	e7e1      	b.n	80085d6 <_realloc_r+0x1e>
 8008612:	4635      	mov	r5, r6
 8008614:	e7df      	b.n	80085d6 <_realloc_r+0x1e>

08008616 <_raise_r>:
 8008616:	291f      	cmp	r1, #31
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	460d      	mov	r5, r1
 800861e:	d904      	bls.n	800862a <_raise_r+0x14>
 8008620:	2316      	movs	r3, #22
 8008622:	6003      	str	r3, [r0, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800862c:	b112      	cbz	r2, 8008634 <_raise_r+0x1e>
 800862e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008632:	b94b      	cbnz	r3, 8008648 <_raise_r+0x32>
 8008634:	4620      	mov	r0, r4
 8008636:	f000 f831 	bl	800869c <_getpid_r>
 800863a:	462a      	mov	r2, r5
 800863c:	4601      	mov	r1, r0
 800863e:	4620      	mov	r0, r4
 8008640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008644:	f000 b818 	b.w	8008678 <_kill_r>
 8008648:	2b01      	cmp	r3, #1
 800864a:	d00a      	beq.n	8008662 <_raise_r+0x4c>
 800864c:	1c59      	adds	r1, r3, #1
 800864e:	d103      	bne.n	8008658 <_raise_r+0x42>
 8008650:	2316      	movs	r3, #22
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	2001      	movs	r0, #1
 8008656:	e7e7      	b.n	8008628 <_raise_r+0x12>
 8008658:	2400      	movs	r4, #0
 800865a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800865e:	4628      	mov	r0, r5
 8008660:	4798      	blx	r3
 8008662:	2000      	movs	r0, #0
 8008664:	e7e0      	b.n	8008628 <_raise_r+0x12>
	...

08008668 <raise>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <raise+0xc>)
 800866a:	4601      	mov	r1, r0
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f7ff bfd2 	b.w	8008616 <_raise_r>
 8008672:	bf00      	nop
 8008674:	20000434 	.word	0x20000434

08008678 <_kill_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d07      	ldr	r5, [pc, #28]	; (8008698 <_kill_r+0x20>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f7f9 fa75 	bl	8001b74 <_kill>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d102      	bne.n	8008694 <_kill_r+0x1c>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b103      	cbz	r3, 8008694 <_kill_r+0x1c>
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000b64 	.word	0x20000b64

0800869c <_getpid_r>:
 800869c:	f7f9 ba62 	b.w	8001b64 <_getpid>

080086a0 <__sread>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	f000 f89c 	bl	80087e4 <_read_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	bfab      	itete	ge
 80086b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086b2:	89a3      	ldrhlt	r3, [r4, #12]
 80086b4:	181b      	addge	r3, r3, r0
 80086b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ba:	bfac      	ite	ge
 80086bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086be:	81a3      	strhlt	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__swrite>:
 80086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	461f      	mov	r7, r3
 80086c8:	898b      	ldrh	r3, [r1, #12]
 80086ca:	05db      	lsls	r3, r3, #23
 80086cc:	4605      	mov	r5, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4616      	mov	r6, r2
 80086d2:	d505      	bpl.n	80086e0 <__swrite+0x1e>
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	2302      	movs	r3, #2
 80086da:	2200      	movs	r2, #0
 80086dc:	f000 f868 	bl	80087b0 <_lseek_r>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	4628      	mov	r0, r5
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	f000 b817 	b.w	8008728 <_write_r>

080086fa <__sseek>:
 80086fa:	b510      	push	{r4, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008702:	f000 f855 	bl	80087b0 <_lseek_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	bf15      	itete	ne
 800870c:	6560      	strne	r0, [r4, #84]	; 0x54
 800870e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008716:	81a3      	strheq	r3, [r4, #12]
 8008718:	bf18      	it	ne
 800871a:	81a3      	strhne	r3, [r4, #12]
 800871c:	bd10      	pop	{r4, pc}

0800871e <__sclose>:
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 b813 	b.w	800874c <_close_r>
	...

08008728 <_write_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	; (8008748 <_write_r+0x20>)
 800872c:	4604      	mov	r4, r0
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f9 fa53 	bl	8001be2 <_write>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_write_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_write_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000b64 	.word	0x20000b64

0800874c <_close_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	; (8008768 <_close_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f9 fa5f 	bl	8001c1a <_close>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_close_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_close_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000b64 	.word	0x20000b64

0800876c <_fstat_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d07      	ldr	r5, [pc, #28]	; (800878c <_fstat_r+0x20>)
 8008770:	2300      	movs	r3, #0
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	f7f9 fa5a 	bl	8001c32 <_fstat>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d102      	bne.n	8008788 <_fstat_r+0x1c>
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	b103      	cbz	r3, 8008788 <_fstat_r+0x1c>
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	20000b64 	.word	0x20000b64

08008790 <_isatty_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_isatty_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f9 fa59 	bl	8001c52 <_isatty>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_isatty_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_isatty_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000b64 	.word	0x20000b64

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_lseek_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7f9 fa52 	bl	8001c68 <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000b64 	.word	0x20000b64

080087d4 <_malloc_usable_size_r>:
 80087d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d8:	1f18      	subs	r0, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfbc      	itt	lt
 80087de:	580b      	ldrlt	r3, [r1, r0]
 80087e0:	18c0      	addlt	r0, r0, r3
 80087e2:	4770      	bx	lr

080087e4 <_read_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	; (8008804 <_read_r+0x20>)
 80087e8:	4604      	mov	r4, r0
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	602a      	str	r2, [r5, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f7f9 f9d8 	bl	8001ba8 <_read>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_read_r+0x1e>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_read_r+0x1e>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000b64 	.word	0x20000b64

08008808 <sin>:
 8008808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800880a:	ec53 2b10 	vmov	r2, r3, d0
 800880e:	4828      	ldr	r0, [pc, #160]	; (80088b0 <sin+0xa8>)
 8008810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008814:	4281      	cmp	r1, r0
 8008816:	dc07      	bgt.n	8008828 <sin+0x20>
 8008818:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80088a8 <sin+0xa0>
 800881c:	2000      	movs	r0, #0
 800881e:	b005      	add	sp, #20
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	f000 be6c 	b.w	8009500 <__kernel_sin>
 8008828:	4822      	ldr	r0, [pc, #136]	; (80088b4 <sin+0xac>)
 800882a:	4281      	cmp	r1, r0
 800882c:	dd09      	ble.n	8008842 <sin+0x3a>
 800882e:	ee10 0a10 	vmov	r0, s0
 8008832:	4619      	mov	r1, r3
 8008834:	f7f7 fd28 	bl	8000288 <__aeabi_dsub>
 8008838:	ec41 0b10 	vmov	d0, r0, r1
 800883c:	b005      	add	sp, #20
 800883e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008842:	4668      	mov	r0, sp
 8008844:	f000 f838 	bl	80088b8 <__ieee754_rem_pio2>
 8008848:	f000 0003 	and.w	r0, r0, #3
 800884c:	2801      	cmp	r0, #1
 800884e:	d00c      	beq.n	800886a <sin+0x62>
 8008850:	2802      	cmp	r0, #2
 8008852:	d011      	beq.n	8008878 <sin+0x70>
 8008854:	b9f0      	cbnz	r0, 8008894 <sin+0x8c>
 8008856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800885a:	ed9d 0b00 	vldr	d0, [sp]
 800885e:	2001      	movs	r0, #1
 8008860:	f000 fe4e 	bl	8009500 <__kernel_sin>
 8008864:	ec51 0b10 	vmov	r0, r1, d0
 8008868:	e7e6      	b.n	8008838 <sin+0x30>
 800886a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800886e:	ed9d 0b00 	vldr	d0, [sp]
 8008872:	f000 fa2d 	bl	8008cd0 <__kernel_cos>
 8008876:	e7f5      	b.n	8008864 <sin+0x5c>
 8008878:	ed9d 1b02 	vldr	d1, [sp, #8]
 800887c:	ed9d 0b00 	vldr	d0, [sp]
 8008880:	2001      	movs	r0, #1
 8008882:	f000 fe3d 	bl	8009500 <__kernel_sin>
 8008886:	ec53 2b10 	vmov	r2, r3, d0
 800888a:	ee10 0a10 	vmov	r0, s0
 800888e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008892:	e7d1      	b.n	8008838 <sin+0x30>
 8008894:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008898:	ed9d 0b00 	vldr	d0, [sp]
 800889c:	f000 fa18 	bl	8008cd0 <__kernel_cos>
 80088a0:	e7f1      	b.n	8008886 <sin+0x7e>
 80088a2:	bf00      	nop
 80088a4:	f3af 8000 	nop.w
	...
 80088b0:	3fe921fb 	.word	0x3fe921fb
 80088b4:	7fefffff 	.word	0x7fefffff

080088b8 <__ieee754_rem_pio2>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	ed2d 8b02 	vpush	{d8}
 80088c0:	ec55 4b10 	vmov	r4, r5, d0
 80088c4:	4bca      	ldr	r3, [pc, #808]	; (8008bf0 <__ieee754_rem_pio2+0x338>)
 80088c6:	b08b      	sub	sp, #44	; 0x2c
 80088c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80088cc:	4598      	cmp	r8, r3
 80088ce:	4682      	mov	sl, r0
 80088d0:	9502      	str	r5, [sp, #8]
 80088d2:	dc08      	bgt.n	80088e6 <__ieee754_rem_pio2+0x2e>
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	ed80 0b00 	vstr	d0, [r0]
 80088dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088e0:	f04f 0b00 	mov.w	fp, #0
 80088e4:	e028      	b.n	8008938 <__ieee754_rem_pio2+0x80>
 80088e6:	4bc3      	ldr	r3, [pc, #780]	; (8008bf4 <__ieee754_rem_pio2+0x33c>)
 80088e8:	4598      	cmp	r8, r3
 80088ea:	dc78      	bgt.n	80089de <__ieee754_rem_pio2+0x126>
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	4ec2      	ldr	r6, [pc, #776]	; (8008bf8 <__ieee754_rem_pio2+0x340>)
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	ee10 0a10 	vmov	r0, s0
 80088f6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x300>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	4629      	mov	r1, r5
 80088fe:	dd39      	ble.n	8008974 <__ieee754_rem_pio2+0xbc>
 8008900:	f7f7 fcc2 	bl	8000288 <__aeabi_dsub>
 8008904:	45b0      	cmp	r8, r6
 8008906:	4604      	mov	r4, r0
 8008908:	460d      	mov	r5, r1
 800890a:	d01b      	beq.n	8008944 <__ieee754_rem_pio2+0x8c>
 800890c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x308>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcb9 	bl	8000288 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9ca 2300 	strd	r2, r3, [sl]
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fcb1 	bl	8000288 <__aeabi_dsub>
 8008926:	a3a6      	add	r3, pc, #664	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x308>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008934:	f04f 0b01 	mov.w	fp, #1
 8008938:	4658      	mov	r0, fp
 800893a:	b00b      	add	sp, #44	; 0x2c
 800893c:	ecbd 8b02 	vpop	{d8}
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	a3a0      	add	r3, pc, #640	; (adr r3, 8008bc8 <__ieee754_rem_pio2+0x310>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fc9d 	bl	8000288 <__aeabi_dsub>
 800894e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x318>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	4604      	mov	r4, r0
 8008956:	460d      	mov	r5, r1
 8008958:	f7f7 fc96 	bl	8000288 <__aeabi_dsub>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	e9ca 2300 	strd	r2, r3, [sl]
 8008964:	4620      	mov	r0, r4
 8008966:	4629      	mov	r1, r5
 8008968:	f7f7 fc8e 	bl	8000288 <__aeabi_dsub>
 800896c:	a398      	add	r3, pc, #608	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x318>)
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e7db      	b.n	800892c <__ieee754_rem_pio2+0x74>
 8008974:	f7f7 fc8a 	bl	800028c <__adddf3>
 8008978:	45b0      	cmp	r8, r6
 800897a:	4604      	mov	r4, r0
 800897c:	460d      	mov	r5, r1
 800897e:	d016      	beq.n	80089ae <__ieee754_rem_pio2+0xf6>
 8008980:	a38f      	add	r3, pc, #572	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x308>)
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	f7f7 fc81 	bl	800028c <__adddf3>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9ca 2300 	strd	r2, r3, [sl]
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fc77 	bl	8000288 <__aeabi_dsub>
 800899a:	a389      	add	r3, pc, #548	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x308>)
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	f7f7 fc74 	bl	800028c <__adddf3>
 80089a4:	f04f 3bff 	mov.w	fp, #4294967295
 80089a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80089ac:	e7c4      	b.n	8008938 <__ieee754_rem_pio2+0x80>
 80089ae:	a386      	add	r3, pc, #536	; (adr r3, 8008bc8 <__ieee754_rem_pio2+0x310>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	a385      	add	r3, pc, #532	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x318>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	f7f7 fc63 	bl	800028c <__adddf3>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9ca 2300 	strd	r2, r3, [sl]
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 fc59 	bl	8000288 <__aeabi_dsub>
 80089d6:	a37e      	add	r3, pc, #504	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x318>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	e7e0      	b.n	80089a0 <__ieee754_rem_pio2+0xe8>
 80089de:	4b87      	ldr	r3, [pc, #540]	; (8008bfc <__ieee754_rem_pio2+0x344>)
 80089e0:	4598      	cmp	r8, r3
 80089e2:	f300 80d9 	bgt.w	8008b98 <__ieee754_rem_pio2+0x2e0>
 80089e6:	f000 fe49 	bl	800967c <fabs>
 80089ea:	ec55 4b10 	vmov	r4, r5, d0
 80089ee:	ee10 0a10 	vmov	r0, s0
 80089f2:	a379      	add	r3, pc, #484	; (adr r3, 8008bd8 <__ieee754_rem_pio2+0x320>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7f7 fdfd 	bl	80005f8 <__aeabi_dmul>
 80089fe:	4b80      	ldr	r3, [pc, #512]	; (8008c00 <__ieee754_rem_pio2+0x348>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f7 fc43 	bl	800028c <__adddf3>
 8008a06:	f7f8 f891 	bl	8000b2c <__aeabi_d2iz>
 8008a0a:	4683      	mov	fp, r0
 8008a0c:	f7f7 fd8a 	bl	8000524 <__aeabi_i2d>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	ec43 2b18 	vmov	d8, r2, r3
 8008a18:	a367      	add	r3, pc, #412	; (adr r3, 8008bb8 <__ieee754_rem_pio2+0x300>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f7 fc2d 	bl	8000288 <__aeabi_dsub>
 8008a2e:	a364      	add	r3, pc, #400	; (adr r3, 8008bc0 <__ieee754_rem_pio2+0x308>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	ec51 0b18 	vmov	r0, r1, d8
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	f1bb 0f1f 	cmp.w	fp, #31
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	dc0d      	bgt.n	8008a66 <__ieee754_rem_pio2+0x1ae>
 8008a4a:	4b6e      	ldr	r3, [pc, #440]	; (8008c04 <__ieee754_rem_pio2+0x34c>)
 8008a4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a54:	4543      	cmp	r3, r8
 8008a56:	d006      	beq.n	8008a66 <__ieee754_rem_pio2+0x1ae>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f7 fc12 	bl	8000288 <__aeabi_dsub>
 8008a64:	e00f      	b.n	8008a86 <__ieee754_rem_pio2+0x1ce>
 8008a66:	462b      	mov	r3, r5
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f7 fc0b 	bl	8000288 <__aeabi_dsub>
 8008a72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a76:	9303      	str	r3, [sp, #12]
 8008a78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008a80:	f1b8 0f10 	cmp.w	r8, #16
 8008a84:	dc02      	bgt.n	8008a8c <__ieee754_rem_pio2+0x1d4>
 8008a86:	e9ca 0100 	strd	r0, r1, [sl]
 8008a8a:	e039      	b.n	8008b00 <__ieee754_rem_pio2+0x248>
 8008a8c:	a34e      	add	r3, pc, #312	; (adr r3, 8008bc8 <__ieee754_rem_pio2+0x310>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	ec51 0b18 	vmov	r0, r1, d8
 8008a96:	f7f7 fdaf 	bl	80005f8 <__aeabi_dmul>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	f7f7 fbef 	bl	8000288 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	f7f7 fbe7 	bl	8000288 <__aeabi_dsub>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	f7f7 fbe3 	bl	8000288 <__aeabi_dsub>
 8008ac2:	a343      	add	r3, pc, #268	; (adr r3, 8008bd0 <__ieee754_rem_pio2+0x318>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	4604      	mov	r4, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	ec51 0b18 	vmov	r0, r1, d8
 8008ad0:	f7f7 fd92 	bl	80005f8 <__aeabi_dmul>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	f7f7 fbd6 	bl	8000288 <__aeabi_dsub>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f7f7 fbce 	bl	8000288 <__aeabi_dsub>
 8008aec:	9a03      	ldr	r2, [sp, #12]
 8008aee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b31      	cmp	r3, #49	; 0x31
 8008af6:	dc24      	bgt.n	8008b42 <__ieee754_rem_pio2+0x28a>
 8008af8:	e9ca 0100 	strd	r0, r1, [sl]
 8008afc:	4646      	mov	r6, r8
 8008afe:	464f      	mov	r7, r9
 8008b00:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b04:	4630      	mov	r0, r6
 8008b06:	4642      	mov	r2, r8
 8008b08:	464b      	mov	r3, r9
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 fbbc 	bl	8000288 <__aeabi_dsub>
 8008b10:	462b      	mov	r3, r5
 8008b12:	4622      	mov	r2, r4
 8008b14:	f7f7 fbb8 	bl	8000288 <__aeabi_dsub>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b20:	f6bf af0a 	bge.w	8008938 <__ieee754_rem_pio2+0x80>
 8008b24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b28:	f8ca 3004 	str.w	r3, [sl, #4]
 8008b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b30:	f8ca 8000 	str.w	r8, [sl]
 8008b34:	f8ca 0008 	str.w	r0, [sl, #8]
 8008b38:	f8ca 300c 	str.w	r3, [sl, #12]
 8008b3c:	f1cb 0b00 	rsb	fp, fp, #0
 8008b40:	e6fa      	b.n	8008938 <__ieee754_rem_pio2+0x80>
 8008b42:	a327      	add	r3, pc, #156	; (adr r3, 8008be0 <__ieee754_rem_pio2+0x328>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	ec51 0b18 	vmov	r0, r1, d8
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fb8c 	bl	8000288 <__aeabi_dsub>
 8008b70:	4622      	mov	r2, r4
 8008b72:	462b      	mov	r3, r5
 8008b74:	f7f7 fb88 	bl	8000288 <__aeabi_dsub>
 8008b78:	a31b      	add	r3, pc, #108	; (adr r3, 8008be8 <__ieee754_rem_pio2+0x330>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	4604      	mov	r4, r0
 8008b80:	460d      	mov	r5, r1
 8008b82:	ec51 0b18 	vmov	r0, r1, d8
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	f7f7 fb7b 	bl	8000288 <__aeabi_dsub>
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	e75f      	b.n	8008a58 <__ieee754_rem_pio2+0x1a0>
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <__ieee754_rem_pio2+0x350>)
 8008b9a:	4598      	cmp	r8, r3
 8008b9c:	dd36      	ble.n	8008c0c <__ieee754_rem_pio2+0x354>
 8008b9e:	ee10 2a10 	vmov	r2, s0
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fb6e 	bl	8000288 <__aeabi_dsub>
 8008bac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008bb0:	e9ca 0100 	strd	r0, r1, [sl]
 8008bb4:	e694      	b.n	80088e0 <__ieee754_rem_pio2+0x28>
 8008bb6:	bf00      	nop
 8008bb8:	54400000 	.word	0x54400000
 8008bbc:	3ff921fb 	.word	0x3ff921fb
 8008bc0:	1a626331 	.word	0x1a626331
 8008bc4:	3dd0b461 	.word	0x3dd0b461
 8008bc8:	1a600000 	.word	0x1a600000
 8008bcc:	3dd0b461 	.word	0x3dd0b461
 8008bd0:	2e037073 	.word	0x2e037073
 8008bd4:	3ba3198a 	.word	0x3ba3198a
 8008bd8:	6dc9c883 	.word	0x6dc9c883
 8008bdc:	3fe45f30 	.word	0x3fe45f30
 8008be0:	2e000000 	.word	0x2e000000
 8008be4:	3ba3198a 	.word	0x3ba3198a
 8008be8:	252049c1 	.word	0x252049c1
 8008bec:	397b839a 	.word	0x397b839a
 8008bf0:	3fe921fb 	.word	0x3fe921fb
 8008bf4:	4002d97b 	.word	0x4002d97b
 8008bf8:	3ff921fb 	.word	0x3ff921fb
 8008bfc:	413921fb 	.word	0x413921fb
 8008c00:	3fe00000 	.word	0x3fe00000
 8008c04:	08009e68 	.word	0x08009e68
 8008c08:	7fefffff 	.word	0x7fefffff
 8008c0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008c10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008c14:	ee10 0a10 	vmov	r0, s0
 8008c18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008c1c:	ee10 6a10 	vmov	r6, s0
 8008c20:	460f      	mov	r7, r1
 8008c22:	f7f7 ff83 	bl	8000b2c <__aeabi_d2iz>
 8008c26:	f7f7 fc7d 	bl	8000524 <__aeabi_i2d>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	4b23      	ldr	r3, [pc, #140]	; (8008cc8 <__ieee754_rem_pio2+0x410>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f7f7 fcdb 	bl	80005f8 <__aeabi_dmul>
 8008c42:	460f      	mov	r7, r1
 8008c44:	4606      	mov	r6, r0
 8008c46:	f7f7 ff71 	bl	8000b2c <__aeabi_d2iz>
 8008c4a:	f7f7 fc6b 	bl	8000524 <__aeabi_i2d>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4630      	mov	r0, r6
 8008c54:	4639      	mov	r1, r7
 8008c56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c5a:	f7f7 fb15 	bl	8000288 <__aeabi_dsub>
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <__ieee754_rem_pio2+0x410>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	f7f7 fcc9 	bl	80005f8 <__aeabi_dmul>
 8008c66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c6a:	ad04      	add	r5, sp, #16
 8008c6c:	f04f 0803 	mov.w	r8, #3
 8008c70:	46a9      	mov	r9, r5
 8008c72:	2600      	movs	r6, #0
 8008c74:	2700      	movs	r7, #0
 8008c76:	4632      	mov	r2, r6
 8008c78:	463b      	mov	r3, r7
 8008c7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008c7e:	46c3      	mov	fp, r8
 8008c80:	3d08      	subs	r5, #8
 8008c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c86:	f7f7 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1f3      	bne.n	8008c76 <__ieee754_rem_pio2+0x3be>
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <__ieee754_rem_pio2+0x414>)
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	2302      	movs	r3, #2
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4622      	mov	r2, r4
 8008c98:	465b      	mov	r3, fp
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	4648      	mov	r0, r9
 8008c9e:	f000 f8df 	bl	8008e60 <__kernel_rem_pio2>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	4683      	mov	fp, r0
 8008ca8:	f6bf ae46 	bge.w	8008938 <__ieee754_rem_pio2+0x80>
 8008cac:	e9da 2100 	ldrd	r2, r1, [sl]
 8008cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cb4:	e9ca 2300 	strd	r2, r3, [sl]
 8008cb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008cbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008cc4:	e73a      	b.n	8008b3c <__ieee754_rem_pio2+0x284>
 8008cc6:	bf00      	nop
 8008cc8:	41700000 	.word	0x41700000
 8008ccc:	08009ee8 	.word	0x08009ee8

08008cd0 <__kernel_cos>:
 8008cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	ec57 6b10 	vmov	r6, r7, d0
 8008cd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008cdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008ce0:	ed8d 1b00 	vstr	d1, [sp]
 8008ce4:	da07      	bge.n	8008cf6 <__kernel_cos+0x26>
 8008ce6:	ee10 0a10 	vmov	r0, s0
 8008cea:	4639      	mov	r1, r7
 8008cec:	f7f7 ff1e 	bl	8000b2c <__aeabi_d2iz>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f000 8088 	beq.w	8008e06 <__kernel_cos+0x136>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	4b51      	ldr	r3, [pc, #324]	; (8008e48 <__kernel_cos+0x178>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	460d      	mov	r5, r1
 8008d0a:	f7f7 fc75 	bl	80005f8 <__aeabi_dmul>
 8008d0e:	a340      	add	r3, pc, #256	; (adr r3, 8008e10 <__kernel_cos+0x140>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	4682      	mov	sl, r0
 8008d16:	468b      	mov	fp, r1
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	f7f7 fc6c 	bl	80005f8 <__aeabi_dmul>
 8008d20:	a33d      	add	r3, pc, #244	; (adr r3, 8008e18 <__kernel_cos+0x148>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fab1 	bl	800028c <__adddf3>
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	a33b      	add	r3, pc, #236	; (adr r3, 8008e20 <__kernel_cos+0x150>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f7f7 faa6 	bl	8000288 <__aeabi_dsub>
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	462b      	mov	r3, r5
 8008d40:	f7f7 fc5a 	bl	80005f8 <__aeabi_dmul>
 8008d44:	a338      	add	r3, pc, #224	; (adr r3, 8008e28 <__kernel_cos+0x158>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	f7f7 fa9f 	bl	800028c <__adddf3>
 8008d4e:	4622      	mov	r2, r4
 8008d50:	462b      	mov	r3, r5
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	a336      	add	r3, pc, #216	; (adr r3, 8008e30 <__kernel_cos+0x160>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f7f7 fa94 	bl	8000288 <__aeabi_dsub>
 8008d60:	4622      	mov	r2, r4
 8008d62:	462b      	mov	r3, r5
 8008d64:	f7f7 fc48 	bl	80005f8 <__aeabi_dmul>
 8008d68:	a333      	add	r3, pc, #204	; (adr r3, 8008e38 <__kernel_cos+0x168>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	f7f7 fa8d 	bl	800028c <__adddf3>
 8008d72:	4622      	mov	r2, r4
 8008d74:	462b      	mov	r3, r5
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	462b      	mov	r3, r5
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d86:	4604      	mov	r4, r0
 8008d88:	460d      	mov	r5, r1
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	460b      	mov	r3, r1
 8008d94:	4602      	mov	r2, r0
 8008d96:	4629      	mov	r1, r5
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f7f7 fa75 	bl	8000288 <__aeabi_dsub>
 8008d9e:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <__kernel_cos+0x17c>)
 8008da0:	4598      	cmp	r8, r3
 8008da2:	4606      	mov	r6, r0
 8008da4:	460f      	mov	r7, r1
 8008da6:	dc10      	bgt.n	8008dca <__kernel_cos+0xfa>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4650      	mov	r0, sl
 8008dae:	4659      	mov	r1, fp
 8008db0:	f7f7 fa6a 	bl	8000288 <__aeabi_dsub>
 8008db4:	460b      	mov	r3, r1
 8008db6:	4926      	ldr	r1, [pc, #152]	; (8008e50 <__kernel_cos+0x180>)
 8008db8:	4602      	mov	r2, r0
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f7f7 fa64 	bl	8000288 <__aeabi_dsub>
 8008dc0:	ec41 0b10 	vmov	d0, r0, r1
 8008dc4:	b003      	add	sp, #12
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	4b22      	ldr	r3, [pc, #136]	; (8008e54 <__kernel_cos+0x184>)
 8008dcc:	4920      	ldr	r1, [pc, #128]	; (8008e50 <__kernel_cos+0x180>)
 8008dce:	4598      	cmp	r8, r3
 8008dd0:	bfcc      	ite	gt
 8008dd2:	4d21      	ldrgt	r5, [pc, #132]	; (8008e58 <__kernel_cos+0x188>)
 8008dd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008dd8:	2400      	movs	r4, #0
 8008dda:	4622      	mov	r2, r4
 8008ddc:	462b      	mov	r3, r5
 8008dde:	2000      	movs	r0, #0
 8008de0:	f7f7 fa52 	bl	8000288 <__aeabi_dsub>
 8008de4:	4622      	mov	r2, r4
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	462b      	mov	r3, r5
 8008dec:	4650      	mov	r0, sl
 8008dee:	4659      	mov	r1, fp
 8008df0:	f7f7 fa4a 	bl	8000288 <__aeabi_dsub>
 8008df4:	4632      	mov	r2, r6
 8008df6:	463b      	mov	r3, r7
 8008df8:	f7f7 fa46 	bl	8000288 <__aeabi_dsub>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4640      	mov	r0, r8
 8008e02:	4649      	mov	r1, r9
 8008e04:	e7da      	b.n	8008dbc <__kernel_cos+0xec>
 8008e06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008e40 <__kernel_cos+0x170>
 8008e0a:	e7db      	b.n	8008dc4 <__kernel_cos+0xf4>
 8008e0c:	f3af 8000 	nop.w
 8008e10:	be8838d4 	.word	0xbe8838d4
 8008e14:	bda8fae9 	.word	0xbda8fae9
 8008e18:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e1c:	3e21ee9e 	.word	0x3e21ee9e
 8008e20:	809c52ad 	.word	0x809c52ad
 8008e24:	3e927e4f 	.word	0x3e927e4f
 8008e28:	19cb1590 	.word	0x19cb1590
 8008e2c:	3efa01a0 	.word	0x3efa01a0
 8008e30:	16c15177 	.word	0x16c15177
 8008e34:	3f56c16c 	.word	0x3f56c16c
 8008e38:	5555554c 	.word	0x5555554c
 8008e3c:	3fa55555 	.word	0x3fa55555
 8008e40:	00000000 	.word	0x00000000
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	3fe00000 	.word	0x3fe00000
 8008e4c:	3fd33332 	.word	0x3fd33332
 8008e50:	3ff00000 	.word	0x3ff00000
 8008e54:	3fe90000 	.word	0x3fe90000
 8008e58:	3fd20000 	.word	0x3fd20000
 8008e5c:	00000000 	.word	0x00000000

08008e60 <__kernel_rem_pio2>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	ed2d 8b02 	vpush	{d8}
 8008e68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008e6c:	f112 0f14 	cmn.w	r2, #20
 8008e70:	9308      	str	r3, [sp, #32]
 8008e72:	9101      	str	r1, [sp, #4]
 8008e74:	4bc4      	ldr	r3, [pc, #784]	; (8009188 <__kernel_rem_pio2+0x328>)
 8008e76:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008e78:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e7e:	9302      	str	r3, [sp, #8]
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e86:	bfa8      	it	ge
 8008e88:	1ed4      	subge	r4, r2, #3
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	bfb2      	itee	lt
 8008e8e:	2400      	movlt	r4, #0
 8008e90:	2318      	movge	r3, #24
 8008e92:	fb94 f4f3 	sdivge	r4, r4, r3
 8008e96:	f06f 0317 	mvn.w	r3, #23
 8008e9a:	fb04 3303 	mla	r3, r4, r3, r3
 8008e9e:	eb03 0a02 	add.w	sl, r3, r2
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	9a06      	ldr	r2, [sp, #24]
 8008ea6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009178 <__kernel_rem_pio2+0x318>
 8008eaa:	eb03 0802 	add.w	r8, r3, r2
 8008eae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008eb0:	1aa7      	subs	r7, r4, r2
 8008eb2:	ae22      	add	r6, sp, #136	; 0x88
 8008eb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008eb8:	2500      	movs	r5, #0
 8008eba:	4545      	cmp	r5, r8
 8008ebc:	dd13      	ble.n	8008ee6 <__kernel_rem_pio2+0x86>
 8008ebe:	9b08      	ldr	r3, [sp, #32]
 8008ec0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009178 <__kernel_rem_pio2+0x318>
 8008ec4:	aa22      	add	r2, sp, #136	; 0x88
 8008ec6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008eca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	4598      	cmp	r8, r3
 8008ed6:	dc2f      	bgt.n	8008f38 <__kernel_rem_pio2+0xd8>
 8008ed8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008edc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008ee0:	462f      	mov	r7, r5
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	e01b      	b.n	8008f1e <__kernel_rem_pio2+0xbe>
 8008ee6:	42ef      	cmn	r7, r5
 8008ee8:	d407      	bmi.n	8008efa <__kernel_rem_pio2+0x9a>
 8008eea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008eee:	f7f7 fb19 	bl	8000524 <__aeabi_i2d>
 8008ef2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008ef6:	3501      	adds	r5, #1
 8008ef8:	e7df      	b.n	8008eba <__kernel_rem_pio2+0x5a>
 8008efa:	ec51 0b18 	vmov	r0, r1, d8
 8008efe:	e7f8      	b.n	8008ef2 <__kernel_rem_pio2+0x92>
 8008f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008f08:	f7f7 fb76 	bl	80005f8 <__aeabi_dmul>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f14:	f7f7 f9ba 	bl	800028c <__adddf3>
 8008f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	9b06      	ldr	r3, [sp, #24]
 8008f20:	429e      	cmp	r6, r3
 8008f22:	f1a7 0708 	sub.w	r7, r7, #8
 8008f26:	ddeb      	ble.n	8008f00 <__kernel_rem_pio2+0xa0>
 8008f28:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008f2c:	f108 0801 	add.w	r8, r8, #1
 8008f30:	ecab 7b02 	vstmia	fp!, {d7}
 8008f34:	3508      	adds	r5, #8
 8008f36:	e7cc      	b.n	8008ed2 <__kernel_rem_pio2+0x72>
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	aa0e      	add	r2, sp, #56	; 0x38
 8008f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f40:	930d      	str	r3, [sp, #52]	; 0x34
 8008f42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008f44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f48:	9c02      	ldr	r4, [sp, #8]
 8008f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f4c:	00e3      	lsls	r3, r4, #3
 8008f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f50:	ab9a      	add	r3, sp, #616	; 0x268
 8008f52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008f5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008f5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008f60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008f64:	46c3      	mov	fp, r8
 8008f66:	46a1      	mov	r9, r4
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	f1a5 0508 	sub.w	r5, r5, #8
 8008f70:	dc77      	bgt.n	8009062 <__kernel_rem_pio2+0x202>
 8008f72:	ec47 6b10 	vmov	d0, r6, r7
 8008f76:	4650      	mov	r0, sl
 8008f78:	f000 fc0a 	bl	8009790 <scalbn>
 8008f7c:	ec57 6b10 	vmov	r6, r7, d0
 8008f80:	2200      	movs	r2, #0
 8008f82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008f86:	ee10 0a10 	vmov	r0, s0
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 fb34 	bl	80005f8 <__aeabi_dmul>
 8008f90:	ec41 0b10 	vmov	d0, r0, r1
 8008f94:	f000 fb7c 	bl	8009690 <floor>
 8008f98:	4b7c      	ldr	r3, [pc, #496]	; (800918c <__kernel_rem_pio2+0x32c>)
 8008f9a:	ec51 0b10 	vmov	r0, r1, d0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f7f7 fb2a 	bl	80005f8 <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 f96c 	bl	8000288 <__aeabi_dsub>
 8008fb0:	460f      	mov	r7, r1
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	f7f7 fdba 	bl	8000b2c <__aeabi_d2iz>
 8008fb8:	9004      	str	r0, [sp, #16]
 8008fba:	f7f7 fab3 	bl	8000524 <__aeabi_i2d>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f95f 	bl	8000288 <__aeabi_dsub>
 8008fca:	f1ba 0f00 	cmp.w	sl, #0
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	dd6d      	ble.n	80090b0 <__kernel_rem_pio2+0x250>
 8008fd4:	1e62      	subs	r2, r4, #1
 8008fd6:	ab0e      	add	r3, sp, #56	; 0x38
 8008fd8:	9d04      	ldr	r5, [sp, #16]
 8008fda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008fde:	f1ca 0118 	rsb	r1, sl, #24
 8008fe2:	fa40 f301 	asr.w	r3, r0, r1
 8008fe6:	441d      	add	r5, r3
 8008fe8:	408b      	lsls	r3, r1
 8008fea:	1ac0      	subs	r0, r0, r3
 8008fec:	ab0e      	add	r3, sp, #56	; 0x38
 8008fee:	9504      	str	r5, [sp, #16]
 8008ff0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ff4:	f1ca 0317 	rsb	r3, sl, #23
 8008ff8:	fa40 fb03 	asr.w	fp, r0, r3
 8008ffc:	f1bb 0f00 	cmp.w	fp, #0
 8009000:	dd65      	ble.n	80090ce <__kernel_rem_pio2+0x26e>
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	2200      	movs	r2, #0
 8009006:	3301      	adds	r3, #1
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	4615      	mov	r5, r2
 800900c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009010:	4294      	cmp	r4, r2
 8009012:	f300 809c 	bgt.w	800914e <__kernel_rem_pio2+0x2ee>
 8009016:	f1ba 0f00 	cmp.w	sl, #0
 800901a:	dd07      	ble.n	800902c <__kernel_rem_pio2+0x1cc>
 800901c:	f1ba 0f01 	cmp.w	sl, #1
 8009020:	f000 80c0 	beq.w	80091a4 <__kernel_rem_pio2+0x344>
 8009024:	f1ba 0f02 	cmp.w	sl, #2
 8009028:	f000 80c6 	beq.w	80091b8 <__kernel_rem_pio2+0x358>
 800902c:	f1bb 0f02 	cmp.w	fp, #2
 8009030:	d14d      	bne.n	80090ce <__kernel_rem_pio2+0x26e>
 8009032:	4632      	mov	r2, r6
 8009034:	463b      	mov	r3, r7
 8009036:	4956      	ldr	r1, [pc, #344]	; (8009190 <__kernel_rem_pio2+0x330>)
 8009038:	2000      	movs	r0, #0
 800903a:	f7f7 f925 	bl	8000288 <__aeabi_dsub>
 800903e:	4606      	mov	r6, r0
 8009040:	460f      	mov	r7, r1
 8009042:	2d00      	cmp	r5, #0
 8009044:	d043      	beq.n	80090ce <__kernel_rem_pio2+0x26e>
 8009046:	4650      	mov	r0, sl
 8009048:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009180 <__kernel_rem_pio2+0x320>
 800904c:	f000 fba0 	bl	8009790 <scalbn>
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	ec53 2b10 	vmov	r2, r3, d0
 8009058:	f7f7 f916 	bl	8000288 <__aeabi_dsub>
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	e035      	b.n	80090ce <__kernel_rem_pio2+0x26e>
 8009062:	4b4c      	ldr	r3, [pc, #304]	; (8009194 <__kernel_rem_pio2+0x334>)
 8009064:	2200      	movs	r2, #0
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	f7f7 fac5 	bl	80005f8 <__aeabi_dmul>
 800906e:	f7f7 fd5d 	bl	8000b2c <__aeabi_d2iz>
 8009072:	f7f7 fa57 	bl	8000524 <__aeabi_i2d>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	ec43 2b18 	vmov	d8, r2, r3
 800907e:	4b46      	ldr	r3, [pc, #280]	; (8009198 <__kernel_rem_pio2+0x338>)
 8009080:	2200      	movs	r2, #0
 8009082:	f7f7 fab9 	bl	80005f8 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 f8fb 	bl	8000288 <__aeabi_dsub>
 8009092:	f7f7 fd4b 	bl	8000b2c <__aeabi_d2iz>
 8009096:	e9d5 2300 	ldrd	r2, r3, [r5]
 800909a:	f84b 0b04 	str.w	r0, [fp], #4
 800909e:	ec51 0b18 	vmov	r0, r1, d8
 80090a2:	f7f7 f8f3 	bl	800028c <__adddf3>
 80090a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	e75b      	b.n	8008f68 <__kernel_rem_pio2+0x108>
 80090b0:	d106      	bne.n	80090c0 <__kernel_rem_pio2+0x260>
 80090b2:	1e63      	subs	r3, r4, #1
 80090b4:	aa0e      	add	r2, sp, #56	; 0x38
 80090b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80090ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80090be:	e79d      	b.n	8008ffc <__kernel_rem_pio2+0x19c>
 80090c0:	4b36      	ldr	r3, [pc, #216]	; (800919c <__kernel_rem_pio2+0x33c>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	f7f7 fd1e 	bl	8000b04 <__aeabi_dcmpge>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d13d      	bne.n	8009148 <__kernel_rem_pio2+0x2e8>
 80090cc:	4683      	mov	fp, r0
 80090ce:	2200      	movs	r2, #0
 80090d0:	2300      	movs	r3, #0
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80090da:	2800      	cmp	r0, #0
 80090dc:	f000 80c0 	beq.w	8009260 <__kernel_rem_pio2+0x400>
 80090e0:	1e65      	subs	r5, r4, #1
 80090e2:	462b      	mov	r3, r5
 80090e4:	2200      	movs	r2, #0
 80090e6:	9902      	ldr	r1, [sp, #8]
 80090e8:	428b      	cmp	r3, r1
 80090ea:	da6c      	bge.n	80091c6 <__kernel_rem_pio2+0x366>
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	f000 8089 	beq.w	8009204 <__kernel_rem_pio2+0x3a4>
 80090f2:	ab0e      	add	r3, sp, #56	; 0x38
 80090f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80090f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80ad 	beq.w	800925c <__kernel_rem_pio2+0x3fc>
 8009102:	4650      	mov	r0, sl
 8009104:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009180 <__kernel_rem_pio2+0x320>
 8009108:	f000 fb42 	bl	8009790 <scalbn>
 800910c:	ab9a      	add	r3, sp, #616	; 0x268
 800910e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009112:	ec57 6b10 	vmov	r6, r7, d0
 8009116:	00ec      	lsls	r4, r5, #3
 8009118:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800911c:	46aa      	mov	sl, r5
 800911e:	f1ba 0f00 	cmp.w	sl, #0
 8009122:	f280 80d6 	bge.w	80092d2 <__kernel_rem_pio2+0x472>
 8009126:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009178 <__kernel_rem_pio2+0x318>
 800912a:	462e      	mov	r6, r5
 800912c:	2e00      	cmp	r6, #0
 800912e:	f2c0 8104 	blt.w	800933a <__kernel_rem_pio2+0x4da>
 8009132:	ab72      	add	r3, sp, #456	; 0x1c8
 8009134:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009138:	f8df a064 	ldr.w	sl, [pc, #100]	; 80091a0 <__kernel_rem_pio2+0x340>
 800913c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009140:	f04f 0800 	mov.w	r8, #0
 8009144:	1baf      	subs	r7, r5, r6
 8009146:	e0ea      	b.n	800931e <__kernel_rem_pio2+0x4be>
 8009148:	f04f 0b02 	mov.w	fp, #2
 800914c:	e759      	b.n	8009002 <__kernel_rem_pio2+0x1a2>
 800914e:	f8d8 3000 	ldr.w	r3, [r8]
 8009152:	b955      	cbnz	r5, 800916a <__kernel_rem_pio2+0x30a>
 8009154:	b123      	cbz	r3, 8009160 <__kernel_rem_pio2+0x300>
 8009156:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800915a:	f8c8 3000 	str.w	r3, [r8]
 800915e:	2301      	movs	r3, #1
 8009160:	3201      	adds	r2, #1
 8009162:	f108 0804 	add.w	r8, r8, #4
 8009166:	461d      	mov	r5, r3
 8009168:	e752      	b.n	8009010 <__kernel_rem_pio2+0x1b0>
 800916a:	1acb      	subs	r3, r1, r3
 800916c:	f8c8 3000 	str.w	r3, [r8]
 8009170:	462b      	mov	r3, r5
 8009172:	e7f5      	b.n	8009160 <__kernel_rem_pio2+0x300>
 8009174:	f3af 8000 	nop.w
	...
 8009184:	3ff00000 	.word	0x3ff00000
 8009188:	0800a030 	.word	0x0800a030
 800918c:	40200000 	.word	0x40200000
 8009190:	3ff00000 	.word	0x3ff00000
 8009194:	3e700000 	.word	0x3e700000
 8009198:	41700000 	.word	0x41700000
 800919c:	3fe00000 	.word	0x3fe00000
 80091a0:	08009ff0 	.word	0x08009ff0
 80091a4:	1e62      	subs	r2, r4, #1
 80091a6:	ab0e      	add	r3, sp, #56	; 0x38
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80091b0:	a90e      	add	r1, sp, #56	; 0x38
 80091b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80091b6:	e739      	b.n	800902c <__kernel_rem_pio2+0x1cc>
 80091b8:	1e62      	subs	r2, r4, #1
 80091ba:	ab0e      	add	r3, sp, #56	; 0x38
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80091c4:	e7f4      	b.n	80091b0 <__kernel_rem_pio2+0x350>
 80091c6:	a90e      	add	r1, sp, #56	; 0x38
 80091c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	430a      	orrs	r2, r1
 80091d0:	e789      	b.n	80090e6 <__kernel_rem_pio2+0x286>
 80091d2:	3301      	adds	r3, #1
 80091d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80091d8:	2900      	cmp	r1, #0
 80091da:	d0fa      	beq.n	80091d2 <__kernel_rem_pio2+0x372>
 80091dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80091e2:	446a      	add	r2, sp
 80091e4:	3a98      	subs	r2, #152	; 0x98
 80091e6:	920a      	str	r2, [sp, #40]	; 0x28
 80091e8:	9a08      	ldr	r2, [sp, #32]
 80091ea:	18e3      	adds	r3, r4, r3
 80091ec:	18a5      	adds	r5, r4, r2
 80091ee:	aa22      	add	r2, sp, #136	; 0x88
 80091f0:	f104 0801 	add.w	r8, r4, #1
 80091f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	4543      	cmp	r3, r8
 80091fe:	da04      	bge.n	800920a <__kernel_rem_pio2+0x3aa>
 8009200:	461c      	mov	r4, r3
 8009202:	e6a3      	b.n	8008f4c <__kernel_rem_pio2+0xec>
 8009204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009206:	2301      	movs	r3, #1
 8009208:	e7e4      	b.n	80091d4 <__kernel_rem_pio2+0x374>
 800920a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800920c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009210:	f7f7 f988 	bl	8000524 <__aeabi_i2d>
 8009214:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800921a:	46ab      	mov	fp, r5
 800921c:	461c      	mov	r4, r3
 800921e:	f04f 0900 	mov.w	r9, #0
 8009222:	2600      	movs	r6, #0
 8009224:	2700      	movs	r7, #0
 8009226:	9b06      	ldr	r3, [sp, #24]
 8009228:	4599      	cmp	r9, r3
 800922a:	dd06      	ble.n	800923a <__kernel_rem_pio2+0x3da>
 800922c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009232:	f108 0801 	add.w	r8, r8, #1
 8009236:	930a      	str	r3, [sp, #40]	; 0x28
 8009238:	e7df      	b.n	80091fa <__kernel_rem_pio2+0x39a>
 800923a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800923e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f81d 	bl	800028c <__adddf3>
 8009252:	f109 0901 	add.w	r9, r9, #1
 8009256:	4606      	mov	r6, r0
 8009258:	460f      	mov	r7, r1
 800925a:	e7e4      	b.n	8009226 <__kernel_rem_pio2+0x3c6>
 800925c:	3d01      	subs	r5, #1
 800925e:	e748      	b.n	80090f2 <__kernel_rem_pio2+0x292>
 8009260:	ec47 6b10 	vmov	d0, r6, r7
 8009264:	f1ca 0000 	rsb	r0, sl, #0
 8009268:	f000 fa92 	bl	8009790 <scalbn>
 800926c:	ec57 6b10 	vmov	r6, r7, d0
 8009270:	4ba0      	ldr	r3, [pc, #640]	; (80094f4 <__kernel_rem_pio2+0x694>)
 8009272:	ee10 0a10 	vmov	r0, s0
 8009276:	2200      	movs	r2, #0
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 fc43 	bl	8000b04 <__aeabi_dcmpge>
 800927e:	b1f8      	cbz	r0, 80092c0 <__kernel_rem_pio2+0x460>
 8009280:	4b9d      	ldr	r3, [pc, #628]	; (80094f8 <__kernel_rem_pio2+0x698>)
 8009282:	2200      	movs	r2, #0
 8009284:	4630      	mov	r0, r6
 8009286:	4639      	mov	r1, r7
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	f7f7 fc4e 	bl	8000b2c <__aeabi_d2iz>
 8009290:	4680      	mov	r8, r0
 8009292:	f7f7 f947 	bl	8000524 <__aeabi_i2d>
 8009296:	4b97      	ldr	r3, [pc, #604]	; (80094f4 <__kernel_rem_pio2+0x694>)
 8009298:	2200      	movs	r2, #0
 800929a:	f7f7 f9ad 	bl	80005f8 <__aeabi_dmul>
 800929e:	460b      	mov	r3, r1
 80092a0:	4602      	mov	r2, r0
 80092a2:	4639      	mov	r1, r7
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7f6 ffef 	bl	8000288 <__aeabi_dsub>
 80092aa:	f7f7 fc3f 	bl	8000b2c <__aeabi_d2iz>
 80092ae:	1c65      	adds	r5, r4, #1
 80092b0:	ab0e      	add	r3, sp, #56	; 0x38
 80092b2:	f10a 0a18 	add.w	sl, sl, #24
 80092b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80092be:	e720      	b.n	8009102 <__kernel_rem_pio2+0x2a2>
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc32 	bl	8000b2c <__aeabi_d2iz>
 80092c8:	ab0e      	add	r3, sp, #56	; 0x38
 80092ca:	4625      	mov	r5, r4
 80092cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092d0:	e717      	b.n	8009102 <__kernel_rem_pio2+0x2a2>
 80092d2:	ab0e      	add	r3, sp, #56	; 0x38
 80092d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80092d8:	f7f7 f924 	bl	8000524 <__aeabi_i2d>
 80092dc:	4632      	mov	r2, r6
 80092de:	463b      	mov	r3, r7
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	4b84      	ldr	r3, [pc, #528]	; (80094f8 <__kernel_rem_pio2+0x698>)
 80092e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80092ea:	2200      	movs	r2, #0
 80092ec:	4630      	mov	r0, r6
 80092ee:	4639      	mov	r1, r7
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	e70f      	b.n	800911e <__kernel_rem_pio2+0x2be>
 80092fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009302:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009312:	f7f6 ffbb 	bl	800028c <__adddf3>
 8009316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800931a:	f108 0801 	add.w	r8, r8, #1
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	4598      	cmp	r8, r3
 8009322:	dc01      	bgt.n	8009328 <__kernel_rem_pio2+0x4c8>
 8009324:	45b8      	cmp	r8, r7
 8009326:	ddea      	ble.n	80092fe <__kernel_rem_pio2+0x49e>
 8009328:	ed9d 7b06 	vldr	d7, [sp, #24]
 800932c:	ab4a      	add	r3, sp, #296	; 0x128
 800932e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009332:	ed87 7b00 	vstr	d7, [r7]
 8009336:	3e01      	subs	r6, #1
 8009338:	e6f8      	b.n	800912c <__kernel_rem_pio2+0x2cc>
 800933a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800933c:	2b02      	cmp	r3, #2
 800933e:	dc0b      	bgt.n	8009358 <__kernel_rem_pio2+0x4f8>
 8009340:	2b00      	cmp	r3, #0
 8009342:	dc35      	bgt.n	80093b0 <__kernel_rem_pio2+0x550>
 8009344:	d059      	beq.n	80093fa <__kernel_rem_pio2+0x59a>
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	f003 0007 	and.w	r0, r3, #7
 800934c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009350:	ecbd 8b02 	vpop	{d8}
 8009354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009358:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800935a:	2b03      	cmp	r3, #3
 800935c:	d1f3      	bne.n	8009346 <__kernel_rem_pio2+0x4e6>
 800935e:	ab4a      	add	r3, sp, #296	; 0x128
 8009360:	4423      	add	r3, r4
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	461c      	mov	r4, r3
 8009366:	469a      	mov	sl, r3
 8009368:	9502      	str	r5, [sp, #8]
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009372:	dc6b      	bgt.n	800944c <__kernel_rem_pio2+0x5ec>
 8009374:	46aa      	mov	sl, r5
 8009376:	f1ba 0f01 	cmp.w	sl, #1
 800937a:	f1a4 0408 	sub.w	r4, r4, #8
 800937e:	f300 8085 	bgt.w	800948c <__kernel_rem_pio2+0x62c>
 8009382:	9c06      	ldr	r4, [sp, #24]
 8009384:	2000      	movs	r0, #0
 8009386:	3408      	adds	r4, #8
 8009388:	2100      	movs	r1, #0
 800938a:	2d01      	cmp	r5, #1
 800938c:	f300 809d 	bgt.w	80094ca <__kernel_rem_pio2+0x66a>
 8009390:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009394:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009398:	f1bb 0f00 	cmp.w	fp, #0
 800939c:	f040 809b 	bne.w	80094d6 <__kernel_rem_pio2+0x676>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	e9c3 5600 	strd	r5, r6, [r3]
 80093a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80093aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80093ae:	e7ca      	b.n	8009346 <__kernel_rem_pio2+0x4e6>
 80093b0:	3408      	adds	r4, #8
 80093b2:	ab4a      	add	r3, sp, #296	; 0x128
 80093b4:	441c      	add	r4, r3
 80093b6:	462e      	mov	r6, r5
 80093b8:	2000      	movs	r0, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	2e00      	cmp	r6, #0
 80093be:	da36      	bge.n	800942e <__kernel_rem_pio2+0x5ce>
 80093c0:	f1bb 0f00 	cmp.w	fp, #0
 80093c4:	d039      	beq.n	800943a <__kernel_rem_pio2+0x5da>
 80093c6:	4602      	mov	r2, r0
 80093c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093cc:	9c01      	ldr	r4, [sp, #4]
 80093ce:	e9c4 2300 	strd	r2, r3, [r4]
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80093da:	f7f6 ff55 	bl	8000288 <__aeabi_dsub>
 80093de:	ae4c      	add	r6, sp, #304	; 0x130
 80093e0:	2401      	movs	r4, #1
 80093e2:	42a5      	cmp	r5, r4
 80093e4:	da2c      	bge.n	8009440 <__kernel_rem_pio2+0x5e0>
 80093e6:	f1bb 0f00 	cmp.w	fp, #0
 80093ea:	d002      	beq.n	80093f2 <__kernel_rem_pio2+0x592>
 80093ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093f0:	4619      	mov	r1, r3
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80093f8:	e7a5      	b.n	8009346 <__kernel_rem_pio2+0x4e6>
 80093fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80093fe:	eb0d 0403 	add.w	r4, sp, r3
 8009402:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009406:	2000      	movs	r0, #0
 8009408:	2100      	movs	r1, #0
 800940a:	2d00      	cmp	r5, #0
 800940c:	da09      	bge.n	8009422 <__kernel_rem_pio2+0x5c2>
 800940e:	f1bb 0f00 	cmp.w	fp, #0
 8009412:	d002      	beq.n	800941a <__kernel_rem_pio2+0x5ba>
 8009414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009418:	4619      	mov	r1, r3
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	e9c3 0100 	strd	r0, r1, [r3]
 8009420:	e791      	b.n	8009346 <__kernel_rem_pio2+0x4e6>
 8009422:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	3d01      	subs	r5, #1
 800942c:	e7ed      	b.n	800940a <__kernel_rem_pio2+0x5aa>
 800942e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009432:	f7f6 ff2b 	bl	800028c <__adddf3>
 8009436:	3e01      	subs	r6, #1
 8009438:	e7c0      	b.n	80093bc <__kernel_rem_pio2+0x55c>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	e7c5      	b.n	80093cc <__kernel_rem_pio2+0x56c>
 8009440:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009444:	f7f6 ff22 	bl	800028c <__adddf3>
 8009448:	3401      	adds	r4, #1
 800944a:	e7ca      	b.n	80093e2 <__kernel_rem_pio2+0x582>
 800944c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009450:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009454:	9b02      	ldr	r3, [sp, #8]
 8009456:	3b01      	subs	r3, #1
 8009458:	9302      	str	r3, [sp, #8]
 800945a:	4632      	mov	r2, r6
 800945c:	463b      	mov	r3, r7
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f6 ff13 	bl	800028c <__adddf3>
 8009466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4640      	mov	r0, r8
 8009470:	4649      	mov	r1, r9
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	4632      	mov	r2, r6
 8009478:	463b      	mov	r3, r7
 800947a:	f7f6 ff07 	bl	800028c <__adddf3>
 800947e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009482:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009486:	ed8a 7b00 	vstr	d7, [sl]
 800948a:	e76e      	b.n	800936a <__kernel_rem_pio2+0x50a>
 800948c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009490:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009494:	4640      	mov	r0, r8
 8009496:	4632      	mov	r2, r6
 8009498:	463b      	mov	r3, r7
 800949a:	4649      	mov	r1, r9
 800949c:	f7f6 fef6 	bl	800028c <__adddf3>
 80094a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f6 feec 	bl	8000288 <__aeabi_dsub>
 80094b0:	4632      	mov	r2, r6
 80094b2:	463b      	mov	r3, r7
 80094b4:	f7f6 feea 	bl	800028c <__adddf3>
 80094b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094c0:	ed84 7b00 	vstr	d7, [r4]
 80094c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c8:	e755      	b.n	8009376 <__kernel_rem_pio2+0x516>
 80094ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80094ce:	f7f6 fedd 	bl	800028c <__adddf3>
 80094d2:	3d01      	subs	r5, #1
 80094d4:	e759      	b.n	800938a <__kernel_rem_pio2+0x52a>
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	9a01      	ldr	r2, [sp, #4]
 80094da:	601d      	str	r5, [r3, #0]
 80094dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80094e0:	605c      	str	r4, [r3, #4]
 80094e2:	609f      	str	r7, [r3, #8]
 80094e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80094e8:	60d3      	str	r3, [r2, #12]
 80094ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ee:	6110      	str	r0, [r2, #16]
 80094f0:	6153      	str	r3, [r2, #20]
 80094f2:	e728      	b.n	8009346 <__kernel_rem_pio2+0x4e6>
 80094f4:	41700000 	.word	0x41700000
 80094f8:	3e700000 	.word	0x3e700000
 80094fc:	00000000 	.word	0x00000000

08009500 <__kernel_sin>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	ed2d 8b04 	vpush	{d8-d9}
 8009508:	eeb0 8a41 	vmov.f32	s16, s2
 800950c:	eef0 8a61 	vmov.f32	s17, s3
 8009510:	ec55 4b10 	vmov	r4, r5, d0
 8009514:	b083      	sub	sp, #12
 8009516:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800951a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800951e:	9001      	str	r0, [sp, #4]
 8009520:	da06      	bge.n	8009530 <__kernel_sin+0x30>
 8009522:	ee10 0a10 	vmov	r0, s0
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 fb00 	bl	8000b2c <__aeabi_d2iz>
 800952c:	2800      	cmp	r0, #0
 800952e:	d051      	beq.n	80095d4 <__kernel_sin+0xd4>
 8009530:	4622      	mov	r2, r4
 8009532:	462b      	mov	r3, r5
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f7 f85e 	bl	80005f8 <__aeabi_dmul>
 800953c:	4682      	mov	sl, r0
 800953e:	468b      	mov	fp, r1
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	a341      	add	r3, pc, #260	; (adr r3, 8009654 <__kernel_sin+0x154>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	4680      	mov	r8, r0
 8009554:	4689      	mov	r9, r1
 8009556:	4650      	mov	r0, sl
 8009558:	4659      	mov	r1, fp
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	a33f      	add	r3, pc, #252	; (adr r3, 800965c <__kernel_sin+0x15c>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f6 fe90 	bl	8000288 <__aeabi_dsub>
 8009568:	4652      	mov	r2, sl
 800956a:	465b      	mov	r3, fp
 800956c:	f7f7 f844 	bl	80005f8 <__aeabi_dmul>
 8009570:	a33c      	add	r3, pc, #240	; (adr r3, 8009664 <__kernel_sin+0x164>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f6 fe89 	bl	800028c <__adddf3>
 800957a:	4652      	mov	r2, sl
 800957c:	465b      	mov	r3, fp
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	a33a      	add	r3, pc, #232	; (adr r3, 800966c <__kernel_sin+0x16c>)
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f7f6 fe7e 	bl	8000288 <__aeabi_dsub>
 800958c:	4652      	mov	r2, sl
 800958e:	465b      	mov	r3, fp
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	a337      	add	r3, pc, #220	; (adr r3, 8009674 <__kernel_sin+0x174>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fe77 	bl	800028c <__adddf3>
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	4606      	mov	r6, r0
 80095a2:	460f      	mov	r7, r1
 80095a4:	b9eb      	cbnz	r3, 80095e2 <__kernel_sin+0xe2>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4650      	mov	r0, sl
 80095ac:	4659      	mov	r1, fp
 80095ae:	f7f7 f823 	bl	80005f8 <__aeabi_dmul>
 80095b2:	a325      	add	r3, pc, #148	; (adr r3, 8009648 <__kernel_sin+0x148>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f6 fe66 	bl	8000288 <__aeabi_dsub>
 80095bc:	4642      	mov	r2, r8
 80095be:	464b      	mov	r3, r9
 80095c0:	f7f7 f81a 	bl	80005f8 <__aeabi_dmul>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4620      	mov	r0, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7f6 fe5e 	bl	800028c <__adddf3>
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	ec45 4b10 	vmov	d0, r4, r5
 80095d8:	b003      	add	sp, #12
 80095da:	ecbd 8b04 	vpop	{d8-d9}
 80095de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e2:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <__kernel_sin+0x150>)
 80095e4:	ec51 0b18 	vmov	r0, r1, d8
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	4632      	mov	r2, r6
 80095f0:	ec41 0b19 	vmov	d9, r0, r1
 80095f4:	463b      	mov	r3, r7
 80095f6:	4640      	mov	r0, r8
 80095f8:	4649      	mov	r1, r9
 80095fa:	f7f6 fffd 	bl	80005f8 <__aeabi_dmul>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	ec51 0b19 	vmov	r0, r1, d9
 8009606:	f7f6 fe3f 	bl	8000288 <__aeabi_dsub>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	ec53 2b18 	vmov	r2, r3, d8
 8009616:	f7f6 fe37 	bl	8000288 <__aeabi_dsub>
 800961a:	a30b      	add	r3, pc, #44	; (adr r3, 8009648 <__kernel_sin+0x148>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	4640      	mov	r0, r8
 8009626:	4649      	mov	r1, r9
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f6 fe2a 	bl	800028c <__adddf3>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f6 fe22 	bl	8000288 <__aeabi_dsub>
 8009644:	e7c4      	b.n	80095d0 <__kernel_sin+0xd0>
 8009646:	bf00      	nop
 8009648:	55555549 	.word	0x55555549
 800964c:	3fc55555 	.word	0x3fc55555
 8009650:	3fe00000 	.word	0x3fe00000
 8009654:	5acfd57c 	.word	0x5acfd57c
 8009658:	3de5d93a 	.word	0x3de5d93a
 800965c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009660:	3e5ae5e6 	.word	0x3e5ae5e6
 8009664:	57b1fe7d 	.word	0x57b1fe7d
 8009668:	3ec71de3 	.word	0x3ec71de3
 800966c:	19c161d5 	.word	0x19c161d5
 8009670:	3f2a01a0 	.word	0x3f2a01a0
 8009674:	1110f8a6 	.word	0x1110f8a6
 8009678:	3f811111 	.word	0x3f811111

0800967c <fabs>:
 800967c:	ec51 0b10 	vmov	r0, r1, d0
 8009680:	ee10 2a10 	vmov	r2, s0
 8009684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009688:	ec43 2b10 	vmov	d0, r2, r3
 800968c:	4770      	bx	lr
	...

08009690 <floor>:
 8009690:	ec51 0b10 	vmov	r0, r1, d0
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800969c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80096a0:	2e13      	cmp	r6, #19
 80096a2:	ee10 5a10 	vmov	r5, s0
 80096a6:	ee10 8a10 	vmov	r8, s0
 80096aa:	460c      	mov	r4, r1
 80096ac:	dc32      	bgt.n	8009714 <floor+0x84>
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	da14      	bge.n	80096dc <floor+0x4c>
 80096b2:	a333      	add	r3, pc, #204	; (adr r3, 8009780 <floor+0xf0>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f6 fde8 	bl	800028c <__adddf3>
 80096bc:	2200      	movs	r2, #0
 80096be:	2300      	movs	r3, #0
 80096c0:	f7f7 fa2a 	bl	8000b18 <__aeabi_dcmpgt>
 80096c4:	b138      	cbz	r0, 80096d6 <floor+0x46>
 80096c6:	2c00      	cmp	r4, #0
 80096c8:	da57      	bge.n	800977a <floor+0xea>
 80096ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80096ce:	431d      	orrs	r5, r3
 80096d0:	d001      	beq.n	80096d6 <floor+0x46>
 80096d2:	4c2d      	ldr	r4, [pc, #180]	; (8009788 <floor+0xf8>)
 80096d4:	2500      	movs	r5, #0
 80096d6:	4621      	mov	r1, r4
 80096d8:	4628      	mov	r0, r5
 80096da:	e025      	b.n	8009728 <floor+0x98>
 80096dc:	4f2b      	ldr	r7, [pc, #172]	; (800978c <floor+0xfc>)
 80096de:	4137      	asrs	r7, r6
 80096e0:	ea01 0307 	and.w	r3, r1, r7
 80096e4:	4303      	orrs	r3, r0
 80096e6:	d01f      	beq.n	8009728 <floor+0x98>
 80096e8:	a325      	add	r3, pc, #148	; (adr r3, 8009780 <floor+0xf0>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 fdcd 	bl	800028c <__adddf3>
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	f7f7 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d0eb      	beq.n	80096d6 <floor+0x46>
 80096fe:	2c00      	cmp	r4, #0
 8009700:	bfbe      	ittt	lt
 8009702:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009706:	fa43 f606 	asrlt.w	r6, r3, r6
 800970a:	19a4      	addlt	r4, r4, r6
 800970c:	ea24 0407 	bic.w	r4, r4, r7
 8009710:	2500      	movs	r5, #0
 8009712:	e7e0      	b.n	80096d6 <floor+0x46>
 8009714:	2e33      	cmp	r6, #51	; 0x33
 8009716:	dd0b      	ble.n	8009730 <floor+0xa0>
 8009718:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800971c:	d104      	bne.n	8009728 <floor+0x98>
 800971e:	ee10 2a10 	vmov	r2, s0
 8009722:	460b      	mov	r3, r1
 8009724:	f7f6 fdb2 	bl	800028c <__adddf3>
 8009728:	ec41 0b10 	vmov	d0, r0, r1
 800972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009730:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	fa23 f707 	lsr.w	r7, r3, r7
 800973c:	4207      	tst	r7, r0
 800973e:	d0f3      	beq.n	8009728 <floor+0x98>
 8009740:	a30f      	add	r3, pc, #60	; (adr r3, 8009780 <floor+0xf0>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fda1 	bl	800028c <__adddf3>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 8009752:	2800      	cmp	r0, #0
 8009754:	d0bf      	beq.n	80096d6 <floor+0x46>
 8009756:	2c00      	cmp	r4, #0
 8009758:	da02      	bge.n	8009760 <floor+0xd0>
 800975a:	2e14      	cmp	r6, #20
 800975c:	d103      	bne.n	8009766 <floor+0xd6>
 800975e:	3401      	adds	r4, #1
 8009760:	ea25 0507 	bic.w	r5, r5, r7
 8009764:	e7b7      	b.n	80096d6 <floor+0x46>
 8009766:	2301      	movs	r3, #1
 8009768:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800976c:	fa03 f606 	lsl.w	r6, r3, r6
 8009770:	4435      	add	r5, r6
 8009772:	4545      	cmp	r5, r8
 8009774:	bf38      	it	cc
 8009776:	18e4      	addcc	r4, r4, r3
 8009778:	e7f2      	b.n	8009760 <floor+0xd0>
 800977a:	2500      	movs	r5, #0
 800977c:	462c      	mov	r4, r5
 800977e:	e7aa      	b.n	80096d6 <floor+0x46>
 8009780:	8800759c 	.word	0x8800759c
 8009784:	7e37e43c 	.word	0x7e37e43c
 8009788:	bff00000 	.word	0xbff00000
 800978c:	000fffff 	.word	0x000fffff

08009790 <scalbn>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	ec55 4b10 	vmov	r4, r5, d0
 8009796:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800979a:	4606      	mov	r6, r0
 800979c:	462b      	mov	r3, r5
 800979e:	b99a      	cbnz	r2, 80097c8 <scalbn+0x38>
 80097a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80097a4:	4323      	orrs	r3, r4
 80097a6:	d036      	beq.n	8009816 <scalbn+0x86>
 80097a8:	4b39      	ldr	r3, [pc, #228]	; (8009890 <scalbn+0x100>)
 80097aa:	4629      	mov	r1, r5
 80097ac:	ee10 0a10 	vmov	r0, s0
 80097b0:	2200      	movs	r2, #0
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4b37      	ldr	r3, [pc, #220]	; (8009894 <scalbn+0x104>)
 80097b8:	429e      	cmp	r6, r3
 80097ba:	4604      	mov	r4, r0
 80097bc:	460d      	mov	r5, r1
 80097be:	da10      	bge.n	80097e2 <scalbn+0x52>
 80097c0:	a32b      	add	r3, pc, #172	; (adr r3, 8009870 <scalbn+0xe0>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	e03a      	b.n	800983e <scalbn+0xae>
 80097c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80097cc:	428a      	cmp	r2, r1
 80097ce:	d10c      	bne.n	80097ea <scalbn+0x5a>
 80097d0:	ee10 2a10 	vmov	r2, s0
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 fd58 	bl	800028c <__adddf3>
 80097dc:	4604      	mov	r4, r0
 80097de:	460d      	mov	r5, r1
 80097e0:	e019      	b.n	8009816 <scalbn+0x86>
 80097e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097e6:	460b      	mov	r3, r1
 80097e8:	3a36      	subs	r2, #54	; 0x36
 80097ea:	4432      	add	r2, r6
 80097ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80097f0:	428a      	cmp	r2, r1
 80097f2:	dd08      	ble.n	8009806 <scalbn+0x76>
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	a120      	add	r1, pc, #128	; (adr r1, 8009878 <scalbn+0xe8>)
 80097f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097fc:	da1c      	bge.n	8009838 <scalbn+0xa8>
 80097fe:	a120      	add	r1, pc, #128	; (adr r1, 8009880 <scalbn+0xf0>)
 8009800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009804:	e018      	b.n	8009838 <scalbn+0xa8>
 8009806:	2a00      	cmp	r2, #0
 8009808:	dd08      	ble.n	800981c <scalbn+0x8c>
 800980a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800980e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009812:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009816:	ec45 4b10 	vmov	d0, r4, r5
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009820:	da19      	bge.n	8009856 <scalbn+0xc6>
 8009822:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009826:	429e      	cmp	r6, r3
 8009828:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800982c:	dd0a      	ble.n	8009844 <scalbn+0xb4>
 800982e:	a112      	add	r1, pc, #72	; (adr r1, 8009878 <scalbn+0xe8>)
 8009830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e2      	bne.n	80097fe <scalbn+0x6e>
 8009838:	a30f      	add	r3, pc, #60	; (adr r3, 8009878 <scalbn+0xe8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fedb 	bl	80005f8 <__aeabi_dmul>
 8009842:	e7cb      	b.n	80097dc <scalbn+0x4c>
 8009844:	a10a      	add	r1, pc, #40	; (adr r1, 8009870 <scalbn+0xe0>)
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0b8      	beq.n	80097c0 <scalbn+0x30>
 800984e:	a10e      	add	r1, pc, #56	; (adr r1, 8009888 <scalbn+0xf8>)
 8009850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009854:	e7b4      	b.n	80097c0 <scalbn+0x30>
 8009856:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800985a:	3236      	adds	r2, #54	; 0x36
 800985c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009860:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009864:	4620      	mov	r0, r4
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <scalbn+0x108>)
 8009868:	2200      	movs	r2, #0
 800986a:	e7e8      	b.n	800983e <scalbn+0xae>
 800986c:	f3af 8000 	nop.w
 8009870:	c2f8f359 	.word	0xc2f8f359
 8009874:	01a56e1f 	.word	0x01a56e1f
 8009878:	8800759c 	.word	0x8800759c
 800987c:	7e37e43c 	.word	0x7e37e43c
 8009880:	8800759c 	.word	0x8800759c
 8009884:	fe37e43c 	.word	0xfe37e43c
 8009888:	c2f8f359 	.word	0xc2f8f359
 800988c:	81a56e1f 	.word	0x81a56e1f
 8009890:	43500000 	.word	0x43500000
 8009894:	ffff3cb0 	.word	0xffff3cb0
 8009898:	3c900000 	.word	0x3c900000

0800989c <_init>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr

080098a8 <_fini>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr
