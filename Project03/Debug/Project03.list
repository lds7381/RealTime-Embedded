
Project03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009874  08009874  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800987c  0800987c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000387c  20000074  080098f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038f0  080098f8  000238f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7d  00000000  00000000  0003f189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00044840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2d6  00000000  00000000  00045ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d607  00000000  00000000  000701b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003dc  00000000  00000000  0008d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018db99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069fc  00000000  00000000  0018dbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093b0 	.word	0x080093b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080093b0 	.word	0x080093b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <generate_customer>:
static uint32_t customer_cnt = 0;

/* Generate Customer with Random values needed for the teller
 * - Creates a new customer and returns it initalized with random values
 */
customer_t generate_customer(){
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	customer_t new_cust;
	// Set the customer id
	new_cust.customer_id = customer_cnt;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <generate_customer+0x68>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	60bb      	str	r3, [r7, #8]
	customer_cnt++;
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <generate_customer+0x68>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <generate_customer+0x68>)
 800058a:	6013      	str	r3, [r2, #0]
	// set the customer help time to a random number 30 seconds to 8 minutes
	new_cust.help_time = (get_rand_num(RNG->DR, MIN_MIN, MAX_MIN) * ONE_MINUTE_TICKS);
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <generate_customer+0x6c>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8000594:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f807 	bl	80015ac <get_rand_num>
 800059e:	eef0 7a40 	vmov.f32	s15, s0
 80005a2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80005e4 <generate_customer+0x70>
 80005a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ae:	ee17 3a90 	vmov	r3, s15
 80005b2:	60fb      	str	r3, [r7, #12]
	// Set the status to in queue
	new_cust.status = customer_in_queue;
 80005b4:	2300      	movs	r3, #0
 80005b6:	743b      	strb	r3, [r7, #16]
	// Set time it was generated
	new_cust.queue_start_time = TIM2->CNT;
 80005b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005be:	61bb      	str	r3, [r7, #24]
	return new_cust;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	461d      	mov	r5, r3
 80005c4:	f107 0408 	add.w	r4, r7, #8
 80005c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdb0      	pop	{r4, r5, r7, pc}
 80005dc:	20000090 	.word	0x20000090
 80005e0:	50060800 	.word	0x50060800
 80005e4:	447a0000 	.word	0x447a0000

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f001 fc66 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f8c2 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f9a8 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f976 	bl	80008e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005fc:	f000 f922 	bl	8000844 <MX_TIM2_Init>
  MX_RNG_Init();
 8000600:	f000 f90c 	bl	800081c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000604:	f004 fd12 	bl	800502c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of t1done_sem */
  t1done_semHandle = osSemaphoreNew(1, 1, &t1done_sem_attributes);
 8000608:	4a40      	ldr	r2, [pc, #256]	; (800070c <main+0x124>)
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f004 fe04 	bl	800521a <osSemaphoreNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <main+0x128>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of t2done_sem */
  t2done_semHandle = osSemaphoreNew(1, 1, &t2done_sem_attributes);
 8000618:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <main+0x12c>)
 800061a:	2101      	movs	r1, #1
 800061c:	2001      	movs	r0, #1
 800061e:	f004 fdfc 	bl	800521a <osSemaphoreNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a3c      	ldr	r2, [pc, #240]	; (8000718 <main+0x130>)
 8000626:	6013      	str	r3, [r2, #0]

  /* creation of t3done_sem */
  t3done_semHandle = osSemaphoreNew(1, 1, &t3done_sem_attributes);
 8000628:	4a3c      	ldr	r2, [pc, #240]	; (800071c <main+0x134>)
 800062a:	2101      	movs	r1, #1
 800062c:	2001      	movs	r0, #1
 800062e:	f004 fdf4 	bl	800521a <osSemaphoreNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a3a      	ldr	r2, [pc, #232]	; (8000720 <main+0x138>)
 8000636:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customer_queue */
  customer_queueHandle = osMessageQueueNew (20, sizeof(customer_t), &customer_queue_attributes);
 8000638:	4a3a      	ldr	r2, [pc, #232]	; (8000724 <main+0x13c>)
 800063a:	2118      	movs	r1, #24
 800063c:	2014      	movs	r0, #20
 800063e:	f004 ff0b 	bl	8005458 <osMessageQueueNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a38      	ldr	r2, [pc, #224]	; (8000728 <main+0x140>)
 8000646:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a38      	ldr	r2, [pc, #224]	; (800072c <main+0x144>)
 800064a:	2100      	movs	r1, #0
 800064c:	4838      	ldr	r0, [pc, #224]	; (8000730 <main+0x148>)
 800064e:	f004 fd37 	bl	80050c0 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a37      	ldr	r2, [pc, #220]	; (8000734 <main+0x14c>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of Teller01 */
  Teller01Handle = osThreadNew(teller_task, (void*) &teller01, &Teller01_attributes);
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <main+0x150>)
 800065a:	4938      	ldr	r1, [pc, #224]	; (800073c <main+0x154>)
 800065c:	4838      	ldr	r0, [pc, #224]	; (8000740 <main+0x158>)
 800065e:	f004 fd2f 	bl	80050c0 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a37      	ldr	r2, [pc, #220]	; (8000744 <main+0x15c>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of Teller02 */
  Teller02Handle = osThreadNew(teller_task, (void*) &teller02, &Teller02_attributes);
 8000668:	4a37      	ldr	r2, [pc, #220]	; (8000748 <main+0x160>)
 800066a:	4938      	ldr	r1, [pc, #224]	; (800074c <main+0x164>)
 800066c:	4834      	ldr	r0, [pc, #208]	; (8000740 <main+0x158>)
 800066e:	f004 fd27 	bl	80050c0 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a36      	ldr	r2, [pc, #216]	; (8000750 <main+0x168>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of Teller03 */
  Teller03Handle = osThreadNew(teller_task, (void*) &teller03, &Teller03_attributes);
 8000678:	4a36      	ldr	r2, [pc, #216]	; (8000754 <main+0x16c>)
 800067a:	4937      	ldr	r1, [pc, #220]	; (8000758 <main+0x170>)
 800067c:	4830      	ldr	r0, [pc, #192]	; (8000740 <main+0x158>)
 800067e:	f004 fd1f 	bl	80050c0 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a35      	ldr	r2, [pc, #212]	; (800075c <main+0x174>)
 8000686:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(manager_task, (void*) &manager_info, &Manager_attributes);
 8000688:	4a35      	ldr	r2, [pc, #212]	; (8000760 <main+0x178>)
 800068a:	4936      	ldr	r1, [pc, #216]	; (8000764 <main+0x17c>)
 800068c:	4836      	ldr	r0, [pc, #216]	; (8000768 <main+0x180>)
 800068e:	f004 fd17 	bl	80050c0 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a35      	ldr	r2, [pc, #212]	; (800076c <main+0x184>)
 8000696:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  // Set handles
	teller01.queue_handle = &customer_queueHandle;
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <main+0x154>)
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <main+0x140>)
 800069c:	61da      	str	r2, [r3, #28]
	teller02.queue_handle = &customer_queueHandle;
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <main+0x164>)
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <main+0x140>)
 80006a2:	61da      	str	r2, [r3, #28]
	teller03.queue_handle = &customer_queueHandle;
 80006a4:	4b2c      	ldr	r3, [pc, #176]	; (8000758 <main+0x170>)
 80006a6:	4a20      	ldr	r2, [pc, #128]	; (8000728 <main+0x140>)
 80006a8:	61da      	str	r2, [r3, #28]
	teller01.sem = &t1done_semHandle;
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <main+0x154>)
 80006ac:	4a18      	ldr	r2, [pc, #96]	; (8000710 <main+0x128>)
 80006ae:	621a      	str	r2, [r3, #32]
	teller02.sem = &t2done_semHandle;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <main+0x164>)
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <main+0x130>)
 80006b4:	621a      	str	r2, [r3, #32]
	teller03.sem = &t3done_semHandle;
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x170>)
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <main+0x138>)
 80006ba:	621a      	str	r2, [r3, #32]
	teller01.button_pin = SHLD_B1_Pin;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <main+0x154>)
 80006be:	2202      	movs	r2, #2
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
	teller01.GPIO_port = GPIOA;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <main+0x154>)
 80006c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
	teller02.button_pin = SHLD_B2_Pin;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <main+0x164>)
 80006cc:	2210      	movs	r2, #16
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
	teller02.GPIO_port = GPIOA;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0x164>)
 80006d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
	teller03.button_pin = SHLD_B3_Pin;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <main+0x170>)
 80006da:	2201      	movs	r2, #1
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
	teller03.GPIO_port = SHLD_B3_GPIO_Port;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <main+0x170>)
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <main+0x188>)
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
	manager_info.queue_handle = &customer_queueHandle;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <main+0x17c>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <main+0x140>)
 80006e8:	601a      	str	r2, [r3, #0]
	manager_info.idle_hook_cnt = &idle_cnt;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x17c>)
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <main+0x18c>)
 80006ee:	611a      	str	r2, [r3, #16]
	// Set the tellers for the manager to access them at the end and print out information
	manager_info.teller01 = &teller01;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <main+0x17c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <main+0x154>)
 80006f4:	605a      	str	r2, [r3, #4]
	manager_info.teller02 = &teller02;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x17c>)
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <main+0x164>)
 80006fa:	609a      	str	r2, [r3, #8]
	manager_info.teller03 = &teller03;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x17c>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <main+0x170>)
 8000700:	60da      	str	r2, [r3, #12]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000702:	f004 fcb7 	bl	8005074 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000706:	f006 fb89 	bl	8006e1c <vTaskStartScheduler>


  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x122>
 800070c:	08009768 	.word	0x08009768
 8000710:	2000018c 	.word	0x2000018c
 8000714:	08009778 	.word	0x08009778
 8000718:	20000190 	.word	0x20000190
 800071c:	08009788 	.word	0x08009788
 8000720:	20000194 	.word	0x20000194
 8000724:	08009750 	.word	0x08009750
 8000728:	20000188 	.word	0x20000188
 800072c:	0800969c 	.word	0x0800969c
 8000730:	08000a91 	.word	0x08000a91
 8000734:	20000174 	.word	0x20000174
 8000738:	080096c0 	.word	0x080096c0
 800073c:	20000198 	.word	0x20000198
 8000740:	080019e1 	.word	0x080019e1
 8000744:	20000178 	.word	0x20000178
 8000748:	080096e4 	.word	0x080096e4
 800074c:	20000224 	.word	0x20000224
 8000750:	2000017c 	.word	0x2000017c
 8000754:	08009708 	.word	0x08009708
 8000758:	200002b0 	.word	0x200002b0
 800075c:	20000180 	.word	0x20000180
 8000760:	0800972c 	.word	0x0800972c
 8000764:	2000033c 	.word	0x2000033c
 8000768:	08000ad1 	.word	0x08000ad1
 800076c:	20000184 	.word	0x20000184
 8000770:	48000400 	.word	0x48000400
 8000774:	20000350 	.word	0x20000350

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	; 0x58
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2244      	movs	r2, #68	; 0x44
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 f942 	bl	8008a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079e:	f001 fe97 	bl	80024d0 <HAL_PWREx_ControlVoltageScaling>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a8:	f000 f98c 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007c6:	230a      	movs	r3, #10
 80007c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ca:	2307      	movs	r3, #7
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fece 	bl	800257c <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007e6:	f000 f96d 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2303      	movs	r3, #3
 80007f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2104      	movs	r1, #4
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fa96 	bl	8002d34 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800080e:	f000 f959 	bl	8000ac4 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3758      	adds	r7, #88	; 0x58
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_RNG_Init+0x20>)
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <MX_RNG_Init+0x24>)
 8000824:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_RNG_Init+0x20>)
 8000828:	f003 f996 	bl	8003b58 <HAL_RNG_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000832:	f000 f947 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094
 8000840:	50060800 	.word	0x50060800

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800086c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_TIM2_Init+0xa0>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_TIM2_Init+0xa0>)
 800088e:	f003 f9ba 	bl	8003c06 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f914 	bl	8000ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_TIM2_Init+0xa0>)
 80008aa:	f003 fbfa 	bl	80040a2 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008b4:	f000 f906 	bl	8000ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM2_Init+0xa0>)
 80008c6:	f003 fe11 	bl	80044ec <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 f8f8 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM2_Init+0xa0>)
 80008d6:	f003 f9ed 	bl	8003cb4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000a4 	.word	0x200000a4

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <MX_USART2_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x58>)
 800092c:	f003 fe84 	bl	8004638 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f8c5 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000f0 	.word	0x200000f0
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <MX_GPIO_Init+0x120>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a3b      	ldr	r2, [pc, #236]	; (8000a68 <MX_GPIO_Init+0x120>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a35      	ldr	r2, [pc, #212]	; (8000a68 <MX_GPIO_Init+0x120>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <MX_GPIO_Init+0x120>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x120>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 fd5c 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2120      	movs	r1, #32
 80009d0:	4826      	ldr	r0, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x124>)
 80009d2:	f001 fd57 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <MX_GPIO_Init+0x128>)
 80009ee:	f001 fb87 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_B1_Pin SHLD_B2_Pin */
  GPIO_InitStruct.Pin = SHLD_B1_Pin|SHLD_B2_Pin;
 80009f2:	2312      	movs	r3, #18
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f001 fb7a 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 8000a0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f001 fb6a 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_B3_Pin */
  GPIO_InitStruct.Pin = SHLD_B3_Pin;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHLD_B3_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x124>)
 8000a40:	f001 fb5e 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000a44:	2320      	movs	r3, #32
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0x124>)
 8000a5c:	f001 fb50 	bl	8002100 <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800

08000a74 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

void vApplicationIdleHook() {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	idle_cnt++;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <vApplicationIdleHook+0x18>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <vApplicationIdleHook+0x18>)
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000350 	.word	0x20000350

08000a90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f004 fba3 	bl	80051e4 <osDelay>
 8000a9e:	e7fb      	b.n	8000a98 <StartDefaultTask+0x8>

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f001 fa23 	bl	8001efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <manager_task>:

/* Customer Queue Task
 * - Customers will be gernated in this task every 1-4 "minutes"
 * - Waits for semaphore from one of the teller tasks showing that it has finished with a customer
 */
void manager_task(void *manager_info) {
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b092      	sub	sp, #72	; 0x48
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	61f8      	str	r0, [r7, #28]
	uint32_t last_queue_time = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t rand_queue_time = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
	customer_t generated;

	struct manager_info_t *manager = (struct manager_info_t *)manager_info;
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Get the queue handle
	osMessageQueueId_t *handle = manager->queue_handle;
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
	// get the idle hook pointer
	idle_hook_cnt_pnt = manager->idle_hook_cnt;
 8000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	4a4f      	ldr	r2, [pc, #316]	; (8000c2c <manager_task+0x15c>)
 8000af0:	6013      	str	r3, [r2, #0]

	// clear 7 segment display
	clear_seg7();
 8000af2:	f000 f9cb 	bl	8000e8c <clear_seg7>

	// Get the start time of the bank opening
	bank_open_time = TIM2->CNT;
 8000af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	4a4c      	ldr	r2, [pc, #304]	; (8000c30 <manager_task+0x160>)
 8000afe:	6013      	str	r3, [r2, #0]
	// Get the close time of the bank
	bank_close_time = bank_open_time + SEVEN_HOURS;
 8000b00:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <manager_task+0x160>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f503 23cd 	add.w	r3, r3, #419840	; 0x66800
 8000b08:	33a0      	adds	r3, #160	; 0xa0
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <manager_task+0x164>)
 8000b0c:	6013      	str	r3, [r2, #0]

	// Bank Open
	USART_Write(USART2, "---- BANK OPEN ----\r\n", 22);
 8000b0e:	2216      	movs	r2, #22
 8000b10:	4949      	ldr	r1, [pc, #292]	; (8000c38 <manager_task+0x168>)
 8000b12:	484a      	ldr	r0, [pc, #296]	; (8000c3c <manager_task+0x16c>)
 8000b14:	f001 f976 	bl	8001e04 <USART_Write>

	// Start the main loop of the task
	while(bank_close_time > TIM2->CNT) {
 8000b18:	e046      	b.n	8000ba8 <manager_task+0xd8>
		// display current teller and manager information over UART
		monitor(handle, manager->teller01, manager->teller02, manager->teller03);
 8000b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b1c:	6859      	ldr	r1, [r3, #4]
 8000b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b28:	f000 fcb0 	bl	800148c <monitor>
		// update 7-segment display
		update_seg7(handle);
 8000b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b2e:	f000 f951 	bl	8000dd4 <update_seg7>
		// Handles breaks for the tellers
		check_breaks(manager->teller01, manager->teller02, manager->teller03);
 8000b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b34:	6858      	ldr	r0, [r3, #4]
 8000b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b38:	6899      	ldr	r1, [r3, #8]
 8000b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f000 f886 	bl	8000c50 <check_breaks>
		// Check to see if it is time to add a new customer to the queue
		if (TIM2->CNT > (last_queue_time + rand_queue_time)) {
 8000b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b4e:	440b      	add	r3, r1
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d929      	bls.n	8000ba8 <manager_task+0xd8>
			// Generate a customer
			generated = generate_customer();
 8000b54:	463b      	mov	r3, r7
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd0c 	bl	8000574 <generate_customer>
 8000b5c:	f107 0420 	add.w	r4, r7, #32
 8000b60:	463d      	mov	r5, r7
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b6a:	e884 0003 	stmia.w	r4, {r0, r1}
			// Add to queue
			osMessageQueuePut(*handle, &generated, 0, osWaitForever);
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f107 0120 	add.w	r1, r7, #32
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f004 fce0 	bl	8005540 <osMessageQueuePut>
			// Set the last queue time;
			last_queue_time = TIM2->CNT;
 8000b80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
			// Set the random time to add another customer to queue
			rand_queue_time = (uint32_t)get_rand_num(RNG->DR, MIN_CUST_TIME, MAX_CUST_TIME);
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <manager_task+0x170>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8000c44 <manager_task+0x174>
 8000b90:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8000c48 <manager_task+0x178>
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fd09 	bl	80015ac <get_rand_num>
 8000b9a:	eef0 7a40 	vmov.f32	s15, s0
 8000b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba2:	ee17 3a90 	vmov	r3, s15
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
	while(bank_close_time > TIM2->CNT) {
 8000ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <manager_task+0x164>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3b1      	bcc.n	8000b1a <manager_task+0x4a>
		}
	}

	// Set end of shifts for the tellers
	manager->teller01->end_of_shift = 1;
 8000bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	manager->teller02->end_of_shift = 1;
 8000bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	manager->teller02->end_of_shift = 1;
 8000bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// Aquire all semaphores
	osSemaphoreAcquire(*(manager->teller01->sem), 0);
 8000bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fba4 	bl	800532c <osSemaphoreAcquire>
	osSemaphoreAcquire(*(manager->teller02->sem), 0);
 8000be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fb9c 	bl	800532c <osSemaphoreAcquire>
	osSemaphoreAcquire(*(manager->teller03->sem), 0);
 8000bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fb94 	bl	800532c <osSemaphoreAcquire>
	USART_Write(USART2, "\r\n---- BANK CLOSED ----\r\n", 26);
 8000c04:	221a      	movs	r2, #26
 8000c06:	4911      	ldr	r1, [pc, #68]	; (8000c4c <manager_task+0x17c>)
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <manager_task+0x16c>)
 8000c0a:	f001 f8fb 	bl	8001e04 <USART_Write>
	clear_seg7();
 8000c0e:	f000 f93d 	bl	8000e8c <clear_seg7>
	print_results(manager->teller01, manager->teller02, manager->teller03);
 8000c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c14:	6858      	ldr	r0, [r3, #4]
 8000c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c18:	6899      	ldr	r1, [r3, #8]
 8000c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f000 f992 	bl	8000f48 <print_results>

}
 8000c24:	bf00      	nop
 8000c26:	3748      	adds	r7, #72	; 0x48
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2c:	20000360 	.word	0x20000360
 8000c30:	20000354 	.word	0x20000354
 8000c34:	20000358 	.word	0x20000358
 8000c38:	08009434 	.word	0x08009434
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	50060800 	.word	0x50060800
 8000c44:	457a0000 	.word	0x457a0000
 8000c48:	447a0000 	.word	0x447a0000
 8000c4c:	0800944c 	.word	0x0800944c

08000c50 <check_breaks>:

// Check Tellers Breaks function
// Will put tellers onto breaks at random intervals after they are done with customer
void check_breaks (teller_t *t1, teller_t *t2, teller_t *t3) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	// Check force break
	check_force_break(t1);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f88b 	bl	8000d78 <check_force_break>
	check_force_break(t2);
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f000 f888 	bl	8000d78 <check_force_break>
	check_force_break(t3);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f885 	bl	8000d78 <check_force_break>
	// Check normal break
	if (t1->next_break_time == 0) {t1->next_break_time = get_rand_num(RNG->DR, MIN_NEXT_BREAK_TIME, MAX_NEXT_BREAK_TIME) + TIM2->CNT;}
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d119      	bne.n	8000caa <check_breaks+0x5a>
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <check_breaks+0x11c>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8000d70 <check_breaks+0x120>
 8000c7e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8000d74 <check_breaks+0x124>
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fc92 	bl	80015ac <get_rand_num>
 8000c88:	eeb0 7a40 	vmov.f32	s14, s0
 8000c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca2:	ee17 2a90 	vmov	r2, s15
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
	if (t2->next_break_time == 0) {t2->next_break_time = get_rand_num(RNG->DR, MIN_NEXT_BREAK_TIME, MAX_NEXT_BREAK_TIME) + TIM2->CNT;}
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d119      	bne.n	8000ce6 <check_breaks+0x96>
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <check_breaks+0x11c>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8000d70 <check_breaks+0x120>
 8000cba:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8000d74 <check_breaks+0x124>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc74 	bl	80015ac <get_rand_num>
 8000cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8000cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cde:	ee17 2a90 	vmov	r2, s15
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
	if (t3->next_break_time == 0) {t3->next_break_time = get_rand_num(RNG->DR, MIN_NEXT_BREAK_TIME, MAX_NEXT_BREAK_TIME) + TIM2->CNT;}
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d119      	bne.n	8000d22 <check_breaks+0xd2>
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <check_breaks+0x11c>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8000d70 <check_breaks+0x120>
 8000cf6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000d74 <check_breaks+0x124>
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fc56 	bl	80015ac <get_rand_num>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1a:	ee17 2a90 	vmov	r2, s15
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38

	if (t1->next_break_time <= TIM2->CNT) { t1->break_flag = 1;}
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d803      	bhi.n	8000d38 <check_breaks+0xe8>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	if (t2->next_break_time <= TIM2->CNT) { t2->break_flag = 1;}
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d803      	bhi.n	8000d4e <check_breaks+0xfe>
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	if (t3->next_break_time <= TIM2->CNT) { t3->break_flag = 1;}
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d803      	bhi.n	8000d64 <check_breaks+0x114>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	50060800 	.word	0x50060800
 8000d70:	476a6000 	.word	0x476a6000
 8000d74:	46ea6000 	.word	0x46ea6000

08000d78 <check_force_break>:

void check_force_break(teller_t *t) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]


	// Not on a force break
	if (t->force_break_flag == 0) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d110      	bne.n	8000dac <check_force_break+0x34>
		if (HAL_GPIO_ReadPin(t->GPIO_port, t->button_pin)==GPIO_PIN_RESET) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f001 fb5c 	bl	8002454 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d114      	bne.n	8000dcc <check_force_break+0x54>
			t->force_break_flag = 1;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	else {
		if (HAL_GPIO_ReadPin(t->GPIO_port, t->button_pin)==GPIO_PIN_SET) {
			t->force_break_flag = 0;
		}
	}
}
 8000daa:	e00f      	b.n	8000dcc <check_force_break+0x54>
		if (HAL_GPIO_ReadPin(t->GPIO_port, t->button_pin)==GPIO_PIN_SET) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	4610      	mov	r0, r2
 8000dba:	f001 fb4b 	bl	8002454 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d103      	bne.n	8000dcc <check_force_break+0x54>
			t->force_break_flag = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <update_seg7>:

void update_seg7(osMessageQueueId_t *q) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t queue_size = osMessageQueueGetCount(*q);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 fc6b 	bl	80056bc <osMessageQueueGetCount>
 8000de6:	60f8      	str	r0, [r7, #12]
	uint8_t seg_display;

	seg_display = get_display_from_size(queue_size);
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f825 	bl	8000e38 <get_display_from_size>
 8000dee:	4603      	mov	r3, r0
 8000df0:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	480e      	ldr	r0, [pc, #56]	; (8000e30 <update_seg7+0x5c>)
 8000df8:	f001 fb44 	bl	8002484 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, seg_display);
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f000 f866 	bl	8000ee0 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);	// latch data
 8000e14:	2201      	movs	r2, #1
 8000e16:	2120      	movs	r1, #32
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <update_seg7+0x5c>)
 8000e1a:	f001 fb33 	bl	8002484 <HAL_GPIO_WritePin>
	last_seg_display = queue_size;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <update_seg7+0x60>)
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	48000400 	.word	0x48000400
 8000e34:	20000364 	.word	0x20000364

08000e38 <get_display_from_size>:


uint8_t get_display_from_size(uint32_t size) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	switch(size) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d81a      	bhi.n	8000e7c <get_display_from_size+0x44>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <get_display_from_size+0x14>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e69 	.word	0x08000e69
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000e71 	.word	0x08000e71
 8000e5c:	08000e75 	.word	0x08000e75
 8000e60:	08000e79 	.word	0x08000e79
		case 0:
			return SEVEN_SEG_ZERO;
 8000e64:	2381      	movs	r3, #129	; 0x81
 8000e66:	e00a      	b.n	8000e7e <get_display_from_size+0x46>
		case 1:
			return SEVEN_SEG_ONE;
 8000e68:	239f      	movs	r3, #159	; 0x9f
 8000e6a:	e008      	b.n	8000e7e <get_display_from_size+0x46>
		case 2:
			return SEVEN_SEG_TWO;
 8000e6c:	23c8      	movs	r3, #200	; 0xc8
 8000e6e:	e006      	b.n	8000e7e <get_display_from_size+0x46>
		case 3:
			return SEVEN_SEG_THREE;
 8000e70:	23e1      	movs	r3, #225	; 0xe1
 8000e72:	e004      	b.n	8000e7e <get_display_from_size+0x46>
		case 4:
			return SEVEN_SEG_FOUR;
 8000e74:	2399      	movs	r3, #153	; 0x99
 8000e76:	e002      	b.n	8000e7e <get_display_from_size+0x46>
		case 5:
			return SEVEN_SEG_FIVE;
 8000e78:	2349      	movs	r3, #73	; 0x49
 8000e7a:	e000      	b.n	8000e7e <get_display_from_size+0x46>
		default:
			return 0;
 8000e7c:	2300      	movs	r3, #0
	}
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <clear_seg7>:

void clear_seg7() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af02      	add	r7, sp, #8
	// Clears the 7 Seg Display
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2120      	movs	r1, #32
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <clear_seg7+0x50>)
 8000e98:	f001 faf4 	bl	8002484 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f000 f816 	bl	8000ee0 <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 f80a 	bl	8000ee0 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);	// latch data
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <clear_seg7+0x50>)
 8000ed2:	f001 fad7 	bl	8002484 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	48000400 	.word	0x48000400

08000ee0 <shiftOut>:

void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	817b      	strh	r3, [r7, #10]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	813b      	strh	r3, [r7, #8]
	for(int ii=0x40; ii; ii>>=1) {
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e01d      	b.n	8000f36 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 fabf 	bl	8002484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000f06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f001 fab0 	bl	8002484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000f24:	893b      	ldrh	r3, [r7, #8]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 faaa 	bl	8002484 <HAL_GPIO_WritePin>
	for(int ii=0x40; ii; ii>>=1) {
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	105b      	asrs	r3, r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1de      	bne.n	8000efa <shiftOut+0x1a>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <print_results>:

void print_results(teller_t *t1, teller_t *t2, teller_t *t3) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0aa      	sub	sp, #168	; 0xa8
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	uint32_t max_break_time;
	uint32_t min_break_time;
	uint32_t avg_break_time;

	// Customers Served
	int total_cust_served = t1->customers_helped + t2->customers_helped + t3->customers_helped;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	441a      	add	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4413      	add	r3, r2
 8000f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sprintf(str, "Total Customers Served: %d\r\n", total_cust_served);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000f70:	499b      	ldr	r1, [pc, #620]	; (80011e0 <print_results+0x298>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 fe62 	bl	8008c3c <siprintf>
	USART_Write(USART2, (uint8_t *)str, 29);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	221d      	movs	r2, #29
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4898      	ldr	r0, [pc, #608]	; (80011e4 <print_results+0x29c>)
 8000f82:	f000 ff3f 	bl	8001e04 <USART_Write>


	// How many each teller served
	sprintf(str, (uint8_t *)"\t Teller 1: %d\r\n\t Teller 2: %d\r\n\t Teller 3: %d\r\n", t1->customers_helped, t2->customers_helped, t3->customers_helped);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f107 0010 	add.w	r0, r7, #16
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4993      	ldr	r1, [pc, #588]	; (80011e8 <print_results+0x2a0>)
 8000f9c:	f007 fe4e 	bl	8008c3c <siprintf>
	USART_Write(USART2, (uint8_t *)str, 48);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	2230      	movs	r2, #48	; 0x30
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	488e      	ldr	r0, [pc, #568]	; (80011e4 <print_results+0x29c>)
 8000faa:	f000 ff2b 	bl	8001e04 <USART_Write>

	// Average time spent in queue
	uint32_t avg_time_in_queue = (t1->total_customer_queue_wait + t2->total_customer_queue_wait + t1->total_customer_queue_wait) / total_cust_served;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fb6:	441a      	add	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fbc:	441a      	add	r2, r3
 8000fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	str_size = sprintf(str, (uint8_t *)"Average time spent in queue: %d s\r\n", convert_ticks_seconds(avg_time_in_queue));
 8000fca:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000fce:	f000 fb13 	bl	80015f8 <convert_ticks_seconds>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4984      	ldr	r1, [pc, #528]	; (80011ec <print_results+0x2a4>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f007 fe2e 	bl	8008c3c <siprintf>
 8000fe0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t *)str, str_size);
 8000fe4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	487d      	ldr	r0, [pc, #500]	; (80011e4 <print_results+0x29c>)
 8000ff0:	f000 ff08 	bl	8001e04 <USART_Write>

	// Average time with teller
	uint32_t avg_time_w_teller = (t1->avg_customer_help_time + t2->avg_customer_help_time + t3->avg_customer_help_time) / 3;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	441a      	add	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4413      	add	r3, r2
 8001004:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <print_results+0x2a8>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	67fb      	str	r3, [r7, #124]	; 0x7c
	sprintf(str, "Average Time at Teller: %d s\r\n", convert_ticks_seconds(avg_time_w_teller));
 800100e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001010:	f000 faf2 	bl	80015f8 <convert_ticks_seconds>
 8001014:	4602      	mov	r2, r0
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	4976      	ldr	r1, [pc, #472]	; (80011f4 <print_results+0x2ac>)
 800101c:	4618      	mov	r0, r3
 800101e:	f007 fe0d 	bl	8008c3c <siprintf>
	USART_Write(USART2, (uint8_t *)str, 32);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	2220      	movs	r2, #32
 8001028:	4619      	mov	r1, r3
 800102a:	486e      	ldr	r0, [pc, #440]	; (80011e4 <print_results+0x29c>)
 800102c:	f000 feea 	bl	8001e04 <USART_Write>


	// Average teller wait
	uint32_t avg_teller_wait = (t1->avg_teller_wait_for_customer + t2->avg_teller_wait_for_customer + t3->avg_teller_wait_for_customer) / 3;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001038:	441a      	add	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800103e:	4413      	add	r3, r2
 8001040:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <print_results+0x2a8>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	085b      	lsrs	r3, r3, #1
 8001048:	67bb      	str	r3, [r7, #120]	; 0x78
	sprintf(str, (uint8_t *)"Average Teller wait for Customer: %d s\r\n", convert_ticks_seconds(avg_teller_wait));
 800104a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800104c:	f000 fad4 	bl	80015f8 <convert_ticks_seconds>
 8001050:	4602      	mov	r2, r0
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4968      	ldr	r1, [pc, #416]	; (80011f8 <print_results+0x2b0>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 fdef 	bl	8008c3c <siprintf>
	USART_Write(USART2, (uint8_t *)str, 42);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	222a      	movs	r2, #42	; 0x2a
 8001064:	4619      	mov	r1, r3
 8001066:	485f      	ldr	r0, [pc, #380]	; (80011e4 <print_results+0x29c>)
 8001068:	f000 fecc 	bl	8001e04 <USART_Write>


	// Max Wait in queue
	if (t1->max_cust_queue_wait > t2->max_cust_queue_wait && t1->max_cust_queue_wait > t2->max_cust_queue_wait) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001078:	429a      	cmp	r2, r3
 800107a:	d90d      	bls.n	8001098 <print_results+0x150>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001088:	429a      	cmp	r2, r3
 800108a:	d905      	bls.n	8001098 <print_results+0x150>
		max_queue_wait = t1->max_cust_queue_wait;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001096:	e02a      	b.n	80010ee <print_results+0x1a6>
	}
	else if (t2->max_cust_queue_wait > t1->max_cust_queue_wait && t2->max_cust_queue_wait > t3->max_cust_queue_wait) {
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d90d      	bls.n	80010c4 <print_results+0x17c>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d905      	bls.n	80010c4 <print_results+0x17c>
		max_queue_wait = t2->max_cust_queue_wait;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80010c2:	e014      	b.n	80010ee <print_results+0x1a6>
	}
	else if (t3->max_cust_queue_wait > t1->max_cust_queue_wait && t3->max_cust_queue_wait > t2->max_cust_queue_wait) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d90c      	bls.n	80010ee <print_results+0x1a6>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d904      	bls.n	80010ee <print_results+0x1a6>
		max_queue_wait = t3->max_cust_queue_wait;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	sprintf(str, "Longest Queue Wait: %d s\r\n", convert_ticks_seconds(max_queue_wait));
 80010ee:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010f2:	f000 fa81 	bl	80015f8 <convert_ticks_seconds>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	493f      	ldr	r1, [pc, #252]	; (80011fc <print_results+0x2b4>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 fd9c 	bl	8008c3c <siprintf>
	USART_Write(USART2, str, 27);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	221b      	movs	r2, #27
 800110a:	4619      	mov	r1, r3
 800110c:	4835      	ldr	r0, [pc, #212]	; (80011e4 <print_results+0x29c>)
 800110e:	f000 fe79 	bl	8001e04 <USART_Write>


	// Max Wait time for tellers
	if (t1->max_wait_for_customer > t2->max_wait_for_customer && t1->max_wait_for_customer > t2->max_wait_for_customer) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111a:	429a      	cmp	r2, r3
 800111c:	d90a      	bls.n	8001134 <print_results+0x1ec>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001126:	429a      	cmp	r2, r3
 8001128:	d904      	bls.n	8001134 <print_results+0x1ec>
		max_wait_for_customer = t1->max_wait_for_customer;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001132:	e020      	b.n	8001176 <print_results+0x22e>
	}
	else if (t2->max_wait_for_customer > t1->max_wait_for_customer && t2->max_wait_for_customer > t3->max_wait_for_customer) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113c:	429a      	cmp	r2, r3
 800113e:	d90a      	bls.n	8001156 <print_results+0x20e>
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	429a      	cmp	r2, r3
 800114a:	d904      	bls.n	8001156 <print_results+0x20e>
		max_wait_for_customer = t2->max_wait_for_customer;
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001154:	e00f      	b.n	8001176 <print_results+0x22e>
	}
	else if (t3->max_wait_for_customer > t1->max_wait_for_customer && t3->max_wait_for_customer > t2->max_wait_for_customer) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	429a      	cmp	r2, r3
 8001160:	d909      	bls.n	8001176 <print_results+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	429a      	cmp	r2, r3
 800116c:	d903      	bls.n	8001176 <print_results+0x22e>
		max_wait_for_customer = t3->max_wait_for_customer;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	}
	sprintf(str, "Longest Wait for Customer: %d s\r\n", convert_ticks_seconds(max_wait_for_customer));
 8001176:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800117a:	f000 fa3d 	bl	80015f8 <convert_ticks_seconds>
 800117e:	4602      	mov	r2, r0
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	491e      	ldr	r1, [pc, #120]	; (8001200 <print_results+0x2b8>)
 8001186:	4618      	mov	r0, r3
 8001188:	f007 fd58 	bl	8008c3c <siprintf>
	USART_Write(USART2, str, 35);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2223      	movs	r2, #35	; 0x23
 8001192:	4619      	mov	r1, r3
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <print_results+0x29c>)
 8001196:	f000 fe35 	bl	8001e04 <USART_Write>


	// Max transaction time (across all tellers)
	if (t1->max_customer_help_time > t2->max_customer_help_time && t1->max_customer_help_time > t2->max_customer_help_time) {
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90a      	bls.n	80011bc <print_results+0x274>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d904      	bls.n	80011bc <print_results+0x274>
		max_customer_help_time = t1->max_customer_help_time;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011ba:	e033      	b.n	8001224 <print_results+0x2dc>
	}
	else if (t2->max_customer_help_time > t1->max_customer_help_time && t2->max_customer_help_time > t3->max_customer_help_time) {
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d91d      	bls.n	8001204 <print_results+0x2bc>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d917      	bls.n	8001204 <print_results+0x2bc>
		max_customer_help_time = t2->max_customer_help_time;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011dc:	e022      	b.n	8001224 <print_results+0x2dc>
 80011de:	bf00      	nop
 80011e0:	08009468 	.word	0x08009468
 80011e4:	40004400 	.word	0x40004400
 80011e8:	08009488 	.word	0x08009488
 80011ec:	080094bc 	.word	0x080094bc
 80011f0:	aaaaaaab 	.word	0xaaaaaaab
 80011f4:	080094e0 	.word	0x080094e0
 80011f8:	08009500 	.word	0x08009500
 80011fc:	0800952c 	.word	0x0800952c
 8001200:	08009548 	.word	0x08009548
	}
	else if (t3->max_customer_help_time > t1->max_customer_help_time && t3->max_customer_help_time > t2->max_customer_help_time) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800120c:	429a      	cmp	r2, r3
 800120e:	d909      	bls.n	8001224 <print_results+0x2dc>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001218:	429a      	cmp	r2, r3
 800121a:	d903      	bls.n	8001224 <print_results+0x2dc>
		max_customer_help_time = t3->max_customer_help_time;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001220:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	}
	sprintf(str, "Max Transaction Time: %d s\r\n", convert_ticks_seconds(max_customer_help_time));
 8001224:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001228:	f000 f9e6 	bl	80015f8 <convert_ticks_seconds>
 800122c:	4602      	mov	r2, r0
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	498b      	ldr	r1, [pc, #556]	; (8001460 <print_results+0x518>)
 8001234:	4618      	mov	r0, r3
 8001236:	f007 fd01 	bl	8008c3c <siprintf>
	USART_Write(USART2, str, 30);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	221e      	movs	r2, #30
 8001240:	4619      	mov	r1, r3
 8001242:	4888      	ldr	r0, [pc, #544]	; (8001464 <print_results+0x51c>)
 8001244:	f000 fdde 	bl	8001e04 <USART_Write>

	// Maximum queue depth
	sprintf(str, "Max Queue Length: %d \r\n", max_queue);
 8001248:	4b87      	ldr	r3, [pc, #540]	; (8001468 <print_results+0x520>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4986      	ldr	r1, [pc, #536]	; (800146c <print_results+0x524>)
 8001254:	4618      	mov	r0, r3
 8001256:	f007 fcf1 	bl	8008c3c <siprintf>
	USART_Write(USART2, str, 22);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2216      	movs	r2, #22
 8001260:	4619      	mov	r1, r3
 8001262:	4880      	ldr	r0, [pc, #512]	; (8001464 <print_results+0x51c>)
 8001264:	f000 fdce 	bl	8001e04 <USART_Write>

	// Idle hook count
	str_size = sprintf(str, "Idle Hook Count: %d \r\n", *idle_hook_cnt_pnt);
 8001268:	4b81      	ldr	r3, [pc, #516]	; (8001470 <print_results+0x528>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4980      	ldr	r1, [pc, #512]	; (8001474 <print_results+0x52c>)
 8001274:	4618      	mov	r0, r3
 8001276:	f007 fce1 	bl	8008c3c <siprintf>
 800127a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, str, str_size);
 800127e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	4876      	ldr	r0, [pc, #472]	; (8001464 <print_results+0x51c>)
 800128a:	f000 fdbb 	bl	8001e04 <USART_Write>

	// Number of breaks
	str_size = sprintf(str, (uint8_t *)"Total Number of breaks: %d\r\n", (t1->breaks_cnt + t2->breaks_cnt + t3->breaks_cnt));
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001296:	441a      	add	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800129c:	441a      	add	r2, r3
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4975      	ldr	r1, [pc, #468]	; (8001478 <print_results+0x530>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 fcc9 	bl	8008c3c <siprintf>
 80012aa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t*)str, str_size);
 80012ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	486a      	ldr	r0, [pc, #424]	; (8001464 <print_results+0x51c>)
 80012ba:	f000 fda3 	bl	8001e04 <USART_Write>

	// Breaks per teller
	str_size = sprintf(str, (uint8_t *)"\t Teller 1: %d\r\n\t Teller 2: %d\r\n\t Teller 3: %d\r\n", t1->breaks_cnt, t2->breaks_cnt, t3->breaks_cnt);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012ca:	f107 0010 	add.w	r0, r7, #16
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	460b      	mov	r3, r1
 80012d2:	496a      	ldr	r1, [pc, #424]	; (800147c <print_results+0x534>)
 80012d4:	f007 fcb2 	bl	8008c3c <siprintf>
 80012d8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t *)str, str_size);
 80012dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	485f      	ldr	r0, [pc, #380]	; (8001464 <print_results+0x51c>)
 80012e8:	f000 fd8c 	bl	8001e04 <USART_Write>

	// Longest break
	if (t1->longest_break_time > t2->longest_break_time && t1->longest_break_time > t2->longest_break_time) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d90a      	bls.n	800130e <print_results+0x3c6>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	429a      	cmp	r2, r3
 8001302:	d904      	bls.n	800130e <print_results+0x3c6>
		max_break_time = t1->longest_break_time;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800130c:	e020      	b.n	8001350 <print_results+0x408>
	}
	else if (t2->longest_break_time > t1->longest_break_time && t2->longest_break_time > t3->longest_break_time) {
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001316:	429a      	cmp	r2, r3
 8001318:	d90a      	bls.n	8001330 <print_results+0x3e8>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	429a      	cmp	r2, r3
 8001324:	d904      	bls.n	8001330 <print_results+0x3e8>
		max_break_time = t2->longest_break_time;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800132e:	e00f      	b.n	8001350 <print_results+0x408>
	}
	else if (t3->longest_break_time > t1->longest_break_time && t3->longest_break_time > t2->longest_break_time) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	429a      	cmp	r2, r3
 800133a:	d909      	bls.n	8001350 <print_results+0x408>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001344:	429a      	cmp	r2, r3
 8001346:	d903      	bls.n	8001350 <print_results+0x408>
		max_break_time = t3->longest_break_time;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}
	str_size = sprintf(str, (uint8_t *)"Longest Break Time: %d s\r\n", convert_ticks_seconds(max_break_time));
 8001350:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001354:	f000 f950 	bl	80015f8 <convert_ticks_seconds>
 8001358:	4602      	mov	r2, r0
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4948      	ldr	r1, [pc, #288]	; (8001480 <print_results+0x538>)
 8001360:	4618      	mov	r0, r3
 8001362:	f007 fc6b 	bl	8008c3c <siprintf>
 8001366:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t *)str, str_size);
 800136a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	483b      	ldr	r0, [pc, #236]	; (8001464 <print_results+0x51c>)
 8001376:	f000 fd45 	bl	8001e04 <USART_Write>

	// Shortest break
	if (t1->shortest_break_time < t2->shortest_break_time && t1->shortest_break_time < t2->shortest_break_time) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001382:	429a      	cmp	r2, r3
 8001384:	d20a      	bcs.n	800139c <print_results+0x454>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800138e:	429a      	cmp	r2, r3
 8001390:	d204      	bcs.n	800139c <print_results+0x454>
		min_break_time = t1->longest_break_time;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800139a:	e020      	b.n	80013de <print_results+0x496>
	}
	else if (t2->shortest_break_time < t1->shortest_break_time && t2->shortest_break_time < t3->shortest_break_time) {
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d20a      	bcs.n	80013be <print_results+0x476>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d204      	bcs.n	80013be <print_results+0x476>
		min_break_time = t2->shortest_break_time;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80013bc:	e00f      	b.n	80013de <print_results+0x496>
	}
	else if (t3->shortest_break_time < t1->shortest_break_time && t3->shortest_break_time < t2->shortest_break_time) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d209      	bcs.n	80013de <print_results+0x496>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d203      	bcs.n	80013de <print_results+0x496>
		min_break_time = t3->shortest_break_time;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}
	str_size = sprintf(str, (uint8_t *)"Shortest Break Time: %d s\r\n", convert_ticks_seconds(min_break_time));
 80013de:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80013e2:	f000 f909 	bl	80015f8 <convert_ticks_seconds>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4925      	ldr	r1, [pc, #148]	; (8001484 <print_results+0x53c>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fc24 	bl	8008c3c <siprintf>
 80013f4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t *)str, str_size);
 80013f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <print_results+0x51c>)
 8001404:	f000 fcfe 	bl	8001e04 <USART_Write>

	// Average break
	avg_break_time = (t1->total_break_time + t2->total_break_time + t3->total_break_time) / (t1->breaks_cnt + t2->breaks_cnt + t3->breaks_cnt);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001410:	441a      	add	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001416:	441a      	add	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001420:	4419      	add	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001426:	440b      	add	r3, r1
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	677b      	str	r3, [r7, #116]	; 0x74
	str_size = sprintf(str, (uint8_t *)"Average Break Time: %d s\r\n", convert_ticks_seconds(avg_break_time));
 800142e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001430:	f000 f8e2 	bl	80015f8 <convert_ticks_seconds>
 8001434:	4602      	mov	r2, r0
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4913      	ldr	r1, [pc, #76]	; (8001488 <print_results+0x540>)
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fbfd 	bl	8008c3c <siprintf>
 8001442:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USART_Write(USART2, (uint8_t *)str, str_size);
 8001446:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <print_results+0x51c>)
 8001452:	f000 fcd7 	bl	8001e04 <USART_Write>

}
 8001456:	bf00      	nop
 8001458:	37a0      	adds	r7, #160	; 0xa0
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	0800956c 	.word	0x0800956c
 8001464:	40004400 	.word	0x40004400
 8001468:	2000035c 	.word	0x2000035c
 800146c:	0800958c 	.word	0x0800958c
 8001470:	20000360 	.word	0x20000360
 8001474:	080095a4 	.word	0x080095a4
 8001478:	080095bc 	.word	0x080095bc
 800147c:	08009488 	.word	0x08009488
 8001480:	080095dc 	.word	0x080095dc
 8001484:	080095f8 	.word	0x080095f8
 8001488:	08009614 	.word	0x08009614

0800148c <monitor>:

void monitor(osMessageQueueId_t *q, teller_t *t1, teller_t *t2, teller_t *t3) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a8      	sub	sp, #160	; 0xa0
 8001490:	af06      	add	r7, sp, #24
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
	char str[100];

	int time = (TIM2->CNT - bank_open_time);
 800149a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800149e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <monitor+0x104>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int secs=0, mins=0, hours=0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014b0:	2300      	movs	r3, #0
 80014b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014b4:	2300      	movs	r3, #0
 80014b6:	67bb      	str	r3, [r7, #120]	; 0x78

	secs = (time/10) % 60;
 80014b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <monitor+0x108>)
 80014be:	fb82 1203 	smull	r1, r2, r2, r3
 80014c2:	1092      	asrs	r2, r2, #2
 80014c4:	17db      	asrs	r3, r3, #31
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <monitor+0x10c>)
 80014ca:	fb83 1302 	smull	r1, r3, r3, r2
 80014ce:	4413      	add	r3, r2
 80014d0:	1159      	asrs	r1, r3, #5
 80014d2:	17d3      	asrs	r3, r2, #31
 80014d4:	1ac9      	subs	r1, r1, r3
 80014d6:	460b      	mov	r3, r1
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a5b      	subs	r3, r3, r1
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	mins = time/ONE_MINUTE_TICKS;
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e8:	4a2c      	ldr	r2, [pc, #176]	; (800159c <monitor+0x110>)
 80014ea:	fb82 1203 	smull	r1, r2, r2, r3
 80014ee:	1192      	asrs	r2, r2, #6
 80014f0:	17db      	asrs	r3, r3, #31
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	67fb      	str	r3, [r7, #124]	; 0x7c
	hours = 7 + (mins/60);
 80014f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <monitor+0x10c>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	441a      	add	r2, r3
 8001500:	1152      	asrs	r2, r2, #5
 8001502:	17db      	asrs	r3, r3, #31
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	3307      	adds	r3, #7
 8001508:	67bb      	str	r3, [r7, #120]	; 0x78
	mins = mins%60;
 800150a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <monitor+0x10c>)
 800150e:	fb83 1302 	smull	r1, r3, r3, r2
 8001512:	4413      	add	r3, r2
 8001514:	1159      	asrs	r1, r3, #5
 8001516:	17d3      	asrs	r3, r2, #31
 8001518:	1ac9      	subs	r1, r1, r3
 800151a:	460b      	mov	r3, r1
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a5b      	subs	r3, r3, r1
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	67fb      	str	r3, [r7, #124]	; 0x7c

	uint32_t queue_size = osMessageQueueGetCount(*q);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f004 f8c6 	bl	80056bc <osMessageQueueGetCount>
 8001530:	6778      	str	r0, [r7, #116]	; 0x74
	if (queue_size > max_queue) max_queue = queue_size;
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <monitor+0x114>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800153a:	4293      	cmp	r3, r2
 800153c:	d903      	bls.n	8001546 <monitor+0xba>
 800153e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <monitor+0x114>)
 8001544:	701a      	strb	r2, [r3, #0]

	sprintf(str, "\rTime: %d:%d:%d, Queue: %d, Teller 1: %d, Teller 2: %d, Teller 3: %d            ", hours, mins, secs, queue_size, t1->status, t2->status, t3->status);
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	f107 0010 	add.w	r0, r7, #16
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	9103      	str	r1, [sp, #12]
 8001564:	9202      	str	r2, [sp, #8]
 8001566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001572:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001574:	490b      	ldr	r1, [pc, #44]	; (80015a4 <monitor+0x118>)
 8001576:	f007 fb61 	bl	8008c3c <siprintf>
	USART_Write(USART2, str, 70);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2246      	movs	r2, #70	; 0x46
 8001580:	4619      	mov	r1, r3
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <monitor+0x11c>)
 8001584:	f000 fc3e 	bl	8001e04 <USART_Write>

}
 8001588:	bf00      	nop
 800158a:	3788      	adds	r7, #136	; 0x88
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000354 	.word	0x20000354
 8001594:	66666667 	.word	0x66666667
 8001598:	88888889 	.word	0x88888889
 800159c:	10624dd3 	.word	0x10624dd3
 80015a0:	2000035c 	.word	0x2000035c
 80015a4:	08009630 	.word	0x08009630
 80015a8:	40004400 	.word	0x40004400

080015ac <get_rand_num>:
 */

#include "random.h"

// Gets a random number between a given range with the random 32 bit number gotten
float get_rand_num(uint32_t rand32, float min, float max) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015b8:	edc7 0a01 	vstr	s1, [r7, #4]
	return (float) rand32 / 0xffffffff * (max - min) + min;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80015f4 <get_rand_num+0x48>
 80015ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80015d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	4f800000 	.word	0x4f800000

080015f8 <convert_ticks_seconds>:

uint32_t convert_ticks_seconds(uint32_t ticks) {
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	float seconds;

	float fTicks = (float)ticks;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160a:	edc7 7a03 	vstr	s15, [r7, #12]
	fTicks = fTicks / 1000;
 800160e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001612:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001648 <convert_ticks_seconds+0x50>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]

	seconds = fTicks * 60;
 800161e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001622:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800164c <convert_ticks_seconds+0x54>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	edc7 7a02 	vstr	s15, [r7, #8]

	return (uint32_t) seconds;
 800162e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001636:	ee17 3a90 	vmov	r3, s15

}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	447a0000 	.word	0x447a0000
 800164c:	42700000 	.word	0x42700000

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_MspInit+0x4c>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6613      	str	r3, [r2, #96]	; 0x60
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_MspInit+0x4c>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_MspInit+0x4c>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_MspInit+0x4c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6593      	str	r3, [r2, #88]	; 0x58
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	f06f 0001 	mvn.w	r0, #1
 800168e:	f000 fd0d 	bl	80020ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b0a6      	sub	sp, #152	; 0x98
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2288      	movs	r2, #136	; 0x88
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f007 f9ad 	bl	8008a10 <memset>
  if(hrng->Instance==RNG)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_RNG_MspInit+0x80>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d12b      	bne.n	8001718 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80016c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80016c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016ce:	2302      	movs	r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016d6:	2308      	movs	r3, #8
 80016d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016da:	2307      	movs	r3, #7
 80016dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80016de:	2304      	movs	r3, #4
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fd75 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80016fc:	f7ff f9e2 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_RNG_MspInit+0x84>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_RNG_MspInit+0x84>)
 8001706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RNG_MspInit+0x84>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3798      	adds	r7, #152	; 0x98
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	50060800 	.word	0x50060800
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d10b      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_TIM_Base_MspInit+0x38>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_TIM_Base_MspInit+0x38>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_TIM_Base_MspInit+0x38>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0ac      	sub	sp, #176	; 0xb0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2288      	movs	r2, #136	; 0x88
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f007 f943 	bl	8008a10 <memset>
  if(huart->Instance==USART2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <HAL_UART_MspInit+0xb0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d13b      	bne.n	800180c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001798:	2300      	movs	r3, #0
 800179a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fd1d 	bl	80031e0 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017ac:	f7ff f98a 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ba:	6593      	str	r3, [r2, #88]	; 0x58
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_UART_MspInit+0xb4>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e0:	230c      	movs	r3, #12
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f8:	2307      	movs	r3, #7
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f000 fc7a 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	37b0      	adds	r7, #176	; 0xb0
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40004400 	.word	0x40004400
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_InitTick+0xe0>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_InitTick+0xe0>)
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_InitTick+0xe0>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001842:	f107 0210 	add.w	r2, r7, #16
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fc35 	bl	80030bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800185c:	f001 fc02 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8001860:	6378      	str	r0, [r7, #52]	; 0x34
 8001862:	e004      	b.n	800186e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001864:	f001 fbfe 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8001868:	4603      	mov	r3, r0
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_InitTick+0xe4>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	0c9b      	lsrs	r3, r3, #18
 8001878:	3b01      	subs	r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_InitTick+0xe8>)
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_InitTick+0xec>)
 8001880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_InitTick+0xe8>)
 8001884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001888:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800188a:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_InitTick+0xe8>)
 800188c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_InitTick+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_InitTick+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_InitTick+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018a2:	4818      	ldr	r0, [pc, #96]	; (8001904 <HAL_InitTick+0xe8>)
 80018a4:	f002 f9af 	bl	8003c06 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d11b      	bne.n	80018ee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018b6:	4813      	ldr	r0, [pc, #76]	; (8001904 <HAL_InitTick+0xe8>)
 80018b8:	f002 fa64 	bl	8003d84 <HAL_TIM_Base_Start_IT>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d111      	bne.n	80018ee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ca:	2036      	movs	r0, #54	; 0x36
 80018cc:	f000 fc0a 	bl	80020e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	d808      	bhi.n	80018e8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018d6:	2200      	movs	r2, #0
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	2036      	movs	r0, #54	; 0x36
 80018dc:	f000 fbe6 	bl	80020ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_InitTick+0xf0>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e002      	b.n	80018ee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3738      	adds	r7, #56	; 0x38
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	431bde83 	.word	0x431bde83
 8001904:	20000368 	.word	0x20000368
 8001908:	40001000 	.word	0x40001000
 800190c:	20000004 	.word	0x20000004

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM6_DAC_IRQHandler+0x10>)
 8001942:	f002 fa8f 	bl	8003e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000368 	.word	0x20000368

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f007 f80c 	bl	800899c <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20018000 	.word	0x20018000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200003b4 	.word	0x200003b4
 80019b8:	200038f0 	.word	0x200038f0

080019bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <teller_task>:
static uint8_t teller_cnt = 0;

/* The main teller task for the three tellers
 * - Task will be run using FreeRTOS
 */
void teller_task(void *tell) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	uint8_t working = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char str[50];
	osStatus_t stat;
	// Set the teller from the parameters of the task
	teller_t *teller = (teller_t *)tell;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	64bb      	str	r3, [r7, #72]	; 0x48
	// Get the semaphore pointer
	osSemaphoreId_t *sem = teller->sem;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
	// Aquire the semaphore
	osSemaphoreAcquire(*sem, 0);
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fc94 	bl	800532c <osSemaphoreAcquire>
	// Initalize the teller
	init_teller(teller);
 8001a04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a06:	f000 f991 	bl	8001d2c <init_teller>
	while(working) {
 8001a0a:	bf00      	nop
 8001a0c:	e118      	b.n	8001c40 <teller_task+0x260>
		switch(teller->status) {
 8001a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	f200 8113 	bhi.w	8001c40 <teller_task+0x260>
 8001a1a:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <teller_task+0x40>)
 8001a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a20:	08001ac3 	.word	0x08001ac3
 8001a24:	08001a31 	.word	0x08001a31
 8001a28:	08001b35 	.word	0x08001b35
 8001a2c:	08001bdb 	.word	0x08001bdb
			case helping_customer:
				// if the help time plus the start time is greater than the TIM2 cnt, the customer is still being helped
				if ((teller->cust_start_time + teller->current_customer.help_time) > TIM2->CNT) {
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	441a      	add	r2, r3
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d90f      	bls.n	8001a64 <teller_task+0x84>
					// keep waiting until fully serviced (do nothing)
					if ((teller->cust_start_time + teller->current_customer.help_time) < TIM2->CNT + 20) {
 8001a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	3314      	adds	r3, #20
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f080 80f2 	bcs.w	8001c40 <teller_task+0x260>
						vTaskDelay(20);
 8001a5c:	2014      	movs	r0, #20
 8001a5e:	f005 f9a9 	bl	8006db4 <vTaskDelay>
 8001a62:	e0ed      	b.n	8001c40 <teller_task+0x260>
					}
				}
				// TIM2 is less than help time + start time (customer has been helped)
				else {
					// Save customer information
					save_customer_information(&teller->current_customer, teller);
 8001a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a66:	3304      	adds	r3, #4
 8001a68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f900 	bl	8001c70 <save_customer_information>
					// Start wait time for new customer
					teller->start_wait_for_customer = TIM2->CNT;
 8001a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58
					if (teller->break_flag != 1 && teller->force_break_flag != 1) {
 8001a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d009      	beq.n	8001a98 <teller_task+0xb8>
 8001a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a86:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d004      	beq.n	8001a98 <teller_task+0xb8>
						// finish performing
						teller->status = no_customer;
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a96:	e013      	b.n	8001ac0 <teller_task+0xe0>
					}
					else if (teller->break_flag == 1){
 8001a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d104      	bne.n	8001aac <teller_task+0xcc>
						// go on break
						teller->status = on_break;
 8001aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aaa:	e0c9      	b.n	8001c40 <teller_task+0x260>
					}
					else if (teller->force_break_flag == 1) {
 8001aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 80c4 	bne.w	8001c40 <teller_task+0x260>
						teller->status = force_break;
 8001ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aba:	2203      	movs	r2, #3
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					}
				}
				break;
 8001ac0:	e0be      	b.n	8001c40 <teller_task+0x260>
			case no_customer:
				// Get new customer from the queue
				stat = osMessageQueueGet(*(teller->queue_handle), &(teller->current_customer), NULL, 0);
 8001ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aca:	1d19      	adds	r1, r3, #4
 8001acc:	2300      	movs	r3, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f003 fd96 	bl	8005600 <osMessageQueueGet>
 8001ad4:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (stat == osOK) {
 8001ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11c      	bne.n	8001b16 <teller_task+0x136>
					// Stop wait for new customer
					teller->stop_wait_for_customer = TIM2->CNT;
 8001adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae4:	65da      	str	r2, [r3, #92]	; 0x5c
					// set the end queue time
					teller->current_customer.queue_end_time = teller->stop_wait_for_customer;
 8001ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aec:	619a      	str	r2, [r3, #24]
					// update total customer wait in queue time
					teller->total_customer_queue_wait += (teller->current_customer.queue_end_time - teller->current_customer.queue_start_time);
 8001aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af4:	6999      	ldr	r1, [r3, #24]
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	1acb      	subs	r3, r1, r3
 8001afc:	441a      	add	r2, r3
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b00:	665a      	str	r2, [r3, #100]	; 0x64
					// Update time gotten customer
					teller->cust_start_time = TIM2->CNT;
 8001b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
					// Set the status of teller to helping to perform
					teller->status = helping_customer;
 8001b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b14:	e094      	b.n	8001c40 <teller_task+0x260>
				}
				else if (stat == osErrorResource && teller->end_of_shift == 1) {
 8001b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b18:	f113 0f03 	cmn.w	r3, #3
 8001b1c:	f040 8090 	bne.w	8001c40 <teller_task+0x260>
 8001b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	f040 808a 	bne.w	8001c40 <teller_task+0x260>
					working = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
				break;
 8001b32:	e085      	b.n	8001c40 <teller_task+0x260>
			case on_break:
				// Generate a random break length for the teller 30-60mins plus the current time
				if (teller->break_time == 0) {
 8001b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d133      	bne.n	8001ba4 <teller_task+0x1c4>
					teller->break_time = get_rand_num(RNG->DR, MIN_BREAK_TIME, MAX_BREAK_TIME);
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <teller_task+0x284>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001c68 <teller_task+0x288>
 8001b44:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001c6c <teller_task+0x28c>
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fd2f 	bl	80015ac <get_rand_num>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b56:	ee17 2a90 	vmov	r2, s15
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c
					teller->end_break_time = (teller->break_time + TIM2->CNT);
 8001b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	441a      	add	r2, r3
 8001b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
					// update metrics
					if (teller->break_time > teller->longest_break_time) teller->longest_break_time = teller->break_time;
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d903      	bls.n	8001b82 <teller_task+0x1a2>
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	675a      	str	r2, [r3, #116]	; 0x74
					if (teller->break_time < teller->shortest_break_time) teller->shortest_break_time = teller->break_time;
 8001b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d203      	bcs.n	8001b96 <teller_task+0x1b6>
 8001b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b94:	679a      	str	r2, [r3, #120]	; 0x78
					teller->total_break_time += teller->break_time;
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	441a      	add	r2, r3
 8001ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba2:	67da      	str	r2, [r3, #124]	; 0x7c
				}
				// wait until break is done
				if (TIM2->CNT >= teller->end_break_time) {
 8001ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d346      	bcc.n	8001c40 <teller_task+0x260>
					// Change status to off break with no customer
					teller->status = no_customer;
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					// update the break flag
					teller->break_flag = 0;
 8001bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					// update the next break time
					teller->next_break_time = 0;
 8001bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
					// update the break time
					teller->break_time = 0;
 8001bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bca:	2200      	movs	r2, #0
 8001bcc:	63da      	str	r2, [r3, #60]	; 0x3c
					// Update the break count
					teller->breaks_cnt++;
 8001bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd6:	66da      	str	r2, [r3, #108]	; 0x6c
				}
				break;
 8001bd8:	e032      	b.n	8001c40 <teller_task+0x260>
			case force_break:
				if (teller->force_break_flag == 1) {
 8001bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bdc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d02c      	beq.n	8001c3e <teller_task+0x25e>
					// do nothing
				}
				else {
					teller->end_force_break_time = TIM2->CNT;
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					uint32_t break_time = (teller->end_force_break_time - teller->start_force_break_time);
 8001bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40
					// update metrics
					if (break_time > teller->longest_break_time) teller->longest_break_time = break_time;
 8001c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d902      	bls.n	8001c10 <teller_task+0x230>
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c0e:	675a      	str	r2, [r3, #116]	; 0x74
					if (break_time < teller->shortest_break_time) teller->shortest_break_time = break_time;
 8001c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d202      	bcs.n	8001c20 <teller_task+0x240>
 8001c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c1e:	679a      	str	r2, [r3, #120]	; 0x78
					teller->total_break_time += break_time;
 8001c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c22:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c26:	441a      	add	r2, r3
 8001c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2a:	67da      	str	r2, [r3, #124]	; 0x7c
					teller->breaks_cnt++;
 8001c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c34:	66da      	str	r2, [r3, #108]	; 0x6c
					teller->status = no_customer;
 8001c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				}
				break;
 8001c3e:	bf00      	nop
	while(working) {
 8001c40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f47f aee2 	bne.w	8001a0e <teller_task+0x2e>
		}
	}
	osSemaphoreRelease(*sem);
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fbbe 	bl	80053d0 <osSemaphoreRelease>
	vTaskDelete( NULL );
 8001c54:	2000      	movs	r0, #0
 8001c56:	f005 f83b 	bl	8006cd0 <vTaskDelete>
}
 8001c5a:	bf00      	nop
 8001c5c:	3750      	adds	r7, #80	; 0x50
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	50060800 	.word	0x50060800
 8001c68:	447a0000 	.word	0x447a0000
 8001c6c:	457a0000 	.word	0x457a0000

08001c70 <save_customer_information>:

// Saves custmer's relevant information to the teller
void save_customer_information(customer_t *cust, teller_t *teller) {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	// Increase customers helped
	teller->customers_helped += 1;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
	// Update average customer help times
	teller->total_help_time += cust->help_time;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	649a      	str	r2, [r3, #72]	; 0x48
	teller->avg_customer_help_time = teller->total_help_time / teller->customers_helped;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	64da      	str	r2, [r3, #76]	; 0x4c
	// Update average wait time
	teller->total_wait_time += (teller->stop_wait_for_customer - teller->start_wait_for_customer);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60
	teller->avg_teller_wait_for_customer = teller->total_wait_time / teller->customers_helped;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	651a      	str	r2, [r3, #80]	; 0x50
	// Save max customer wait
	if ((teller->stop_wait_for_customer - teller->start_wait_for_customer) > teller->max_wait_for_customer) teller->max_wait_for_customer = (teller->stop_wait_for_customer - teller->start_wait_for_customer);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d906      	bls.n	8001ce6 <save_customer_information+0x76>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	1ad2      	subs	r2, r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
	// Set max customer queue wait
	if ((cust->queue_end_time - cust->queue_start_time) > teller->max_cust_queue_wait) teller->max_cust_queue_wait = cust->queue_end_time - cust->queue_start_time;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d907      	bls.n	8001d0a <save_customer_information+0x9a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	1ad2      	subs	r2, r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// Update max transaction time
	if (cust->help_time > teller->max_customer_help_time) teller->max_customer_help_time = cust->help_time;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d903      	bls.n	8001d1e <save_customer_information+0xae>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <init_teller>:

// Intializes the teller to have its default values
void init_teller(teller_t *teller) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	// Initialize the teller information
	teller->teller_id = teller_cnt;
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <init_teller+0xd4>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	701a      	strb	r2, [r3, #0]
	teller_cnt++;
 8001d3c:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <init_teller+0xd4>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <init_teller+0xd4>)
 8001d46:	701a      	strb	r2, [r3, #0]
	teller->break_time = 0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c
	teller->break_flag = 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	teller->force_break_flag = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	teller->next_break_time = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
	teller->status = no_customer;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	teller->cust_start_time = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
	teller->end_of_shift = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	// Initialize the stored information for the teller
	teller->customers_helped = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	; 0x44
	teller->total_help_time = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	649a      	str	r2, [r3, #72]	; 0x48
	teller->avg_customer_help_time = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	64da      	str	r2, [r3, #76]	; 0x4c
	teller->avg_teller_wait_for_customer = 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
	teller->max_wait_for_customer = 0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
	teller->start_wait_for_customer = TIM2->CNT;
 8001d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58
	teller->stop_wait_for_customer = 0;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c
	teller->total_wait_time = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	661a      	str	r2, [r3, #96]	; 0x60
	teller->max_customer_help_time = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	669a      	str	r2, [r3, #104]	; 0x68
	teller->breaks_cnt = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	66da      	str	r2, [r3, #108]	; 0x6c
	teller->avg_break_time = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	671a      	str	r2, [r3, #112]	; 0x70
	teller->longest_break_time = 0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	675a      	str	r2, [r3, #116]	; 0x74
	teller->shortest_break_time = 0xFFFFFFFF;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	679a      	str	r2, [r3, #120]	; 0x78
	teller->max_cust_queue_wait = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	teller->total_break_time = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	67da      	str	r2, [r3, #124]	; 0x7c
	teller->total_customer_queue_wait = 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	665a      	str	r2, [r3, #100]	; 0x64
	teller->start_force_break_time = 0;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	teller->end_force_break_time = 0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200003b8 	.word	0x200003b8

08001e04 <USART_Write>:
		return '\0';
	}
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e010      	b.n	8001e38 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001e16:	bf00      	nop
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f9      	beq.n	8001e18 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d8ea      	bhi.n	8001e16 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001e40:	bf00      	nop
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f9      	beq.n	8001e42 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	61da      	str	r2, [r3, #28]
}   
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e6c:	f7ff fda6 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	; (8001eb4 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f006 fd87 	bl	80089a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e9a:	f7fe fba5 	bl	80005e8 <main>

08001e9e <LoopForever>:

LoopForever:
    b LoopForever
 8001e9e:	e7fe      	b.n	8001e9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001eac:	08009884 	.word	0x08009884
  ldr r2, =_sbss
 8001eb0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001eb4:	200038f0 	.word	0x200038f0

08001eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_2_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_Init+0x3c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_Init+0x3c>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	f000 f8df 	bl	8002096 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f7ff fc9f 	bl	800181c <HAL_InitTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	e001      	b.n	8001eee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eea:	f7ff fbb1 	bl	8001650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eee:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200003bc 	.word	0x200003bc

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200003bc 	.word	0x200003bc

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff4c 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020be:	f7ff ff61 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 80020c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f7ff ffb1 	bl	8002030 <NVIC_EncodePriority>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff80 	bl	8001fdc <__NVIC_SetPriority>
}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff54 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e17f      	b.n	8002410 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8171 	beq.w	800240a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x40>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d118      	bne.n	80021e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	6939      	ldr	r1, [r7, #16]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80ac 	beq.w	800240a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_GPIO_Init+0x330>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	4a5e      	ldr	r2, [pc, #376]	; (8002430 <HAL_GPIO_Init+0x330>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6613      	str	r3, [r2, #96]	; 0x60
 80022be:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_GPIO_Init+0x330>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022ca:	4a5a      	ldr	r2, [pc, #360]	; (8002434 <HAL_GPIO_Init+0x334>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f4:	d025      	beq.n	8002342 <HAL_GPIO_Init+0x242>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4f      	ldr	r2, [pc, #316]	; (8002438 <HAL_GPIO_Init+0x338>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <HAL_GPIO_Init+0x23e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_GPIO_Init+0x33c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x23a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_GPIO_Init+0x340>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x236>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_GPIO_Init+0x344>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x232>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <HAL_GPIO_Init+0x348>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x22e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4a      	ldr	r2, [pc, #296]	; (800244c <HAL_GPIO_Init+0x34c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x22a>
 8002326:	2306      	movs	r3, #6
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x244>
 800232a:	2307      	movs	r3, #7
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x244>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x244>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x244>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x244>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x244>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x244>
 8002342:	2300      	movs	r3, #0
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_GPIO_Init+0x334>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002386:	4a32      	ldr	r2, [pc, #200]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_GPIO_Init+0x350>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae78 	bne.w	8002110 <HAL_GPIO_Init+0x10>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	48000400 	.word	0x48000400
 800243c:	48000800 	.word	0x48000800
 8002440:	48000c00 	.word	0x48000c00
 8002444:	48001000 	.word	0x48001000
 8002448:	48001400 	.word	0x48001400
 800244c:	48001800 	.word	0x48001800
 8002450:	40010400 	.word	0x40010400

08002454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_PWREx_GetVoltageRange+0x18>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40007000 	.word	0x40007000

080024d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d130      	bne.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ec:	d038      	beq.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2232      	movs	r2, #50	; 0x32
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0c9b      	lsrs	r3, r3, #18
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002514:	e002      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3b01      	subs	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d102      	bne.n	8002530 <HAL_PWREx_ControlVoltageScaling+0x60>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f2      	bne.n	8002516 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253c:	d110      	bne.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e00f      	b.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254e:	d007      	beq.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40007000 	.word	0x40007000
 8002574:	20000000 	.word	0x20000000
 8002578:	431bde83 	.word	0x431bde83

0800257c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e3ca      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	4b97      	ldr	r3, [pc, #604]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002598:	4b94      	ldr	r3, [pc, #592]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80e4 	beq.w	8002778 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_RCC_OscConfig+0x4a>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	f040 808b 	bne.w	80026d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 8087 	bne.w	80026d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c6:	4b89      	ldr	r3, [pc, #548]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x62>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e3a2      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_RCC_OscConfig+0x7c>
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f6:	e005      	b.n	8002604 <HAL_RCC_OscConfig+0x88>
 80025f8:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	4293      	cmp	r3, r2
 8002606:	d223      	bcs.n	8002650 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd87 	bl	8003120 <RCC_SetFlashLatencyFromMSIRange>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e383      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a72      	ldr	r2, [pc, #456]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	496d      	ldr	r1, [pc, #436]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263a:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	4968      	ldr	r1, [pc, #416]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	e025      	b.n	800269c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002650:	4b66      	ldr	r3, [pc, #408]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4960      	ldr	r1, [pc, #384]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	495b      	ldr	r1, [pc, #364]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd47 	bl	8003120 <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e343      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800269c:	f000 fc4a 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	4950      	ldr	r1, [pc, #320]	; (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
 80026b8:	4a4e      	ldr	r2, [pc, #312]	; (80027f4 <HAL_RCC_OscConfig+0x278>)
 80026ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026bc:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f8ab 	bl	800181c <HAL_InitTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d052      	beq.n	8002776 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	e327      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a42      	ldr	r2, [pc, #264]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fc1c 	bl	8001f24 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f0:	f7ff fc18 	bl	8001f24 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e310      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4931      	ldr	r1, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	492c      	ldr	r1, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
 8002740:	e01a      	b.n	8002778 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800274e:	f7ff fbe9 	bl	8001f24 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002756:	f7ff fbe5 	bl	8001f24 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e2dd      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x1da>
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002776:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d074      	beq.n	800286e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x21a>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d10e      	bne.n	80027ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d10b      	bne.n	80027ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d064      	beq.n	800286c <HAL_RCC_OscConfig+0x2f0>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d160      	bne.n	800286c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e2ba      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x24a>
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e026      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027ce:	d115      	bne.n	80027fc <HAL_RCC_OscConfig+0x280>
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a05      	ldr	r2, [pc, #20]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a02      	ldr	r2, [pc, #8]	; (80027ec <HAL_RCC_OscConfig+0x270>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e014      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	08009798 	.word	0x08009798
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004
 80027fc:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a9f      	ldr	r2, [pc, #636]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b9d      	ldr	r3, [pc, #628]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a9c      	ldr	r2, [pc, #624]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7ff fb82 	bl	8001f24 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff fb7e 	bl	8001f24 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e276      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002836:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x2a8>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff fb6e 	bl	8001f24 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fb6a 	bl	8001f24 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e262      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x2d0>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d060      	beq.n	800293c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_RCC_OscConfig+0x310>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d119      	bne.n	80028ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d116      	bne.n	80028ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288c:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x328>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e23f      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	4973      	ldr	r1, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b8:	e040      	b.n	800293c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d023      	beq.n	800290a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c2:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7ff fb29 	bl	8001f24 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7ff fb25 	bl	8001f24 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e21d      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e8:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	495f      	ldr	r1, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
 8002908:	e018      	b.n	800293c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7ff fb05 	bl	8001f24 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff fb01 	bl	8001f24 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1f9      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01c      	beq.n	800298a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002960:	f7ff fae0 	bl	8001f24 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7ff fadc 	bl	8001f24 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1d4      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ef      	beq.n	8002968 <HAL_RCC_OscConfig+0x3ec>
 8002988:	e01b      	b.n	80029c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 800298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff fac3 	bl	8001f24 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff fabf 	bl	8001f24 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1b7      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ef      	bne.n	80029a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80a6 	beq.w	8002b1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6593      	str	r3, [r2, #88]	; 0x58
 80029ec:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d118      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a14:	f7ff fa86 	bl	8001f24 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7ff fa82 	bl	8001f24 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e17a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x508>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_RCC_OscConfig+0x4d8>
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a52:	e029      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_OscConfig+0x50c>
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <HAL_RCC_OscConfig+0x504>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
 8002a88:	4b9c      	ldr	r3, [pc, #624]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a9b      	ldr	r2, [pc, #620]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a98:	4b98      	ldr	r3, [pc, #608]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a97      	ldr	r2, [pc, #604]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fa38 	bl	8001f24 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fa34 	bl	8001f24 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e12a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ed      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x53c>
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7ff fa21 	bl	8001f24 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff fa1d 	bl	8001f24 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e113      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1ed      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0a:	7ffb      	ldrb	r3, [r7, #31]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80fe 	beq.w	8002d22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f040 80d0 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b30:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d130      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d127      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d11f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b70:	2a07      	cmp	r2, #7
 8002b72:	bf14      	ite	ne
 8002b74:	2201      	movne	r2, #1
 8002b76:	2200      	moveq	r2, #0
 8002b78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d113      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d06e      	beq.n	8002c84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d069      	beq.n	8002c80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bac:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0ad      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd4:	f7ff f9a6 	bl	8001f24 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7ff f9a2 	bl	8001f24 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e09a      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bee:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	4b40      	ldr	r3, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x784>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c14:	0212      	lsls	r2, r2, #8
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c1c:	0852      	lsrs	r2, r2, #1
 8002c1e:	3a01      	subs	r2, #1
 8002c20:	0552      	lsls	r2, r2, #21
 8002c22:	4311      	orrs	r1, r2
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c28:	0852      	lsrs	r2, r2, #1
 8002c2a:	3a01      	subs	r2, #1
 8002c2c:	0652      	lsls	r2, r2, #25
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c34:	0912      	lsrs	r2, r2, #4
 8002c36:	0452      	lsls	r2, r2, #17
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	4930      	ldr	r1, [pc, #192]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c58:	f7ff f964 	bl	8001f24 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff f960 	bl	8001f24 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e058      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7e:	e050      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04f      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d148      	bne.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca8:	f7ff f93c 	bl	8001f24 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff f938 	bl	8001f24 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e030      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x734>
 8002cce:	e028      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d023      	beq.n	8002d1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCC_OscConfig+0x780>)
 8002cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7ff f91f 	bl	8001f24 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce8:	e00c      	b.n	8002d04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7ff f91b 	bl	8001f24 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d905      	bls.n	8002d04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ec      	bne.n	8002cea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	4905      	ldr	r1, [pc, #20]	; (8002d2c <HAL_RCC_OscConfig+0x7b0>)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x7b4>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
 8002d1c:	e001      	b.n	8002d22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	feeefffc 	.word	0xfeeefffc

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0e7      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4970      	ldr	r1, [pc, #448]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cf      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b66      	ldr	r3, [pc, #408]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d908      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4960      	ldr	r1, [pc, #384]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d04c      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dba:	4b5a      	ldr	r3, [pc, #360]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0a6      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e09a      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dea:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08e      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfa:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e086      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4943      	ldr	r1, [pc, #268]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1c:	f7ff f882 	bl	8001f24 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7ff f87e 	bl	8001f24 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e06e      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	492b      	ldr	r1, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d210      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0207 	bic.w	r2, r3, #7
 8002e90:	4923      	ldr	r1, [pc, #140]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e036      	b.n	8002f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4910      	ldr	r1, [pc, #64]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee8:	f000 f824 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	490b      	ldr	r1, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x1f4>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1fc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fc85 	bl	800181c <HAL_InitTick>
 8002f12:	4603      	mov	r3, r0
 8002f14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f16:	7afb      	ldrb	r3, [r7, #11]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08009798 	.word	0x08009798
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d121      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d11e      	bne.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e005      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f90:	4a2b      	ldr	r2, [pc, #172]	; (8003040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d102      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e004      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d134      	bne.n	800302c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0xa6>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	e005      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe2:	617b      	str	r3, [r7, #20]
      break;
 8002fe4:	e002      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	fb03 f202 	mul.w	r2, r3, r2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0e5b      	lsrs	r3, r3, #25
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	3301      	adds	r3, #1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800302c:	69bb      	ldr	r3, [r7, #24]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	080097b0 	.word	0x080097b0
 8003044:	00f42400 	.word	0x00f42400
 8003048:	007a1200 	.word	0x007a1200

0800304c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_RCC_GetPCLK1Freq+0x28>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	080097a8 	.word	0x080097a8

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003094:	f7ff ffda 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0adb      	lsrs	r3, r3, #11
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4904      	ldr	r1, [pc, #16]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	080097a8 	.word	0x080097a8

080030bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	220f      	movs	r2, #15
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_GetClockConfig+0x5c>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RCC_GetClockConfig+0x60>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	40022000 	.word	0x40022000

08003120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003138:	f7ff f9bc 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
 800313c:	6178      	str	r0, [r7, #20]
 800313e:	e014      	b.n	800316a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003158:	f7ff f9ac 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
 800315c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003168:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003170:	d10b      	bne.n	800318a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d919      	bls.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2ba0      	cmp	r3, #160	; 0xa0
 800317c:	d902      	bls.n	8003184 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317e:	2302      	movs	r3, #2
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	e013      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e010      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d902      	bls.n	8003196 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003190:	2303      	movs	r3, #3
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e00a      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d102      	bne.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319c:	2302      	movs	r3, #2
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e004      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d101      	bne.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a8:	2301      	movs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 0207 	bic.w	r2, r3, #7
 80031b4:	4909      	ldr	r1, [pc, #36]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40022000 	.word	0x40022000

080031e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e8:	2300      	movs	r3, #0
 80031ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031ec:	2300      	movs	r3, #0
 80031ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d041      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003200:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003204:	d02a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003206:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320a:	d824      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800320c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003216:	d81e      	bhi.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003220:	d010      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003222:	e018      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003224:	4b86      	ldr	r3, [pc, #536]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a85      	ldr	r2, [pc, #532]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003230:	e015      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fabb 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003242:	e00c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3320      	adds	r3, #32
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fba6 	bl	800399c <RCCEx_PLLSAI2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	74fb      	strb	r3, [r7, #19]
      break;
 800325a:	e000      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800325c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003264:	4b76      	ldr	r3, [pc, #472]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003272:	4973      	ldr	r1, [pc, #460]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800327a:	e001      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d041      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003294:	d02a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800329a:	d824      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800329c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a6:	d81e      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d010      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032b2:	e018      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b4:	4b62      	ldr	r3, [pc, #392]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a61      	ldr	r2, [pc, #388]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e015      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa73 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3320      	adds	r3, #32
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fb5e 	bl	800399c <RCCEx_PLLSAI2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f4:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003302:	494f      	ldr	r1, [pc, #316]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80a0 	beq.w	800345e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	4a40      	ldr	r2, [pc, #256]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	; 0x58
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3a      	ldr	r2, [pc, #232]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003360:	f7fe fde0 	bl	8001f24 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fe fddc 	bl	8001f24 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	74fb      	strb	r3, [r7, #19]
        break;
 800337a:	e005      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d15c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003398:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d019      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ac:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b8:	4b21      	ldr	r3, [pc, #132]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fd9b 	bl	8001f24 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f0:	e00b      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fd97 	bl	8001f24 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d902      	bls.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	74fb      	strb	r3, [r7, #19]
            break;
 8003408:	e006      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ec      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342e:	4904      	ldr	r1, [pc, #16]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800344c:	7c7b      	ldrb	r3, [r7, #17]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b9e      	ldr	r3, [pc, #632]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a9d      	ldr	r2, [pc, #628]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346a:	4b98      	ldr	r3, [pc, #608]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f023 0203 	bic.w	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	4994      	ldr	r1, [pc, #592]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800348c:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 020c 	bic.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	498c      	ldr	r1, [pc, #560]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ae:	4b87      	ldr	r3, [pc, #540]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4983      	ldr	r1, [pc, #524]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d0:	4b7e      	ldr	r3, [pc, #504]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	497b      	ldr	r1, [pc, #492]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003500:	4972      	ldr	r1, [pc, #456]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003514:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	496a      	ldr	r1, [pc, #424]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003536:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	4961      	ldr	r1, [pc, #388]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003558:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	4959      	ldr	r1, [pc, #356]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	4950      	ldr	r1, [pc, #320]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	4948      	ldr	r1, [pc, #288]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035be:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	493f      	ldr	r1, [pc, #252]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d028      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e0:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	4937      	ldr	r1, [pc, #220]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fe:	d106      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	d10c      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f8c8 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800363e:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	491f      	ldr	r1, [pc, #124]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800365c:	d106      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365e:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003668:	60d3      	str	r3, [r2, #12]
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f899 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4908      	ldr	r1, [pc, #32]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ba:	d109      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a02      	ldr	r2, [pc, #8]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c6:	60d3      	str	r3, [r2, #12]
 80036c8:	e014      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	2101      	movs	r1, #1
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f867 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02f      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370e:	4928      	ldr	r1, [pc, #160]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f844 	bl	80037b4 <RCCEx_PLLSAI1_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	74bb      	strb	r3, [r7, #18]
 800373a:	e011      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003744:	d10c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3320      	adds	r3, #32
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f925 	bl	800399c <RCCEx_PLLSAI2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003756:	7cfb      	ldrb	r3, [r7, #19]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377a:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800379e:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c2:	4b75      	ldr	r3, [pc, #468]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ce:	4b72      	ldr	r3, [pc, #456]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
       ||
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e6:	4b6c      	ldr	r3, [pc, #432]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
       ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d047      	beq.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
 80037fe:	e044      	b.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d018      	beq.n	800383a <RCCEx_PLLSAI1_Config+0x86>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d825      	bhi.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d002      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x62>
 8003810:	2b02      	cmp	r3, #2
 8003812:	d009      	beq.n	8003828 <RCCEx_PLLSAI1_Config+0x74>
 8003814:	e020      	b.n	8003858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003816:	4b60      	ldr	r3, [pc, #384]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11d      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003826:	e01a      	b.n	800385e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003828:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e013      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383a:	4b57      	ldr	r3, [pc, #348]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003846:	4b54      	ldr	r3, [pc, #336]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003856:	e006      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
      break;
 800385c:	e004      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
    }

    if(status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386e:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	430b      	orrs	r3, r1
 8003884:	4944      	ldr	r1, [pc, #272]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d17d      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003890:	4b41      	ldr	r3, [pc, #260]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a40      	ldr	r2, [pc, #256]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800389a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fe fb42 	bl	8001f24 <HAL_GetTick>
 80038a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038a2:	e009      	b.n	80038b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a4:	f7fe fb3e 	bl	8001f24 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d902      	bls.n	80038b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	73fb      	strb	r3, [r7, #15]
        break;
 80038b6:	e005      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ef      	bne.n	80038a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d160      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d0:	4b31      	ldr	r3, [pc, #196]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	0912      	lsrs	r2, r2, #4
 80038e8:	0452      	lsls	r2, r2, #17
 80038ea:	430a      	orrs	r2, r1
 80038ec:	492a      	ldr	r1, [pc, #168]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	610b      	str	r3, [r1, #16]
 80038f2:	e027      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d112      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	0211      	lsls	r1, r2, #8
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6912      	ldr	r2, [r2, #16]
 8003910:	0852      	lsrs	r2, r2, #1
 8003912:	3a01      	subs	r2, #1
 8003914:	0552      	lsls	r2, r2, #21
 8003916:	430a      	orrs	r2, r1
 8003918:	491f      	ldr	r1, [pc, #124]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
 800391e:	e011      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6892      	ldr	r2, [r2, #8]
 8003930:	0211      	lsls	r1, r2, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6952      	ldr	r2, [r2, #20]
 8003936:	0852      	lsrs	r2, r2, #1
 8003938:	3a01      	subs	r2, #1
 800393a:	0652      	lsls	r2, r2, #25
 800393c:	430a      	orrs	r2, r1
 800393e:	4916      	ldr	r1, [pc, #88]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800394e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe fae8 	bl	8001f24 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003956:	e009      	b.n	800396c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003958:	f7fe fae4 	bl	8001f24 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d902      	bls.n	800396c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	73fb      	strb	r3, [r7, #15]
          break;
 800396a:	e005      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ef      	beq.n	8003958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	4904      	ldr	r1, [pc, #16]	; (8003998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039aa:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039b6:	4b67      	ldr	r3, [pc, #412]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0203 	and.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10d      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ce:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
       ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d047      	beq.n	8003a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e044      	b.n	8003a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d018      	beq.n	8003a22 <RCCEx_PLLSAI2_Config+0x86>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d825      	bhi.n	8003a40 <RCCEx_PLLSAI2_Config+0xa4>
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d002      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x62>
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d009      	beq.n	8003a10 <RCCEx_PLLSAI2_Config+0x74>
 80039fc:	e020      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fe:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0e:	e01a      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a10:	4b50      	ldr	r3, [pc, #320]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d116      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e013      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a22:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3e:	e006      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e004      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a56:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	4939      	ldr	r1, [pc, #228]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d167      	bne.n	8003b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a35      	ldr	r2, [pc, #212]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fe fa4e 	bl	8001f24 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a8a:	e009      	b.n	8003aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a8c:	f7fe fa4a 	bl	8001f24 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d902      	bls.n	8003aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9e:	e005      	b.n	8003aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ef      	bne.n	8003a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d14a      	bne.n	8003b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab8:	4b26      	ldr	r3, [pc, #152]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	0912      	lsrs	r2, r2, #4
 8003ad0:	0452      	lsls	r2, r2, #17
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	491f      	ldr	r1, [pc, #124]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	614b      	str	r3, [r1, #20]
 8003ada:	e011      	b.n	8003b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6912      	ldr	r2, [r2, #16]
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0652      	lsls	r2, r2, #25
 8003af8:	430a      	orrs	r2, r1
 8003afa:	4916      	ldr	r1, [pc, #88]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b00:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fa0a 	bl	8001f24 <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b12:	e009      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b14:	f7fe fa06 	bl	8001f24 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d902      	bls.n	8003b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	73fb      	strb	r3, [r7, #15]
          break;
 8003b26:	e005      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ef      	beq.n	8003b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4904      	ldr	r1, [pc, #16]	; (8003b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000

08003b58 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e049      	b.n	8003bfe <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	795b      	ldrb	r3, [r3, #5]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fd90 	bl	80016a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0204 	orr.w	r2, r2, #4
 8003b94:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d104      	bne.n	8003bae <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e027      	b.n	8003bfe <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003bae:	f7fe f9b9 	bl	8001f24 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003bb4:	e015      	b.n	8003be2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003bb6:	f7fe f9b5 	bl	8001f24 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d90e      	bls.n	8003be2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00d      	b.n	8003bfe <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d0e2      	beq.n	8003bb6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e049      	b.n	8003cac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fd fd7b 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f000 fb1d 	bl	8004284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e047      	b.n	8003d5c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_TIM_Base_Start+0xb4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d018      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_TIM_Base_Start+0xb8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <HAL_TIM_Base_Start+0xbc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_TIM_Base_Start+0xc0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <HAL_TIM_Base_Start+0xc4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_TIM_Base_Start+0x66>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a19      	ldr	r2, [pc, #100]	; (8003d7c <HAL_TIM_Base_Start+0xc8>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d115      	bne.n	8003d46 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <HAL_TIM_Base_Start+0xcc>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d015      	beq.n	8003d58 <HAL_TIM_Base_Start+0xa4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d011      	beq.n	8003d58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	e008      	b.n	8003d58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e000      	b.n	8003d5a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	00010007 	.word	0x00010007

08003d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e04f      	b.n	8003e3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d018      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	; (8003e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_TIM_Base_Start_IT+0x76>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d115      	bne.n	8003e26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d015      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0xb4>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d011      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	e008      	b.n	8003e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e000      	b.n	8003e3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40013400 	.word	0x40013400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	00010007 	.word	0x00010007

08003e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0202 	mvn.w	r2, #2
 8003e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9ce 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9c0 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f9d1 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0204 	mvn.w	r2, #4
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f9a4 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f996 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f9a7 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0208 	mvn.w	r2, #8
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f97a 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f96c 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f97d 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b10      	cmp	r3, #16
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0210 	mvn.w	r2, #16
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2208      	movs	r2, #8
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f950 	bl	8004248 <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f942 	bl	8004234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f953 	bl	800425c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0201 	mvn.w	r2, #1
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fd5c 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d10e      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b80      	cmp	r3, #128	; 0x80
 8004002:	d107      	bne.n	8004014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800400c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fafe 	bl	8004610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004022:	d10e      	bne.n	8004042 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d107      	bne.n	8004042 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800403a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 faf1 	bl	8004624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d10e      	bne.n	800406e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d107      	bne.n	800406e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f901 	bl	8004270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b20      	cmp	r3, #32
 800407a:	d10e      	bne.n	800409a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d107      	bne.n	800409a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f06f 0220 	mvn.w	r2, #32
 8004092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fab1 	bl	80045fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_TIM_ConfigClockSource+0x1c>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0b6      	b.n	800422c <HAL_TIM_ConfigClockSource+0x18a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040fa:	d03e      	beq.n	800417a <HAL_TIM_ConfigClockSource+0xd8>
 80040fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004100:	f200 8087 	bhi.w	8004212 <HAL_TIM_ConfigClockSource+0x170>
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	f000 8086 	beq.w	8004218 <HAL_TIM_ConfigClockSource+0x176>
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	d87f      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 8004112:	2b70      	cmp	r3, #112	; 0x70
 8004114:	d01a      	beq.n	800414c <HAL_TIM_ConfigClockSource+0xaa>
 8004116:	2b70      	cmp	r3, #112	; 0x70
 8004118:	d87b      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 800411a:	2b60      	cmp	r3, #96	; 0x60
 800411c:	d050      	beq.n	80041c0 <HAL_TIM_ConfigClockSource+0x11e>
 800411e:	2b60      	cmp	r3, #96	; 0x60
 8004120:	d877      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 8004122:	2b50      	cmp	r3, #80	; 0x50
 8004124:	d03c      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xfe>
 8004126:	2b50      	cmp	r3, #80	; 0x50
 8004128:	d873      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d058      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0x13e>
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d86f      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d064      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0x15e>
 8004136:	2b30      	cmp	r3, #48	; 0x30
 8004138:	d86b      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 800413a:	2b20      	cmp	r3, #32
 800413c:	d060      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0x15e>
 800413e:	2b20      	cmp	r3, #32
 8004140:	d867      	bhi.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d05c      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0x15e>
 8004146:	2b10      	cmp	r3, #16
 8004148:	d05a      	beq.n	8004200 <HAL_TIM_ConfigClockSource+0x15e>
 800414a:	e062      	b.n	8004212 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6899      	ldr	r1, [r3, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f000 f9a6 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800416e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
      break;
 8004178:	e04f      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6899      	ldr	r1, [r3, #8]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f000 f98f 	bl	80044ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e03c      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f000 f903 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2150      	movs	r1, #80	; 0x50
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f95c 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041be:	e02c      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f000 f922 	bl	8004416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2160      	movs	r1, #96	; 0x60
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f94c 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041de:	e01c      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f000 f8e3 	bl	80043b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f93c 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 80041fe:	e00c      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 f933 	bl	8004476 <TIM_ITRx_SetConfig>
      break;
 8004210:	e003      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      break;
 8004216:	e000      	b.n	800421a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004218:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a40      	ldr	r2, [pc, #256]	; (8004398 <TIM_Base_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d013      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d00f      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3d      	ldr	r2, [pc, #244]	; (800439c <TIM_Base_SetConfig+0x118>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <TIM_Base_SetConfig+0x11c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3b      	ldr	r2, [pc, #236]	; (80043a4 <TIM_Base_SetConfig+0x120>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3a      	ldr	r2, [pc, #232]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d108      	bne.n	80042d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2f      	ldr	r2, [pc, #188]	; (8004398 <TIM_Base_SetConfig+0x114>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01f      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e4:	d01b      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <TIM_Base_SetConfig+0x118>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d017      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <TIM_Base_SetConfig+0x11c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <TIM_Base_SetConfig+0x120>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00f      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a29      	ldr	r2, [pc, #164]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00b      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a28      	ldr	r2, [pc, #160]	; (80043ac <TIM_Base_SetConfig+0x128>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a27      	ldr	r2, [pc, #156]	; (80043b0 <TIM_Base_SetConfig+0x12c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_Base_SetConfig+0x9a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <TIM_Base_SetConfig+0x130>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d108      	bne.n	8004330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <TIM_Base_SetConfig+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0xf8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <TIM_Base_SetConfig+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0xf8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <TIM_Base_SetConfig+0x128>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0xf8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <TIM_Base_SetConfig+0x12c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0xf8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <TIM_Base_SetConfig+0x130>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d103      	bne.n	8004384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	f043 0307 	orr.w	r3, r3, #7
 8004498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e068      	b.n	80045d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2e      	ldr	r2, [pc, #184]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800453e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d018      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a18      	ldr	r2, [pc, #96]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d10c      	bne.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000

080045fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e040      	b.n	80046cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f882 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	; 0x24
 8004664:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f82c 	bl	80046d4 <UART_SetConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e022      	b.n	80046cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fad8 	bl	8004c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb5f 	bl	8004d88 <UART_CheckIdleState>
 80046ca:	4603      	mov	r3, r0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b08a      	sub	sp, #40	; 0x28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4ba4      	ldr	r3, [pc, #656]	; (8004994 <UART_SetConfig+0x2c0>)
 8004704:	4013      	ands	r3, r2
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800470c:	430b      	orrs	r3, r1
 800470e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a99      	ldr	r2, [pc, #612]	; (8004998 <UART_SetConfig+0x2c4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473c:	4313      	orrs	r3, r2
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a90      	ldr	r2, [pc, #576]	; (800499c <UART_SetConfig+0x2c8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d126      	bne.n	80047ac <UART_SetConfig+0xd8>
 800475e:	4b90      	ldr	r3, [pc, #576]	; (80049a0 <UART_SetConfig+0x2cc>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0xd0>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0xa0>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004785 	.word	0x08004785
 8004778:	08004795 	.word	0x08004795
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800479d 	.word	0x0800479d
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e116      	b.n	80049ba <UART_SetConfig+0x2e6>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e112      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e10e      	b.n	80049ba <UART_SetConfig+0x2e6>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e10a      	b.n	80049ba <UART_SetConfig+0x2e6>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047aa:	e106      	b.n	80049ba <UART_SetConfig+0x2e6>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <UART_SetConfig+0x2d0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d138      	bne.n	8004828 <UART_SetConfig+0x154>
 80047b6:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <UART_SetConfig+0x2cc>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d82d      	bhi.n	8004820 <UART_SetConfig+0x14c>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0xf8>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	08004801 	.word	0x08004801
 80047d0:	08004821 	.word	0x08004821
 80047d4:	08004821 	.word	0x08004821
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004811 	.word	0x08004811
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004821 	.word	0x08004821
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004809 	.word	0x08004809
 80047f0:	08004821 	.word	0x08004821
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004819 	.word	0x08004819
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e0d8      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004808:	2302      	movs	r3, #2
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e0d4      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e0d0      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800481e:	e0cc      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004826:	e0c8      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <UART_SetConfig+0x2d4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d125      	bne.n	800487e <UART_SetConfig+0x1aa>
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <UART_SetConfig+0x2cc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800483c:	2b30      	cmp	r3, #48	; 0x30
 800483e:	d016      	beq.n	800486e <UART_SetConfig+0x19a>
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	d818      	bhi.n	8004876 <UART_SetConfig+0x1a2>
 8004844:	2b20      	cmp	r3, #32
 8004846:	d00a      	beq.n	800485e <UART_SetConfig+0x18a>
 8004848:	2b20      	cmp	r3, #32
 800484a:	d814      	bhi.n	8004876 <UART_SetConfig+0x1a2>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <UART_SetConfig+0x182>
 8004850:	2b10      	cmp	r3, #16
 8004852:	d008      	beq.n	8004866 <UART_SetConfig+0x192>
 8004854:	e00f      	b.n	8004876 <UART_SetConfig+0x1a2>
 8004856:	2300      	movs	r3, #0
 8004858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485c:	e0ad      	b.n	80049ba <UART_SetConfig+0x2e6>
 800485e:	2302      	movs	r3, #2
 8004860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004864:	e0a9      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004866:	2304      	movs	r3, #4
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486c:	e0a5      	b.n	80049ba <UART_SetConfig+0x2e6>
 800486e:	2308      	movs	r3, #8
 8004870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004874:	e0a1      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004876:	2310      	movs	r3, #16
 8004878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487c:	e09d      	b.n	80049ba <UART_SetConfig+0x2e6>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <UART_SetConfig+0x2d8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d125      	bne.n	80048d4 <UART_SetConfig+0x200>
 8004888:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <UART_SetConfig+0x2cc>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004892:	2bc0      	cmp	r3, #192	; 0xc0
 8004894:	d016      	beq.n	80048c4 <UART_SetConfig+0x1f0>
 8004896:	2bc0      	cmp	r3, #192	; 0xc0
 8004898:	d818      	bhi.n	80048cc <UART_SetConfig+0x1f8>
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d00a      	beq.n	80048b4 <UART_SetConfig+0x1e0>
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d814      	bhi.n	80048cc <UART_SetConfig+0x1f8>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <UART_SetConfig+0x1d8>
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d008      	beq.n	80048bc <UART_SetConfig+0x1e8>
 80048aa:	e00f      	b.n	80048cc <UART_SetConfig+0x1f8>
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e082      	b.n	80049ba <UART_SetConfig+0x2e6>
 80048b4:	2302      	movs	r3, #2
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e07e      	b.n	80049ba <UART_SetConfig+0x2e6>
 80048bc:	2304      	movs	r3, #4
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e07a      	b.n	80049ba <UART_SetConfig+0x2e6>
 80048c4:	2308      	movs	r3, #8
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e076      	b.n	80049ba <UART_SetConfig+0x2e6>
 80048cc:	2310      	movs	r3, #16
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e072      	b.n	80049ba <UART_SetConfig+0x2e6>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a35      	ldr	r2, [pc, #212]	; (80049b0 <UART_SetConfig+0x2dc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12a      	bne.n	8004934 <UART_SetConfig+0x260>
 80048de:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <UART_SetConfig+0x2cc>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ec:	d01a      	beq.n	8004924 <UART_SetConfig+0x250>
 80048ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f2:	d81b      	bhi.n	800492c <UART_SetConfig+0x258>
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f8:	d00c      	beq.n	8004914 <UART_SetConfig+0x240>
 80048fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fe:	d815      	bhi.n	800492c <UART_SetConfig+0x258>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <UART_SetConfig+0x238>
 8004904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004908:	d008      	beq.n	800491c <UART_SetConfig+0x248>
 800490a:	e00f      	b.n	800492c <UART_SetConfig+0x258>
 800490c:	2300      	movs	r3, #0
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004912:	e052      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004914:	2302      	movs	r3, #2
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491a:	e04e      	b.n	80049ba <UART_SetConfig+0x2e6>
 800491c:	2304      	movs	r3, #4
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004922:	e04a      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004924:	2308      	movs	r3, #8
 8004926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492a:	e046      	b.n	80049ba <UART_SetConfig+0x2e6>
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004932:	e042      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <UART_SetConfig+0x2c4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d13a      	bne.n	80049b4 <UART_SetConfig+0x2e0>
 800493e:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <UART_SetConfig+0x2cc>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004948:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800494c:	d01a      	beq.n	8004984 <UART_SetConfig+0x2b0>
 800494e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004952:	d81b      	bhi.n	800498c <UART_SetConfig+0x2b8>
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004958:	d00c      	beq.n	8004974 <UART_SetConfig+0x2a0>
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495e:	d815      	bhi.n	800498c <UART_SetConfig+0x2b8>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <UART_SetConfig+0x298>
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d008      	beq.n	800497c <UART_SetConfig+0x2a8>
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x2b8>
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004972:	e022      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497a:	e01e      	b.n	80049ba <UART_SetConfig+0x2e6>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e01a      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e016      	b.n	80049ba <UART_SetConfig+0x2e6>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e012      	b.n	80049ba <UART_SetConfig+0x2e6>
 8004994:	efff69f3 	.word	0xefff69f3
 8004998:	40008000 	.word	0x40008000
 800499c:	40013800 	.word	0x40013800
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40004400 	.word	0x40004400
 80049a8:	40004800 	.word	0x40004800
 80049ac:	40004c00 	.word	0x40004c00
 80049b0:	40005000 	.word	0x40005000
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a9f      	ldr	r2, [pc, #636]	; (8004c3c <UART_SetConfig+0x568>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d17a      	bne.n	8004aba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d824      	bhi.n	8004a16 <UART_SetConfig+0x342>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x300>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a17 	.word	0x08004a17
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a17 	.word	0x08004a17
 80049e4:	08004a07 	.word	0x08004a07
 80049e8:	08004a17 	.word	0x08004a17
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a17 	.word	0x08004a17
 80049f4:	08004a0f 	.word	0x08004a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe fb34 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 80049fc:	61f8      	str	r0, [r7, #28]
        break;
 80049fe:	e010      	b.n	8004a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a00:	4b8f      	ldr	r3, [pc, #572]	; (8004c40 <UART_SetConfig+0x56c>)
 8004a02:	61fb      	str	r3, [r7, #28]
        break;
 8004a04:	e00d      	b.n	8004a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a06:	f7fe fa95 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8004a0a:	61f8      	str	r0, [r7, #28]
        break;
 8004a0c:	e009      	b.n	8004a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e005      	b.n	8004a22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80fb 	beq.w	8004c20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d305      	bcc.n	8004a46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d903      	bls.n	8004a4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a4c:	e0e8      	b.n	8004c20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2200      	movs	r2, #0
 8004a52:	461c      	mov	r4, r3
 8004a54:	4615      	mov	r5, r2
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	022b      	lsls	r3, r5, #8
 8004a60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a64:	0222      	lsls	r2, r4, #8
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6849      	ldr	r1, [r1, #4]
 8004a6a:	0849      	lsrs	r1, r1, #1
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	4688      	mov	r8, r1
 8004a70:	4681      	mov	r9, r0
 8004a72:	eb12 0a08 	adds.w	sl, r2, r8
 8004a76:	eb43 0b09 	adc.w	fp, r3, r9
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a88:	4650      	mov	r0, sl
 8004a8a:	4659      	mov	r1, fp
 8004a8c:	f7fb fbf0 	bl	8000270 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9e:	d308      	bcc.n	8004ab2 <UART_SetConfig+0x3de>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa6:	d204      	bcs.n	8004ab2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	60da      	str	r2, [r3, #12]
 8004ab0:	e0b6      	b.n	8004c20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ab8:	e0b2      	b.n	8004c20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac2:	d15e      	bne.n	8004b82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d828      	bhi.n	8004b1e <UART_SetConfig+0x44a>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x400>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fab4 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004afc:	61f8      	str	r0, [r7, #28]
        break;
 8004afe:	e014      	b.n	8004b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fac6 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004b04:	61f8      	str	r0, [r7, #28]
        break;
 8004b06:	e010      	b.n	8004b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b4d      	ldr	r3, [pc, #308]	; (8004c40 <UART_SetConfig+0x56c>)
 8004b0a:	61fb      	str	r3, [r7, #28]
        break;
 8004b0c:	e00d      	b.n	8004b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fa11 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8004b12:	61f8      	str	r0, [r7, #28]
        break;
 8004b14:	e009      	b.n	8004b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61fb      	str	r3, [r7, #28]
        break;
 8004b1c:	e005      	b.n	8004b2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d077      	beq.n	8004c20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005a      	lsls	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	441a      	add	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d916      	bls.n	8004b7a <UART_SetConfig+0x4a6>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b52:	d212      	bcs.n	8004b7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f023 030f 	bic.w	r3, r3, #15
 8004b5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	8afb      	ldrh	r3, [r7, #22]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	8afa      	ldrh	r2, [r7, #22]
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	e052      	b.n	8004c20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b80:	e04e      	b.n	8004c20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d827      	bhi.n	8004bda <UART_SetConfig+0x506>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x4bc>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe fa56 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61f8      	str	r0, [r7, #28]
        break;
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe fa68 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
        break;
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <UART_SetConfig+0x56c>)
 8004bc6:	61fb      	str	r3, [r7, #28]
        break;
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe f9b3 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8004bce:	61f8      	str	r0, [r7, #28]
        break;
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	61fb      	str	r3, [r7, #28]
        break;
 8004bd8:	e005      	b.n	8004be6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004be4:	bf00      	nop
    }

    if (pclk != 0U)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d019      	beq.n	8004c20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	085a      	lsrs	r2, r3, #1
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d909      	bls.n	8004c1a <UART_SetConfig+0x546>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d205      	bcs.n	8004c1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
 8004c18:	e002      	b.n	8004c20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3728      	adds	r7, #40	; 0x28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40008000 	.word	0x40008000
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d42:	d10a      	bne.n	8004d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d98:	f7fd f8c4 	bl	8001f24 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10e      	bne.n	8004dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f82d 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e023      	b.n	8004e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d10e      	bne.n	8004df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f817 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e00d      	b.n	8004e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b09c      	sub	sp, #112	; 0x70
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	e0a5      	b.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	f000 80a1 	beq.w	8004f78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fd f875 	bl	8001f24 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d13e      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e60:	667b      	str	r3, [r7, #100]	; 0x64
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	663b      	str	r3, [r7, #96]	; 0x60
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e067      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d04f      	beq.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee6:	d147      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
 8004f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	613b      	str	r3, [r7, #16]
   return(result);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f44:	623a      	str	r2, [r7, #32]
 8004f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	69f9      	ldr	r1, [r7, #28]
 8004f4a:	6a3a      	ldr	r2, [r7, #32]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e010      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	f43f af4a 	beq.w	8004e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3770      	adds	r7, #112	; 0x70
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <__NVIC_SetPriority>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	db0a      	blt.n	8004fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	490c      	ldr	r1, [pc, #48]	; (8004ff0 <__NVIC_SetPriority+0x4c>)
 8004fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc2:	0112      	lsls	r2, r2, #4
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fcc:	e00a      	b.n	8004fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4908      	ldr	r1, [pc, #32]	; (8004ff4 <__NVIC_SetPriority+0x50>)
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	3b04      	subs	r3, #4
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	761a      	strb	r2, [r3, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000e100 	.word	0xe000e100
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <SysTick_Handler+0x1c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005000:	f002 fb6a 	bl	80076d8 <xTaskGetSchedulerState>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800500a:	f003 fa4d 	bl	80084a8 <xPortSysTickHandler>
  }
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	e000e010 	.word	0xe000e010

08005018 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800501c:	2100      	movs	r1, #0
 800501e:	f06f 0004 	mvn.w	r0, #4
 8005022:	f7ff ffbf 	bl	8004fa4 <__NVIC_SetPriority>
#endif
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005032:	f3ef 8305 	mrs	r3, IPSR
 8005036:	603b      	str	r3, [r7, #0]
  return(result);
 8005038:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800503e:	f06f 0305 	mvn.w	r3, #5
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	e00c      	b.n	8005060 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005046:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <osKernelInitialize+0x44>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d105      	bne.n	800505a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800504e:	4b08      	ldr	r3, [pc, #32]	; (8005070 <osKernelInitialize+0x44>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005054:	2300      	movs	r3, #0
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	e002      	b.n	8005060 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
 800505e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005060:	687b      	ldr	r3, [r7, #4]
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200003c0 	.word	0x200003c0

08005074 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507a:	f3ef 8305 	mrs	r3, IPSR
 800507e:	603b      	str	r3, [r7, #0]
  return(result);
 8005080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005086:	f06f 0305 	mvn.w	r3, #5
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	e010      	b.n	80050b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <osKernelStart+0x48>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d109      	bne.n	80050aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005096:	f7ff ffbf 	bl	8005018 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <osKernelStart+0x48>)
 800509c:	2202      	movs	r2, #2
 800509e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050a0:	f001 febc 	bl	8006e1c <vTaskStartScheduler>
      stat = osOK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e002      	b.n	80050b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050b0:	687b      	ldr	r3, [r7, #4]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	200003c0 	.word	0x200003c0

080050c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af04      	add	r7, sp, #16
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d0:	f3ef 8305 	mrs	r3, IPSR
 80050d4:	617b      	str	r3, [r7, #20]
  return(result);
 80050d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d17e      	bne.n	80051da <osThreadNew+0x11a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d07b      	beq.n	80051da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050e6:	2318      	movs	r3, #24
 80050e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d045      	beq.n	8005186 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <osThreadNew+0x48>
        name = attr->name;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <osThreadNew+0x6e>
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b38      	cmp	r3, #56	; 0x38
 8005120:	d805      	bhi.n	800512e <osThreadNew+0x6e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <osThreadNew+0x72>
        return (NULL);
 800512e:	2300      	movs	r3, #0
 8005130:	e054      	b.n	80051dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	089b      	lsrs	r3, r3, #2
 8005140:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <osThreadNew+0xa8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2bbb      	cmp	r3, #187	; 0xbb
 8005150:	d90a      	bls.n	8005168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <osThreadNew+0xa8>
        mem = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	e010      	b.n	800518a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10c      	bne.n	800518a <osThreadNew+0xca>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <osThreadNew+0xca>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <osThreadNew+0xca>
          mem = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e001      	b.n	800518a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d110      	bne.n	80051b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005198:	9202      	str	r2, [sp, #8]
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6a3a      	ldr	r2, [r7, #32]
 80051a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f001 fbda 	bl	8006960 <xTaskCreateStatic>
 80051ac:	4603      	mov	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	e013      	b.n	80051da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d110      	bne.n	80051da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	f107 0310 	add.w	r3, r7, #16
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f001 fc25 	bl	8006a1a <xTaskCreate>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d001      	beq.n	80051da <osThreadNew+0x11a>
            hTask = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051da:	693b      	ldr	r3, [r7, #16]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3728      	adds	r7, #40	; 0x28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ec:	f3ef 8305 	mrs	r3, IPSR
 80051f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <osDelay+0x1c>
    stat = osErrorISR;
 80051f8:	f06f 0305 	mvn.w	r3, #5
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e007      	b.n	8005210 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osDelay+0x2c>
      vTaskDelay(ticks);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fdd2 	bl	8006db4 <vTaskDelay>
    }
  }

  return (stat);
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	; 0x28
 800521e:	af02      	add	r7, sp, #8
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522a:	f3ef 8305 	mrs	r3, IPSR
 800522e:	613b      	str	r3, [r7, #16]
  return(result);
 8005230:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005232:	2b00      	cmp	r3, #0
 8005234:	d175      	bne.n	8005322 <osSemaphoreNew+0x108>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d072      	beq.n	8005322 <osSemaphoreNew+0x108>
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	429a      	cmp	r2, r3
 8005242:	d86e      	bhi.n	8005322 <osSemaphoreNew+0x108>
    mem = -1;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <osSemaphoreNew+0x4c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b4f      	cmp	r3, #79	; 0x4f
 800525e:	d902      	bls.n	8005266 <osSemaphoreNew+0x4c>
        mem = 1;
 8005260:	2301      	movs	r3, #1
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e00c      	b.n	8005280 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d108      	bne.n	8005280 <osSemaphoreNew+0x66>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <osSemaphoreNew+0x66>
          mem = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	e001      	b.n	8005280 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d04c      	beq.n	8005322 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d128      	bne.n	80052e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10a      	bne.n	80052aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2203      	movs	r2, #3
 800529a:	9200      	str	r2, [sp, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	2100      	movs	r1, #0
 80052a0:	2001      	movs	r0, #1
 80052a2:	f000 fb7b 	bl	800599c <xQueueGenericCreateStatic>
 80052a6:	61f8      	str	r0, [r7, #28]
 80052a8:	e005      	b.n	80052b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80052aa:	2203      	movs	r2, #3
 80052ac:	2100      	movs	r1, #0
 80052ae:	2001      	movs	r0, #1
 80052b0:	f000 fbec 	bl	8005a8c <xQueueGenericCreate>
 80052b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d022      	beq.n	8005302 <osSemaphoreNew+0xe8>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01f      	beq.n	8005302 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80052c2:	2300      	movs	r3, #0
 80052c4:	2200      	movs	r2, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	69f8      	ldr	r0, [r7, #28]
 80052ca:	f000 fca7 	bl	8005c1c <xQueueGenericSend>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d016      	beq.n	8005302 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80052d4:	69f8      	ldr	r0, [r7, #28]
 80052d6:	f001 f96f 	bl	80065b8 <vQueueDelete>
            hSemaphore = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	e010      	b.n	8005302 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d108      	bne.n	80052f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	461a      	mov	r2, r3
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fc29 	bl	8005b46 <xQueueCreateCountingSemaphoreStatic>
 80052f4:	61f8      	str	r0, [r7, #28]
 80052f6:	e004      	b.n	8005302 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fc5a 	bl	8005bb4 <xQueueCreateCountingSemaphore>
 8005300:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <osSemaphoreNew+0xfc>
          name = attr->name;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e001      	b.n	800531a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	69f8      	ldr	r0, [r7, #28]
 800531e:	f001 fa97 	bl	8006850 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005322:	69fb      	ldr	r3, [r7, #28]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005344:	f06f 0303 	mvn.w	r3, #3
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e039      	b.n	80053c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800534c:	f3ef 8305 	mrs	r3, IPSR
 8005350:	60fb      	str	r3, [r7, #12]
  return(result);
 8005352:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800535e:	f06f 0303 	mvn.w	r3, #3
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e02c      	b.n	80053c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	461a      	mov	r2, r3
 8005370:	2100      	movs	r1, #0
 8005372:	6938      	ldr	r0, [r7, #16]
 8005374:	f001 f864 	bl	8006440 <xQueueReceiveFromISR>
 8005378:	4603      	mov	r3, r0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800537e:	f06f 0302 	mvn.w	r3, #2
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e01c      	b.n	80053c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d019      	beq.n	80053c0 <osSemaphoreAcquire+0x94>
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <osSemaphoreAcquire+0xa0>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	e010      	b.n	80053c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6938      	ldr	r0, [r7, #16]
 80053a2:	f000 ff41 	bl	8006228 <xQueueSemaphoreTake>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d009      	beq.n	80053c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80053b2:	f06f 0301 	mvn.w	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e002      	b.n	80053c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80053ba:	f06f 0302 	mvn.w	r3, #2
 80053be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80053c0:	697b      	ldr	r3, [r7, #20]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	e000ed04 	.word	0xe000ed04

080053d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80053e6:	f06f 0303 	mvn.w	r3, #3
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e02c      	b.n	8005448 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ee:	f3ef 8305 	mrs	r3, IPSR
 80053f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01a      	beq.n	8005430 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4619      	mov	r1, r3
 8005404:	6938      	ldr	r0, [r7, #16]
 8005406:	f000 fda2 	bl	8005f4e <xQueueGiveFromISR>
 800540a:	4603      	mov	r3, r0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d003      	beq.n	8005418 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005410:	f06f 0302 	mvn.w	r3, #2
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e017      	b.n	8005448 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <osSemaphoreRelease+0x78>
 800541e:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <osSemaphoreRelease+0x84>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	e00b      	b.n	8005448 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005430:	2300      	movs	r3, #0
 8005432:	2200      	movs	r2, #0
 8005434:	2100      	movs	r1, #0
 8005436:	6938      	ldr	r0, [r7, #16]
 8005438:	f000 fbf0 	bl	8005c1c <xQueueGenericSend>
 800543c:	4603      	mov	r3, r0
 800543e:	2b01      	cmp	r3, #1
 8005440:	d002      	beq.n	8005448 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005442:	f06f 0302 	mvn.w	r3, #2
 8005446:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005448:	697b      	ldr	r3, [r7, #20]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005468:	f3ef 8305 	mrs	r3, IPSR
 800546c:	613b      	str	r3, [r7, #16]
  return(result);
 800546e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005470:	2b00      	cmp	r3, #0
 8005472:	d15f      	bne.n	8005534 <osMessageQueueNew+0xdc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d05c      	beq.n	8005534 <osMessageQueueNew+0xdc>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d059      	beq.n	8005534 <osMessageQueueNew+0xdc>
    mem = -1;
 8005480:	f04f 33ff 	mov.w	r3, #4294967295
 8005484:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d029      	beq.n	80054e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <osMessageQueueNew+0x62>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b4f      	cmp	r3, #79	; 0x4f
 800549a:	d90e      	bls.n	80054ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d302      	bcc.n	80054ba <osMessageQueueNew+0x62>
        mem = 1;
 80054b4:	2301      	movs	r3, #1
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e014      	b.n	80054e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d110      	bne.n	80054e4 <osMessageQueueNew+0x8c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10c      	bne.n	80054e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	e001      	b.n	80054e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d10b      	bne.n	8005502 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2100      	movs	r1, #0
 80054f4:	9100      	str	r1, [sp, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fa4f 	bl	800599c <xQueueGenericCreateStatic>
 80054fe:	61f8      	str	r0, [r7, #28]
 8005500:	e008      	b.n	8005514 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005508:	2200      	movs	r2, #0
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fabd 	bl	8005a8c <xQueueGenericCreate>
 8005512:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00c      	beq.n	8005534 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e001      	b.n	800552c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800552c:	6979      	ldr	r1, [r7, #20]
 800552e:	69f8      	ldr	r0, [r7, #28]
 8005530:	f001 f98e 	bl	8006850 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005534:	69fb      	ldr	r3, [r7, #28]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005558:	f3ef 8305 	mrs	r3, IPSR
 800555c:	617b      	str	r3, [r7, #20]
  return(result);
 800555e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005560:	2b00      	cmp	r3, #0
 8005562:	d028      	beq.n	80055b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <osMessageQueuePut+0x36>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <osMessageQueuePut+0x36>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005576:	f06f 0303 	mvn.w	r3, #3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e038      	b.n	80055f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005582:	f107 0210 	add.w	r2, r7, #16
 8005586:	2300      	movs	r3, #0
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	69b8      	ldr	r0, [r7, #24]
 800558c:	f000 fc44 	bl	8005e18 <xQueueGenericSendFromISR>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d003      	beq.n	800559e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005596:	f06f 0302 	mvn.w	r3, #2
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e028      	b.n	80055f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d025      	beq.n	80055f0 <osMessageQueuePut+0xb0>
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <osMessageQueuePut+0xbc>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	e01c      	b.n	80055f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <osMessageQueuePut+0x82>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80055c2:	f06f 0303 	mvn.w	r3, #3
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e012      	b.n	80055f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055ca:	2300      	movs	r3, #0
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	69b8      	ldr	r0, [r7, #24]
 80055d2:	f000 fb23 	bl	8005c1c <xQueueGenericSend>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d009      	beq.n	80055f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80055e2:	f06f 0301 	mvn.w	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e002      	b.n	80055f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80055ea:	f06f 0302 	mvn.w	r3, #2
 80055ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055f0:	69fb      	ldr	r3, [r7, #28]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005616:	f3ef 8305 	mrs	r3, IPSR
 800561a:	617b      	str	r3, [r7, #20]
  return(result);
 800561c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800561e:	2b00      	cmp	r3, #0
 8005620:	d028      	beq.n	8005674 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <osMessageQueueGet+0x34>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <osMessageQueueGet+0x34>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005634:	f06f 0303 	mvn.w	r3, #3
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	e037      	b.n	80056ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	461a      	mov	r2, r3
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	69b8      	ldr	r0, [r7, #24]
 800564a:	f000 fef9 	bl	8006440 <xQueueReceiveFromISR>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d003      	beq.n	800565c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005654:	f06f 0302 	mvn.w	r3, #2
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e027      	b.n	80056ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d024      	beq.n	80056ac <osMessageQueueGet+0xac>
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <osMessageQueueGet+0xb8>)
 8005664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	e01b      	b.n	80056ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <osMessageQueueGet+0x80>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d103      	bne.n	8005688 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005680:	f06f 0303 	mvn.w	r3, #3
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	e011      	b.n	80056ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	69b8      	ldr	r0, [r7, #24]
 800568e:	f000 fceb 	bl	8006068 <xQueueReceive>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d009      	beq.n	80056ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800569e:	f06f 0301 	mvn.w	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e002      	b.n	80056ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80056a6:	f06f 0302 	mvn.w	r3, #2
 80056aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80056ac:	69fb      	ldr	r3, [r7, #28]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e00e      	b.n	80056f2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d4:	f3ef 8305 	mrs	r3, IPSR
 80056d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80056da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f000 ff4b 	bl	800657c <uxQueueMessagesWaitingFromISR>
 80056e6:	6178      	str	r0, [r7, #20]
 80056e8:	e003      	b.n	80056f2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80056ea:	6938      	ldr	r0, [r7, #16]
 80056ec:	f000 ff28 	bl	8006540 <uxQueueMessagesWaiting>
 80056f0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80056f2:	697b      	ldr	r3, [r7, #20]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <vApplicationGetIdleTaskMemory+0x2c>)
 800570c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a06      	ldr	r2, [pc, #24]	; (800572c <vApplicationGetIdleTaskMemory+0x30>)
 8005712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	200003c4 	.word	0x200003c4
 800572c:	20000480 	.word	0x20000480

08005730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a07      	ldr	r2, [pc, #28]	; (800575c <vApplicationGetTimerTaskMemory+0x2c>)
 8005740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a06      	ldr	r2, [pc, #24]	; (8005760 <vApplicationGetTimerTaskMemory+0x30>)
 8005746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800574e:	601a      	str	r2, [r3, #0]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000680 	.word	0x20000680
 8005760:	2000073c 	.word	0x2000073c

08005764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f103 0208 	add.w	r2, r3, #8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f04f 32ff 	mov.w	r2, #4294967295
 800577c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f103 0208 	add.w	r2, r3, #8
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f103 0208 	add.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581c:	d103      	bne.n	8005826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e00c      	b.n	8005840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3308      	adds	r3, #8
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e002      	b.n	8005834 <vListInsert+0x2e>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d2f6      	bcs.n	800582e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6892      	ldr	r2, [r2, #8]
 800588e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6852      	ldr	r2, [r2, #4]
 8005898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d103      	bne.n	80058ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1e5a      	subs	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058f6:	f002 fd45 	bl	8008384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005902:	68f9      	ldr	r1, [r7, #12]
 8005904:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	441a      	add	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	3b01      	subs	r3, #1
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22ff      	movs	r2, #255	; 0xff
 800593a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	22ff      	movs	r2, #255	; 0xff
 8005942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d114      	bne.n	8005976 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01a      	beq.n	800598a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3310      	adds	r3, #16
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fcf9 	bl	8007350 <xTaskRemoveFromEventList>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d012      	beq.n	800598a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <xQueueGenericReset+0xcc>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	e009      	b.n	800598a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3310      	adds	r3, #16
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fef2 	bl	8005764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3324      	adds	r3, #36	; 0x24
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff feed 	bl	8005764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800598a:	f002 fd2b 	bl	80083e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800598e:	2301      	movs	r3, #1
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08e      	sub	sp, #56	; 0x38
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <xQueueGenericCreateStatic+0x52>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <xQueueGenericCreateStatic+0x56>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueGenericCreateStatic+0x58>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	623b      	str	r3, [r7, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <xQueueGenericCreateStatic+0x7e>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <xQueueGenericCreateStatic+0x82>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueGenericCreateStatic+0x84>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a3a:	2350      	movs	r3, #80	; 0x50
 8005a3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b50      	cmp	r3, #80	; 0x50
 8005a42:	d00a      	beq.n	8005a5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	61bb      	str	r3, [r7, #24]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00d      	beq.n	8005a82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	4613      	mov	r3, r2
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f83f 	bl	8005b00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3730      	adds	r7, #48	; 0x30
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	613b      	str	r3, [r7, #16]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	3350      	adds	r3, #80	; 0x50
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f002 fd7f 	bl	80085c8 <pvPortMalloc>
 8005aca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d011      	beq.n	8005af6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	3350      	adds	r3, #80	; 0x50
 8005ada:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ae4:	79fa      	ldrb	r2, [r7, #7]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f805 	bl	8005b00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005af6:	69bb      	ldr	r3, [r7, #24]
	}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d103      	bne.n	8005b1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b2e:	2101      	movs	r1, #1
 8005b30:	69b8      	ldr	r0, [r7, #24]
 8005b32:	f7ff fecb 	bl	80058cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08a      	sub	sp, #40	; 0x28
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61bb      	str	r3, [r7, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90a      	bls.n	8005b8c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	617b      	str	r3, [r7, #20]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ff00 	bl	800599c <xQueueGenericCreateStatic>
 8005b9c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005baa:	69fb      	ldr	r3, [r7, #28]
	}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	613b      	str	r3, [r7, #16]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d90a      	bls.n	8005bf8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	60fb      	str	r3, [r7, #12]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff45 	bl	8005a8c <xQueueGenericCreate>
 8005c02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c10:	697b      	ldr	r3, [r7, #20]
	}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericSend+0x32>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <xQueueGenericSend+0x40>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <xQueueGenericSend+0x44>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <xQueueGenericSend+0x46>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xQueueGenericSend+0x60>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d103      	bne.n	8005c8a <xQueueGenericSend+0x6e>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericSend+0x72>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericSend+0x74>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xQueueGenericSend+0x8e>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005caa:	f001 fd15 	bl	80076d8 <xTaskGetSchedulerState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <xQueueGenericSend+0x9e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <xQueueGenericSend+0xa2>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueGenericSend+0xa4>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericSend+0xbe>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61fb      	str	r3, [r7, #28]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cda:	f002 fb53 	bl	8008384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <xQueueGenericSend+0xd4>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d129      	bne.n	8005d44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf6:	f000 fc9a 	bl	800662e <prvCopyDataToQueue>
 8005cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fb21 	bl	8007350 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d14:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	e00a      	b.n	8005d3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d3c:	f002 fb52 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e063      	b.n	8005e0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4a:	f002 fb4b 	bl	80083e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e05c      	b.n	8005e0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fb5b 	bl	8007418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d66:	f002 fb3d 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6a:	f001 f8c7 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d6e:	f002 fb09 	bl	8008384 <vPortEnterCritical>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d78:	b25b      	sxtb	r3, r3
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d103      	bne.n	8005d88 <xQueueGenericSend+0x16c>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x182>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9e:	f002 fb21 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da2:	1d3a      	adds	r2, r7, #4
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 fb4a 	bl	8007444 <xTaskCheckForTimeOut>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d124      	bne.n	8005e00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db8:	f000 fd31 	bl	800681e <prvIsQueueFull>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fa70 	bl	80072b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd2:	f000 fcbc 	bl	800674e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dd6:	f001 f89f 	bl	8006f18 <xTaskResumeAll>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af7c 	bne.w	8005cda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	e772      	b.n	8005cda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fcaa 	bl	800674e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f001 f88d 	bl	8006f18 <xTaskResumeAll>
 8005dfe:	e76c      	b.n	8005cda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e02:	f000 fca4 	bl	800674e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e06:	f001 f887 	bl	8006f18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3738      	adds	r7, #56	; 0x38
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b090      	sub	sp, #64	; 0x40
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <xQueueGenericSendFromISR+0x3c>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <xQueueGenericSendFromISR+0x40>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <xQueueGenericSendFromISR+0x42>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSendFromISR+0x6a>
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <xQueueGenericSendFromISR+0x6e>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueGenericSendFromISR+0x70>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	623b      	str	r3, [r7, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ea2:	f002 fb51 	bl	8008548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61fa      	str	r2, [r7, #28]
 8005ebc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <xQueueGenericSendFromISR+0xbc>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d12f      	bne.n	8005f34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eea:	f000 fba0 	bl	800662e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005eee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d112      	bne.n	8005f1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	3324      	adds	r3, #36	; 0x24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fa23 	bl	8007350 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e007      	b.n	8005f2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f22:	3301      	adds	r3, #1
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	b25a      	sxtb	r2, r3
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f32:	e001      	b.n	8005f38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3740      	adds	r7, #64	; 0x40
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b08e      	sub	sp, #56	; 0x38
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61fb      	str	r3, [r7, #28]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGiveFromISR+0x58>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <xQueueGiveFromISR+0x5c>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <xQueueGiveFromISR+0x5e>
 8005faa:	2300      	movs	r3, #0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	61bb      	str	r3, [r7, #24]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fc6:	f002 fabf 	bl	8008548 <vPortValidateInterruptPriority>
	__asm volatile
 8005fca:	f3ef 8211 	mrs	r2, BASEPRI
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	617a      	str	r2, [r7, #20]
 8005fe0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fe2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d22b      	bcs.n	800604e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d112      	bne.n	8006038 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	3324      	adds	r3, #36	; 0x24
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f996 	bl	8007350 <xTaskRemoveFromEventList>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00e      	beq.n	8006048 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e007      	b.n	8006048 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800603c:	3301      	adds	r3, #1
 800603e:	b2db      	uxtb	r3, r3
 8006040:	b25a      	sxtb	r2, r3
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006048:	2301      	movs	r3, #1
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
 800604c:	e001      	b.n	8006052 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800604e:	2300      	movs	r3, #0
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f383 8811 	msr	BASEPRI, r3
}
 800605c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006060:	4618      	mov	r0, r3
 8006062:	3738      	adds	r7, #56	; 0x38
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xQueueReceive+0x30>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	623b      	str	r3, [r7, #32]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueReceive+0x3e>
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueReceive+0x42>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueReceive+0x44>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueReceive+0x5e>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	61fb      	str	r3, [r7, #28]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c6:	f001 fb07 	bl	80076d8 <xTaskGetSchedulerState>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <xQueueReceive+0x6e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <xQueueReceive+0x72>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueReceive+0x74>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueReceive+0x8e>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060f6:	f002 f945 	bl	8008384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01f      	beq.n	8006146 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610a:	f000 fafa 	bl	8006702 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1e5a      	subs	r2, r3, #1
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00f      	beq.n	800613e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f001 f914 	bl	8007350 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800612e:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <xQueueReceive+0x1bc>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800613e:	f002 f951 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	e069      	b.n	800621a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d103      	bne.n	8006154 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800614c:	f002 f94a 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006150:	2300      	movs	r3, #0
 8006152:	e062      	b.n	800621a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800615a:	f107 0310 	add.w	r3, r7, #16
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f95a 	bl	8007418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006168:	f002 f93c 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800616c:	f000 fec6 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006170:	f002 f908 	bl	8008384 <vPortEnterCritical>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800617a:	b25b      	sxtb	r3, r3
 800617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006180:	d103      	bne.n	800618a <xQueueReceive+0x122>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006190:	b25b      	sxtb	r3, r3
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d103      	bne.n	80061a0 <xQueueReceive+0x138>
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a0:	f002 f920 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061a4:	1d3a      	adds	r2, r7, #4
 80061a6:	f107 0310 	add.w	r3, r7, #16
 80061aa:	4611      	mov	r1, r2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f949 	bl	8007444 <xTaskCheckForTimeOut>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d123      	bne.n	8006200 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ba:	f000 fb1a 	bl	80067f2 <prvIsQueueEmpty>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d017      	beq.n	80061f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 f86f 	bl	80072b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d4:	f000 fabb 	bl	800674e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061d8:	f000 fe9e 	bl	8006f18 <xTaskResumeAll>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d189      	bne.n	80060f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <xQueueReceive+0x1bc>)
 80061e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	e780      	b.n	80060f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f6:	f000 faaa 	bl	800674e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061fa:	f000 fe8d 	bl	8006f18 <xTaskResumeAll>
 80061fe:	e77a      	b.n	80060f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006202:	f000 faa4 	bl	800674e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006206:	f000 fe87 	bl	8006f18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800620a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620c:	f000 faf1 	bl	80067f2 <prvIsQueueEmpty>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	f43f af6f 	beq.w	80060f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800621a:	4618      	mov	r0, r3
 800621c:	3730      	adds	r7, #48	; 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08e      	sub	sp, #56	; 0x38
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61fb      	str	r3, [r7, #28]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006278:	f001 fa2e 	bl	80076d8 <xTaskGetSchedulerState>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <xQueueSemaphoreTake+0x60>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <xQueueSemaphoreTake+0x64>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <xQueueSemaphoreTake+0x66>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	61bb      	str	r3, [r7, #24]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062a8:	f002 f86c 	bl	8008384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d024      	beq.n	8006302 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	1e5a      	subs	r2, r3, #1
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062c8:	f001 fb7c 	bl	80079c4 <pvTaskIncrementMutexHeldCount>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	3310      	adds	r3, #16
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f836 	bl	8007350 <xTaskRemoveFromEventList>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062ea:	4b54      	ldr	r3, [pc, #336]	; (800643c <xQueueSemaphoreTake+0x214>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062fa:	f002 f873 	bl	80083e4 <vPortExitCritical>
				return pdPASS;
 80062fe:	2301      	movs	r3, #1
 8006300:	e097      	b.n	8006432 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006324:	f002 f85e 	bl	80083e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006328:	2300      	movs	r3, #0
 800632a:	e082      	b.n	8006432 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006332:	f107 030c 	add.w	r3, r7, #12
 8006336:	4618      	mov	r0, r3
 8006338:	f001 f86e 	bl	8007418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006340:	f002 f850 	bl	80083e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006344:	f000 fdda 	bl	8006efc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006348:	f002 f81c 	bl	8008384 <vPortEnterCritical>
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006352:	b25b      	sxtb	r3, r3
 8006354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006358:	d103      	bne.n	8006362 <xQueueSemaphoreTake+0x13a>
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006368:	b25b      	sxtb	r3, r3
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d103      	bne.n	8006378 <xQueueSemaphoreTake+0x150>
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006378:	f002 f834 	bl	80083e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800637c:	463a      	mov	r2, r7
 800637e:	f107 030c 	add.w	r3, r7, #12
 8006382:	4611      	mov	r1, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f001 f85d 	bl	8007444 <xTaskCheckForTimeOut>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d132      	bne.n	80063f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006392:	f000 fa2e 	bl	80067f2 <prvIsQueueEmpty>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d026      	beq.n	80063ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063a4:	f001 ffee 	bl	8008384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 f9b1 	bl	8007714 <xTaskPriorityInherit>
 80063b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063b4:	f002 f816 	bl	80083e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 ff75 	bl	80072b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063c8:	f000 f9c1 	bl	800674e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063cc:	f000 fda4 	bl	8006f18 <xTaskResumeAll>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f47f af68 	bne.w	80062a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <xQueueSemaphoreTake+0x214>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	e75e      	b.n	80062a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ec:	f000 f9af 	bl	800674e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063f0:	f000 fd92 	bl	8006f18 <xTaskResumeAll>
 80063f4:	e758      	b.n	80062a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f8:	f000 f9a9 	bl	800674e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063fc:	f000 fd8c 	bl	8006f18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006402:	f000 f9f6 	bl	80067f2 <prvIsQueueEmpty>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	f43f af4d 	beq.w	80062a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006414:	f001 ffb6 	bl	8008384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800641a:	f000 f8f0 	bl	80065fe <prvGetDisinheritPriorityAfterTimeout>
 800641e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fa4a 	bl	80078c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800642c:	f001 ffda 	bl	80083e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006432:	4618      	mov	r0, r3
 8006434:	3738      	adds	r7, #56	; 0x38
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	623b      	str	r3, [r7, #32]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <xQueueReceiveFromISR+0x3a>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <xQueueReceiveFromISR+0x3e>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <xQueueReceiveFromISR+0x40>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	61fb      	str	r3, [r7, #28]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800649a:	f002 f855 	bl	8008548 <vPortValidateInterruptPriority>
	__asm volatile
 800649e:	f3ef 8211 	mrs	r2, BASEPRI
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	61ba      	str	r2, [r7, #24]
 80064b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02f      	beq.n	8006526 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d4:	f000 f915 	bl	8006702 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	1e5a      	subs	r2, r3, #1
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d112      	bne.n	8006510 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d016      	beq.n	8006520 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	3310      	adds	r3, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ff2a 	bl	8007350 <xTaskRemoveFromEventList>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00e      	beq.n	8006520 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e007      	b.n	8006520 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006514:	3301      	adds	r3, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	b25a      	sxtb	r2, r3
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006520:	2301      	movs	r3, #1
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	e001      	b.n	800652a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006526:	2300      	movs	r3, #0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006538:	4618      	mov	r0, r3
 800653a:	3738      	adds	r7, #56	; 0x38
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60bb      	str	r3, [r7, #8]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006564:	f001 ff0e 	bl	8008384 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800656e:	f001 ff39 	bl	80083e4 <vPortExitCritical>

	return uxReturn;
 8006572:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60fb      	str	r3, [r7, #12]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80065aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <vQueueDelete+0x28>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f95f 	bl	80068a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f002 f8b5 	bl	8008760 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e001      	b.n	8006620 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006620:	68fb      	ldr	r3, [r7, #12]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10d      	bne.n	8006668 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d14d      	bne.n	80066f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f8c3 	bl	80077e4 <xTaskPriorityDisinherit>
 800665e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	609a      	str	r2, [r3, #8]
 8006666:	e043      	b.n	80066f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d119      	bne.n	80066a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6858      	ldr	r0, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	461a      	mov	r2, r3
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	f002 f9bb 	bl	80089f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	441a      	add	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d32b      	bcc.n	80066f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	e026      	b.n	80066f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68d8      	ldr	r0, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	461a      	mov	r2, r3
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	f002 f9a1 	bl	80089f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	425b      	negs	r3, r3
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d207      	bcs.n	80066de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	425b      	negs	r3, r3
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d105      	bne.n	80066f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d018      	beq.n	8006746 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	441a      	add	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d303      	bcc.n	8006736 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68d9      	ldr	r1, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	461a      	mov	r2, r3
 8006740:	6838      	ldr	r0, [r7, #0]
 8006742:	f002 f957 	bl	80089f4 <memcpy>
	}
}
 8006746:	bf00      	nop
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006756:	f001 fe15 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006760:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006762:	e011      	b.n	8006788 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d012      	beq.n	8006792 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fded 	bl	8007350 <xTaskRemoveFromEventList>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800677c:	f000 fec4 	bl	8007508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	3b01      	subs	r3, #1
 8006784:	b2db      	uxtb	r3, r3
 8006786:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dce9      	bgt.n	8006764 <prvUnlockQueue+0x16>
 8006790:	e000      	b.n	8006794 <prvUnlockQueue+0x46>
					break;
 8006792:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	22ff      	movs	r2, #255	; 0xff
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800679c:	f001 fe22 	bl	80083e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a0:	f001 fdf0 	bl	8008384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ac:	e011      	b.n	80067d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3310      	adds	r3, #16
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fdc8 	bl	8007350 <xTaskRemoveFromEventList>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067c6:	f000 fe9f 	bl	8007508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dce9      	bgt.n	80067ae <prvUnlockQueue+0x60>
 80067da:	e000      	b.n	80067de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 fdfd 	bl	80083e4 <vPortExitCritical>
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fa:	f001 fdc3 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	e001      	b.n	8006810 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006810:	f001 fde8 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8006814:	68fb      	ldr	r3, [r7, #12]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006826:	f001 fdad 	bl	8008384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	429a      	cmp	r2, r3
 8006834:	d102      	bne.n	800683c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e001      	b.n	8006840 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006840:	f001 fdd0 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 8006844:	68fb      	ldr	r3, [r7, #12]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685a:	2300      	movs	r3, #0
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e014      	b.n	800688a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <vQueueAddToRegistry+0x50>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800686c:	490c      	ldr	r1, [pc, #48]	; (80068a0 <vQueueAddToRegistry+0x50>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006876:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <vQueueAddToRegistry+0x50>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	4413      	add	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006882:	e006      	b.n	8006892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3301      	adds	r3, #1
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b07      	cmp	r3, #7
 800688e:	d9e7      	bls.n	8006860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000b3c 	.word	0x20000b3c

080068a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e016      	b.n	80068e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068b2:	4a10      	ldr	r2, [pc, #64]	; (80068f4 <vQueueUnregisterQueue+0x50>)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d10b      	bne.n	80068da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068c2:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <vQueueUnregisterQueue+0x50>)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2100      	movs	r1, #0
 80068c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <vQueueUnregisterQueue+0x50>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4413      	add	r3, r2
 80068d4:	2200      	movs	r2, #0
 80068d6:	605a      	str	r2, [r3, #4]
				break;
 80068d8:	e006      	b.n	80068e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3301      	adds	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b07      	cmp	r3, #7
 80068e4:	d9e5      	bls.n	80068b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000b3c 	.word	0x20000b3c

080068f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006908:	f001 fd3c 	bl	8008384 <vPortEnterCritical>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006912:	b25b      	sxtb	r3, r3
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d103      	bne.n	8006922 <vQueueWaitForMessageRestricted+0x2a>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006928:	b25b      	sxtb	r3, r3
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d103      	bne.n	8006938 <vQueueWaitForMessageRestricted+0x40>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006938:	f001 fd54 	bl	80083e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3324      	adds	r3, #36	; 0x24
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fcd3 	bl	80072f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f7ff fefb 	bl	800674e <prvUnlockQueue>
	}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	; 0x38
 8006964:	af04      	add	r7, sp, #16
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069a6:	23bc      	movs	r3, #188	; 0xbc
 80069a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2bbc      	cmp	r3, #188	; 0xbc
 80069ae:	d00a      	beq.n	80069c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61bb      	str	r3, [r7, #24]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01e      	beq.n	8006a0c <xTaskCreateStatic+0xac>
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069e6:	2300      	movs	r3, #0
 80069e8:	9303      	str	r3, [sp, #12]
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	f107 0314 	add.w	r3, r7, #20
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f850 	bl	8006aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a06:	f000 f8f3 	bl	8006bf0 <prvAddNewTaskToReadyList>
 8006a0a:	e001      	b.n	8006a10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a10:	697b      	ldr	r3, [r7, #20]
	}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b08c      	sub	sp, #48	; 0x30
 8006a1e:	af04      	add	r7, sp, #16
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	603b      	str	r3, [r7, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fdca 	bl	80085c8 <pvPortMalloc>
 8006a34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a3c:	20bc      	movs	r0, #188	; 0xbc
 8006a3e:	f001 fdc3 	bl	80085c8 <pvPortMalloc>
 8006a42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a50:	e005      	b.n	8006a5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f001 fe84 	bl	8008760 <vPortFree>
 8006a58:	e001      	b.n	8006a5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d017      	beq.n	8006a94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a6c:	88fa      	ldrh	r2, [r7, #6]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	9302      	str	r3, [sp, #8]
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f80e 	bl	8006aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a88:	69f8      	ldr	r0, [r7, #28]
 8006a8a:	f000 f8b1 	bl	8006bf0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e002      	b.n	8006a9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295
 8006a98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	461a      	mov	r2, r3
 8006abc:	21a5      	movs	r1, #165	; 0xa5
 8006abe:	f001 ffa7 	bl	8008a10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	3b01      	subs	r3, #1
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	617b      	str	r3, [r7, #20]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01f      	beq.n	8006b42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
 8006b06:	e012      	b.n	8006b2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	7819      	ldrb	r1, [r3, #0]
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	3334      	adds	r3, #52	; 0x34
 8006b18:	460a      	mov	r2, r1
 8006b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b0f      	cmp	r3, #15
 8006b32:	d9e9      	bls.n	8006b08 <prvInitialiseNewTask+0x64>
 8006b34:	e000      	b.n	8006b38 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b40:	e003      	b.n	8006b4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	2b37      	cmp	r3, #55	; 0x37
 8006b4e:	d901      	bls.n	8006b54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b50:	2337      	movs	r3, #55	; 0x37
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fe1a 	bl	80057a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	3318      	adds	r3, #24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fe15 	bl	80057a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	3354      	adds	r3, #84	; 0x54
 8006ba4:	2260      	movs	r2, #96	; 0x60
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 ff31 	bl	8008a10 <memset>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	4a0c      	ldr	r2, [pc, #48]	; (8006be4 <prvInitialiseNewTask+0x140>)
 8006bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <prvInitialiseNewTask+0x144>)
 8006bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <prvInitialiseNewTask+0x148>)
 8006bbe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	69b8      	ldr	r0, [r7, #24]
 8006bc6:	f001 fab3 	bl	8008130 <pxPortInitialiseStack>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bdc:	bf00      	nop
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08009800 	.word	0x08009800
 8006be8:	08009820 	.word	0x08009820
 8006bec:	080097e0 	.word	0x080097e0

08006bf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf8:	f001 fbc4 	bl	8008384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bfc:	4b2d      	ldr	r3, [pc, #180]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	4a2c      	ldr	r2, [pc, #176]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006c04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c06:	4b2c      	ldr	r3, [pc, #176]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c14:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <prvAddNewTaskToReadyList+0xc4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d110      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c1c:	f000 fc9a 	bl	8007554 <prvInitialiseTaskLists>
 8006c20:	e00d      	b.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c22:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <prvAddNewTaskToReadyList+0xcc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c2a:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d802      	bhi.n	8006c3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c38:	4a1f      	ldr	r2, [pc, #124]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <prvAddNewTaskToReadyList+0xd0>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <prvAddNewTaskToReadyList+0xd4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d903      	bls.n	8006c64 <prvAddNewTaskToReadyList+0x74>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <prvAddNewTaskToReadyList+0xd4>)
 8006c62:	6013      	str	r3, [r2, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <prvAddNewTaskToReadyList+0xd8>)
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f7fe fd9f 	bl	80057be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c80:	f001 fbb0 	bl	80083e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <prvAddNewTaskToReadyList+0xcc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <prvAddNewTaskToReadyList+0xc8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d207      	bcs.n	8006caa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <prvAddNewTaskToReadyList+0xdc>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20001050 	.word	0x20001050
 8006cb8:	20000b7c 	.word	0x20000b7c
 8006cbc:	2000105c 	.word	0x2000105c
 8006cc0:	2000106c 	.word	0x2000106c
 8006cc4:	20001058 	.word	0x20001058
 8006cc8:	20000b80 	.word	0x20000b80
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006cd8:	f001 fb54 	bl	8008384 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <vTaskDelete+0x18>
 8006ce2:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <vTaskDelete+0xc4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	e000      	b.n	8006cea <vTaskDelete+0x1a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fdc1 	bl	8005878 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3318      	adds	r3, #24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fdb8 	bl	8005878 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006d08:	4b23      	ldr	r3, [pc, #140]	; (8006d98 <vTaskDelete+0xc8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <vTaskDelete+0xc8>)
 8006d10:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006d12:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <vTaskDelete+0xc4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d10b      	bne.n	8006d34 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	481e      	ldr	r0, [pc, #120]	; (8006d9c <vTaskDelete+0xcc>)
 8006d24:	f7fe fd4b 	bl	80057be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <vTaskDelete+0xd0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <vTaskDelete+0xd0>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e009      	b.n	8006d48 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <vTaskDelete+0xd4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <vTaskDelete+0xd4>)
 8006d3c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fc76 	bl	8007630 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006d44:	f000 fca8 	bl	8007698 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006d48:	f001 fb4c 	bl	80083e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006d4c:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <vTaskDelete+0xd8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01b      	beq.n	8006d8c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <vTaskDelete+0xc4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d116      	bne.n	8006d8c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <vTaskDelete+0xdc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <vTaskDelete+0xac>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <vTaskDelete+0xe0>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000b7c 	.word	0x20000b7c
 8006d98:	2000106c 	.word	0x2000106c
 8006d9c:	20001024 	.word	0x20001024
 8006da0:	20001038 	.word	0x20001038
 8006da4:	20001050 	.word	0x20001050
 8006da8:	2000105c 	.word	0x2000105c
 8006dac:	20001078 	.word	0x20001078
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d017      	beq.n	8006df6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <vTaskDelay+0x60>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <vTaskDelay+0x30>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	60bb      	str	r3, [r7, #8]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006de4:	f000 f88a 	bl	8006efc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006de8:	2100      	movs	r1, #0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fdfe 	bl	80079ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006df0:	f000 f892 	bl	8006f18 <xTaskResumeAll>
 8006df4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <vTaskDelay+0x64>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20001078 	.word	0x20001078
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	1d39      	adds	r1, r7, #4
 8006e2e:	f107 0308 	add.w	r3, r7, #8
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fc62 	bl	80056fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	9202      	str	r2, [sp, #8]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	2300      	movs	r3, #0
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	2300      	movs	r3, #0
 8006e48:	460a      	mov	r2, r1
 8006e4a:	4924      	ldr	r1, [pc, #144]	; (8006edc <vTaskStartScheduler+0xc0>)
 8006e4c:	4824      	ldr	r0, [pc, #144]	; (8006ee0 <vTaskStartScheduler+0xc4>)
 8006e4e:	f7ff fd87 	bl	8006960 <xTaskCreateStatic>
 8006e52:	4603      	mov	r3, r0
 8006e54:	4a23      	ldr	r2, [pc, #140]	; (8006ee4 <vTaskStartScheduler+0xc8>)
 8006e56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e58:	4b22      	ldr	r3, [pc, #136]	; (8006ee4 <vTaskStartScheduler+0xc8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e001      	b.n	8006e6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d102      	bne.n	8006e76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e70:	f000 fe10 	bl	8007a94 <xTimerCreateTimerTask>
 8006e74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11b      	bne.n	8006eb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	613b      	str	r3, [r7, #16]
}
 8006e8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <vTaskStartScheduler+0xcc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3354      	adds	r3, #84	; 0x54
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <vTaskStartScheduler+0xd0>)
 8006e98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <vTaskStartScheduler+0xd4>)
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea2:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <vTaskStartScheduler+0xd8>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ea8:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <vTaskStartScheduler+0xdc>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eae:	f001 f9c7 	bl	8008240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb2:	e00e      	b.n	8006ed2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d10a      	bne.n	8006ed2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	e7fe      	b.n	8006ed0 <vTaskStartScheduler+0xb4>
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	08009684 	.word	0x08009684
 8006ee0:	08007521 	.word	0x08007521
 8006ee4:	20001074 	.word	0x20001074
 8006ee8:	20000b7c 	.word	0x20000b7c
 8006eec:	20000010 	.word	0x20000010
 8006ef0:	20001070 	.word	0x20001070
 8006ef4:	2000105c 	.word	0x2000105c
 8006ef8:	20001054 	.word	0x20001054

08006efc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <vTaskSuspendAll+0x18>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3301      	adds	r3, #1
 8006f06:	4a03      	ldr	r2, [pc, #12]	; (8006f14 <vTaskSuspendAll+0x18>)
 8006f08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f0a:	bf00      	nop
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20001078 	.word	0x20001078

08006f18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f26:	4b42      	ldr	r3, [pc, #264]	; (8007030 <xTaskResumeAll+0x118>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	603b      	str	r3, [r7, #0]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f44:	f001 fa1e 	bl	8008384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f48:	4b39      	ldr	r3, [pc, #228]	; (8007030 <xTaskResumeAll+0x118>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a38      	ldr	r2, [pc, #224]	; (8007030 <xTaskResumeAll+0x118>)
 8006f50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f52:	4b37      	ldr	r3, [pc, #220]	; (8007030 <xTaskResumeAll+0x118>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d162      	bne.n	8007020 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f5a:	4b36      	ldr	r3, [pc, #216]	; (8007034 <xTaskResumeAll+0x11c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d05e      	beq.n	8007020 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f62:	e02f      	b.n	8006fc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	4b34      	ldr	r3, [pc, #208]	; (8007038 <xTaskResumeAll+0x120>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3318      	adds	r3, #24
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fc81 	bl	8005878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fc7c 	bl	8005878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4b2d      	ldr	r3, [pc, #180]	; (800703c <xTaskResumeAll+0x124>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d903      	bls.n	8006f94 <xTaskResumeAll+0x7c>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	4a2a      	ldr	r2, [pc, #168]	; (800703c <xTaskResumeAll+0x124>)
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4a27      	ldr	r2, [pc, #156]	; (8007040 <xTaskResumeAll+0x128>)
 8006fa2:	441a      	add	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fe fc07 	bl	80057be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4b23      	ldr	r3, [pc, #140]	; (8007044 <xTaskResumeAll+0x12c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d302      	bcc.n	8006fc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <xTaskResumeAll+0x130>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fc4:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <xTaskResumeAll+0x120>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1cb      	bne.n	8006f64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fd2:	f000 fb61 	bl	8007698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	; (800704c <xTaskResumeAll+0x134>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d010      	beq.n	8007004 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fe2:	f000 f847 	bl	8007074 <xTaskIncrementTick>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fec:	4b16      	ldr	r3, [pc, #88]	; (8007048 <xTaskResumeAll+0x130>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1f1      	bne.n	8006fe2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <xTaskResumeAll+0x134>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <xTaskResumeAll+0x130>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d009      	beq.n	8007020 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <xTaskResumeAll+0x138>)
 8007012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007020:	f001 f9e0 	bl	80083e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007024:	68bb      	ldr	r3, [r7, #8]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20001078 	.word	0x20001078
 8007034:	20001050 	.word	0x20001050
 8007038:	20001010 	.word	0x20001010
 800703c:	20001058 	.word	0x20001058
 8007040:	20000b80 	.word	0x20000b80
 8007044:	20000b7c 	.word	0x20000b7c
 8007048:	20001064 	.word	0x20001064
 800704c:	20001060 	.word	0x20001060
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800705a:	4b05      	ldr	r3, [pc, #20]	; (8007070 <xTaskGetTickCount+0x1c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007060:	687b      	ldr	r3, [r7, #4]
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20001054 	.word	0x20001054

08007074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707e:	4b4f      	ldr	r3, [pc, #316]	; (80071bc <xTaskIncrementTick+0x148>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f040 808f 	bne.w	80071a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007088:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <xTaskIncrementTick+0x14c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3301      	adds	r3, #1
 800708e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007090:	4a4b      	ldr	r2, [pc, #300]	; (80071c0 <xTaskIncrementTick+0x14c>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d120      	bne.n	80070de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800709c:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <xTaskIncrementTick+0x150>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <xTaskIncrementTick+0x48>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	603b      	str	r3, [r7, #0]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <xTaskIncrementTick+0x46>
 80070bc:	4b41      	ldr	r3, [pc, #260]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <xTaskIncrementTick+0x154>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a3f      	ldr	r2, [pc, #252]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4a3f      	ldr	r2, [pc, #252]	; (80071c8 <xTaskIncrementTick+0x154>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	4b3e      	ldr	r3, [pc, #248]	; (80071cc <xTaskIncrementTick+0x158>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a3d      	ldr	r2, [pc, #244]	; (80071cc <xTaskIncrementTick+0x158>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	f000 fadd 	bl	8007698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070de:	4b3c      	ldr	r3, [pc, #240]	; (80071d0 <xTaskIncrementTick+0x15c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d349      	bcc.n	800717c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e8:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <xTaskIncrementTick+0x15c>)
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295
 80070f8:	601a      	str	r2, [r3, #0]
					break;
 80070fa:	e03f      	b.n	800717c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070fc:	4b31      	ldr	r3, [pc, #196]	; (80071c4 <xTaskIncrementTick+0x150>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d203      	bcs.n	800711c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007114:	4a2e      	ldr	r2, [pc, #184]	; (80071d0 <xTaskIncrementTick+0x15c>)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800711a:	e02f      	b.n	800717c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	3304      	adds	r3, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fba9 	bl	8005878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	3318      	adds	r3, #24
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fba0 	bl	8005878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <xTaskIncrementTick+0x160>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <xTaskIncrementTick+0xd8>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <xTaskIncrementTick+0x160>)
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4a1f      	ldr	r2, [pc, #124]	; (80071d8 <xTaskIncrementTick+0x164>)
 800715a:	441a      	add	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7fe fb2b 	bl	80057be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <xTaskIncrementTick+0x168>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d3b8      	bcc.n	80070e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007176:	2301      	movs	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717a:	e7b5      	b.n	80070e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800717c:	4b17      	ldr	r3, [pc, #92]	; (80071dc <xTaskIncrementTick+0x168>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4915      	ldr	r1, [pc, #84]	; (80071d8 <xTaskIncrementTick+0x164>)
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d901      	bls.n	8007198 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <xTaskIncrementTick+0x16c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e004      	b.n	80071b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071a6:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <xTaskIncrementTick+0x170>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3301      	adds	r3, #1
 80071ac:	4a0d      	ldr	r2, [pc, #52]	; (80071e4 <xTaskIncrementTick+0x170>)
 80071ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071b0:	697b      	ldr	r3, [r7, #20]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20001078 	.word	0x20001078
 80071c0:	20001054 	.word	0x20001054
 80071c4:	20001008 	.word	0x20001008
 80071c8:	2000100c 	.word	0x2000100c
 80071cc:	20001068 	.word	0x20001068
 80071d0:	20001070 	.word	0x20001070
 80071d4:	20001058 	.word	0x20001058
 80071d8:	20000b80 	.word	0x20000b80
 80071dc:	20000b7c 	.word	0x20000b7c
 80071e0:	20001064 	.word	0x20001064
 80071e4:	20001060 	.word	0x20001060

080071e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <vTaskSwitchContext+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <vTaskSwitchContext+0xb4>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071fc:	e046      	b.n	800728c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071fe:	4b27      	ldr	r3, [pc, #156]	; (800729c <vTaskSwitchContext+0xb4>)
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007204:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <vTaskSwitchContext+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e010      	b.n	800722e <vTaskSwitchContext+0x46>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <vTaskSwitchContext+0x40>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
 8007226:	e7fe      	b.n	8007226 <vTaskSwitchContext+0x3e>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3b01      	subs	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	491d      	ldr	r1, [pc, #116]	; (80072a4 <vTaskSwitchContext+0xbc>)
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0e4      	beq.n	800720c <vTaskSwitchContext+0x24>
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a15      	ldr	r2, [pc, #84]	; (80072a4 <vTaskSwitchContext+0xbc>)
 800724e:	4413      	add	r3, r2
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	605a      	str	r2, [r3, #4]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	3308      	adds	r3, #8
 8007264:	429a      	cmp	r2, r3
 8007266:	d104      	bne.n	8007272 <vTaskSwitchContext+0x8a>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <vTaskSwitchContext+0xc0>)
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <vTaskSwitchContext+0xb8>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <vTaskSwitchContext+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3354      	adds	r3, #84	; 0x54
 8007288:	4a08      	ldr	r2, [pc, #32]	; (80072ac <vTaskSwitchContext+0xc4>)
 800728a:	6013      	str	r3, [r2, #0]
}
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20001078 	.word	0x20001078
 800729c:	20001064 	.word	0x20001064
 80072a0:	20001058 	.word	0x20001058
 80072a4:	20000b80 	.word	0x20000b80
 80072a8:	20000b7c 	.word	0x20000b7c
 80072ac:	20000010 	.word	0x20000010

080072b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	60fb      	str	r3, [r7, #12]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <vTaskPlaceOnEventList+0x44>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3318      	adds	r3, #24
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe fa91 	bl	8005806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072e4:	2101      	movs	r1, #1
 80072e6:	6838      	ldr	r0, [r7, #0]
 80072e8:	f000 fb80 	bl	80079ec <prvAddCurrentTaskToDelayedList>
}
 80072ec:	bf00      	nop
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000b7c 	.word	0x20000b7c

080072f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	617b      	str	r3, [r7, #20]
}
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <vTaskPlaceOnEventListRestricted+0x54>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3318      	adds	r3, #24
 8007326:	4619      	mov	r1, r3
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7fe fa48 	bl	80057be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	68b8      	ldr	r0, [r7, #8]
 800733e:	f000 fb55 	bl	80079ec <prvAddCurrentTaskToDelayedList>
	}
 8007342:	bf00      	nop
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000b7c 	.word	0x20000b7c

08007350 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	60fb      	str	r3, [r7, #12]
}
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3318      	adds	r3, #24
 8007380:	4618      	mov	r0, r3
 8007382:	f7fe fa79 	bl	8005878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007386:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <xTaskRemoveFromEventList+0xb0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d11d      	bne.n	80073ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fa70 	bl	8005878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	4b19      	ldr	r3, [pc, #100]	; (8007404 <xTaskRemoveFromEventList+0xb4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d903      	bls.n	80073ac <xTaskRemoveFromEventList+0x5c>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4a16      	ldr	r2, [pc, #88]	; (8007404 <xTaskRemoveFromEventList+0xb4>)
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4a13      	ldr	r2, [pc, #76]	; (8007408 <xTaskRemoveFromEventList+0xb8>)
 80073ba:	441a      	add	r2, r3
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f7fe f9fb 	bl	80057be <vListInsertEnd>
 80073c8:	e005      	b.n	80073d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3318      	adds	r3, #24
 80073ce:	4619      	mov	r1, r3
 80073d0:	480e      	ldr	r0, [pc, #56]	; (800740c <xTaskRemoveFromEventList+0xbc>)
 80073d2:	f7fe f9f4 	bl	80057be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <xTaskRemoveFromEventList+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d905      	bls.n	80073f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <xTaskRemoveFromEventList+0xc4>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e001      	b.n	80073f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073f4:	697b      	ldr	r3, [r7, #20]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20001078 	.word	0x20001078
 8007404:	20001058 	.word	0x20001058
 8007408:	20000b80 	.word	0x20000b80
 800740c:	20001010 	.word	0x20001010
 8007410:	20000b7c 	.word	0x20000b7c
 8007414:	20001064 	.word	0x20001064

08007418 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <vTaskInternalSetTimeOutState+0x24>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <vTaskInternalSetTimeOutState+0x28>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	605a      	str	r2, [r3, #4]
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20001068 	.word	0x20001068
 8007440:	20001054 	.word	0x20001054

08007444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007486:	f000 ff7d 	bl	8008384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800748a:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <xTaskCheckForTimeOut+0xbc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d102      	bne.n	80074aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e023      	b.n	80074f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b15      	ldr	r3, [pc, #84]	; (8007504 <xTaskCheckForTimeOut+0xc0>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d007      	beq.n	80074c6 <xTaskCheckForTimeOut+0x82>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e015      	b.n	80074f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d20b      	bcs.n	80074e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ff9b 	bl	8007418 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e004      	b.n	80074f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f000 ff77 	bl	80083e4 <vPortExitCritical>

	return xReturn;
 80074f6:	69fb      	ldr	r3, [r7, #28]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3720      	adds	r7, #32
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20001054 	.word	0x20001054
 8007504:	20001068 	.word	0x20001068

08007508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <vTaskMissedYield+0x14>)
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	20001064 	.word	0x20001064

08007520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007528:	f000 f854 	bl	80075d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <prvIdleTask+0x2c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d907      	bls.n	8007544 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <prvIdleTask+0x30>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007544:	f7f9 fa96 	bl	8000a74 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007548:	e7ee      	b.n	8007528 <prvIdleTask+0x8>
 800754a:	bf00      	nop
 800754c:	20000b80 	.word	0x20000b80
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800755a:	2300      	movs	r3, #0
 800755c:	607b      	str	r3, [r7, #4]
 800755e:	e00c      	b.n	800757a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <prvInitialiseTaskLists+0x60>)
 800756c:	4413      	add	r3, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f7fe f8f8 	bl	8005764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3301      	adds	r3, #1
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b37      	cmp	r3, #55	; 0x37
 800757e:	d9ef      	bls.n	8007560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007580:	480d      	ldr	r0, [pc, #52]	; (80075b8 <prvInitialiseTaskLists+0x64>)
 8007582:	f7fe f8ef 	bl	8005764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007586:	480d      	ldr	r0, [pc, #52]	; (80075bc <prvInitialiseTaskLists+0x68>)
 8007588:	f7fe f8ec 	bl	8005764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800758c:	480c      	ldr	r0, [pc, #48]	; (80075c0 <prvInitialiseTaskLists+0x6c>)
 800758e:	f7fe f8e9 	bl	8005764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007592:	480c      	ldr	r0, [pc, #48]	; (80075c4 <prvInitialiseTaskLists+0x70>)
 8007594:	f7fe f8e6 	bl	8005764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007598:	480b      	ldr	r0, [pc, #44]	; (80075c8 <prvInitialiseTaskLists+0x74>)
 800759a:	f7fe f8e3 	bl	8005764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800759e:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <prvInitialiseTaskLists+0x78>)
 80075a0:	4a05      	ldr	r2, [pc, #20]	; (80075b8 <prvInitialiseTaskLists+0x64>)
 80075a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075a4:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <prvInitialiseTaskLists+0x7c>)
 80075a6:	4a05      	ldr	r2, [pc, #20]	; (80075bc <prvInitialiseTaskLists+0x68>)
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000b80 	.word	0x20000b80
 80075b8:	20000fe0 	.word	0x20000fe0
 80075bc:	20000ff4 	.word	0x20000ff4
 80075c0:	20001010 	.word	0x20001010
 80075c4:	20001024 	.word	0x20001024
 80075c8:	2000103c 	.word	0x2000103c
 80075cc:	20001008 	.word	0x20001008
 80075d0:	2000100c 	.word	0x2000100c

080075d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075da:	e019      	b.n	8007610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075dc:	f000 fed2 	bl	8008384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <prvCheckTasksWaitingTermination+0x50>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe f943 	bl	8005878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <prvCheckTasksWaitingTermination+0x54>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <prvCheckTasksWaitingTermination+0x54>)
 80075fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075fc:	4b0b      	ldr	r3, [pc, #44]	; (800762c <prvCheckTasksWaitingTermination+0x58>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3b01      	subs	r3, #1
 8007602:	4a0a      	ldr	r2, [pc, #40]	; (800762c <prvCheckTasksWaitingTermination+0x58>)
 8007604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007606:	f000 feed 	bl	80083e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f810 	bl	8007630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <prvCheckTasksWaitingTermination+0x58>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e1      	bne.n	80075dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20001024 	.word	0x20001024
 8007628:	20001050 	.word	0x20001050
 800762c:	20001038 	.word	0x20001038

08007630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3354      	adds	r3, #84	; 0x54
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fa91 	bl	8008b64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	4618      	mov	r0, r3
 8007652:	f001 f885 	bl	8008760 <vPortFree>
				vPortFree( pxTCB );
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f882 	bl	8008760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800765c:	e018      	b.n	8007690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007664:	2b01      	cmp	r3, #1
 8007666:	d103      	bne.n	8007670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 f879 	bl	8008760 <vPortFree>
	}
 800766e:	e00f      	b.n	8007690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007676:	2b02      	cmp	r3, #2
 8007678:	d00a      	beq.n	8007690 <prvDeleteTCB+0x60>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	60fb      	str	r3, [r7, #12]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <prvDeleteTCB+0x5e>
	}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <prvResetNextTaskUnblockTime+0x38>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <prvResetNextTaskUnblockTime+0x3c>)
 80076aa:	f04f 32ff 	mov.w	r2, #4294967295
 80076ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076b0:	e008      	b.n	80076c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b2:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <prvResetNextTaskUnblockTime+0x38>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <prvResetNextTaskUnblockTime+0x3c>)
 80076c2:	6013      	str	r3, [r2, #0]
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20001008 	.word	0x20001008
 80076d4:	20001070 	.word	0x20001070

080076d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076de:	4b0b      	ldr	r3, [pc, #44]	; (800770c <xTaskGetSchedulerState+0x34>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076e6:	2301      	movs	r3, #1
 80076e8:	607b      	str	r3, [r7, #4]
 80076ea:	e008      	b.n	80076fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <xTaskGetSchedulerState+0x38>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076f4:	2302      	movs	r3, #2
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	e001      	b.n	80076fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076fe:	687b      	ldr	r3, [r7, #4]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	2000105c 	.word	0x2000105c
 8007710:	20001078 	.word	0x20001078

08007714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d051      	beq.n	80077ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	4b2a      	ldr	r3, [pc, #168]	; (80077d8 <xTaskPriorityInherit+0xc4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	429a      	cmp	r2, r3
 8007736:	d241      	bcs.n	80077bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	db06      	blt.n	800774e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007740:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <xTaskPriorityInherit+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	6959      	ldr	r1, [r3, #20]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4a1f      	ldr	r2, [pc, #124]	; (80077dc <xTaskPriorityInherit+0xc8>)
 8007760:	4413      	add	r3, r2
 8007762:	4299      	cmp	r1, r3
 8007764:	d122      	bne.n	80077ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3304      	adds	r3, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe f884 	bl	8005878 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007770:	4b19      	ldr	r3, [pc, #100]	; (80077d8 <xTaskPriorityInherit+0xc4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777e:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <xTaskPriorityInherit+0xcc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d903      	bls.n	800778e <xTaskPriorityInherit+0x7a>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <xTaskPriorityInherit+0xcc>)
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a10      	ldr	r2, [pc, #64]	; (80077dc <xTaskPriorityInherit+0xc8>)
 800779c:	441a      	add	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7fe f80a 	bl	80057be <vListInsertEnd>
 80077aa:	e004      	b.n	80077b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <xTaskPriorityInherit+0xc4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077b6:	2301      	movs	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e008      	b.n	80077ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <xTaskPriorityInherit+0xc4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d201      	bcs.n	80077ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80077ca:	2301      	movs	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077ce:	68fb      	ldr	r3, [r7, #12]
	}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000b7c 	.word	0x20000b7c
 80077dc:	20000b80 	.word	0x20000b80
 80077e0:	20001058 	.word	0x20001058

080077e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d056      	beq.n	80078a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077fa:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <xTaskPriorityDisinherit+0xd0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	429a      	cmp	r2, r3
 8007802:	d00a      	beq.n	800781a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	60fb      	str	r3, [r7, #12]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	60bb      	str	r3, [r7, #8]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783c:	1e5a      	subs	r2, r3, #1
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	429a      	cmp	r2, r3
 800784c:	d02c      	beq.n	80078a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d128      	bne.n	80078a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	3304      	adds	r3, #4
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe f80c 	bl	8005878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <xTaskPriorityDisinherit+0xd4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d903      	bls.n	8007888 <xTaskPriorityDisinherit+0xa4>
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <xTaskPriorityDisinherit+0xd4>)
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4a09      	ldr	r2, [pc, #36]	; (80078bc <xTaskPriorityDisinherit+0xd8>)
 8007896:	441a      	add	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	3304      	adds	r3, #4
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f7fd ff8d 	bl	80057be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078a8:	697b      	ldr	r3, [r7, #20]
	}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000b7c 	.word	0x20000b7c
 80078b8:	20001058 	.word	0x20001058
 80078bc:	20000b80 	.word	0x20000b80

080078c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d06a      	beq.n	80079ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d902      	bls.n	8007906 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	e002      	b.n	800790c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	429a      	cmp	r2, r3
 8007914:	d04b      	beq.n	80079ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	d146      	bne.n	80079ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007920:	4b25      	ldr	r3, [pc, #148]	; (80079b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	429a      	cmp	r2, r3
 8007928:	d10a      	bne.n	8007940 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60bb      	str	r3, [r7, #8]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	db04      	blt.n	800795e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	6959      	ldr	r1, [r3, #20]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4a13      	ldr	r2, [pc, #76]	; (80079bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800796e:	4413      	add	r3, r2
 8007970:	4299      	cmp	r1, r3
 8007972:	d11c      	bne.n	80079ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	3304      	adds	r3, #4
 8007978:	4618      	mov	r0, r3
 800797a:	f7fd ff7d 	bl	8005878 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d903      	bls.n	8007992 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4a0c      	ldr	r2, [pc, #48]	; (80079c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4a07      	ldr	r2, [pc, #28]	; (80079bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079a0:	441a      	add	r2, r3
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f7fd ff08 	bl	80057be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079ae:	bf00      	nop
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000b7c 	.word	0x20000b7c
 80079bc:	20000b80 	.word	0x20000b80
 80079c0:	20001058 	.word	0x20001058

080079c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079d6:	3201      	adds	r2, #1
 80079d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80079dc:	681b      	ldr	r3, [r3, #0]
	}
 80079de:	4618      	mov	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20000b7c 	.word	0x20000b7c

080079ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079f6:	4b21      	ldr	r3, [pc, #132]	; (8007a7c <prvAddCurrentTaskToDelayedList+0x90>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079fc:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x94>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fd ff38 	bl	8005878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d10a      	bne.n	8007a26 <prvAddCurrentTaskToDelayedList+0x3a>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a16:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4819      	ldr	r0, [pc, #100]	; (8007a84 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a20:	f7fd fecd 	bl	80057be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a24:	e026      	b.n	8007a74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a2e:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d209      	bcs.n	8007a52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3e:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f7fd fedb 	bl	8005806 <vListInsert>
}
 8007a50:	e010      	b.n	8007a74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7fd fed1 	bl	8005806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a64:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d202      	bcs.n	8007a74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a6e:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6013      	str	r3, [r2, #0]
}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20001054 	.word	0x20001054
 8007a80:	20000b7c 	.word	0x20000b7c
 8007a84:	2000103c 	.word	0x2000103c
 8007a88:	2000100c 	.word	0x2000100c
 8007a8c:	20001008 	.word	0x20001008
 8007a90:	20001070 	.word	0x20001070

08007a94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a9e:	f000 fb07 	bl	80080b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <xTimerCreateTimerTask+0x80>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d021      	beq.n	8007aee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ab2:	1d3a      	adds	r2, r7, #4
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd fe37 	bl	8005730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	9202      	str	r2, [sp, #8]
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	2302      	movs	r3, #2
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	460a      	mov	r2, r1
 8007ad4:	4910      	ldr	r1, [pc, #64]	; (8007b18 <xTimerCreateTimerTask+0x84>)
 8007ad6:	4811      	ldr	r0, [pc, #68]	; (8007b1c <xTimerCreateTimerTask+0x88>)
 8007ad8:	f7fe ff42 	bl	8006960 <xTaskCreateStatic>
 8007adc:	4603      	mov	r3, r0
 8007ade:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <xTimerCreateTimerTask+0x8c>)
 8007ae0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <xTimerCreateTimerTask+0x8c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007aea:	2301      	movs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b0a:	697b      	ldr	r3, [r7, #20]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	200010ac 	.word	0x200010ac
 8007b18:	0800968c 	.word	0x0800968c
 8007b1c:	08007c59 	.word	0x08007c59
 8007b20:	200010b0 	.word	0x200010b0

08007b24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	; 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10a      	bne.n	8007b52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	623b      	str	r3, [r7, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b52:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <xTimerGenericCommand+0x98>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d02a      	beq.n	8007bb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b05      	cmp	r3, #5
 8007b6a:	dc18      	bgt.n	8007b9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b6c:	f7ff fdb4 	bl	80076d8 <xTaskGetSchedulerState>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d109      	bne.n	8007b8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b76:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <xTimerGenericCommand+0x98>)
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	f107 0110 	add.w	r1, r7, #16
 8007b7e:	2300      	movs	r3, #0
 8007b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b82:	f7fe f84b 	bl	8005c1c <xQueueGenericSend>
 8007b86:	6278      	str	r0, [r7, #36]	; 0x24
 8007b88:	e012      	b.n	8007bb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b8a:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <xTimerGenericCommand+0x98>)
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f107 0110 	add.w	r1, r7, #16
 8007b92:	2300      	movs	r3, #0
 8007b94:	2200      	movs	r2, #0
 8007b96:	f7fe f841 	bl	8005c1c <xQueueGenericSend>
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b9c:	e008      	b.n	8007bb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <xTimerGenericCommand+0x98>)
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f107 0110 	add.w	r1, r7, #16
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	f7fe f935 	bl	8005e18 <xQueueGenericSendFromISR>
 8007bae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3728      	adds	r7, #40	; 0x28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	200010ac 	.word	0x200010ac

08007bc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bca:	4b22      	ldr	r3, [pc, #136]	; (8007c54 <prvProcessExpiredTimer+0x94>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fd fe4d 	bl	8005878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d022      	beq.n	8007c32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	18d1      	adds	r1, r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	6978      	ldr	r0, [r7, #20]
 8007bfa:	f000 f8d1 	bl	8007da0 <prvInsertTimerInActiveList>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01f      	beq.n	8007c44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6978      	ldr	r0, [r7, #20]
 8007c10:	f7ff ff88 	bl	8007b24 <xTimerGenericCommand>
 8007c14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d113      	bne.n	8007c44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60fb      	str	r3, [r7, #12]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	6978      	ldr	r0, [r7, #20]
 8007c4a:	4798      	blx	r3
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200010a4 	.word	0x200010a4

08007c58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c60:	f107 0308 	add.w	r3, r7, #8
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f857 	bl	8007d18 <prvGetNextExpireTime>
 8007c6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f803 	bl	8007c7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c76:	f000 f8d5 	bl	8007e24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c7a:	e7f1      	b.n	8007c60 <prvTimerTask+0x8>

08007c7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c86:	f7ff f939 	bl	8006efc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c8a:	f107 0308 	add.w	r3, r7, #8
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f866 	bl	8007d60 <prvSampleTimeNow>
 8007c94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d130      	bne.n	8007cfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <prvProcessTimerOrBlockTask+0x3c>
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d806      	bhi.n	8007cb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007caa:	f7ff f935 	bl	8006f18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ff85 	bl	8007bc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007cb6:	e024      	b.n	8007d02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007cbe:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <prvProcessTimerOrBlockTask+0x90>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <prvProcessTimerOrBlockTask+0x50>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e000      	b.n	8007cce <prvProcessTimerOrBlockTask+0x52>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cd0:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <prvProcessTimerOrBlockTask+0x94>)
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f7fe fe0b 	bl	80068f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ce2:	f7ff f919 	bl	8006f18 <xTaskResumeAll>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007cec:	4b09      	ldr	r3, [pc, #36]	; (8007d14 <prvProcessTimerOrBlockTask+0x98>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
}
 8007cfc:	e001      	b.n	8007d02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cfe:	f7ff f90b 	bl	8006f18 <xTaskResumeAll>
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200010a8 	.word	0x200010a8
 8007d10:	200010ac 	.word	0x200010ac
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d20:	4b0e      	ldr	r3, [pc, #56]	; (8007d5c <prvGetNextExpireTime+0x44>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <prvGetNextExpireTime+0x16>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	e000      	b.n	8007d30 <prvGetNextExpireTime+0x18>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <prvGetNextExpireTime+0x44>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	e001      	b.n	8007d4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	200010a4 	.word	0x200010a4

08007d60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d68:	f7ff f974 	bl	8007054 <xTaskGetTickCount>
 8007d6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <prvSampleTimeNow+0x3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d205      	bcs.n	8007d84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d78:	f000 f936 	bl	8007fe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e002      	b.n	8007d8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d8a:	4a04      	ldr	r2, [pc, #16]	; (8007d9c <prvSampleTimeNow+0x3c>)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d90:	68fb      	ldr	r3, [r7, #12]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200010b4 	.word	0x200010b4

08007da0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d812      	bhi.n	8007dec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d302      	bcc.n	8007dda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e01b      	b.n	8007e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dda:	4b10      	ldr	r3, [pc, #64]	; (8007e1c <prvInsertTimerInActiveList+0x7c>)
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f7fd fd0e 	bl	8005806 <vListInsert>
 8007dea:	e012      	b.n	8007e12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d206      	bcs.n	8007e02 <prvInsertTimerInActiveList+0x62>
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d302      	bcc.n	8007e02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e007      	b.n	8007e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <prvInsertTimerInActiveList+0x80>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fd fcfa 	bl	8005806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e12:	697b      	ldr	r3, [r7, #20]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	200010a8 	.word	0x200010a8
 8007e20:	200010a4 	.word	0x200010a4

08007e24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e2a:	e0ca      	b.n	8007fc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da18      	bge.n	8007e64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	3304      	adds	r3, #4
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	61fb      	str	r3, [r7, #28]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e5a:	6850      	ldr	r0, [r2, #4]
 8007e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e5e:	6892      	ldr	r2, [r2, #8]
 8007e60:	4611      	mov	r1, r2
 8007e62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f2c0 80aa 	blt.w	8007fc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd fcfb 	bl	8005878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e82:	463b      	mov	r3, r7
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff ff6b 	bl	8007d60 <prvSampleTimeNow>
 8007e8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b09      	cmp	r3, #9
 8007e90:	f200 8097 	bhi.w	8007fc2 <prvProcessReceivedCommands+0x19e>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <prvProcessReceivedCommands+0x78>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ec5 	.word	0x08007ec5
 8007ea8:	08007f39 	.word	0x08007f39
 8007eac:	08007f4d 	.word	0x08007f4d
 8007eb0:	08007f97 	.word	0x08007f97
 8007eb4:	08007ec5 	.word	0x08007ec5
 8007eb8:	08007ec5 	.word	0x08007ec5
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f4d 	.word	0x08007f4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	18d1      	adds	r1, r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee4:	f7ff ff5c 	bl	8007da0 <prvInsertTimerInActiveList>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d069      	beq.n	8007fc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ef4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d05e      	beq.n	8007fc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	441a      	add	r2, r3
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	2300      	movs	r3, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f16:	f7ff fe05 	bl	8007b24 <xTimerGenericCommand>
 8007f1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d14f      	bne.n	8007fc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	61bb      	str	r3, [r7, #24]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f4a:	e03a      	b.n	8007fc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	617b      	str	r3, [r7, #20]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	18d1      	adds	r1, r2, r3
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f7ff ff06 	bl	8007da0 <prvInsertTimerInActiveList>
					break;
 8007f94:	e015      	b.n	8007fc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa6:	f000 fbdb 	bl	8008760 <vPortFree>
 8007faa:	e00a      	b.n	8007fc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fbe:	e000      	b.n	8007fc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007fc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <prvProcessReceivedCommands+0x1c0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	1d39      	adds	r1, r7, #4
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe f84c 	bl	8006068 <xQueueReceive>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f47f af2a 	bne.w	8007e2c <prvProcessReceivedCommands+0x8>
	}
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	3730      	adds	r7, #48	; 0x30
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200010ac 	.word	0x200010ac

08007fe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fee:	e048      	b.n	8008082 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffa:	4b2b      	ldr	r3, [pc, #172]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3304      	adds	r3, #4
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fc35 	bl	8005878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d02e      	beq.n	8008082 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	429a      	cmp	r2, r3
 8008034:	d90e      	bls.n	8008054 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008042:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fd fbda 	bl	8005806 <vListInsert>
 8008052:	e016      	b.n	8008082 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008054:	2300      	movs	r3, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2300      	movs	r3, #0
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	2100      	movs	r1, #0
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff fd60 	bl	8007b24 <xTimerGenericCommand>
 8008064:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	603b      	str	r3, [r7, #0]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1b1      	bne.n	8007ff0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <prvSwitchTimerLists+0xc4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a04      	ldr	r2, [pc, #16]	; (80080a8 <prvSwitchTimerLists+0xc0>)
 8008098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800809a:	4a04      	ldr	r2, [pc, #16]	; (80080ac <prvSwitchTimerLists+0xc4>)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6013      	str	r3, [r2, #0]
}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	200010a4 	.word	0x200010a4
 80080ac:	200010a8 	.word	0x200010a8

080080b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080b6:	f000 f965 	bl	8008384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <prvCheckForValidListAndQueue+0x60>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d120      	bne.n	8008104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080c2:	4814      	ldr	r0, [pc, #80]	; (8008114 <prvCheckForValidListAndQueue+0x64>)
 80080c4:	f7fd fb4e 	bl	8005764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080c8:	4813      	ldr	r0, [pc, #76]	; (8008118 <prvCheckForValidListAndQueue+0x68>)
 80080ca:	f7fd fb4b 	bl	8005764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <prvCheckForValidListAndQueue+0x6c>)
 80080d0:	4a10      	ldr	r2, [pc, #64]	; (8008114 <prvCheckForValidListAndQueue+0x64>)
 80080d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080d4:	4b12      	ldr	r3, [pc, #72]	; (8008120 <prvCheckForValidListAndQueue+0x70>)
 80080d6:	4a10      	ldr	r2, [pc, #64]	; (8008118 <prvCheckForValidListAndQueue+0x68>)
 80080d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080da:	2300      	movs	r3, #0
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	4b11      	ldr	r3, [pc, #68]	; (8008124 <prvCheckForValidListAndQueue+0x74>)
 80080e0:	4a11      	ldr	r2, [pc, #68]	; (8008128 <prvCheckForValidListAndQueue+0x78>)
 80080e2:	2110      	movs	r1, #16
 80080e4:	200a      	movs	r0, #10
 80080e6:	f7fd fc59 	bl	800599c <xQueueGenericCreateStatic>
 80080ea:	4603      	mov	r3, r0
 80080ec:	4a08      	ldr	r2, [pc, #32]	; (8008110 <prvCheckForValidListAndQueue+0x60>)
 80080ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <prvCheckForValidListAndQueue+0x60>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <prvCheckForValidListAndQueue+0x60>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	490b      	ldr	r1, [pc, #44]	; (800812c <prvCheckForValidListAndQueue+0x7c>)
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fba6 	bl	8006850 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008104:	f000 f96e 	bl	80083e4 <vPortExitCritical>
}
 8008108:	bf00      	nop
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200010ac 	.word	0x200010ac
 8008114:	2000107c 	.word	0x2000107c
 8008118:	20001090 	.word	0x20001090
 800811c:	200010a4 	.word	0x200010a4
 8008120:	200010a8 	.word	0x200010a8
 8008124:	20001158 	.word	0x20001158
 8008128:	200010b8 	.word	0x200010b8
 800812c:	08009694 	.word	0x08009694

08008130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3b04      	subs	r3, #4
 8008140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3b04      	subs	r3, #4
 800814e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f023 0201 	bic.w	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3b04      	subs	r3, #4
 800815e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008160:	4a0c      	ldr	r2, [pc, #48]	; (8008194 <pxPortInitialiseStack+0x64>)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b14      	subs	r3, #20
 800816a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3b04      	subs	r3, #4
 8008176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f06f 0202 	mvn.w	r2, #2
 800817e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	3b20      	subs	r3, #32
 8008184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008186:	68fb      	ldr	r3, [r7, #12]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	08008199 	.word	0x08008199

08008198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <prvTaskExitError+0x54>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d00a      	beq.n	80081c2 <prvTaskExitError+0x2a>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60fb      	str	r3, [r7, #12]
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <prvTaskExitError+0x28>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60bb      	str	r3, [r7, #8]
}
 80081d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081d6:	bf00      	nop
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0fc      	beq.n	80081d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	2000000c 	.word	0x2000000c

080081f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <pxCurrentTCBConst2>)
 80081f2:	6819      	ldr	r1, [r3, #0]
 80081f4:	6808      	ldr	r0, [r1, #0]
 80081f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	f380 8809 	msr	PSP, r0
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8811 	msr	BASEPRI, r0
 800820a:	4770      	bx	lr
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst2>:
 8008210:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008218:	4808      	ldr	r0, [pc, #32]	; (800823c <prvPortStartFirstTask+0x24>)
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	6800      	ldr	r0, [r0, #0]
 800821e:	f380 8808 	msr	MSP, r0
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8814 	msr	CONTROL, r0
 800822a:	b662      	cpsie	i
 800822c:	b661      	cpsie	f
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	df00      	svc	0
 8008238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800823a:	bf00      	nop
 800823c:	e000ed08 	.word	0xe000ed08

08008240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008246:	4b46      	ldr	r3, [pc, #280]	; (8008360 <xPortStartScheduler+0x120>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a46      	ldr	r2, [pc, #280]	; (8008364 <xPortStartScheduler+0x124>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d10a      	bne.n	8008266 <xPortStartScheduler+0x26>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008266:	4b3e      	ldr	r3, [pc, #248]	; (8008360 <xPortStartScheduler+0x120>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a3f      	ldr	r2, [pc, #252]	; (8008368 <xPortStartScheduler+0x128>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10a      	bne.n	8008286 <xPortStartScheduler+0x46>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60fb      	str	r3, [r7, #12]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008286:	4b39      	ldr	r3, [pc, #228]	; (800836c <xPortStartScheduler+0x12c>)
 8008288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b2db      	uxtb	r3, r3
 8008290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	4b31      	ldr	r3, [pc, #196]	; (8008370 <xPortStartScheduler+0x130>)
 80082ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ae:	4b31      	ldr	r3, [pc, #196]	; (8008374 <xPortStartScheduler+0x134>)
 80082b0:	2207      	movs	r2, #7
 80082b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082b4:	e009      	b.n	80082ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80082b6:	4b2f      	ldr	r3, [pc, #188]	; (8008374 <xPortStartScheduler+0x134>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	4a2d      	ldr	r2, [pc, #180]	; (8008374 <xPortStartScheduler+0x134>)
 80082be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d0ef      	beq.n	80082b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082d6:	4b27      	ldr	r3, [pc, #156]	; (8008374 <xPortStartScheduler+0x134>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1c3 0307 	rsb	r3, r3, #7
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d00a      	beq.n	80082f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60bb      	str	r3, [r7, #8]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <xPortStartScheduler+0x134>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <xPortStartScheduler+0x134>)
 8008300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <xPortStartScheduler+0x134>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800830a:	4a1a      	ldr	r2, [pc, #104]	; (8008374 <xPortStartScheduler+0x134>)
 800830c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008316:	4b18      	ldr	r3, [pc, #96]	; (8008378 <xPortStartScheduler+0x138>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <xPortStartScheduler+0x138>)
 800831c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <xPortStartScheduler+0x138>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a14      	ldr	r2, [pc, #80]	; (8008378 <xPortStartScheduler+0x138>)
 8008328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800832c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800832e:	f000 f8dd 	bl	80084ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <xPortStartScheduler+0x13c>)
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008338:	f000 f8fc 	bl	8008534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xPortStartScheduler+0x140>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0f      	ldr	r2, [pc, #60]	; (8008380 <xPortStartScheduler+0x140>)
 8008342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008348:	f7ff ff66 	bl	8008218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800834c:	f7fe ff4c 	bl	80071e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008350:	f7ff ff22 	bl	8008198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	e000ed00 	.word	0xe000ed00
 8008364:	410fc271 	.word	0x410fc271
 8008368:	410fc270 	.word	0x410fc270
 800836c:	e000e400 	.word	0xe000e400
 8008370:	200011a8 	.word	0x200011a8
 8008374:	200011ac 	.word	0x200011ac
 8008378:	e000ed20 	.word	0xe000ed20
 800837c:	2000000c 	.word	0x2000000c
 8008380:	e000ef34 	.word	0xe000ef34

08008384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	607b      	str	r3, [r7, #4]
}
 800839c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <vPortEnterCritical+0x58>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a0d      	ldr	r2, [pc, #52]	; (80083dc <vPortEnterCritical+0x58>)
 80083a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <vPortEnterCritical+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d10f      	bne.n	80083d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <vPortEnterCritical+0x5c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	603b      	str	r3, [r7, #0]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <vPortEnterCritical+0x4a>
	}
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	2000000c 	.word	0x2000000c
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <vPortExitCritical+0x50>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <vPortExitCritical+0x24>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	607b      	str	r3, [r7, #4]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <vPortExitCritical+0x50>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3b01      	subs	r3, #1
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <vPortExitCritical+0x50>)
 8008410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <vPortExitCritical+0x50>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d105      	bne.n	8008426 <vPortExitCritical+0x42>
 800841a:	2300      	movs	r3, #0
 800841c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f383 8811 	msr	BASEPRI, r3
}
 8008424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000000c 	.word	0x2000000c
	...

08008440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008440:	f3ef 8009 	mrs	r0, PSP
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <pxCurrentTCBConst>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f01e 0f10 	tst.w	lr, #16
 8008450:	bf08      	it	eq
 8008452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008464:	f380 8811 	msr	BASEPRI, r0
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f7fe feba 	bl	80071e8 <vTaskSwitchContext>
 8008474:	f04f 0000 	mov.w	r0, #0
 8008478:	f380 8811 	msr	BASEPRI, r0
 800847c:	bc09      	pop	{r0, r3}
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	6808      	ldr	r0, [r1, #0]
 8008482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008486:	f01e 0f10 	tst.w	lr, #16
 800848a:	bf08      	it	eq
 800848c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008490:	f380 8809 	msr	PSP, r0
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst>:
 80084a0:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
}
 80084c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084c2:	f7fe fdd7 	bl	8007074 <xTaskIncrementTick>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <xPortSysTickHandler+0x40>)
 80084ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	2300      	movs	r3, #0
 80084d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	f383 8811 	msr	BASEPRI, r3
}
 80084de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <vPortSetupTimerInterrupt+0x38>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <vPortSetupTimerInterrupt+0x3c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0a      	ldr	r2, [pc, #40]	; (800852c <vPortSetupTimerInterrupt+0x40>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <vPortSetupTimerInterrupt+0x44>)
 800850a:	3b01      	subs	r3, #1
 800850c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <vPortSetupTimerInterrupt+0x34>)
 8008510:	2207      	movs	r2, #7
 8008512:	601a      	str	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	e000e010 	.word	0xe000e010
 8008524:	e000e018 	.word	0xe000e018
 8008528:	20000000 	.word	0x20000000
 800852c:	10624dd3 	.word	0x10624dd3
 8008530:	e000e014 	.word	0xe000e014

08008534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008544 <vPortEnableVFP+0x10>
 8008538:	6801      	ldr	r1, [r0, #0]
 800853a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800853e:	6001      	str	r1, [r0, #0]
 8008540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008542:	bf00      	nop
 8008544:	e000ed88 	.word	0xe000ed88

08008548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800854e:	f3ef 8305 	mrs	r3, IPSR
 8008552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b0f      	cmp	r3, #15
 8008558:	d914      	bls.n	8008584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <vPortValidateInterruptPriority+0x70>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <vPortValidateInterruptPriority+0x74>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	7afa      	ldrb	r2, [r7, #11]
 800856a:	429a      	cmp	r2, r3
 800856c:	d20a      	bcs.n	8008584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	607b      	str	r3, [r7, #4]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008584:	4b0e      	ldr	r3, [pc, #56]	; (80085c0 <vPortValidateInterruptPriority+0x78>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <vPortValidateInterruptPriority+0x7c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d90a      	bls.n	80085aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	603b      	str	r3, [r7, #0]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <vPortValidateInterruptPriority+0x60>
	}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	e000e3f0 	.word	0xe000e3f0
 80085bc:	200011a8 	.word	0x200011a8
 80085c0:	e000ed0c 	.word	0xe000ed0c
 80085c4:	200011ac 	.word	0x200011ac

080085c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085d4:	f7fe fc92 	bl	8006efc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085d8:	4b5b      	ldr	r3, [pc, #364]	; (8008748 <pvPortMalloc+0x180>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085e0:	f000 f920 	bl	8008824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085e4:	4b59      	ldr	r3, [pc, #356]	; (800874c <pvPortMalloc+0x184>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 8093 	bne.w	8008718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01d      	beq.n	8008634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085f8:	2208      	movs	r2, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
 80085fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <pvPortMalloc+0x6c>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d06e      	beq.n	8008718 <pvPortMalloc+0x150>
 800863a:	4b45      	ldr	r3, [pc, #276]	; (8008750 <pvPortMalloc+0x188>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d869      	bhi.n	8008718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008644:	4b43      	ldr	r3, [pc, #268]	; (8008754 <pvPortMalloc+0x18c>)
 8008646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008648:	4b42      	ldr	r3, [pc, #264]	; (8008754 <pvPortMalloc+0x18c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800864e:	e004      	b.n	800865a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <pvPortMalloc+0xa4>
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f1      	bne.n	8008650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <pvPortMalloc+0x180>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008672:	429a      	cmp	r2, r3
 8008674:	d050      	beq.n	8008718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2208      	movs	r2, #8
 800867c:	4413      	add	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	2308      	movs	r3, #8
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	429a      	cmp	r2, r3
 8008696:	d91f      	bls.n	80086d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <pvPortMalloc+0xf8>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	613b      	str	r3, [r7, #16]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	1ad2      	subs	r2, r2, r3
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086d2:	69b8      	ldr	r0, [r7, #24]
 80086d4:	f000 f908 	bl	80088e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <pvPortMalloc+0x188>)
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <pvPortMalloc+0x188>)
 80086e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <pvPortMalloc+0x188>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <pvPortMalloc+0x190>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d203      	bcs.n	80086fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086f2:	4b17      	ldr	r3, [pc, #92]	; (8008750 <pvPortMalloc+0x188>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a18      	ldr	r2, [pc, #96]	; (8008758 <pvPortMalloc+0x190>)
 80086f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	4b13      	ldr	r3, [pc, #76]	; (800874c <pvPortMalloc+0x184>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	431a      	orrs	r2, r3
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <pvPortMalloc+0x194>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a11      	ldr	r2, [pc, #68]	; (800875c <pvPortMalloc+0x194>)
 8008716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008718:	f7fe fbfe 	bl	8006f18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <pvPortMalloc+0x174>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60fb      	str	r3, [r7, #12]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <pvPortMalloc+0x172>
	return pvReturn;
 800873c:	69fb      	ldr	r3, [r7, #28]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3728      	adds	r7, #40	; 0x28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200038c8 	.word	0x200038c8
 800874c:	200038dc 	.word	0x200038dc
 8008750:	200038cc 	.word	0x200038cc
 8008754:	200038c0 	.word	0x200038c0
 8008758:	200038d0 	.word	0x200038d0
 800875c:	200038d4 	.word	0x200038d4

08008760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d04d      	beq.n	800880e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008772:	2308      	movs	r3, #8
 8008774:	425b      	negs	r3, r3
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	4413      	add	r3, r2
 800877a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <vPortFree+0xb8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4013      	ands	r3, r2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <vPortFree+0x44>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	60fb      	str	r3, [r7, #12]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <vPortFree+0x62>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	60bb      	str	r3, [r7, #8]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	4b14      	ldr	r3, [pc, #80]	; (8008818 <vPortFree+0xb8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4013      	ands	r3, r2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01e      	beq.n	800880e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d11a      	bne.n	800880e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <vPortFree+0xb8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	43db      	mvns	r3, r3
 80087e2:	401a      	ands	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087e8:	f7fe fb88 	bl	8006efc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <vPortFree+0xbc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	4a09      	ldr	r2, [pc, #36]	; (800881c <vPortFree+0xbc>)
 80087f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087fa:	6938      	ldr	r0, [r7, #16]
 80087fc:	f000 f874 	bl	80088e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <vPortFree+0xc0>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	4a06      	ldr	r2, [pc, #24]	; (8008820 <vPortFree+0xc0>)
 8008808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800880a:	f7fe fb85 	bl	8006f18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800880e:	bf00      	nop
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	200038dc 	.word	0x200038dc
 800881c:	200038cc 	.word	0x200038cc
 8008820:	200038d8 	.word	0x200038d8

08008824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800882a:	f242 7310 	movw	r3, #10000	; 0x2710
 800882e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008830:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <prvHeapInit+0xac>)
 8008832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00c      	beq.n	8008858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3307      	adds	r3, #7
 8008842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <prvHeapInit+0xac>)
 8008854:	4413      	add	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <prvHeapInit+0xb0>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <prvHeapInit+0xb0>)
 8008864:	2200      	movs	r2, #0
 8008866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4413      	add	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008870:	2208      	movs	r2, #8
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0307 	bic.w	r3, r3, #7
 800887e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a15      	ldr	r2, [pc, #84]	; (80088d8 <prvHeapInit+0xb4>)
 8008884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008886:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <prvHeapInit+0xb4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2200      	movs	r2, #0
 800888c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800888e:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <prvHeapInit+0xb4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088a4:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvHeapInit+0xb4>)
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <prvHeapInit+0xb8>)
 80088b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <prvHeapInit+0xbc>)
 80088ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088bc:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvHeapInit+0xc0>)
 80088be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	200011b0 	.word	0x200011b0
 80088d4:	200038c0 	.word	0x200038c0
 80088d8:	200038c8 	.word	0x200038c8
 80088dc:	200038d0 	.word	0x200038d0
 80088e0:	200038cc 	.word	0x200038cc
 80088e4:	200038dc 	.word	0x200038dc

080088e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088f0:	4b28      	ldr	r3, [pc, #160]	; (8008994 <prvInsertBlockIntoFreeList+0xac>)
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	e002      	b.n	80088fc <prvInsertBlockIntoFreeList+0x14>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d8f7      	bhi.n	80088f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4413      	add	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d108      	bne.n	800892a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	441a      	add	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	441a      	add	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d118      	bne.n	8008970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <prvInsertBlockIntoFreeList+0xb0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d00d      	beq.n	8008966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	441a      	add	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e008      	b.n	8008978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <prvInsertBlockIntoFreeList+0xb0>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e003      	b.n	8008978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d002      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	200038c0 	.word	0x200038c0
 8008998:	200038c8 	.word	0x200038c8

0800899c <__errno>:
 800899c:	4b01      	ldr	r3, [pc, #4]	; (80089a4 <__errno+0x8>)
 800899e:	6818      	ldr	r0, [r3, #0]
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000010 	.word	0x20000010

080089a8 <__libc_init_array>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	4d0d      	ldr	r5, [pc, #52]	; (80089e0 <__libc_init_array+0x38>)
 80089ac:	4c0d      	ldr	r4, [pc, #52]	; (80089e4 <__libc_init_array+0x3c>)
 80089ae:	1b64      	subs	r4, r4, r5
 80089b0:	10a4      	asrs	r4, r4, #2
 80089b2:	2600      	movs	r6, #0
 80089b4:	42a6      	cmp	r6, r4
 80089b6:	d109      	bne.n	80089cc <__libc_init_array+0x24>
 80089b8:	4d0b      	ldr	r5, [pc, #44]	; (80089e8 <__libc_init_array+0x40>)
 80089ba:	4c0c      	ldr	r4, [pc, #48]	; (80089ec <__libc_init_array+0x44>)
 80089bc:	f000 fcf8 	bl	80093b0 <_init>
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	2600      	movs	r6, #0
 80089c6:	42a6      	cmp	r6, r4
 80089c8:	d105      	bne.n	80089d6 <__libc_init_array+0x2e>
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d0:	4798      	blx	r3
 80089d2:	3601      	adds	r6, #1
 80089d4:	e7ee      	b.n	80089b4 <__libc_init_array+0xc>
 80089d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089da:	4798      	blx	r3
 80089dc:	3601      	adds	r6, #1
 80089de:	e7f2      	b.n	80089c6 <__libc_init_array+0x1e>
 80089e0:	0800987c 	.word	0x0800987c
 80089e4:	0800987c 	.word	0x0800987c
 80089e8:	0800987c 	.word	0x0800987c
 80089ec:	08009880 	.word	0x08009880

080089f0 <__retarget_lock_acquire_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_release_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <memcpy>:
 80089f4:	440a      	add	r2, r1
 80089f6:	4291      	cmp	r1, r2
 80089f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089fc:	d100      	bne.n	8008a00 <memcpy+0xc>
 80089fe:	4770      	bx	lr
 8008a00:	b510      	push	{r4, lr}
 8008a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	d1f9      	bne.n	8008a02 <memcpy+0xe>
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <memset>:
 8008a10:	4402      	add	r2, r0
 8008a12:	4603      	mov	r3, r0
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d100      	bne.n	8008a1a <memset+0xa>
 8008a18:	4770      	bx	lr
 8008a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a1e:	e7f9      	b.n	8008a14 <memset+0x4>

08008a20 <sbrk_aligned>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4e0e      	ldr	r6, [pc, #56]	; (8008a5c <sbrk_aligned+0x3c>)
 8008a24:	460c      	mov	r4, r1
 8008a26:	6831      	ldr	r1, [r6, #0]
 8008a28:	4605      	mov	r5, r0
 8008a2a:	b911      	cbnz	r1, 8008a32 <sbrk_aligned+0x12>
 8008a2c:	f000 f8f6 	bl	8008c1c <_sbrk_r>
 8008a30:	6030      	str	r0, [r6, #0]
 8008a32:	4621      	mov	r1, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 f8f1 	bl	8008c1c <_sbrk_r>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d00a      	beq.n	8008a54 <sbrk_aligned+0x34>
 8008a3e:	1cc4      	adds	r4, r0, #3
 8008a40:	f024 0403 	bic.w	r4, r4, #3
 8008a44:	42a0      	cmp	r0, r4
 8008a46:	d007      	beq.n	8008a58 <sbrk_aligned+0x38>
 8008a48:	1a21      	subs	r1, r4, r0
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f000 f8e6 	bl	8008c1c <_sbrk_r>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d101      	bne.n	8008a58 <sbrk_aligned+0x38>
 8008a54:	f04f 34ff 	mov.w	r4, #4294967295
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	200038e8 	.word	0x200038e8

08008a60 <_malloc_r>:
 8008a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a64:	1ccd      	adds	r5, r1, #3
 8008a66:	f025 0503 	bic.w	r5, r5, #3
 8008a6a:	3508      	adds	r5, #8
 8008a6c:	2d0c      	cmp	r5, #12
 8008a6e:	bf38      	it	cc
 8008a70:	250c      	movcc	r5, #12
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	4607      	mov	r7, r0
 8008a76:	db01      	blt.n	8008a7c <_malloc_r+0x1c>
 8008a78:	42a9      	cmp	r1, r5
 8008a7a:	d905      	bls.n	8008a88 <_malloc_r+0x28>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	2600      	movs	r6, #0
 8008a82:	4630      	mov	r0, r6
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	4e2e      	ldr	r6, [pc, #184]	; (8008b44 <_malloc_r+0xe4>)
 8008a8a:	f000 f8f7 	bl	8008c7c <__malloc_lock>
 8008a8e:	6833      	ldr	r3, [r6, #0]
 8008a90:	461c      	mov	r4, r3
 8008a92:	bb34      	cbnz	r4, 8008ae2 <_malloc_r+0x82>
 8008a94:	4629      	mov	r1, r5
 8008a96:	4638      	mov	r0, r7
 8008a98:	f7ff ffc2 	bl	8008a20 <sbrk_aligned>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	d14d      	bne.n	8008b3e <_malloc_r+0xde>
 8008aa2:	6834      	ldr	r4, [r6, #0]
 8008aa4:	4626      	mov	r6, r4
 8008aa6:	2e00      	cmp	r6, #0
 8008aa8:	d140      	bne.n	8008b2c <_malloc_r+0xcc>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	4631      	mov	r1, r6
 8008aae:	4638      	mov	r0, r7
 8008ab0:	eb04 0803 	add.w	r8, r4, r3
 8008ab4:	f000 f8b2 	bl	8008c1c <_sbrk_r>
 8008ab8:	4580      	cmp	r8, r0
 8008aba:	d13a      	bne.n	8008b32 <_malloc_r+0xd2>
 8008abc:	6821      	ldr	r1, [r4, #0]
 8008abe:	3503      	adds	r5, #3
 8008ac0:	1a6d      	subs	r5, r5, r1
 8008ac2:	f025 0503 	bic.w	r5, r5, #3
 8008ac6:	3508      	adds	r5, #8
 8008ac8:	2d0c      	cmp	r5, #12
 8008aca:	bf38      	it	cc
 8008acc:	250c      	movcc	r5, #12
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ffa5 	bl	8008a20 <sbrk_aligned>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d02b      	beq.n	8008b32 <_malloc_r+0xd2>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	442b      	add	r3, r5
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	e00e      	b.n	8008b00 <_malloc_r+0xa0>
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	1b52      	subs	r2, r2, r5
 8008ae6:	d41e      	bmi.n	8008b26 <_malloc_r+0xc6>
 8008ae8:	2a0b      	cmp	r2, #11
 8008aea:	d916      	bls.n	8008b1a <_malloc_r+0xba>
 8008aec:	1961      	adds	r1, r4, r5
 8008aee:	42a3      	cmp	r3, r4
 8008af0:	6025      	str	r5, [r4, #0]
 8008af2:	bf18      	it	ne
 8008af4:	6059      	strne	r1, [r3, #4]
 8008af6:	6863      	ldr	r3, [r4, #4]
 8008af8:	bf08      	it	eq
 8008afa:	6031      	streq	r1, [r6, #0]
 8008afc:	5162      	str	r2, [r4, r5]
 8008afe:	604b      	str	r3, [r1, #4]
 8008b00:	4638      	mov	r0, r7
 8008b02:	f104 060b 	add.w	r6, r4, #11
 8008b06:	f000 f8bf 	bl	8008c88 <__malloc_unlock>
 8008b0a:	f026 0607 	bic.w	r6, r6, #7
 8008b0e:	1d23      	adds	r3, r4, #4
 8008b10:	1af2      	subs	r2, r6, r3
 8008b12:	d0b6      	beq.n	8008a82 <_malloc_r+0x22>
 8008b14:	1b9b      	subs	r3, r3, r6
 8008b16:	50a3      	str	r3, [r4, r2]
 8008b18:	e7b3      	b.n	8008a82 <_malloc_r+0x22>
 8008b1a:	6862      	ldr	r2, [r4, #4]
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	bf0c      	ite	eq
 8008b20:	6032      	streq	r2, [r6, #0]
 8008b22:	605a      	strne	r2, [r3, #4]
 8008b24:	e7ec      	b.n	8008b00 <_malloc_r+0xa0>
 8008b26:	4623      	mov	r3, r4
 8008b28:	6864      	ldr	r4, [r4, #4]
 8008b2a:	e7b2      	b.n	8008a92 <_malloc_r+0x32>
 8008b2c:	4634      	mov	r4, r6
 8008b2e:	6876      	ldr	r6, [r6, #4]
 8008b30:	e7b9      	b.n	8008aa6 <_malloc_r+0x46>
 8008b32:	230c      	movs	r3, #12
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	4638      	mov	r0, r7
 8008b38:	f000 f8a6 	bl	8008c88 <__malloc_unlock>
 8008b3c:	e7a1      	b.n	8008a82 <_malloc_r+0x22>
 8008b3e:	6025      	str	r5, [r4, #0]
 8008b40:	e7de      	b.n	8008b00 <_malloc_r+0xa0>
 8008b42:	bf00      	nop
 8008b44:	200038e4 	.word	0x200038e4

08008b48 <cleanup_glue>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	6809      	ldr	r1, [r1, #0]
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b109      	cbz	r1, 8008b56 <cleanup_glue+0xe>
 8008b52:	f7ff fff9 	bl	8008b48 <cleanup_glue>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5e:	f000 b899 	b.w	8008c94 <_free_r>
	...

08008b64 <_reclaim_reent>:
 8008b64:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <_reclaim_reent+0xb4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4283      	cmp	r3, r0
 8008b6a:	b570      	push	{r4, r5, r6, lr}
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	d051      	beq.n	8008c14 <_reclaim_reent+0xb0>
 8008b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b72:	b143      	cbz	r3, 8008b86 <_reclaim_reent+0x22>
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d14a      	bne.n	8008c10 <_reclaim_reent+0xac>
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	b111      	cbz	r1, 8008b86 <_reclaim_reent+0x22>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f887 	bl	8008c94 <_free_r>
 8008b86:	6961      	ldr	r1, [r4, #20]
 8008b88:	b111      	cbz	r1, 8008b90 <_reclaim_reent+0x2c>
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 f882 	bl	8008c94 <_free_r>
 8008b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b92:	b111      	cbz	r1, 8008b9a <_reclaim_reent+0x36>
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 f87d 	bl	8008c94 <_free_r>
 8008b9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b9c:	b111      	cbz	r1, 8008ba4 <_reclaim_reent+0x40>
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f878 	bl	8008c94 <_free_r>
 8008ba4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ba6:	b111      	cbz	r1, 8008bae <_reclaim_reent+0x4a>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f873 	bl	8008c94 <_free_r>
 8008bae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008bb0:	b111      	cbz	r1, 8008bb8 <_reclaim_reent+0x54>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f86e 	bl	8008c94 <_free_r>
 8008bb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008bba:	b111      	cbz	r1, 8008bc2 <_reclaim_reent+0x5e>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f869 	bl	8008c94 <_free_r>
 8008bc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008bc4:	b111      	cbz	r1, 8008bcc <_reclaim_reent+0x68>
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f864 	bl	8008c94 <_free_r>
 8008bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bce:	b111      	cbz	r1, 8008bd6 <_reclaim_reent+0x72>
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 f85f 	bl	8008c94 <_free_r>
 8008bd6:	69a3      	ldr	r3, [r4, #24]
 8008bd8:	b1e3      	cbz	r3, 8008c14 <_reclaim_reent+0xb0>
 8008bda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4798      	blx	r3
 8008be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008be2:	b1b9      	cbz	r1, 8008c14 <_reclaim_reent+0xb0>
 8008be4:	4620      	mov	r0, r4
 8008be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bea:	f7ff bfad 	b.w	8008b48 <cleanup_glue>
 8008bee:	5949      	ldr	r1, [r1, r5]
 8008bf0:	b941      	cbnz	r1, 8008c04 <_reclaim_reent+0xa0>
 8008bf2:	3504      	adds	r5, #4
 8008bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf6:	2d80      	cmp	r5, #128	; 0x80
 8008bf8:	68d9      	ldr	r1, [r3, #12]
 8008bfa:	d1f8      	bne.n	8008bee <_reclaim_reent+0x8a>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f849 	bl	8008c94 <_free_r>
 8008c02:	e7ba      	b.n	8008b7a <_reclaim_reent+0x16>
 8008c04:	680e      	ldr	r6, [r1, #0]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f844 	bl	8008c94 <_free_r>
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	e7ef      	b.n	8008bf0 <_reclaim_reent+0x8c>
 8008c10:	2500      	movs	r5, #0
 8008c12:	e7ef      	b.n	8008bf4 <_reclaim_reent+0x90>
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_sbrk_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fe92 	bl	8001950 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	200038ec 	.word	0x200038ec

08008c3c <siprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	b500      	push	{lr}
 8008c40:	b09c      	sub	sp, #112	; 0x70
 8008c42:	ab1d      	add	r3, sp, #116	; 0x74
 8008c44:	9002      	str	r0, [sp, #8]
 8008c46:	9006      	str	r0, [sp, #24]
 8008c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c4c:	4809      	ldr	r0, [pc, #36]	; (8008c74 <siprintf+0x38>)
 8008c4e:	9107      	str	r1, [sp, #28]
 8008c50:	9104      	str	r1, [sp, #16]
 8008c52:	4909      	ldr	r1, [pc, #36]	; (8008c78 <siprintf+0x3c>)
 8008c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c58:	9105      	str	r1, [sp, #20]
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	a902      	add	r1, sp, #8
 8008c60:	f000 f8c0 	bl	8008de4 <_svfiprintf_r>
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	b01c      	add	sp, #112	; 0x70
 8008c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c70:	b003      	add	sp, #12
 8008c72:	4770      	bx	lr
 8008c74:	20000010 	.word	0x20000010
 8008c78:	ffff0208 	.word	0xffff0208

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f7ff beb7 	b.w	80089f0 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	200038e0 	.word	0x200038e0

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f7ff beb2 	b.w	80089f2 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	200038e0 	.word	0x200038e0

08008c94 <_free_r>:
 8008c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d044      	beq.n	8008d24 <_free_r+0x90>
 8008c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9e:	9001      	str	r0, [sp, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ca6:	bfb8      	it	lt
 8008ca8:	18e4      	addlt	r4, r4, r3
 8008caa:	f7ff ffe7 	bl	8008c7c <__malloc_lock>
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <_free_r+0x94>)
 8008cb0:	9801      	ldr	r0, [sp, #4]
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x30>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	b003      	add	sp, #12
 8008cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc0:	f7ff bfe2 	b.w	8008c88 <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x46>
 8008cc8:	6825      	ldr	r5, [r4, #0]
 8008cca:	1961      	adds	r1, r4, r5
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x22>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x50>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x46>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1855      	adds	r5, r2, r1
 8008ce8:	42a5      	cmp	r5, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x70>
 8008cec:	6824      	ldr	r4, [r4, #0]
 8008cee:	4421      	add	r1, r4
 8008cf0:	1854      	adds	r4, r2, r1
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x26>
 8008cf8:	681c      	ldr	r4, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	4421      	add	r1, r4
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x26>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x78>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x26>
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	1961      	adds	r1, r4, r5
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1949      	addeq	r1, r1, r5
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x26>
 8008d24:	b003      	add	sp, #12
 8008d26:	bd30      	pop	{r4, r5, pc}
 8008d28:	200038e4 	.word	0x200038e4

08008d2c <__ssputs_r>:
 8008d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d30:	688e      	ldr	r6, [r1, #8]
 8008d32:	429e      	cmp	r6, r3
 8008d34:	4682      	mov	sl, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4690      	mov	r8, r2
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	d838      	bhi.n	8008db0 <__ssputs_r+0x84>
 8008d3e:	898a      	ldrh	r2, [r1, #12]
 8008d40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d44:	d032      	beq.n	8008dac <__ssputs_r+0x80>
 8008d46:	6825      	ldr	r5, [r4, #0]
 8008d48:	6909      	ldr	r1, [r1, #16]
 8008d4a:	eba5 0901 	sub.w	r9, r5, r1
 8008d4e:	6965      	ldr	r5, [r4, #20]
 8008d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d58:	3301      	adds	r3, #1
 8008d5a:	444b      	add	r3, r9
 8008d5c:	106d      	asrs	r5, r5, #1
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	bf38      	it	cc
 8008d62:	461d      	movcc	r5, r3
 8008d64:	0553      	lsls	r3, r2, #21
 8008d66:	d531      	bpl.n	8008dcc <__ssputs_r+0xa0>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7ff fe79 	bl	8008a60 <_malloc_r>
 8008d6e:	4606      	mov	r6, r0
 8008d70:	b950      	cbnz	r0, 8008d88 <__ssputs_r+0x5c>
 8008d72:	230c      	movs	r3, #12
 8008d74:	f8ca 3000 	str.w	r3, [sl]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	6921      	ldr	r1, [r4, #16]
 8008d8a:	464a      	mov	r2, r9
 8008d8c:	f7ff fe32 	bl	80089f4 <memcpy>
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	6126      	str	r6, [r4, #16]
 8008d9e:	6165      	str	r5, [r4, #20]
 8008da0:	444e      	add	r6, r9
 8008da2:	eba5 0509 	sub.w	r5, r5, r9
 8008da6:	6026      	str	r6, [r4, #0]
 8008da8:	60a5      	str	r5, [r4, #8]
 8008daa:	463e      	mov	r6, r7
 8008dac:	42be      	cmp	r6, r7
 8008dae:	d900      	bls.n	8008db2 <__ssputs_r+0x86>
 8008db0:	463e      	mov	r6, r7
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	4632      	mov	r2, r6
 8008db6:	4641      	mov	r1, r8
 8008db8:	f000 faa8 	bl	800930c <memmove>
 8008dbc:	68a3      	ldr	r3, [r4, #8]
 8008dbe:	1b9b      	subs	r3, r3, r6
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	4433      	add	r3, r6
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e7db      	b.n	8008d84 <__ssputs_r+0x58>
 8008dcc:	462a      	mov	r2, r5
 8008dce:	f000 fab7 	bl	8009340 <_realloc_r>
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1e1      	bne.n	8008d9c <__ssputs_r+0x70>
 8008dd8:	6921      	ldr	r1, [r4, #16]
 8008dda:	4650      	mov	r0, sl
 8008ddc:	f7ff ff5a 	bl	8008c94 <_free_r>
 8008de0:	e7c7      	b.n	8008d72 <__ssputs_r+0x46>
	...

08008de4 <_svfiprintf_r>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	4698      	mov	r8, r3
 8008dea:	898b      	ldrh	r3, [r1, #12]
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	b09d      	sub	sp, #116	; 0x74
 8008df0:	4607      	mov	r7, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	d50e      	bpl.n	8008e16 <_svfiprintf_r+0x32>
 8008df8:	690b      	ldr	r3, [r1, #16]
 8008dfa:	b963      	cbnz	r3, 8008e16 <_svfiprintf_r+0x32>
 8008dfc:	2140      	movs	r1, #64	; 0x40
 8008dfe:	f7ff fe2f 	bl	8008a60 <_malloc_r>
 8008e02:	6028      	str	r0, [r5, #0]
 8008e04:	6128      	str	r0, [r5, #16]
 8008e06:	b920      	cbnz	r0, 8008e12 <_svfiprintf_r+0x2e>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	e0d1      	b.n	8008fb6 <_svfiprintf_r+0x1d2>
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	616b      	str	r3, [r5, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9309      	str	r3, [sp, #36]	; 0x24
 8008e1a:	2320      	movs	r3, #32
 8008e1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e24:	2330      	movs	r3, #48	; 0x30
 8008e26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fd0 <_svfiprintf_r+0x1ec>
 8008e2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e2e:	f04f 0901 	mov.w	r9, #1
 8008e32:	4623      	mov	r3, r4
 8008e34:	469a      	mov	sl, r3
 8008e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e3a:	b10a      	cbz	r2, 8008e40 <_svfiprintf_r+0x5c>
 8008e3c:	2a25      	cmp	r2, #37	; 0x25
 8008e3e:	d1f9      	bne.n	8008e34 <_svfiprintf_r+0x50>
 8008e40:	ebba 0b04 	subs.w	fp, sl, r4
 8008e44:	d00b      	beq.n	8008e5e <_svfiprintf_r+0x7a>
 8008e46:	465b      	mov	r3, fp
 8008e48:	4622      	mov	r2, r4
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	f7ff ff6d 	bl	8008d2c <__ssputs_r>
 8008e52:	3001      	adds	r0, #1
 8008e54:	f000 80aa 	beq.w	8008fac <_svfiprintf_r+0x1c8>
 8008e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e5a:	445a      	add	r2, fp
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80a2 	beq.w	8008fac <_svfiprintf_r+0x1c8>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e72:	f10a 0a01 	add.w	sl, sl, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e80:	4654      	mov	r4, sl
 8008e82:	2205      	movs	r2, #5
 8008e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e88:	4851      	ldr	r0, [pc, #324]	; (8008fd0 <_svfiprintf_r+0x1ec>)
 8008e8a:	f7f7 f9a1 	bl	80001d0 <memchr>
 8008e8e:	9a04      	ldr	r2, [sp, #16]
 8008e90:	b9d8      	cbnz	r0, 8008eca <_svfiprintf_r+0xe6>
 8008e92:	06d0      	lsls	r0, r2, #27
 8008e94:	bf44      	itt	mi
 8008e96:	2320      	movmi	r3, #32
 8008e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e9c:	0711      	lsls	r1, r2, #28
 8008e9e:	bf44      	itt	mi
 8008ea0:	232b      	movmi	r3, #43	; 0x2b
 8008ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8008eac:	d015      	beq.n	8008eda <_svfiprintf_r+0xf6>
 8008eae:	9a07      	ldr	r2, [sp, #28]
 8008eb0:	4654      	mov	r4, sl
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ebe:	3b30      	subs	r3, #48	; 0x30
 8008ec0:	2b09      	cmp	r3, #9
 8008ec2:	d94e      	bls.n	8008f62 <_svfiprintf_r+0x17e>
 8008ec4:	b1b0      	cbz	r0, 8008ef4 <_svfiprintf_r+0x110>
 8008ec6:	9207      	str	r2, [sp, #28]
 8008ec8:	e014      	b.n	8008ef4 <_svfiprintf_r+0x110>
 8008eca:	eba0 0308 	sub.w	r3, r0, r8
 8008ece:	fa09 f303 	lsl.w	r3, r9, r3
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	46a2      	mov	sl, r4
 8008ed8:	e7d2      	b.n	8008e80 <_svfiprintf_r+0x9c>
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	1d19      	adds	r1, r3, #4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	9103      	str	r1, [sp, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bfbb      	ittet	lt
 8008ee6:	425b      	neglt	r3, r3
 8008ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8008eec:	9307      	strge	r3, [sp, #28]
 8008eee:	9307      	strlt	r3, [sp, #28]
 8008ef0:	bfb8      	it	lt
 8008ef2:	9204      	strlt	r2, [sp, #16]
 8008ef4:	7823      	ldrb	r3, [r4, #0]
 8008ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ef8:	d10c      	bne.n	8008f14 <_svfiprintf_r+0x130>
 8008efa:	7863      	ldrb	r3, [r4, #1]
 8008efc:	2b2a      	cmp	r3, #42	; 0x2a
 8008efe:	d135      	bne.n	8008f6c <_svfiprintf_r+0x188>
 8008f00:	9b03      	ldr	r3, [sp, #12]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	9203      	str	r2, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfb8      	it	lt
 8008f0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f10:	3402      	adds	r4, #2
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fe0 <_svfiprintf_r+0x1fc>
 8008f18:	7821      	ldrb	r1, [r4, #0]
 8008f1a:	2203      	movs	r2, #3
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	f7f7 f957 	bl	80001d0 <memchr>
 8008f22:	b140      	cbz	r0, 8008f36 <_svfiprintf_r+0x152>
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	eba0 000a 	sub.w	r0, r0, sl
 8008f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	4303      	orrs	r3, r0
 8008f32:	3401      	adds	r4, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3a:	4826      	ldr	r0, [pc, #152]	; (8008fd4 <_svfiprintf_r+0x1f0>)
 8008f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f40:	2206      	movs	r2, #6
 8008f42:	f7f7 f945 	bl	80001d0 <memchr>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d038      	beq.n	8008fbc <_svfiprintf_r+0x1d8>
 8008f4a:	4b23      	ldr	r3, [pc, #140]	; (8008fd8 <_svfiprintf_r+0x1f4>)
 8008f4c:	bb1b      	cbnz	r3, 8008f96 <_svfiprintf_r+0x1b2>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	3308      	adds	r3, #8
 8008f58:	9303      	str	r3, [sp, #12]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	4433      	add	r3, r6
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	e767      	b.n	8008e32 <_svfiprintf_r+0x4e>
 8008f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f66:	460c      	mov	r4, r1
 8008f68:	2001      	movs	r0, #1
 8008f6a:	e7a5      	b.n	8008eb8 <_svfiprintf_r+0xd4>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	3401      	adds	r4, #1
 8008f70:	9305      	str	r3, [sp, #20]
 8008f72:	4619      	mov	r1, r3
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f7e:	3a30      	subs	r2, #48	; 0x30
 8008f80:	2a09      	cmp	r2, #9
 8008f82:	d903      	bls.n	8008f8c <_svfiprintf_r+0x1a8>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0c5      	beq.n	8008f14 <_svfiprintf_r+0x130>
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	e7c3      	b.n	8008f14 <_svfiprintf_r+0x130>
 8008f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f90:	4604      	mov	r4, r0
 8008f92:	2301      	movs	r3, #1
 8008f94:	e7f0      	b.n	8008f78 <_svfiprintf_r+0x194>
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	462a      	mov	r2, r5
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <_svfiprintf_r+0x1f8>)
 8008f9e:	a904      	add	r1, sp, #16
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f3af 8000 	nop.w
 8008fa6:	1c42      	adds	r2, r0, #1
 8008fa8:	4606      	mov	r6, r0
 8008faa:	d1d6      	bne.n	8008f5a <_svfiprintf_r+0x176>
 8008fac:	89ab      	ldrh	r3, [r5, #12]
 8008fae:	065b      	lsls	r3, r3, #25
 8008fb0:	f53f af2c 	bmi.w	8008e0c <_svfiprintf_r+0x28>
 8008fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb6:	b01d      	add	sp, #116	; 0x74
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	ab03      	add	r3, sp, #12
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <_svfiprintf_r+0x1f8>)
 8008fc4:	a904      	add	r1, sp, #16
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f000 f87a 	bl	80090c0 <_printf_i>
 8008fcc:	e7eb      	b.n	8008fa6 <_svfiprintf_r+0x1c2>
 8008fce:	bf00      	nop
 8008fd0:	08009840 	.word	0x08009840
 8008fd4:	0800984a 	.word	0x0800984a
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	08008d2d 	.word	0x08008d2d
 8008fe0:	08009846 	.word	0x08009846

08008fe4 <_printf_common>:
 8008fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	4616      	mov	r6, r2
 8008fea:	4699      	mov	r9, r3
 8008fec:	688a      	ldr	r2, [r1, #8]
 8008fee:	690b      	ldr	r3, [r1, #16]
 8008ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bfb8      	it	lt
 8008ff8:	4613      	movlt	r3, r2
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009000:	4607      	mov	r7, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b10a      	cbz	r2, 800900a <_printf_common+0x26>
 8009006:	3301      	adds	r3, #1
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	0699      	lsls	r1, r3, #26
 800900e:	bf42      	ittt	mi
 8009010:	6833      	ldrmi	r3, [r6, #0]
 8009012:	3302      	addmi	r3, #2
 8009014:	6033      	strmi	r3, [r6, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	f015 0506 	ands.w	r5, r5, #6
 800901c:	d106      	bne.n	800902c <_printf_common+0x48>
 800901e:	f104 0a19 	add.w	sl, r4, #25
 8009022:	68e3      	ldr	r3, [r4, #12]
 8009024:	6832      	ldr	r2, [r6, #0]
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	42ab      	cmp	r3, r5
 800902a:	dc26      	bgt.n	800907a <_printf_common+0x96>
 800902c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009030:	1e13      	subs	r3, r2, #0
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	bf18      	it	ne
 8009036:	2301      	movne	r3, #1
 8009038:	0692      	lsls	r2, r2, #26
 800903a:	d42b      	bmi.n	8009094 <_printf_common+0xb0>
 800903c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	47c0      	blx	r8
 8009046:	3001      	adds	r0, #1
 8009048:	d01e      	beq.n	8009088 <_printf_common+0xa4>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	68e5      	ldr	r5, [r4, #12]
 800904e:	6832      	ldr	r2, [r6, #0]
 8009050:	f003 0306 	and.w	r3, r3, #6
 8009054:	2b04      	cmp	r3, #4
 8009056:	bf08      	it	eq
 8009058:	1aad      	subeq	r5, r5, r2
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	bf0c      	ite	eq
 8009060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009064:	2500      	movne	r5, #0
 8009066:	4293      	cmp	r3, r2
 8009068:	bfc4      	itt	gt
 800906a:	1a9b      	subgt	r3, r3, r2
 800906c:	18ed      	addgt	r5, r5, r3
 800906e:	2600      	movs	r6, #0
 8009070:	341a      	adds	r4, #26
 8009072:	42b5      	cmp	r5, r6
 8009074:	d11a      	bne.n	80090ac <_printf_common+0xc8>
 8009076:	2000      	movs	r0, #0
 8009078:	e008      	b.n	800908c <_printf_common+0xa8>
 800907a:	2301      	movs	r3, #1
 800907c:	4652      	mov	r2, sl
 800907e:	4649      	mov	r1, r9
 8009080:	4638      	mov	r0, r7
 8009082:	47c0      	blx	r8
 8009084:	3001      	adds	r0, #1
 8009086:	d103      	bne.n	8009090 <_printf_common+0xac>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009090:	3501      	adds	r5, #1
 8009092:	e7c6      	b.n	8009022 <_printf_common+0x3e>
 8009094:	18e1      	adds	r1, r4, r3
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	2030      	movs	r0, #48	; 0x30
 800909a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800909e:	4422      	add	r2, r4
 80090a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090a8:	3302      	adds	r3, #2
 80090aa:	e7c7      	b.n	800903c <_printf_common+0x58>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4622      	mov	r2, r4
 80090b0:	4649      	mov	r1, r9
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d0e6      	beq.n	8009088 <_printf_common+0xa4>
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7d9      	b.n	8009072 <_printf_common+0x8e>
	...

080090c0 <_printf_i>:
 80090c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	7e0f      	ldrb	r7, [r1, #24]
 80090c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090c8:	2f78      	cmp	r7, #120	; 0x78
 80090ca:	4691      	mov	r9, r2
 80090cc:	4680      	mov	r8, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	469a      	mov	sl, r3
 80090d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090d6:	d807      	bhi.n	80090e8 <_printf_i+0x28>
 80090d8:	2f62      	cmp	r7, #98	; 0x62
 80090da:	d80a      	bhi.n	80090f2 <_printf_i+0x32>
 80090dc:	2f00      	cmp	r7, #0
 80090de:	f000 80d8 	beq.w	8009292 <_printf_i+0x1d2>
 80090e2:	2f58      	cmp	r7, #88	; 0x58
 80090e4:	f000 80a3 	beq.w	800922e <_printf_i+0x16e>
 80090e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f0:	e03a      	b.n	8009168 <_printf_i+0xa8>
 80090f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090f6:	2b15      	cmp	r3, #21
 80090f8:	d8f6      	bhi.n	80090e8 <_printf_i+0x28>
 80090fa:	a101      	add	r1, pc, #4	; (adr r1, 8009100 <_printf_i+0x40>)
 80090fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009100:	08009159 	.word	0x08009159
 8009104:	0800916d 	.word	0x0800916d
 8009108:	080090e9 	.word	0x080090e9
 800910c:	080090e9 	.word	0x080090e9
 8009110:	080090e9 	.word	0x080090e9
 8009114:	080090e9 	.word	0x080090e9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090e9 	.word	0x080090e9
 8009120:	080090e9 	.word	0x080090e9
 8009124:	080090e9 	.word	0x080090e9
 8009128:	080090e9 	.word	0x080090e9
 800912c:	08009279 	.word	0x08009279
 8009130:	0800919d 	.word	0x0800919d
 8009134:	0800925b 	.word	0x0800925b
 8009138:	080090e9 	.word	0x080090e9
 800913c:	080090e9 	.word	0x080090e9
 8009140:	0800929b 	.word	0x0800929b
 8009144:	080090e9 	.word	0x080090e9
 8009148:	0800919d 	.word	0x0800919d
 800914c:	080090e9 	.word	0x080090e9
 8009150:	080090e9 	.word	0x080090e9
 8009154:	08009263 	.word	0x08009263
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	602a      	str	r2, [r5, #0]
 8009160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009168:	2301      	movs	r3, #1
 800916a:	e0a3      	b.n	80092b4 <_printf_i+0x1f4>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	0606      	lsls	r6, r0, #24
 8009172:	f101 0304 	add.w	r3, r1, #4
 8009176:	d50a      	bpl.n	800918e <_printf_i+0xce>
 8009178:	680e      	ldr	r6, [r1, #0]
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	2e00      	cmp	r6, #0
 800917e:	da03      	bge.n	8009188 <_printf_i+0xc8>
 8009180:	232d      	movs	r3, #45	; 0x2d
 8009182:	4276      	negs	r6, r6
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	485e      	ldr	r0, [pc, #376]	; (8009304 <_printf_i+0x244>)
 800918a:	230a      	movs	r3, #10
 800918c:	e019      	b.n	80091c2 <_printf_i+0x102>
 800918e:	680e      	ldr	r6, [r1, #0]
 8009190:	602b      	str	r3, [r5, #0]
 8009192:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009196:	bf18      	it	ne
 8009198:	b236      	sxthne	r6, r6
 800919a:	e7ef      	b.n	800917c <_printf_i+0xbc>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	0601      	lsls	r1, r0, #24
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0xec>
 80091a8:	681e      	ldr	r6, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <_printf_i+0xf2>
 80091ac:	0646      	lsls	r6, r0, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0xe8>
 80091b0:	881e      	ldrh	r6, [r3, #0]
 80091b2:	4854      	ldr	r0, [pc, #336]	; (8009304 <_printf_i+0x244>)
 80091b4:	2f6f      	cmp	r7, #111	; 0x6f
 80091b6:	bf0c      	ite	eq
 80091b8:	2308      	moveq	r3, #8
 80091ba:	230a      	movne	r3, #10
 80091bc:	2100      	movs	r1, #0
 80091be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c2:	6865      	ldr	r5, [r4, #4]
 80091c4:	60a5      	str	r5, [r4, #8]
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	bfa2      	ittt	ge
 80091ca:	6821      	ldrge	r1, [r4, #0]
 80091cc:	f021 0104 	bicge.w	r1, r1, #4
 80091d0:	6021      	strge	r1, [r4, #0]
 80091d2:	b90e      	cbnz	r6, 80091d8 <_printf_i+0x118>
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	d04d      	beq.n	8009274 <_printf_i+0x1b4>
 80091d8:	4615      	mov	r5, r2
 80091da:	fbb6 f1f3 	udiv	r1, r6, r3
 80091de:	fb03 6711 	mls	r7, r3, r1, r6
 80091e2:	5dc7      	ldrb	r7, [r0, r7]
 80091e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091e8:	4637      	mov	r7, r6
 80091ea:	42bb      	cmp	r3, r7
 80091ec:	460e      	mov	r6, r1
 80091ee:	d9f4      	bls.n	80091da <_printf_i+0x11a>
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d10b      	bne.n	800920c <_printf_i+0x14c>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07de      	lsls	r6, r3, #31
 80091f8:	d508      	bpl.n	800920c <_printf_i+0x14c>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	6861      	ldr	r1, [r4, #4]
 80091fe:	4299      	cmp	r1, r3
 8009200:	bfde      	ittt	le
 8009202:	2330      	movle	r3, #48	; 0x30
 8009204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009208:	f105 35ff 	addle.w	r5, r5, #4294967295
 800920c:	1b52      	subs	r2, r2, r5
 800920e:	6122      	str	r2, [r4, #16]
 8009210:	f8cd a000 	str.w	sl, [sp]
 8009214:	464b      	mov	r3, r9
 8009216:	aa03      	add	r2, sp, #12
 8009218:	4621      	mov	r1, r4
 800921a:	4640      	mov	r0, r8
 800921c:	f7ff fee2 	bl	8008fe4 <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	d14c      	bne.n	80092be <_printf_i+0x1fe>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	b004      	add	sp, #16
 800922a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922e:	4835      	ldr	r0, [pc, #212]	; (8009304 <_printf_i+0x244>)
 8009230:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009234:	6829      	ldr	r1, [r5, #0]
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f851 6b04 	ldr.w	r6, [r1], #4
 800923c:	6029      	str	r1, [r5, #0]
 800923e:	061d      	lsls	r5, r3, #24
 8009240:	d514      	bpl.n	800926c <_printf_i+0x1ac>
 8009242:	07df      	lsls	r7, r3, #31
 8009244:	bf44      	itt	mi
 8009246:	f043 0320 	orrmi.w	r3, r3, #32
 800924a:	6023      	strmi	r3, [r4, #0]
 800924c:	b91e      	cbnz	r6, 8009256 <_printf_i+0x196>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	f023 0320 	bic.w	r3, r3, #32
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	2310      	movs	r3, #16
 8009258:	e7b0      	b.n	80091bc <_printf_i+0xfc>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	f043 0320 	orr.w	r3, r3, #32
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	2378      	movs	r3, #120	; 0x78
 8009264:	4828      	ldr	r0, [pc, #160]	; (8009308 <_printf_i+0x248>)
 8009266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800926a:	e7e3      	b.n	8009234 <_printf_i+0x174>
 800926c:	0659      	lsls	r1, r3, #25
 800926e:	bf48      	it	mi
 8009270:	b2b6      	uxthmi	r6, r6
 8009272:	e7e6      	b.n	8009242 <_printf_i+0x182>
 8009274:	4615      	mov	r5, r2
 8009276:	e7bb      	b.n	80091f0 <_printf_i+0x130>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	6826      	ldr	r6, [r4, #0]
 800927c:	6961      	ldr	r1, [r4, #20]
 800927e:	1d18      	adds	r0, r3, #4
 8009280:	6028      	str	r0, [r5, #0]
 8009282:	0635      	lsls	r5, r6, #24
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	d501      	bpl.n	800928c <_printf_i+0x1cc>
 8009288:	6019      	str	r1, [r3, #0]
 800928a:	e002      	b.n	8009292 <_printf_i+0x1d2>
 800928c:	0670      	lsls	r0, r6, #25
 800928e:	d5fb      	bpl.n	8009288 <_printf_i+0x1c8>
 8009290:	8019      	strh	r1, [r3, #0]
 8009292:	2300      	movs	r3, #0
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	4615      	mov	r5, r2
 8009298:	e7ba      	b.n	8009210 <_printf_i+0x150>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	1d1a      	adds	r2, r3, #4
 800929e:	602a      	str	r2, [r5, #0]
 80092a0:	681d      	ldr	r5, [r3, #0]
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	2100      	movs	r1, #0
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7f6 ff92 	bl	80001d0 <memchr>
 80092ac:	b108      	cbz	r0, 80092b2 <_printf_i+0x1f2>
 80092ae:	1b40      	subs	r0, r0, r5
 80092b0:	6060      	str	r0, [r4, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	2300      	movs	r3, #0
 80092b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092bc:	e7a8      	b.n	8009210 <_printf_i+0x150>
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	47d0      	blx	sl
 80092c8:	3001      	adds	r0, #1
 80092ca:	d0ab      	beq.n	8009224 <_printf_i+0x164>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	079b      	lsls	r3, r3, #30
 80092d0:	d413      	bmi.n	80092fa <_printf_i+0x23a>
 80092d2:	68e0      	ldr	r0, [r4, #12]
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	4298      	cmp	r0, r3
 80092d8:	bfb8      	it	lt
 80092da:	4618      	movlt	r0, r3
 80092dc:	e7a4      	b.n	8009228 <_printf_i+0x168>
 80092de:	2301      	movs	r3, #1
 80092e0:	4632      	mov	r2, r6
 80092e2:	4649      	mov	r1, r9
 80092e4:	4640      	mov	r0, r8
 80092e6:	47d0      	blx	sl
 80092e8:	3001      	adds	r0, #1
 80092ea:	d09b      	beq.n	8009224 <_printf_i+0x164>
 80092ec:	3501      	adds	r5, #1
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	9903      	ldr	r1, [sp, #12]
 80092f2:	1a5b      	subs	r3, r3, r1
 80092f4:	42ab      	cmp	r3, r5
 80092f6:	dcf2      	bgt.n	80092de <_printf_i+0x21e>
 80092f8:	e7eb      	b.n	80092d2 <_printf_i+0x212>
 80092fa:	2500      	movs	r5, #0
 80092fc:	f104 0619 	add.w	r6, r4, #25
 8009300:	e7f5      	b.n	80092ee <_printf_i+0x22e>
 8009302:	bf00      	nop
 8009304:	08009851 	.word	0x08009851
 8009308:	08009862 	.word	0x08009862

0800930c <memmove>:
 800930c:	4288      	cmp	r0, r1
 800930e:	b510      	push	{r4, lr}
 8009310:	eb01 0402 	add.w	r4, r1, r2
 8009314:	d902      	bls.n	800931c <memmove+0x10>
 8009316:	4284      	cmp	r4, r0
 8009318:	4623      	mov	r3, r4
 800931a:	d807      	bhi.n	800932c <memmove+0x20>
 800931c:	1e43      	subs	r3, r0, #1
 800931e:	42a1      	cmp	r1, r4
 8009320:	d008      	beq.n	8009334 <memmove+0x28>
 8009322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800932a:	e7f8      	b.n	800931e <memmove+0x12>
 800932c:	4402      	add	r2, r0
 800932e:	4601      	mov	r1, r0
 8009330:	428a      	cmp	r2, r1
 8009332:	d100      	bne.n	8009336 <memmove+0x2a>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800933a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800933e:	e7f7      	b.n	8009330 <memmove+0x24>

08009340 <_realloc_r>:
 8009340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009344:	4680      	mov	r8, r0
 8009346:	4614      	mov	r4, r2
 8009348:	460e      	mov	r6, r1
 800934a:	b921      	cbnz	r1, 8009356 <_realloc_r+0x16>
 800934c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009350:	4611      	mov	r1, r2
 8009352:	f7ff bb85 	b.w	8008a60 <_malloc_r>
 8009356:	b92a      	cbnz	r2, 8009364 <_realloc_r+0x24>
 8009358:	f7ff fc9c 	bl	8008c94 <_free_r>
 800935c:	4625      	mov	r5, r4
 800935e:	4628      	mov	r0, r5
 8009360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009364:	f000 f81b 	bl	800939e <_malloc_usable_size_r>
 8009368:	4284      	cmp	r4, r0
 800936a:	4607      	mov	r7, r0
 800936c:	d802      	bhi.n	8009374 <_realloc_r+0x34>
 800936e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009372:	d812      	bhi.n	800939a <_realloc_r+0x5a>
 8009374:	4621      	mov	r1, r4
 8009376:	4640      	mov	r0, r8
 8009378:	f7ff fb72 	bl	8008a60 <_malloc_r>
 800937c:	4605      	mov	r5, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	d0ed      	beq.n	800935e <_realloc_r+0x1e>
 8009382:	42bc      	cmp	r4, r7
 8009384:	4622      	mov	r2, r4
 8009386:	4631      	mov	r1, r6
 8009388:	bf28      	it	cs
 800938a:	463a      	movcs	r2, r7
 800938c:	f7ff fb32 	bl	80089f4 <memcpy>
 8009390:	4631      	mov	r1, r6
 8009392:	4640      	mov	r0, r8
 8009394:	f7ff fc7e 	bl	8008c94 <_free_r>
 8009398:	e7e1      	b.n	800935e <_realloc_r+0x1e>
 800939a:	4635      	mov	r5, r6
 800939c:	e7df      	b.n	800935e <_realloc_r+0x1e>

0800939e <_malloc_usable_size_r>:
 800939e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a2:	1f18      	subs	r0, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfbc      	itt	lt
 80093a8:	580b      	ldrlt	r3, [r1, r0]
 80093aa:	18c0      	addlt	r0, r0, r3
 80093ac:	4770      	bx	lr
	...

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
