
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d0d  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000466  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e8  00000000  00000000  00011678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5cf  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018dc  00000000  00000000  0002edbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2ab6  00000000  00000000  0003069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001bc  00000000  00000000  000d31a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b4 	.word	0x080004b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b4 	.word	0x080004b4

080001c8 <button_init>:
// On the NUCLEO board, the blue User button B1 is connected to PC13 of the MCU (Port C, Bit 13).
// When the button is pressed, bit 13 will be low.  It will be high otherwise
#define BUTTON_PIN 13
#define BUTTON_PORT GPIOC
void button_init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	// Configure BUTTON_PIN as an input
    BUTTON_PORT->MODER &= ~(0x3<<(BUTTON_PIN*2)) ;        // clear the two MODE bits for this pin to make an input
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <button_init+0x34>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <button_init+0x34>)
 80001d2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80001d6:	6013      	str	r3, [r2, #0]

    // ...with a pull-up resistor
    BUTTON_PORT->PUPDR &= ~(0x3<<(BUTTON_PIN*2)) ;		// first, clear the two PUPDR bits for this pin
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <button_init+0x34>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <button_init+0x34>)
 80001de:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80001e2:	60d3      	str	r3, [r2, #12]
    BUTTON_PORT->PUPDR |= 0x2 << (BUTTON_PIN*2);
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <button_init+0x34>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <button_init+0x34>)
 80001ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80001ee:	60d3      	str	r3, [r2, #12]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	48000800 	.word	0x48000800

08000200 <button_isPressed>:

_Bool button_isPressed(void )
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
	uint32_t bit = BUTTON_PORT->IDR & (1<<BUTTON_PIN);
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <button_isPressed+0x28>)
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800020e:	607b      	str	r3, [r7, #4]
	return (bit != 0);
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	bf14      	ite	ne
 8000216:	2301      	movne	r3, #1
 8000218:	2300      	moveq	r3, #0
 800021a:	b2db      	uxtb	r3, r3
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	48000800 	.word	0x48000800

0800022c <clock_init>:
 */


#include "stm32l476xx.h"

void clock_init(void) {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <clock_init+0x68>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <clock_init+0x68>)
 8000236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800023a:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 800023c:	bf00      	nop
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <clock_init+0x68>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <clock_init+0x68>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <clock_init+0x68>)
 8000250:	f023 0303 	bic.w	r3, r3, #3
 8000254:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <clock_init+0x68>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <clock_init+0x68>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000262:	bf00      	nop
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <clock_init+0x68>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	f003 030c 	and.w	r3, r3, #12
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f9      	beq.n	8000264 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <clock_init+0x68>)
 8000272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000274:	4a07      	ldr	r2, [pc, #28]	; (8000294 <clock_init+0x68>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <clock_init+0x68>)
 800027e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <clock_init+0x68>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000

08000298 <led_init>:
// â€¢ When the I/O is LOW, the LED is off

#define LED_PIN 5

void led_init(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	// Configure LED_PIN as an output
    GPIOA->MODER &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two MODE bits for this pin
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=   0x1<<(LED_PIN*2)  ;        // 0x1 means output
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]

    // ...and as push-pull drive
    GPIOA->OTYPER &= ~(0x1<<LED_PIN) ;
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c6:	f023 0320 	bic.w	r3, r3, #32
 80002ca:	6053      	str	r3, [r2, #4]

    // ...with medium speed
    GPIOA->OSPEEDR &= ~(0x3<<(LED_PIN*2)) ;        // first, clear the two OSPEED bits for this pin
 80002cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002da:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=   0x1<<(LED_PIN*2)  ;        // 0x1 means medium speed
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ea:	6093      	str	r3, [r2, #8]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <led_set>:

void led_set(_Bool isOn )
{
 80002f6:	b480      	push	{r7}
 80002f8:	b083      	sub	sp, #12
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4603      	mov	r3, r0
 80002fe:	71fb      	strb	r3, [r7, #7]
	if(isOn)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d008      	beq.n	8000318 <led_set+0x22>
		GPIOA->ODR &= ~(1 << LED_PIN);
 8000306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000310:	f023 0320 	bic.w	r3, r3, #32
 8000314:	6153      	str	r3, [r2, #20]
	else
		GPIOA->ODR |=  (1 << LED_PIN);
}
 8000316:	e007      	b.n	8000328 <led_set+0x32>
		GPIOA->ODR |=  (1 << LED_PIN);
 8000318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <main>:
#include "led.h"

// Your main function should be a few function calls to
// initialization code and then an endless loop that continuously runs the application code.
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
	int blinking = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
	int toggle = 1;
 800033e:	2301      	movs	r3, #1
 8000340:	60bb      	str	r3, [r7, #8]

    clock_init();
 8000342:	f7ff ff73 	bl	800022c <clock_init>
    button_init();
 8000346:	f7ff ff3f 	bl	80001c8 <button_init>
    led_init();
 800034a:	f7ff ffa5 	bl	8000298 <led_init>

    // begin main loop
    while(1)
	{
    	// Get blinking status
    	if(!button_isPressed()) {
 800034e:	f7ff ff57 	bl	8000200 <button_isPressed>
 8000352:	4603      	mov	r3, r0
 8000354:	f083 0301 	eor.w	r3, r3, #1
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d007      	beq.n	800036e <main+0x3a>
    		if (toggle) {
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d002      	beq.n	800036a <main+0x36>
    			toggle = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	e001      	b.n	800036e <main+0x3a>
    		}
    		else toggle = 1;
 800036a:	2301      	movs	r3, #1
 800036c:	60bb      	str	r3, [r7, #8]
    	}

    	// blink
    	if (toggle) {
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d00e      	beq.n	8000392 <main+0x5e>
			if (blinking) {
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d005      	beq.n	8000386 <main+0x52>
				led_set( 0 );
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ffbb 	bl	80002f6 <led_set>
				blinking = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e008      	b.n	8000398 <main+0x64>
			}
			else {
				led_set( 1 );
 8000386:	2001      	movs	r0, #1
 8000388:	f7ff ffb5 	bl	80002f6 <led_set>
				blinking = 1;
 800038c:	2301      	movs	r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e002      	b.n	8000398 <main+0x64>
			}
    	}
    	else {
    		led_set(0);
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ffaf 	bl	80002f6 <led_set>
    	}

    	// Delay
    	for (int i = 0; i < 250000; ++i) {}
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	e002      	b.n	80003a4 <main+0x70>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a02      	ldr	r2, [pc, #8]	; (80003b0 <main+0x7c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	ddf8      	ble.n	800039e <main+0x6a>
    	if(!button_isPressed()) {
 80003ac:	e7cf      	b.n	800034e <main+0x1a>
 80003ae:	bf00      	nop
 80003b0:	0003d08f 	.word	0x0003d08f

080003b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <SystemInit+0x5c>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <SystemInit+0x5c>)
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <SystemInit+0x60>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a11      	ldr	r2, [pc, #68]	; (8000414 <SystemInit+0x60>)
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <SystemInit+0x60>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <SystemInit+0x60>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <SystemInit+0x60>)
 80003e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80003e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80003e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <SystemInit+0x60>)
 80003ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <SystemInit+0x60>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <SystemInit+0x60>)
 80003f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <SystemInit+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	40021000 	.word	0x40021000

08000418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000450 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800041c:	f7ff ffca 	bl	80003b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	; (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	; (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800044a:	f7ff ff73 	bl	8000334 <main>

0800044e <LoopForever>:

LoopForever:
    b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000450:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	2000001c 	.word	0x2000001c

08000468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC1_2_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	; (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	; (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	; (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	; (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
