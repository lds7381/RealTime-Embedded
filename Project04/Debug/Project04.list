
Project04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b8  080090b8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090bc  080090bc  000190bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080090c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003774  200000c8  08009188  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000383c  08009188  0002383c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e66b  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc0  00000000  00000000  0003e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a378  00000000  00000000  00045410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce59  00000000  00000000  0006f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff84  00000000  00000000  0008c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a00  00000000  00000000  0018c5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d10 	.word	0x08008d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08008d10 	.word	0x08008d10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <check_button01>:
 *      Author: liams
 */

#include "buttons.h"

button_status check_button01() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_RESET) {
 8000578:	2102      	movs	r1, #2
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f001 fde5 	bl	800214c <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10a      	bne.n	800059e <check_button01+0x2a>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_RESET);
 8000588:	bf00      	nop
 800058a:	2102      	movs	r1, #2
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f001 fddc 	bl	800214c <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f7      	beq.n	800058a <check_button01+0x16>
		return pressed;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <check_button01+0x2c>
	}
	else {
		return not_pressed;
 800059e:	2301      	movs	r3, #1
	}
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <check_button02>:

button_status check_button02() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET) {
 80005a8:	2110      	movs	r1, #16
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f001 fdcd 	bl	800214c <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10a      	bne.n	80005ce <check_button02+0x2a>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET);
 80005b8:	bf00      	nop
 80005ba:	2110      	movs	r1, #16
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f001 fdc4 	bl	800214c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f7      	beq.n	80005ba <check_button02+0x16>
		return pressed;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <check_button02+0x2c>
	}
	else {
		return not_pressed;
 80005ce:	2301      	movs	r3, #1
	}
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <check_button03>:

button_status check_button03() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_RESET) {
 80005d8:	2101      	movs	r1, #1
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <check_button03+0x2c>)
 80005dc:	f001 fdb6 	bl	800214c <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d109      	bne.n	80005fa <check_button03+0x26>
		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==GPIO_PIN_RESET);
 80005e6:	bf00      	nop
 80005e8:	2101      	movs	r1, #1
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <check_button03+0x2c>)
 80005ec:	f001 fdae 	bl	800214c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <check_button03+0x14>
		return pressed;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e000      	b.n	80005fc <check_button03+0x28>
	}
	else {
		return not_pressed;
 80005fa:	2301      	movs	r3, #1
	}
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400

08000604 <gamemaster_task>:

const uint8_t seven_seg_nums[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80 ,0x90};
const uint8_t seven_seg_display[] = {0xf1, 0xf2, 0xf4, 0xf8};
uint8_t segments[] = {0, 0, 0, 0};

void gamemaster_task(void *argument) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b0a0      	sub	sp, #128	; 0x80
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	// Get the servo profile from the argument
	struct gamemaster_t *gamemaster = (gamemaster_t *)argument;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	67bb      	str	r3, [r7, #120]	; 0x78
	servo_profile_t *servo01 = gamemaster->servo01;
 8000610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	677b      	str	r3, [r7, #116]	; 0x74
	servo_profile_t *servo02 = gamemaster->servo02;
 8000616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t time_added = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t new_time = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t restarting = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	char info[100];

	while (1) {
		seg_write_time(gamemaster);
 800062e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000630:	f000 f90c 	bl	800084c <seg_write_time>
		if (servo01->status == in_position && servo01->rounds < MAX_ROUNDS) {
 8000634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d135      	bne.n	80006a8 <gamemaster_task+0xa4>
 800063c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	2b04      	cmp	r3, #4
 8000642:	d831      	bhi.n	80006a8 <gamemaster_task+0xa4>
			// Get a new start time and reset vars
			if (new_time) { gamemaster->start_time = TIM5->CNT; new_time = 0; time_added = 0; }
 8000644:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <gamemaster_task+0x5c>
 800064c:	4b41      	ldr	r3, [pc, #260]	; (8000754 <gamemaster_task+0x150>)
 800064e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	2300      	movs	r3, #0
 8000656:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800065a:	2300      	movs	r3, #0
 800065c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			// in position
			if (servo02->status == in_position && (servo01->position == servo02->position)) {
 8000660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d173      	bne.n	8000750 <gamemaster_task+0x14c>
 8000668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d16d      	bne.n	8000750 <gamemaster_task+0x14c>
				// get the end time
				if (!time_added) {
 8000674:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000678:	2b00      	cmp	r3, #0
 800067a:	d169      	bne.n	8000750 <gamemaster_task+0x14c>
					gamemaster->end_time = TIM5->CNT;
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <gamemaster_task+0x150>)
 800067e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000682:	611a      	str	r2, [r3, #16]
					gamemaster->total_time += (gamemaster->end_time - gamemaster->start_time) / 1000;
 8000684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800068a:	6919      	ldr	r1, [r3, #16]
 800068c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	1acb      	subs	r3, r1, r3
 8000692:	4931      	ldr	r1, [pc, #196]	; (8000758 <gamemaster_task+0x154>)
 8000694:	fba1 1303 	umull	r1, r3, r1, r3
 8000698:	099b      	lsrs	r3, r3, #6
 800069a:	441a      	add	r2, r3
 800069c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800069e:	609a      	str	r2, [r3, #8]
					time_added = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (servo02->status == in_position && (servo01->position == servo02->position)) {
 80006a6:	e053      	b.n	8000750 <gamemaster_task+0x14c>
				}
			}
		}
		// if servo is moving we will need a new time
		else if (servo01->status == moving) {
 80006a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006aa:	789b      	ldrb	r3, [r3, #2]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d103      	bne.n	80006b8 <gamemaster_task+0xb4>
			new_time = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80006b6:	e7ba      	b.n	800062e <gamemaster_task+0x2a>
		}
		// Game is over
		else if (servo01->rounds >= MAX_ROUNDS) {
 80006b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d9b6      	bls.n	800062e <gamemaster_task+0x2a>
			// Wait for the game to end when the servo gets to the final location
			if (servo02->status == in_position && (servo01->position == servo02->position)) {
 80006c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006c2:	789b      	ldrb	r3, [r3, #2]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1b2      	bne.n	800062e <gamemaster_task+0x2a>
 80006c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d1ac      	bne.n	800062e <gamemaster_task+0x2a>
				gamemaster->end_time = TIM5->CNT;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <gamemaster_task+0x150>)
 80006d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006da:	611a      	str	r2, [r3, #16]
				gamemaster->total_time += (gamemaster->end_time - gamemaster->start_time) / 1000;
 80006dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006e2:	6919      	ldr	r1, [r3, #16]
 80006e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	1acb      	subs	r3, r1, r3
 80006ea:	491b      	ldr	r1, [pc, #108]	; (8000758 <gamemaster_task+0x154>)
 80006ec:	fba1 1303 	umull	r1, r3, r1, r3
 80006f0:	099b      	lsrs	r3, r3, #6
 80006f2:	441a      	add	r2, r3
 80006f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006f6:	609a      	str	r2, [r3, #8]
				print(USART2, "GAME IS COMPLETE\r\n");
 80006f8:	4918      	ldr	r1, [pc, #96]	; (800075c <gamemaster_task+0x158>)
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <gamemaster_task+0x15c>)
 80006fc:	f001 fa1b 	bl	8001b36 <print>
				sprintf(info, "Total Score: %d\r\n", (int)gamemaster->total_time);
 8000700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	461a      	mov	r2, r3
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4916      	ldr	r1, [pc, #88]	; (8000764 <gamemaster_task+0x160>)
 800070c:	4618      	mov	r0, r3
 800070e:	f007 ff45 	bl	800859c <siprintf>
				print(USART2, info);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <gamemaster_task+0x15c>)
 800071a:	f001 fa0c 	bl	8001b36 <print>
				restarting = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
				while(!restarting) {
 8000724:	e00f      	b.n	8000746 <gamemaster_task+0x142>
					seg_write_time(gamemaster);
 8000726:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000728:	f000 f890 	bl	800084c <seg_write_time>
					if (check_button02() == pressed) {
 800072c:	f7ff ff3a 	bl	80005a4 <check_button02>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d107      	bne.n	8000746 <gamemaster_task+0x142>
						reset(servo01, servo02, gamemaster);
 8000736:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000738:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800073a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800073c:	f000 f814 	bl	8000768 <reset>
						restarting = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
				while(!restarting) {
 8000746:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0eb      	beq.n	8000726 <gamemaster_task+0x122>
 800074e:	e76e      	b.n	800062e <gamemaster_task+0x2a>
			if (servo02->status == in_position && (servo01->position == servo02->position)) {
 8000750:	bf00      	nop
		seg_write_time(gamemaster);
 8000752:	e76c      	b.n	800062e <gamemaster_task+0x2a>
 8000754:	40000c00 	.word	0x40000c00
 8000758:	10624dd3 	.word	0x10624dd3
 800075c:	08008d28 	.word	0x08008d28
 8000760:	40004400 	.word	0x40004400
 8000764:	08008d3c 	.word	0x08008d3c

08000768 <reset>:
			}
		}
	}
}

void reset(servo_profile_t *servo01, servo_profile_t *servo02, gamemaster_t *gamemaster){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	TIM2->CCR1 = position0;
 8000774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <reset+0xc0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6353      	str	r3, [r2, #52]	; 0x34
	servo01->last_position = 0;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2200      	movs	r2, #0
 8000782:	705a      	strb	r2, [r3, #1]
	servo01->move_wait = 0;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
	servo01->next_wait = 0;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
	servo01->position = 0;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	servo01->start_time = 0;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
	servo01->status = in_position;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2201      	movs	r2, #1
 80007a0:	709a      	strb	r2, [r3, #2]
	servo01->rounds = 0;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
	TIM3->CCR3 = position0;
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <reset+0xc4>)
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <reset+0xc0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	63d3      	str	r3, [r2, #60]	; 0x3c
	servo02->last_position = 0;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2200      	movs	r2, #0
 80007b4:	705a      	strb	r2, [r3, #1]
	servo02->move_wait = 0;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	servo02->next_wait = 0;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	servo02->position = 0;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	servo02->start_time = 0;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
	servo02->status = in_position;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2201      	movs	r2, #1
 80007d2:	709a      	strb	r2, [r3, #2]
	servo02->rounds = 0;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
	gamemaster->total_time = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	print(USART2, "CATCH ME IF YOU CAN!!!\r\n");
 80007e0:	4913      	ldr	r1, [pc, #76]	; (8000830 <reset+0xc8>)
 80007e2:	4814      	ldr	r0, [pc, #80]	; (8000834 <reset+0xcc>)
 80007e4:	f001 f9a7 	bl	8001b36 <print>
	// FIX COMP WARNINGS
	position0=position0;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <reset+0xc0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <reset+0xc0>)
 80007ee:	6013      	str	r3, [r2, #0]
	position1=position1;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <reset+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a10      	ldr	r2, [pc, #64]	; (8000838 <reset+0xd0>)
 80007f6:	6013      	str	r3, [r2, #0]
	position2=position2;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <reset+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <reset+0xd4>)
 80007fe:	6013      	str	r3, [r2, #0]
	position3=position3;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <reset+0xd8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <reset+0xd8>)
 8000806:	6013      	str	r3, [r2, #0]
	position4=position4;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <reset+0xdc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <reset+0xdc>)
 800080e:	6013      	str	r3, [r2, #0]
	position5=position5;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <reset+0xe0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <reset+0xe0>)
 8000816:	6013      	str	r3, [r2, #0]
	osDelay(2000);
 8000818:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800081c:	f005 f8ce 	bl	80059bc <osDelay>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000e4 	.word	0x200000e4
 800082c:	40000400 	.word	0x40000400
 8000830:	08008d50 	.word	0x08008d50
 8000834:	40004400 	.word	0x40004400
 8000838:	200000e8 	.word	0x200000e8
 800083c:	200000ec 	.word	0x200000ec
 8000840:	200000f0 	.word	0x200000f0
 8000844:	200000f4 	.word	0x200000f4
 8000848:	200000f8 	.word	0x200000f8

0800084c <seg_write_time>:

void seg_write_time(gamemaster_t *gamemaster) {
 800084c:	b5b0      	push	{r4, r5, r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]
	uint16_t time = gamemaster->total_time;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	817b      	strh	r3, [r7, #10]
	segments[0] = seven_seg_nums[time / 1000];
 800085a:	897b      	ldrh	r3, [r7, #10]
 800085c:	4a42      	ldr	r2, [pc, #264]	; (8000968 <seg_write_time+0x11c>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	099b      	lsrs	r3, r3, #6
 8000864:	b29b      	uxth	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <seg_write_time+0x120>)
 800086a:	5c9a      	ldrb	r2, [r3, r2]
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <seg_write_time+0x124>)
 800086e:	701a      	strb	r2, [r3, #0]
	segments[1] = seven_seg_nums[(time / 100) % 10];
 8000870:	897b      	ldrh	r3, [r7, #10]
 8000872:	4a40      	ldr	r2, [pc, #256]	; (8000974 <seg_write_time+0x128>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	095b      	lsrs	r3, r3, #5
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <seg_write_time+0x12c>)
 800087e:	fba3 1302 	umull	r1, r3, r3, r2
 8000882:	08d9      	lsrs	r1, r3, #3
 8000884:	460b      	mov	r3, r1
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	b29b      	uxth	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <seg_write_time+0x120>)
 8000894:	5c9a      	ldrb	r2, [r3, r2]
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <seg_write_time+0x124>)
 8000898:	705a      	strb	r2, [r3, #1]
	segments[2] = seven_seg_nums[(time / 10) % 10];
 800089a:	897b      	ldrh	r3, [r7, #10]
 800089c:	4a36      	ldr	r2, [pc, #216]	; (8000978 <seg_write_time+0x12c>)
 800089e:	fba2 2303 	umull	r2, r3, r2, r3
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <seg_write_time+0x12c>)
 80008a8:	fba3 1302 	umull	r1, r3, r3, r2
 80008ac:	08d9      	lsrs	r1, r3, #3
 80008ae:	460b      	mov	r3, r1
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <seg_write_time+0x120>)
 80008be:	5c9a      	ldrb	r2, [r3, r2]
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <seg_write_time+0x124>)
 80008c2:	709a      	strb	r2, [r3, #2]
	segments[3] = seven_seg_nums[time % 10];
 80008c4:	897a      	ldrh	r2, [r7, #10]
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <seg_write_time+0x12c>)
 80008c8:	fba3 1302 	umull	r1, r3, r3, r2
 80008cc:	08d9      	lsrs	r1, r3, #3
 80008ce:	460b      	mov	r3, r1
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <seg_write_time+0x120>)
 80008de:	5c9a      	ldrb	r2, [r3, r2]
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <seg_write_time+0x124>)
 80008e2:	70da      	strb	r2, [r3, #3]

	for (int i = 0; i < 4; i ++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e035      	b.n	8000956 <seg_write_time+0x10a>
		HAL_GPIO_WritePin(gamemaster->D4_SEG7_Latch_Port, gamemaster->D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6958      	ldr	r0, [r3, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	8b1b      	ldrh	r3, [r3, #24]
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f001 fc41 	bl	800217c <HAL_GPIO_WritePin>
		shiftOut(gamemaster->D8_SEG7_Data_Port, gamemaster->D8_SEG7_Data_Pin, gamemaster->D7_SEG7_Clock_Port, gamemaster->D7_SEG7_Clock_Pin, segments[i]);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	69d8      	ldr	r0, [r3, #28]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	8c19      	ldrh	r1, [r3, #32]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 800090a:	4d19      	ldr	r5, [pc, #100]	; (8000970 <seg_write_time+0x124>)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	442b      	add	r3, r5
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4623      	mov	r3, r4
 8000916:	f000 f86d 	bl	80009f4 <shiftOut>
		shiftOut(gamemaster->D8_SEG7_Data_Port, gamemaster->D8_SEG7_Data_Pin, gamemaster->D7_SEG7_Clock_Port, gamemaster->D7_SEG7_Clock_Pin, seven_seg_display[i]);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69d8      	ldr	r0, [r3, #28]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	8c19      	ldrh	r1, [r3, #32]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
 800092a:	4d14      	ldr	r5, [pc, #80]	; (800097c <seg_write_time+0x130>)
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	442b      	add	r3, r5
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4623      	mov	r3, r4
 8000936:	f000 f85d 	bl	80009f4 <shiftOut>
		HAL_GPIO_WritePin(gamemaster->D4_SEG7_Latch_Port, gamemaster->D4_SEG7_Latch_Pin, GPIO_PIN_SET);	// latch data
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6958      	ldr	r0, [r3, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8b1b      	ldrh	r3, [r3, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	f001 fc19 	bl	800217c <HAL_GPIO_WritePin>
		osDelay(5);
 800094a:	2005      	movs	r0, #5
 800094c:	f005 f836 	bl	80059bc <osDelay>
	for (int i = 0; i < 4; i ++) {
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b03      	cmp	r3, #3
 800095a:	ddc6      	ble.n	80008ea <seg_write_time+0x9e>
	}

}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bdb0      	pop	{r4, r5, r7, pc}
 8000966:	bf00      	nop
 8000968:	10624dd3 	.word	0x10624dd3
 800096c:	08008f34 	.word	0x08008f34
 8000970:	200000fc 	.word	0x200000fc
 8000974:	51eb851f 	.word	0x51eb851f
 8000978:	cccccccd 	.word	0xcccccccd
 800097c:	08008f40 	.word	0x08008f40

08000980 <clear_seg7>:

void clear_seg7(gamemaster_t *gamemaster) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b087      	sub	sp, #28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
	// Clears the 7 Seg Display (ALL ZEROS)
	for (int i = 0; i < 4; i ++){
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e02a      	b.n	80009e4 <clear_seg7+0x64>
		HAL_GPIO_WritePin(gamemaster->D4_SEG7_Latch_Port, gamemaster->D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6958      	ldr	r0, [r3, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	8b1b      	ldrh	r3, [r3, #24]
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	f001 fbef 	bl	800217c <HAL_GPIO_WritePin>
		shiftOut(gamemaster->D8_SEG7_Data_Port, gamemaster->D8_SEG7_Data_Pin, gamemaster->D7_SEG7_Clock_Port, gamemaster->D7_SEG7_Clock_Pin, seven_seg_nums[0]);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69d8      	ldr	r0, [r3, #28]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	8c19      	ldrh	r1, [r3, #32]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009ae:	24c0      	movs	r4, #192	; 0xc0
 80009b0:	9400      	str	r4, [sp, #0]
 80009b2:	f000 f81f 	bl	80009f4 <shiftOut>
		shiftOut(gamemaster->D8_SEG7_Data_Port, gamemaster->D8_SEG7_Data_Pin, gamemaster->D7_SEG7_Clock_Port, gamemaster->D7_SEG7_Clock_Pin, 0xff);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69d8      	ldr	r0, [r3, #28]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	8c19      	ldrh	r1, [r3, #32]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009c6:	24ff      	movs	r4, #255	; 0xff
 80009c8:	9400      	str	r4, [sp, #0]
 80009ca:	f000 f813 	bl	80009f4 <shiftOut>
		HAL_GPIO_WritePin(gamemaster->D4_SEG7_Latch_Port, gamemaster->D4_SEG7_Latch_Pin, GPIO_PIN_SET);	// latch data
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6958      	ldr	r0, [r3, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	8b1b      	ldrh	r3, [r3, #24]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	f001 fbcf 	bl	800217c <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i ++){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	ddd1      	ble.n	800098e <clear_seg7+0xe>
	}
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}

080009f4 <shiftOut>:

void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	461a      	mov	r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	817b      	strh	r3, [r7, #10]
 8000a04:	4613      	mov	r3, r2
 8000a06:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e01d      	b.n	8000a4a <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000a0e:	893b      	ldrh	r3, [r7, #8]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f001 fbb1 	bl	800217c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000a1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	897b      	ldrh	r3, [r7, #10]
 8000a30:	4619      	mov	r1, r3
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f001 fba2 	bl	800217c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000a38:	893b      	ldrh	r3, [r7, #8]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f001 fb9c 	bl	800217c <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	105b      	asrs	r3, r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1de      	bne.n	8000a0e <shiftOut+0x1a>
	}
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a60:	f001 f8a8 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a64:	f000 f878 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a68:	f000 fa5a 	bl	8000f20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a6c:	f000 fa28 	bl	8000ec0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a70:	f000 f8d8 	bl	8000c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a74:	f000 f954 	bl	8000d20 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a78:	f000 f9d0 	bl	8000e1c <MX_TIM5_Init>
  MX_RNG_Init();
 8000a7c:	f000 f8be 	bl	8000bfc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a80:	f004 fec0 	bl	8005804 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <main+0xa8>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <main+0xac>)
 8000a8a:	f004 ff05 	bl	8005898 <osThreadNew>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <main+0xb0>)
 8000a92:	6013      	str	r3, [r2, #0]

  /* creation of lead_servo */
  lead_servoHandle = osThreadNew(lead_servo_task, (void*) &servo01, &lead_servo_attributes);
 8000a94:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <main+0xb4>)
 8000a96:	491f      	ldr	r1, [pc, #124]	; (8000b14 <main+0xb8>)
 8000a98:	481f      	ldr	r0, [pc, #124]	; (8000b18 <main+0xbc>)
 8000a9a:	f004 fefd 	bl	8005898 <osThreadNew>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <main+0xc0>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* creation of user_servo */
  user_servoHandle = osThreadNew(user_servo_task, (void*) &servo02, &user_servo_attributes);
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <main+0xc4>)
 8000aa6:	491f      	ldr	r1, [pc, #124]	; (8000b24 <main+0xc8>)
 8000aa8:	481f      	ldr	r0, [pc, #124]	; (8000b28 <main+0xcc>)
 8000aaa:	f004 fef5 	bl	8005898 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <main+0xd0>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* creation of gamemaster */
  gamemasterHandle = osThreadNew(gamemaster_task, (void*) &gamemaster, &gamemaster_attributes);
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <main+0xd4>)
 8000ab6:	491f      	ldr	r1, [pc, #124]	; (8000b34 <main+0xd8>)
 8000ab8:	481f      	ldr	r0, [pc, #124]	; (8000b38 <main+0xdc>)
 8000aba:	f004 feed 	bl	8005898 <osThreadNew>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <main+0xe0>)
 8000ac2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  // USED TO FIX WARNINGS LOL
  position0=position0;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <main+0xe4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <main+0xe4>)
 8000aca:	6013      	str	r3, [r2, #0]
  position1=position1;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <main+0xe8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <main+0xe8>)
 8000ad2:	6013      	str	r3, [r2, #0]
  position2=position2;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <main+0xec>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <main+0xec>)
 8000ada:	6013      	str	r3, [r2, #0]
  position3=position3;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <main+0xf0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <main+0xf0>)
 8000ae2:	6013      	str	r3, [r2, #0]
  position4=position4;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <main+0xf4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <main+0xf4>)
 8000aea:	6013      	str	r3, [r2, #0]
  position5=position5;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <main+0xf8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <main+0xf8>)
 8000af2:	6013      	str	r3, [r2, #0]
  /* add events, ... */
  calibrate_servo();
 8000af4:	f000 fc40 	bl	8001378 <calibrate_servo>
  // Clear the seven segment display
  clear_seg7(&gamemaster);
 8000af8:	480e      	ldr	r0, [pc, #56]	; (8000b34 <main+0xd8>)
 8000afa:	f7ff ff41 	bl	8000980 <clear_seg7>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000afe:	f004 fea5 	bl	800584c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <main+0xa6>
 8000b04:	08008f44 	.word	0x08008f44
 8000b08:	0800106d 	.word	0x0800106d
 8000b0c:	20000290 	.word	0x20000290
 8000b10:	08008f68 	.word	0x08008f68
 8000b14:	20000000 	.word	0x20000000
 8000b18:	080010f9 	.word	0x080010f9
 8000b1c:	20000294 	.word	0x20000294
 8000b20:	08008f8c 	.word	0x08008f8c
 8000b24:	20000014 	.word	0x20000014
 8000b28:	08001285 	.word	0x08001285
 8000b2c:	20000298 	.word	0x20000298
 8000b30:	08008fb0 	.word	0x08008fb0
 8000b34:	20000028 	.word	0x20000028
 8000b38:	08000605 	.word	0x08000605
 8000b3c:	2000029c 	.word	0x2000029c
 8000b40:	20000100 	.word	0x20000100
 8000b44:	20000104 	.word	0x20000104
 8000b48:	20000108 	.word	0x20000108
 8000b4c:	2000010c 	.word	0x2000010c
 8000b50:	20000110 	.word	0x20000110
 8000b54:	20000114 	.word	0x20000114

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b096      	sub	sp, #88	; 0x58
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2244      	movs	r2, #68	; 0x44
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f007 fc02 	bl	8008370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b7e:	f001 fb23 	bl	80021c8 <HAL_PWREx_ControlVoltageScaling>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b88:	f000 fa8a 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2310      	movs	r3, #16
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000baa:	2307      	movs	r3, #7
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fb5a 	bl	8002274 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bc6:	f000 fa6b 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	2104      	movs	r1, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 ff22 	bl	8002a2c <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bee:	f000 fa57 	bl	80010a0 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3758      	adds	r7, #88	; 0x58
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_RNG_Init+0x20>)
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <MX_RNG_Init+0x24>)
 8000c04:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_RNG_Init+0x20>)
 8000c08:	f002 fe22 	bl	8003850 <HAL_RNG_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c12:	f000 fa45 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000118 	.word	0x20000118
 8000c20:	50060800 	.word	0x50060800

08000c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	; 0x38
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c60:	224f      	movs	r2, #79	; 0x4f
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c6c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7e:	4827      	ldr	r0, [pc, #156]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c80:	f002 fe3d 	bl	80038fe <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 fa09 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4820      	ldr	r0, [pc, #128]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000c9c:	f003 faf0 	bl	8004280 <HAL_TIM_ConfigClockSource>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ca6:	f000 f9fb 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000cac:	f002 ff56 	bl	8003b5c <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cb6:	f000 f9f3 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000cca:	f003 fffb 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cd4:	f000 f9e4 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd8:	2360      	movs	r3, #96	; 0x60
 8000cda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000cf0:	f003 f9b2 	bl	8004058 <HAL_TIM_PWM_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cfa:	f000 f9d1 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000d00:	f002 fe54 	bl	80039ac <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000d08:	f002 ff8a 	bl	8003c20 <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <MX_TIM2_Init+0xf8>)
 8000d0e:	f000 fd47 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8000d12:	bf00      	nop
 8000d14:	3738      	adds	r7, #56	; 0x38
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000128 	.word	0x20000128

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <MX_TIM3_Init+0xf8>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d5a:	224f      	movs	r2, #79	; 0x4f
 8000d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d66:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d78:	4826      	ldr	r0, [pc, #152]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d7a:	f002 fdc0 	bl	80038fe <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d84:	f000 f98c 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	4619      	mov	r1, r3
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000d96:	f003 fa73 	bl	8004280 <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000da0:	f000 f97e 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000da4:	481b      	ldr	r0, [pc, #108]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000da6:	f002 fed9 	bl	8003b5c <HAL_TIM_PWM_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000db0:	f000 f976 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000dc4:	f003 ff7e 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dce:	f000 f967 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	; 0x60
 8000dd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	2208      	movs	r2, #8
 8000de6:	4619      	mov	r1, r3
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000dea:	f003 f935 	bl	8004058 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000df4:	f000 f954 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000dfa:	f002 fdd7 	bl	80039ac <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000e02:	f002 ff0d 	bl	8003c20 <HAL_TIM_IC_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM3_Init+0xf4>)
 8000e08:	f000 fcca 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000174 	.word	0x20000174
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <MX_TIM5_Init+0xa0>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 79;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e42:	224f      	movs	r2, #79	; 0x4f
 8000e44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e60:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e62:	f002 fd4c 	bl	80038fe <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f000 f918 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e7e:	f003 f9ff 	bl	8004280 <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f90a 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000e9a:	f003 ff13 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f8fc 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM5_Init+0x9c>)
 8000eaa:	f002 fd7f 	bl	80039ac <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001c0 	.word	0x200001c0
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_USART2_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART2_UART_Init+0x58>)
 8000f04:	f003 ff84 	bl	8004e10 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f8c7 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000020c 	.word	0x2000020c
 8000f1c:	40004400 	.word	0x40004400

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b44      	ldr	r3, [pc, #272]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a43      	ldr	r2, [pc, #268]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a3d      	ldr	r2, [pc, #244]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a37      	ldr	r2, [pc, #220]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <MX_GPIO_Init+0x140>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f001 f8ec 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <MX_GPIO_Init+0x144>)
 8000faa:	f001 f8e7 	bl	800217c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4828      	ldr	r0, [pc, #160]	; (8001068 <MX_GPIO_Init+0x148>)
 8000fc6:	f000 ff17 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_B1_Pin SHLD_B2_Pin */
  GPIO_InitStruct.Pin = SHLD_B1_Pin|SHLD_B2_Pin;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe0:	f000 ff0a 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_B3_Pin */
  GPIO_InitStruct.Pin = SHLD_B3_Pin;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHLD_B3_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481b      	ldr	r0, [pc, #108]	; (8001064 <MX_GPIO_Init+0x144>)
 8000ff8:	f000 fefe 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D7_SEG7_Clock_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D7_SEG7_Clock_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f000 feee 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 800101c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fede 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 800103c:	2320      	movs	r3, #32
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_GPIO_Init+0x144>)
 8001054:	f000 fed0 	bl	8001df8 <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800

0800106c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f004 fca1 	bl	80059bc <osDelay>
 800107a:	e7fb      	b.n	8001074 <StartDefaultTask+0x8>

0800107c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108e:	f000 fdb1 	bl	8001bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40001000 	.word	0x40001000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <get_rand_num>:
 */

#include "random.h"

// Gets a random number between a given range with the random 32 bit number gotten
float get_rand_num(uint32_t rand32, float min, float max) {
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80010b8:	edc7 0a01 	vstr	s1, [r7, #4]
	return (float) rand32 / 0xffffffff * (max - min) + min;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80010f4 <get_rand_num+0x48>
 80010ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80010d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	4f800000 	.word	0x4f800000

080010f8 <lead_servo_task>:
 *      Author: Liam Sullivan
 */

#include "servo.h"

void lead_servo_task(void *argument) {
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	// Get the servo profile from the argument
	struct servo_profile_t *servo = (servo_profile_t *)argument;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]

	// Get start time
	servo->start_time = TIM5->CNT;
 8001104:	4b5a      	ldr	r3, [pc, #360]	; (8001270 <lead_servo_task+0x178>)
 8001106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
	// Generate next random move time
	servo->next_wait = get_rand_num(RNG->DR, ONE_SECONDS, FOUR_SECONDS);
 800110c:	4b59      	ldr	r3, [pc, #356]	; (8001274 <lead_servo_task+0x17c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	eddf 0a59 	vldr	s1, [pc, #356]	; 8001278 <lead_servo_task+0x180>
 8001114:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800127c <lead_servo_task+0x184>
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffc7 	bl	80010ac <get_rand_num>
 800111e:	eef0 7a40 	vmov.f32	s15, s0
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	ee17 2a90 	vmov	r2, s15
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	60da      	str	r2, [r3, #12]
	servo->move_wait = get_move_wait(servo->last_position, servo->position);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	785a      	ldrb	r2, [r3, #1]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f000 fa57 	bl	80015ec <get_move_wait>
 800113e:	4602      	mov	r2, r0
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]
	while (1) {
		// Wait for the servo to be in position
		if (TIM5->CNT >= servo->start_time + servo->move_wait && servo->rounds < MAX_ROUNDS) {
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <lead_servo_task+0x178>)
 8001146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6859      	ldr	r1, [r3, #4]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	440b      	add	r3, r1
 8001152:	429a      	cmp	r2, r3
 8001154:	d377      	bcc.n	8001246 <lead_servo_task+0x14e>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d873      	bhi.n	8001246 <lead_servo_task+0x14e>
			// Check movement time (is it time to move to new position)
			if (TIM5->CNT >= (servo->start_time + servo->next_wait)) {
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <lead_servo_task+0x178>)
 8001160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6859      	ldr	r1, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	440b      	add	r3, r1
 800116c:	429a      	cmp	r2, r3
 800116e:	d362      	bcc.n	8001236 <lead_servo_task+0x13e>
				// Save last position
				servo->last_position = servo->position;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	705a      	strb	r2, [r3, #1]
				// Generate new position
				servo->position = (uint8_t)get_rand_num(RNG->DR, MIN_POSITION, MAX_POSITION);
 8001178:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <lead_servo_task+0x17c>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001180:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8001280 <lead_servo_task+0x188>
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff91 	bl	80010ac <get_rand_num>
 800118a:	eef0 7a40 	vmov.f32	s15, s0
 800118e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001192:	edc7 7a00 	vstr	s15, [r7]
 8001196:	783b      	ldrb	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	701a      	strb	r2, [r3, #0]
				// Keep getting new position if the new one was the same as the last
				while(servo->position == servo->last_position) { servo->position = (uint8_t)get_rand_num(RNG->DR, MIN_POSITION, MAX_POSITION); }
 800119e:	e012      	b.n	80011c6 <lead_servo_task+0xce>
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <lead_servo_task+0x17c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80011a8:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001280 <lead_servo_task+0x188>
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff7d 	bl	80010ac <get_rand_num>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ba:	edc7 7a00 	vstr	s15, [r7]
 80011be:	783b      	ldrb	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d0e6      	beq.n	80011a0 <lead_servo_task+0xa8>
				// Generate next random move time
				TIM2->CCR1 = get_duty_cycle_from_position(servo->position);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f9c8 	bl	8001570 <get_duty_cycle_from_position>
 80011e0:	4603      	mov	r3, r0
 80011e2:	6363      	str	r3, [r4, #52]	; 0x34
				// Get the start time
				servo->start_time = TIM5->CNT;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <lead_servo_task+0x178>)
 80011e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	605a      	str	r2, [r3, #4]
				// move servo to position
				servo->move_wait = get_move_wait(servo->last_position, servo->position);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	785a      	ldrb	r2, [r3, #1]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f000 f9f8 	bl	80015ec <get_move_wait>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	609a      	str	r2, [r3, #8]
				servo->next_wait = get_rand_num(RNG->DR, ONE_SECONDS, FOUR_SECONDS);
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <lead_servo_task+0x17c>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001278 <lead_servo_task+0x180>
 800120a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800127c <lead_servo_task+0x184>
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff4c 	bl	80010ac <get_rand_num>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
 8001218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800121c:	ee17 2a90 	vmov	r2, s15
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	60da      	str	r2, [r3, #12]
				// Change the status to moving
				servo->status = moving;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	709a      	strb	r2, [r3, #2]
				// Increase the amount of round that have happened
				servo->rounds++;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	611a      	str	r2, [r3, #16]
			if (TIM5->CNT >= (servo->start_time + servo->next_wait)) {
 8001234:	e01a      	b.n	800126c <lead_servo_task+0x174>
			}
			// Change the moving status to in position
			else if (servo->status == moving) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <lead_servo_task+0x174>
				servo->status = in_position;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	709a      	strb	r2, [r3, #2]
			if (TIM5->CNT >= (servo->start_time + servo->next_wait)) {
 8001244:	e012      	b.n	800126c <lead_servo_task+0x174>
			}
		}
		else if (servo->rounds >= MAX_ROUNDS) {
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b04      	cmp	r3, #4
 800124c:	f67f af7a 	bls.w	8001144 <lead_servo_task+0x4c>
			if (TIM5->CNT >= (servo->start_time + servo->move_wait)) {
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <lead_servo_task+0x178>)
 8001252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	440b      	add	r3, r1
 800125e:	429a      	cmp	r2, r3
 8001260:	f4ff af70 	bcc.w	8001144 <lead_servo_task+0x4c>
				servo->status = in_position;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2201      	movs	r2, #1
 8001268:	709a      	strb	r2, [r3, #2]
 800126a:	e76b      	b.n	8001144 <lead_servo_task+0x4c>
			if (TIM5->CNT >= (servo->start_time + servo->next_wait)) {
 800126c:	bf00      	nop
		if (TIM5->CNT >= servo->start_time + servo->move_wait && servo->rounds < MAX_ROUNDS) {
 800126e:	e769      	b.n	8001144 <lead_servo_task+0x4c>
 8001270:	40000c00 	.word	0x40000c00
 8001274:	50060800 	.word	0x50060800
 8001278:	4a742400 	.word	0x4a742400
 800127c:	49742400 	.word	0x49742400
 8001280:	00000000 	.word	0x00000000

08001284 <user_servo_task>:
			}
		}
	}
}

void user_servo_task(void *argument) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	button_status b1;
	button_status b3;

	// Get the servo profile from the argument
	struct servo_profile_t *servo = (servo_profile_t *)argument;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60fb      	str	r3, [r7, #12]

	while (1) {
		// Left button press if the servo is in position
		if (TIM5->CNT >= (servo->start_time + servo->move_wait)) {
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <user_servo_task+0xec>)
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	440b      	add	r3, r1
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3f6      	bcc.n	8001290 <user_servo_task+0xc>
			// Set to in position
			if (servo->status == moving) { servo->status = in_position; }
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <user_servo_task+0x2c>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2201      	movs	r2, #1
 80012ae:	709a      	strb	r2, [r3, #2]
			// Check Button 1 PRess
			b1 = check_button01();
 80012b0:	f7ff f960 	bl	8000574 <check_button01>
 80012b4:	4603      	mov	r3, r0
 80012b6:	72fb      	strb	r3, [r7, #11]
			if (b1 == pressed) {
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d127      	bne.n	800130e <user_servo_task+0x8a>
				servo->last_position = servo->position;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	781a      	ldrb	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	705a      	strb	r2, [r3, #1]
				if (servo->position < MAX_POSITION) {
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d805      	bhi.n	80012da <user_servo_task+0x56>
					servo->position++;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]
				}
				servo->start_time = TIM5->CNT;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <user_servo_task+0xec>)
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	605a      	str	r2, [r3, #4]
				TIM3->CCR3 = get_duty_cycle_from_position(servo->position);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4c23      	ldr	r4, [pc, #140]	; (8001374 <user_servo_task+0xf0>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f941 	bl	8001570 <get_duty_cycle_from_position>
 80012ee:	4603      	mov	r3, r0
 80012f0:	63e3      	str	r3, [r4, #60]	; 0x3c
				servo->move_wait = get_move_wait(servo->last_position, servo->position);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	785a      	ldrb	r2, [r3, #1]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f000 f975 	bl	80015ec <get_move_wait>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]
				servo->status = moving;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	709a      	strb	r2, [r3, #2]
			}
			// Check Button 3 Press
			b3 = check_button03();
 800130e:	f7ff f961 	bl	80005d4 <check_button03>
 8001312:	4603      	mov	r3, r0
 8001314:	72bb      	strb	r3, [r7, #10]
			if (b3 == pressed ) {
 8001316:	7abb      	ldrb	r3, [r7, #10]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1b9      	bne.n	8001290 <user_servo_task+0xc>
				servo->last_position = servo->position;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	705a      	strb	r2, [r3, #1]
				if (servo->position > MIN_POSITION) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <user_servo_task+0xb4>
					servo->position--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	701a      	strb	r2, [r3, #0]
				}
				servo->start_time = TIM5->CNT;
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <user_servo_task+0xec>)
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
				TIM3->CCR3 = get_duty_cycle_from_position(servo->position);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4c0b      	ldr	r4, [pc, #44]	; (8001374 <user_servo_task+0xf0>)
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f912 	bl	8001570 <get_duty_cycle_from_position>
 800134c:	4603      	mov	r3, r0
 800134e:	63e3      	str	r3, [r4, #60]	; 0x3c
				servo->move_wait = get_move_wait(servo->last_position, servo->position);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	785a      	ldrb	r2, [r3, #1]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f000 f946 	bl	80015ec <get_move_wait>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	609a      	str	r2, [r3, #8]
				servo->status = moving;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	709a      	strb	r2, [r3, #2]
		if (TIM5->CNT >= (servo->start_time + servo->move_wait)) {
 800136c:	e790      	b.n	8001290 <user_servo_task+0xc>
 800136e:	bf00      	nop
 8001370:	40000c00 	.word	0x40000c00
 8001374:	40000400 	.word	0x40000400

08001378 <calibrate_servo>:
			}
		}
	}
}

void calibrate_servo() {
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b0bb      	sub	sp, #236	; 0xec
 800137c:	af04      	add	r7, sp, #16
	button_status b1;
	button_status b2;
	button_status b3;
	uint32_t duty_cycle = DEFUALT_DUTY_CYCLE;
 800137e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	uint32_t position_increment;
	uint8_t middle_pressed = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	char info[200];

	TIM2->CCR1 = duty_cycle;
 800138c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001394:	6353      	str	r3, [r2, #52]	; 0x34

	// Position 0 Calibration
	print(USART2, "----- Calibrating Servos -----\r\nCalibration 1 : Position 0, Move fully right. Press Middle Button when done\r\n");
 8001396:	4969      	ldr	r1, [pc, #420]	; (800153c <calibrate_servo+0x1c4>)
 8001398:	4869      	ldr	r0, [pc, #420]	; (8001540 <calibrate_servo+0x1c8>)
 800139a:	f000 fbcc 	bl	8001b36 <print>
	while (middle_pressed != 2) {
 800139e:	e0ba      	b.n	8001516 <calibrate_servo+0x19e>
		b3 = check_button03();
 80013a0:	f7ff f918 	bl	80005d4 <check_button03>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
		if (b3 == pressed) {
 80013aa:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10e      	bne.n	80013d0 <calibrate_servo+0x58>
			if (duty_cycle > MIN_DUTY_CYCLE) {
 80013b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013ba:	d909      	bls.n	80013d0 <calibrate_servo+0x58>
				duty_cycle -= CAL_DUTY_CYCLE_INCREMENT;
 80013bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013c0:	3b32      	subs	r3, #50	; 0x32
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				TIM2->CCR1 = duty_cycle;
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013ce:	6353      	str	r3, [r2, #52]	; 0x34
			}
		}
		b1 = check_button01();
 80013d0:	f7ff f8d0 	bl	8000574 <check_button01>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
		if (b1 == pressed) {
 80013da:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10e      	bne.n	8001400 <calibrate_servo+0x88>
			if (duty_cycle < MAX_DUTY_CYCLE) {
 80013e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013e6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80013ea:	d209      	bcs.n	8001400 <calibrate_servo+0x88>
				duty_cycle += CAL_DUTY_CYCLE_INCREMENT;
 80013ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013f0:	3332      	adds	r3, #50	; 0x32
 80013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				TIM2->CCR1 = duty_cycle;
 80013f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013fe:	6353      	str	r3, [r2, #52]	; 0x34
			}
		}
		b2 = check_button02();
 8001400:	f7ff f8d0 	bl	80005a4 <check_button02>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
		if (b2 == pressed) {
 800140a:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 8081 	bne.w	8001516 <calibrate_servo+0x19e>
			if (middle_pressed == 0) {
 8001414:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d116      	bne.n	800144a <calibrate_servo+0xd2>
				middle_pressed++;
 800141c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001420:	3301      	adds	r3, #1
 8001422:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
				position0 = duty_cycle;
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <calibrate_servo+0x1cc>)
 8001428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800142c:	6013      	str	r3, [r2, #0]
				duty_cycle = DEFUALT_DUTY_CYCLE;
 800142e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				TIM2->CCR1 = duty_cycle;
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800143e:	6353      	str	r3, [r2, #52]	; 0x34
				print(USART2, "Calibration 2 : Position 5, Move fully left. Press Middle Button when done\r\n");
 8001440:	4941      	ldr	r1, [pc, #260]	; (8001548 <calibrate_servo+0x1d0>)
 8001442:	483f      	ldr	r0, [pc, #252]	; (8001540 <calibrate_servo+0x1c8>)
 8001444:	f000 fb77 	bl	8001b36 <print>
 8001448:	e065      	b.n	8001516 <calibrate_servo+0x19e>
			}
			else if (middle_pressed == 1){
 800144a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d161      	bne.n	8001516 <calibrate_servo+0x19e>
				middle_pressed++;
 8001452:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001456:	3301      	adds	r3, #1
 8001458:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
				position5 = duty_cycle;
 800145c:	4a3b      	ldr	r2, [pc, #236]	; (800154c <calibrate_servo+0x1d4>)
 800145e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001462:	6013      	str	r3, [r2, #0]
				duty_cycle = position0;
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <calibrate_servo+0x1cc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				TIM2->CCR1 = duty_cycle;
 800146c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001474:	6353      	str	r3, [r2, #52]	; 0x34
				TIM3->CCR3 = duty_cycle;
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <calibrate_servo+0x1d8>)
 8001478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800147c:	63d3      	str	r3, [r2, #60]	; 0x3c

				position_increment = (position5 - position0) / 5;
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <calibrate_servo+0x1d4>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <calibrate_servo+0x1cc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <calibrate_servo+0x1dc>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				position1 = position0 + position_increment;
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <calibrate_servo+0x1cc>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800149c:	4413      	add	r3, r2
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <calibrate_servo+0x1e0>)
 80014a0:	6013      	str	r3, [r2, #0]
				position2 = position0 + (position_increment * 2);
 80014a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014a6:	005a      	lsls	r2, r3, #1
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <calibrate_servo+0x1cc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <calibrate_servo+0x1e4>)
 80014b0:	6013      	str	r3, [r2, #0]
				position3 = position0 + (position_increment * 3);
 80014b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	441a      	add	r2, r3
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <calibrate_servo+0x1cc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <calibrate_servo+0x1e8>)
 80014c4:	6013      	str	r3, [r2, #0]
				position4 = position0 + (position_increment * 4);
 80014c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014ca:	009a      	lsls	r2, r3, #2
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <calibrate_servo+0x1cc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a24      	ldr	r2, [pc, #144]	; (8001564 <calibrate_servo+0x1ec>)
 80014d4:	6013      	str	r3, [r2, #0]
				sprintf(info, "Position 0: %d, Position 1: %d, Position 2: %d, Position 3: %d, Position 4: %d,Position 5: %d\r\n----- Calibration Done -----\r\nPress the middle button to begin!\r\n", (int)position0, (int)position1, (int)position2, (int)position3, (int)position4, (int)position5);
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <calibrate_servo+0x1cc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	461d      	mov	r5, r3
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <calibrate_servo+0x1e0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461e      	mov	r6, r3
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <calibrate_servo+0x1e4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <calibrate_servo+0x1e8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <calibrate_servo+0x1ec>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461c      	mov	r4, r3
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <calibrate_servo+0x1d4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1d38      	adds	r0, r7, #4
 80014fa:	9303      	str	r3, [sp, #12]
 80014fc:	9402      	str	r4, [sp, #8]
 80014fe:	9101      	str	r1, [sp, #4]
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	4633      	mov	r3, r6
 8001504:	462a      	mov	r2, r5
 8001506:	4918      	ldr	r1, [pc, #96]	; (8001568 <calibrate_servo+0x1f0>)
 8001508:	f007 f848 	bl	800859c <siprintf>
				print(USART2, info);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <calibrate_servo+0x1c8>)
 8001512:	f000 fb10 	bl	8001b36 <print>
	while (middle_pressed != 2) {
 8001516:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800151a:	2b02      	cmp	r3, #2
 800151c:	f47f af40 	bne.w	80013a0 <calibrate_servo+0x28>
			}
		}
	}
	while (check_button02() == not_pressed);
 8001520:	bf00      	nop
 8001522:	f7ff f83f 	bl	80005a4 <check_button02>
 8001526:	4603      	mov	r3, r0
 8001528:	2b01      	cmp	r3, #1
 800152a:	d0fa      	beq.n	8001522 <calibrate_servo+0x1aa>
	print(USART2, "CATCH ME IF YOU CAN!!!\r\n");
 800152c:	490f      	ldr	r1, [pc, #60]	; (800156c <calibrate_servo+0x1f4>)
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <calibrate_servo+0x1c8>)
 8001530:	f000 fb01 	bl	8001b36 <print>

}
 8001534:	bf00      	nop
 8001536:	37dc      	adds	r7, #220	; 0xdc
 8001538:	46bd      	mov	sp, r7
 800153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153c:	08008d9c 	.word	0x08008d9c
 8001540:	40004400 	.word	0x40004400
 8001544:	200002a0 	.word	0x200002a0
 8001548:	08008e0c 	.word	0x08008e0c
 800154c:	200002b4 	.word	0x200002b4
 8001550:	40000400 	.word	0x40000400
 8001554:	cccccccd 	.word	0xcccccccd
 8001558:	200002a4 	.word	0x200002a4
 800155c:	200002a8 	.word	0x200002a8
 8001560:	200002ac 	.word	0x200002ac
 8001564:	200002b0 	.word	0x200002b0
 8001568:	08008e5c 	.word	0x08008e5c
 800156c:	08008f00 	.word	0x08008f00

08001570 <get_duty_cycle_from_position>:

uint32_t get_duty_cycle_from_position(uint8_t position) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	switch (position) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b05      	cmp	r3, #5
 800157e:	d821      	bhi.n	80015c4 <get_duty_cycle_from_position+0x54>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <get_duty_cycle_from_position+0x18>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015a7 	.word	0x080015a7
 8001590:	080015ad 	.word	0x080015ad
 8001594:	080015b3 	.word	0x080015b3
 8001598:	080015b9 	.word	0x080015b9
 800159c:	080015bf 	.word	0x080015bf
		case 0:
			return position0;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <get_duty_cycle_from_position+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e010      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		case 1:
			return position1;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <get_duty_cycle_from_position+0x68>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e00d      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		case 2:
			return position2;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <get_duty_cycle_from_position+0x6c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e00a      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		case 3:
			return position3;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <get_duty_cycle_from_position+0x70>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		case 4:
			return position4;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <get_duty_cycle_from_position+0x74>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	e004      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		case 5:
			return position5;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <get_duty_cycle_from_position+0x78>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	e001      	b.n	80015c8 <get_duty_cycle_from_position+0x58>
		default:
			return position0;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <get_duty_cycle_from_position+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
	}
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	200002a4 	.word	0x200002a4
 80015dc:	200002a8 	.word	0x200002a8
 80015e0:	200002ac 	.word	0x200002ac
 80015e4:	200002b0 	.word	0x200002b0
 80015e8:	200002b4 	.word	0x200002b4

080015ec <get_move_wait>:

uint32_t get_move_wait(uint8_t old_position, uint8_t new_position){
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t difference;
	uint32_t move_wait;

	if (old_position >= new_position) {
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	79bb      	ldrb	r3, [r7, #6]
 8001600:	429a      	cmp	r2, r3
 8001602:	d304      	bcc.n	800160e <get_move_wait+0x22>
		difference = old_position - new_position;
 8001604:	79fa      	ldrb	r2, [r7, #7]
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	e007      	b.n	800161e <get_move_wait+0x32>
	}
	else if (new_position > old_position) {
 800160e:	79ba      	ldrb	r2, [r7, #6]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	429a      	cmp	r2, r3
 8001614:	d903      	bls.n	800161e <get_move_wait+0x32>
		difference = new_position - old_position;
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	73fb      	strb	r3, [r7, #15]
	}
	move_wait = difference * POSITION_MOVE_WAIT;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <get_move_wait+0x4c>)
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	60bb      	str	r3, [r7, #8]
	return move_wait;
 8001628:	68bb      	ldr	r3, [r7, #8]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	00030d40 	.word	0x00030d40

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_MspInit+0x4c>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6613      	str	r3, [r2, #96]	; 0x60
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_MspInit+0x4c>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_MspInit+0x4c>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6593      	str	r3, [r2, #88]	; 0x58
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	210f      	movs	r1, #15
 8001676:	f06f 0001 	mvn.w	r0, #1
 800167a:	f000 fb93 	bl	8001da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0a6      	sub	sp, #152	; 0x98
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2288      	movs	r2, #136	; 0x88
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fe67 	bl	8008370 <memset>
  if(hrng->Instance==RNG)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_RNG_MspInit+0x80>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d12b      	bne.n	8001704 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80016ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80016b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016c2:	2308      	movs	r3, #8
 80016c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016c6:	2307      	movs	r3, #7
 80016c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80016ca:	2304      	movs	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fbfb 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80016e8:	f7ff fcda 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_RNG_MspInit+0x84>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_RNG_MspInit+0x84>)
 80016f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RNG_MspInit+0x84>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3798      	adds	r7, #152	; 0x98
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	50060800 	.word	0x50060800
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800173e:	e022      	b.n	8001786 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <HAL_TIM_Base_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10c      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
}
 8001762:	e010      	b.n	8001786 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_TIM_Base_MspInit+0x88>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10b      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40000400 	.word	0x40000400
 800179c:	40000c00 	.word	0x40000c00

080017a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d11d      	bne.n	80017fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b22      	ldr	r3, [pc, #136]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017da:	2301      	movs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ea:	2301      	movs	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f000 fafe 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017fc:	e021      	b.n	8001842 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <HAL_TIM_MspPostInit+0xb0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11c      	bne.n	8001842 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_MspPostInit+0xac>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001832:	2302      	movs	r3, #2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_TIM_MspPostInit+0xb4>)
 800183e:	f000 fadb 	bl	8001df8 <HAL_GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40000400 	.word	0x40000400
 8001854:	48000800 	.word	0x48000800

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0ac      	sub	sp, #176	; 0xb0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2288      	movs	r2, #136	; 0x88
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fd79 	bl	8008370 <memset>
  if(huart->Instance==USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a21      	ldr	r2, [pc, #132]	; (8001908 <HAL_UART_MspInit+0xb0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d13b      	bne.n	8001900 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001888:	2302      	movs	r3, #2
 800188a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4618      	mov	r0, r3
 8001896:	f001 fb1f 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a0:	f7ff fbfe 	bl	80010a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	4a18      	ldr	r2, [pc, #96]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	6593      	str	r3, [r2, #88]	; 0x58
 80018b0:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_UART_MspInit+0xb4>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d4:	230c      	movs	r3, #12
 80018d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ec:	2307      	movs	r3, #7
 80018ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f000 fa7c 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	37b0      	adds	r7, #176	; 0xb0
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40004400 	.word	0x40004400
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800191e:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_InitTick+0xe0>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a33      	ldr	r2, [pc, #204]	; (80019f0 <HAL_InitTick+0xe0>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_InitTick+0xe0>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001936:	f107 0210 	add.w	r2, r7, #16
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fa37 	bl	8002db4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001950:	f001 fa04 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8001954:	6378      	str	r0, [r7, #52]	; 0x34
 8001956:	e004      	b.n	8001962 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001958:	f001 fa00 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 800195c:	4603      	mov	r3, r0
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_InitTick+0xe4>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3b01      	subs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_InitTick+0xe8>)
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_InitTick+0xec>)
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_InitTick+0xe8>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_InitTick+0xe8>)
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_InitTick+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_InitTick+0xe8>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_InitTick+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001996:	4818      	ldr	r0, [pc, #96]	; (80019f8 <HAL_InitTick+0xe8>)
 8001998:	f001 ffb1 	bl	80038fe <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11b      	bne.n	80019e2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019aa:	4813      	ldr	r0, [pc, #76]	; (80019f8 <HAL_InitTick+0xe8>)
 80019ac:	f002 f866 	bl	8003a7c <HAL_TIM_Base_Start_IT>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d111      	bne.n	80019e2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019be:	2036      	movs	r0, #54	; 0x36
 80019c0:	f000 fa0c 	bl	8001ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	d808      	bhi.n	80019dc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	2036      	movs	r0, #54	; 0x36
 80019d0:	f000 f9e8 	bl	8001da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d4:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_InitTick+0xf0>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e002      	b.n	80019e2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3738      	adds	r7, #56	; 0x38
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	200002b8 	.word	0x200002b8
 80019fc:	40001000 	.word	0x40001000
 8001a00:	20000058 	.word	0x20000058

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <TIM6_DAC_IRQHandler+0x10>)
 8001a36:	f002 f9ef 	bl	8003e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002b8 	.word	0x200002b8

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f006 fc42 	bl	80082fc <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20018000 	.word	0x20018000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000304 	.word	0x20000304
 8001aac:	20003840 	.word	0x20003840

08001ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <USART_Write>:
		return '\0';
	}
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e010      	b.n	8001b08 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001ae6:	bf00      	nop
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f9      	beq.n	8001ae8 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8ea      	bhi.n	8001ae6 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001b10:	bf00      	nop
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f9      	beq.n	8001b12 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	61da      	str	r2, [r3, #28]
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <print>:

void print(USART_TypeDef * USARTx, char *string) {
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
	uint32_t size = sprintf(string, string);
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f006 fd2a 	bl	800859c <siprintf>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60fb      	str	r3, [r7, #12]
	USART_Write(USARTx, (uint8_t *)string, size);
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffbf 	bl	8001ad4 <USART_Write>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff ffa4 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	; (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f006 fbbb 	bl	8008308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7fe ff63 	bl	8000a5c <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001ba4:	080090c0 	.word	0x080090c0
  ldr r2, =_sbss
 8001ba8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001bac:	2000383c 	.word	0x2000383c

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_Init+0x3c>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f8df 	bl	8001d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd0:	200f      	movs	r0, #15
 8001bd2:	f7ff fe9d 	bl	8001910 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	e001      	b.n	8001be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be2:	f7ff fd2b 	bl	800163c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be6:	79fb      	ldrb	r3, [r7, #7]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000005c 	.word	0x2000005c
 8001c18:	20000308 	.word	0x20000308

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000308 	.word	0x20000308

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff4c 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db6:	f7ff ff61 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb1 	bl	8001d28 <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff80 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff54 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e17f      	b.n	8002108 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8171 	beq.w	8002102 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d005      	beq.n	8001e38 <HAL_GPIO_Init+0x40>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d130      	bne.n	8001e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 0201 	and.w	r2, r3, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d118      	bne.n	8001ed8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	08db      	lsrs	r3, r3, #3
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80ac 	beq.w	8002102 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_GPIO_Init+0x330>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_Init+0x334>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x242>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x338>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x23e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x33c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x23a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x340>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x236>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x344>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x232>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x348>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x22e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x34c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x22a>
 800201e:	2306      	movs	r3, #6
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002022:	2307      	movs	r3, #7
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x244>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x244>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x244>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x244>
 800203a:	2300      	movs	r3, #0
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204c:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_GPIO_Init+0x334>)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_GPIO_Init+0x350>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207e:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_GPIO_Init+0x350>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_GPIO_Init+0x350>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_GPIO_Init+0x350>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f47f ae78 	bne.w	8001e08 <HAL_GPIO_Init+0x10>
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	48000400 	.word	0x48000400
 8002134:	48000800 	.word	0x48000800
 8002138:	48000c00 	.word	0x48000c00
 800213c:	48001000 	.word	0x48001000
 8002140:	48001400 	.word	0x48001400
 8002144:	48001800 	.word	0x48001800
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e001      	b.n	800216e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d6:	d130      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d038      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	; 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d110      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d007      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	20000054 	.word	0x20000054
 8002270:	431bde83 	.word	0x431bde83

08002274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e3ca      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80e4 	beq.w	8002470 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_RCC_OscConfig+0x4a>
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	f040 808b 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 8087 	bne.w	80023cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x62>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e3a2      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4b82      	ldr	r3, [pc, #520]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_RCC_OscConfig+0x7c>
 80022e6:	4b7f      	ldr	r3, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ee:	e005      	b.n	80022fc <HAL_RCC_OscConfig+0x88>
 80022f0:	4b7c      	ldr	r3, [pc, #496]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d223      	bcs.n	8002348 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd87 	bl	8002e18 <RCC_SetFlashLatencyFromMSIRange>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e383      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002314:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800231a:	f043 0308 	orr.w	r3, r3, #8
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b70      	ldr	r3, [pc, #448]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	496d      	ldr	r1, [pc, #436]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002332:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	4968      	ldr	r1, [pc, #416]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
 8002346:	e025      	b.n	8002394 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4960      	ldr	r1, [pc, #384]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	495b      	ldr	r1, [pc, #364]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002376:	4313      	orrs	r3, r2
 8002378:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fd47 	bl	8002e18 <RCC_SetFlashLatencyFromMSIRange>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e343      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002394:	f000 fc4a 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	4950      	ldr	r1, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <HAL_RCC_OscConfig+0x278>)
 80023b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023b4:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <HAL_RCC_OscConfig+0x27c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff faa9 	bl	8001910 <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d052      	beq.n	800246e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	e327      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d032      	beq.n	800243a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023d4:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fc1c 	bl	8001c1c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc18 	bl	8001c1c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e310      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002406:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a36      	ldr	r2, [pc, #216]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4931      	ldr	r1, [pc, #196]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	492c      	ldr	r1, [pc, #176]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
 8002438:	e01a      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002446:	f7ff fbe9 	bl	8001c1c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244e:	f7ff fbe5 	bl	8001c1c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e2dd      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x1da>
 800246c:	e000      	b.n	8002470 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d074      	beq.n	8002566 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x21a>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d10e      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d10b      	bne.n	80024a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d064      	beq.n	8002564 <HAL_RCC_OscConfig+0x2f0>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d160      	bne.n	8002564 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e2ba      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x24a>
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	e026      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c6:	d115      	bne.n	80024f4 <HAL_RCC_OscConfig+0x280>
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a02      	ldr	r2, [pc, #8]	; (80024e4 <HAL_RCC_OscConfig+0x270>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e014      	b.n	800250c <HAL_RCC_OscConfig+0x298>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08008fd4 	.word	0x08008fd4
 80024ec:	20000054 	.word	0x20000054
 80024f0:	20000058 	.word	0x20000058
 80024f4:	4ba0      	ldr	r3, [pc, #640]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9f      	ldr	r2, [pc, #636]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b9d      	ldr	r3, [pc, #628]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a9c      	ldr	r2, [pc, #624]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff fb82 	bl	8001c1c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fb7e 	bl	8001c1c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e276      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252e:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x2a8>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fb6e 	bl	8001c1c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff fb6a 	bl	8001c1c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e262      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x2d0>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d060      	beq.n	8002634 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d005      	beq.n	8002584 <HAL_RCC_OscConfig+0x310>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x328>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e23f      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4973      	ldr	r1, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e040      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff fb29 	bl	8001c1c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fb25 	bl	8001c1c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e21d      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	495f      	ldr	r1, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
 8002600:	e018      	b.n	8002634 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff fb05 	bl	8001c1c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff fb01 	bl	8001c1c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1f9      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	4a4a      	ldr	r2, [pc, #296]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff fae0 	bl	8001c1c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff fadc 	bl	8001c1c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1d4      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x3ec>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7ff fac3 	bl	8001c1c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7ff fabf 	bl	8001c1c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e1b7      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	4a26      	ldr	r2, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	; 0x58
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d118      	bne.n	8002732 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_OscConfig+0x508>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x508>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270c:	f7ff fa86 	bl	8001c1c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7ff fa82 	bl	8001c1c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e17a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_RCC_OscConfig+0x508>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x4d8>
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274a:	e029      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d115      	bne.n	8002780 <HAL_RCC_OscConfig+0x50c>
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a03      	ldr	r2, [pc, #12]	; (8002778 <HAL_RCC_OscConfig+0x504>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	4b9c      	ldr	r3, [pc, #624]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a9b      	ldr	r2, [pc, #620]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002790:	4b98      	ldr	r3, [pc, #608]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	4a97      	ldr	r2, [pc, #604]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d016      	beq.n	80027d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff fa38 	bl	8001c1c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff fa34 	bl	8001c1c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e12a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b8b      	ldr	r3, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCC_OscConfig+0x53c>
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff fa21 	bl	8001c1c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7ff fa1d 	bl	8001c1c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e113      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ed      	bne.n	80027de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b7a      	ldr	r3, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a79      	ldr	r2, [pc, #484]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80fe 	beq.w	8002a1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b02      	cmp	r3, #2
 8002824:	f040 80d0 	bne.w	80029c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002828:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	429a      	cmp	r2, r3
 800283a:	d130      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	3b01      	subs	r3, #1
 8002848:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d127      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11f      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002868:	2a07      	cmp	r2, #7
 800286a:	bf14      	ite	ne
 800286c:	2201      	movne	r2, #1
 800286e:	2200      	moveq	r2, #0
 8002870:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002872:	4293      	cmp	r3, r2
 8002874:	d113      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d109      	bne.n	800289e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d06e      	beq.n	800297c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d069      	beq.n	8002978 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0ad      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028c0:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a4b      	ldr	r2, [pc, #300]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028cc:	f7ff f9a6 	bl	8001c1c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff f9a2 	bl	8001c1c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e09a      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e6:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <HAL_RCC_OscConfig+0x784>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002902:	3a01      	subs	r2, #1
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800290c:	0212      	lsls	r2, r2, #8
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0552      	lsls	r2, r2, #21
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002920:	0852      	lsrs	r2, r2, #1
 8002922:	3a01      	subs	r2, #1
 8002924:	0652      	lsls	r2, r2, #25
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800292c:	0912      	lsrs	r2, r2, #4
 800292e:	0452      	lsls	r2, r2, #17
 8002930:	430a      	orrs	r2, r1
 8002932:	4930      	ldr	r1, [pc, #192]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2d      	ldr	r2, [pc, #180]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800294a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002950:	f7ff f964 	bl	8001c1c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7ff f960 	bl	8001c1c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e058      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002976:	e050      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04f      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d148      	bne.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a0:	f7ff f93c 	bl	8001c1c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7ff f938 	bl	8001c1c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e030      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x734>
 80029c6:	e028      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d023      	beq.n	8002a16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_RCC_OscConfig+0x780>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7ff f91f 	bl	8001c1c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	e00c      	b.n	80029fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff f91b 	bl	8001c1c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d905      	bls.n	80029fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4905      	ldr	r1, [pc, #20]	; (8002a24 <HAL_RCC_OscConfig+0x7b0>)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_OscConfig+0x7b4>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e001      	b.n	8002a1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	feeefffc 	.word	0xfeeefffc

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0e7      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d910      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b72      	ldr	r3, [pc, #456]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4970      	ldr	r1, [pc, #448]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0cf      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d908      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4960      	ldr	r1, [pc, #384]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d04c      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d121      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0a6      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d115      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e09a      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e08e      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e086      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4943      	ldr	r1, [pc, #268]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7ff f882 	bl	8001c1c <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7ff f87e 	bl	8001c1c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06e      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 020c 	and.w	r2, r3, #12
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1eb      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d208      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	492b      	ldr	r1, [pc, #172]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d210      	bcs.n	8002ba2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 0207 	bic.w	r2, r3, #7
 8002b88:	4923      	ldr	r1, [pc, #140]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e036      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4918      	ldr	r1, [pc, #96]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4910      	ldr	r1, [pc, #64]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 f824 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	490b      	ldr	r1, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1f4>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1fc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fe83 	bl	8001910 <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08008fd4 	.word	0x08008fd4
 8002c24:	20000054 	.word	0x20000054
 8002c28:	20000058 	.word	0x20000058

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c44:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d121      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d11e      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c60:	4b34      	ldr	r3, [pc, #208]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c88:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9c:	e00a      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ca4:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d134      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cd0:	e005      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cda:	617b      	str	r3, [r7, #20]
      break;
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	617b      	str	r3, [r7, #20]
      break;
 8002ce2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	3301      	adds	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	fb03 f202 	mul.w	r2, r3, r2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0e5b      	lsrs	r3, r3, #25
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	3301      	adds	r3, #1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d24:	69bb      	ldr	r3, [r7, #24]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
 8002d38:	08008fec 	.word	0x08008fec
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200

08002d44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000054 	.word	0x20000054

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08008fe4 	.word	0x08008fe4

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d8c:	f7ff ffda 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4904      	ldr	r1, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08008fe4 	.word	0x08008fe4

08002db4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_GetClockConfig+0x5c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_RCC_GetClockConfig+0x60>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0207 	and.w	r2, r3, #7
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40022000 	.word	0x40022000

08002e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e30:	f7ff f9bc 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002e34:	6178      	str	r0, [r7, #20]
 8002e36:	e014      	b.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6593      	str	r3, [r2, #88]	; 0x58
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e50:	f7ff f9ac 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e68:	d10b      	bne.n	8002e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d919      	bls.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2ba0      	cmp	r3, #160	; 0xa0
 8002e74:	d902      	bls.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e76:	2302      	movs	r3, #2
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	e013      	b.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	e010      	b.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d902      	bls.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e88:	2303      	movs	r3, #3
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e00a      	b.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d102      	bne.n	8002e9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e94:	2302      	movs	r3, #2
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	e004      	b.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b70      	cmp	r3, #112	; 0x70
 8002e9e:	d101      	bne.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 0207 	bic.w	r2, r3, #7
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d001      	beq.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40022000 	.word	0x40022000

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d041      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002efe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f18:	d010      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f1a:	e018      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1c:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a85      	ldr	r2, [pc, #532]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fabb 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3320      	adds	r3, #32
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fba6 	bl	8003694 <RCCEx_PLLSAI2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	74fb      	strb	r3, [r7, #19]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	4973      	ldr	r1, [pc, #460]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f72:	e001      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d041      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f8c:	d02a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f92:	d824      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f9e:	d81e      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002faa:	e018      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fac:	4b62      	ldr	r3, [pc, #392]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a61      	ldr	r2, [pc, #388]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fa73 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fca:	e00c      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3320      	adds	r3, #32
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb5e 	bl	8003694 <RCCEx_PLLSAI2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffa:	494f      	ldr	r1, [pc, #316]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003002:	e001      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7cfb      	ldrb	r3, [r7, #19]
 8003006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a0 	beq.w	8003156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003034:	4a40      	ldr	r2, [pc, #256]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	; 0x58
 800303c:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003048:	2301      	movs	r3, #1
 800304a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800304c:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3a      	ldr	r2, [pc, #232]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003058:	f7fe fde0 	bl	8001c1c <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800305e:	e009      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7fe fddc 	bl	8001c1c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d902      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	74fb      	strb	r3, [r7, #19]
        break;
 8003072:	e005      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ef      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d15c      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01f      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d019      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030d0:	4a19      	ldr	r2, [pc, #100]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fd9b 	bl	8001c1c <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e8:	e00b      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe fd97 	bl	8001c1c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d902      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003100:	e006      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ec      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003144:	7c7b      	ldrb	r3, [r7, #17]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b9e      	ldr	r3, [pc, #632]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	4a9d      	ldr	r2, [pc, #628]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003162:	4b98      	ldr	r3, [pc, #608]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f023 0203 	bic.w	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	4994      	ldr	r1, [pc, #592]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003184:	4b8f      	ldr	r3, [pc, #572]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f023 020c 	bic.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	498c      	ldr	r1, [pc, #560]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031a6:	4b87      	ldr	r3, [pc, #540]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4983      	ldr	r1, [pc, #524]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c8:	4b7e      	ldr	r3, [pc, #504]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	497b      	ldr	r1, [pc, #492]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	4972      	ldr	r1, [pc, #456]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800320c:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	496a      	ldr	r1, [pc, #424]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322e:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	4961      	ldr	r1, [pc, #388]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003250:	4b5c      	ldr	r3, [pc, #368]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	4959      	ldr	r1, [pc, #356]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	4950      	ldr	r1, [pc, #320]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003294:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	4948      	ldr	r1, [pc, #288]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032b6:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	493f      	ldr	r1, [pc, #252]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d028      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	4937      	ldr	r1, [pc, #220]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f6:	d106      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
 8003304:	e011      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330e:	d10c      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f8c8 	bl	80034ac <RCCEx_PLLSAI1_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d028      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	491f      	ldr	r1, [pc, #124]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003354:	d106      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003360:	60d3      	str	r3, [r2, #12]
 8003362:	e011      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f899 	bl	80034ac <RCCEx_PLLSAI1_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02b      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	4908      	ldr	r1, [pc, #32]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b2:	d109      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a02      	ldr	r2, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033be:	60d3      	str	r3, [r2, #12]
 80033c0:	e014      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f867 	bl	80034ac <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02f      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003406:	4928      	ldr	r1, [pc, #160]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003416:	d10d      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f844 	bl	80034ac <RCCEx_PLLSAI1_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d014      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
 8003432:	e011      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800343c:	d10c      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3320      	adds	r3, #32
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f000 f925 	bl	8003694 <RCCEx_PLLSAI2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003472:	490d      	ldr	r1, [pc, #52]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003496:	4904      	ldr	r1, [pc, #16]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800349e:	7cbb      	ldrb	r3, [r7, #18]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000

080034ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ba:	4b75      	ldr	r3, [pc, #468]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d018      	beq.n	80034f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0203 	and.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d10d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
       ||
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034de:	4b6c      	ldr	r3, [pc, #432]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
       ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d047      	beq.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	e044      	b.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d018      	beq.n	8003532 <RCCEx_PLLSAI1_Config+0x86>
 8003500:	2b03      	cmp	r3, #3
 8003502:	d825      	bhi.n	8003550 <RCCEx_PLLSAI1_Config+0xa4>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <RCCEx_PLLSAI1_Config+0x62>
 8003508:	2b02      	cmp	r3, #2
 800350a:	d009      	beq.n	8003520 <RCCEx_PLLSAI1_Config+0x74>
 800350c:	e020      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800350e:	4b60      	ldr	r3, [pc, #384]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351e:	e01a      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003520:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003530:	e013      	b.n	800355a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003532:	4b57      	ldr	r3, [pc, #348]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800353e:	4b54      	ldr	r3, [pc, #336]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800354e:	e006      	b.n	800355e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e004      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800355e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	430b      	orrs	r3, r1
 800357c:	4944      	ldr	r1, [pc, #272]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d17d      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003588:	4b41      	ldr	r3, [pc, #260]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a40      	ldr	r2, [pc, #256]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fe fb42 	bl	8001c1c <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800359a:	e009      	b.n	80035b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800359c:	f7fe fb3e 	bl	8001c1c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	73fb      	strb	r3, [r7, #15]
        break;
 80035ae:	e005      	b.n	80035bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ef      	bne.n	800359c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d160      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d111      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	0211      	lsls	r1, r2, #8
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68d2      	ldr	r2, [r2, #12]
 80035de:	0912      	lsrs	r2, r2, #4
 80035e0:	0452      	lsls	r2, r2, #17
 80035e2:	430a      	orrs	r2, r1
 80035e4:	492a      	ldr	r1, [pc, #168]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]
 80035ea:	e027      	b.n	800363c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d112      	bne.n	8003618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	0211      	lsls	r1, r2, #8
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6912      	ldr	r2, [r2, #16]
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0552      	lsls	r2, r2, #21
 800360e:	430a      	orrs	r2, r1
 8003610:	491f      	ldr	r1, [pc, #124]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	610b      	str	r3, [r1, #16]
 8003616:	e011      	b.n	800363c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	0211      	lsls	r1, r2, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6952      	ldr	r2, [r2, #20]
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	0652      	lsls	r2, r2, #25
 8003634:	430a      	orrs	r2, r1
 8003636:	4916      	ldr	r1, [pc, #88]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a13      	ldr	r2, [pc, #76]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe fae8 	bl	8001c1c <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fe fae4 	bl	8001c1c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
          break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	4904      	ldr	r1, [pc, #16]	; (8003690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000

08003694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a2:	4b6a      	ldr	r3, [pc, #424]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d018      	beq.n	80036e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
       ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036c6:	4b61      	ldr	r3, [pc, #388]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
       ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d047      	beq.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	e044      	b.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d018      	beq.n	800371a <RCCEx_PLLSAI2_Config+0x86>
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d825      	bhi.n	8003738 <RCCEx_PLLSAI2_Config+0xa4>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <RCCEx_PLLSAI2_Config+0x62>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d009      	beq.n	8003708 <RCCEx_PLLSAI2_Config+0x74>
 80036f4:	e020      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f6:	4b55      	ldr	r3, [pc, #340]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d11d      	bne.n	800373e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003706:	e01a      	b.n	800373e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	2b00      	cmp	r3, #0
 8003712:	d116      	bne.n	8003742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e013      	b.n	8003742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800371a:	4b4c      	ldr	r3, [pc, #304]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003726:	4b49      	ldr	r3, [pc, #292]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003736:	e006      	b.n	8003746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e004      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800373e:	bf00      	nop
 8003740:	e002      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003746:	bf00      	nop
    }

    if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	430b      	orrs	r3, r1
 8003764:	4939      	ldr	r1, [pc, #228]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d167      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a35      	ldr	r2, [pc, #212]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377c:	f7fe fa4e 	bl	8001c1c <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003782:	e009      	b.n	8003798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003784:	f7fe fa4a 	bl	8001c1c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d902      	bls.n	8003798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	73fb      	strb	r3, [r7, #15]
        break;
 8003796:	e005      	b.n	80037a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ef      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d14a      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	0211      	lsls	r1, r2, #8
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	0912      	lsrs	r2, r2, #4
 80037c8:	0452      	lsls	r2, r2, #17
 80037ca:	430a      	orrs	r2, r1
 80037cc:	491f      	ldr	r1, [pc, #124]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	614b      	str	r3, [r1, #20]
 80037d2:	e011      	b.n	80037f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6912      	ldr	r2, [r2, #16]
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0652      	lsls	r2, r2, #25
 80037f0:	430a      	orrs	r2, r1
 80037f2:	4916      	ldr	r1, [pc, #88]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fe fa0a 	bl	8001c1c <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800380a:	e009      	b.n	8003820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800380c:	f7fe fa06 	bl	8001c1c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	73fb      	strb	r3, [r7, #15]
          break;
 800381e:	e005      	b.n	800382c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ef      	beq.n	800380c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e049      	b.n	80038f6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	795b      	ldrb	r3, [r3, #5]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd ff0a 	bl	800168c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0204 	orr.w	r2, r2, #4
 800388c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d104      	bne.n	80038a6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2204      	movs	r2, #4
 80038a0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e027      	b.n	80038f6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80038a6:	f7fe f9b9 	bl	8001c1c <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038ac:	e015      	b.n	80038da <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80038ae:	f7fe f9b5 	bl	8001c1c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d90e      	bls.n	80038da <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d107      	bne.n	80038da <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2204      	movs	r2, #4
 80038ce:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00d      	b.n	80038f6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d0e2      	beq.n	80038ae <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e049      	b.n	80039a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fef5 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f000 fd91 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d001      	beq.n	80039c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e047      	b.n	8003a54 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <HAL_TIM_Base_Start+0xb4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d018      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_TIM_Base_Start+0xb8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_TIM_Base_Start+0xbc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_TIM_Base_Start+0xc0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_TIM_Base_Start+0xc4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_Base_Start+0x66>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_TIM_Base_Start+0xc8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d115      	bne.n	8003a3e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_TIM_Base_Start+0xcc>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b06      	cmp	r3, #6
 8003a22:	d015      	beq.n	8003a50 <HAL_TIM_Base_Start+0xa4>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d011      	beq.n	8003a50 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	e008      	b.n	8003a50 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	00010007 	.word	0x00010007

08003a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e04f      	b.n	8003b34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d018      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0x76>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d115      	bne.n	8003b1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d015      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0xb4>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d011      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	e008      	b.n	8003b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e000      	b.n	8003b32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	40013400 	.word	0x40013400
 8003b54:	40014000 	.word	0x40014000
 8003b58:	00010007 	.word	0x00010007

08003b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e049      	b.n	8003c02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f841 	bl	8003c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fc62 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_IC_Start+0x1a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e023      	b.n	8003c82 <HAL_TIM_IC_Start+0x62>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_IC_Start+0x2a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e01b      	b.n	8003c82 <HAL_TIM_IC_Start+0x62>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_IC_Start+0x3a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_IC_Start+0x62>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b0c      	cmp	r3, #12
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start+0x4a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_IC_Start+0x62>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start+0x5a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_IC_Start+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_TIM_IC_Start+0x74>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e013      	b.n	8003cbc <HAL_TIM_IC_Start+0x9c>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d104      	bne.n	8003ca4 <HAL_TIM_IC_Start+0x84>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e00b      	b.n	8003cbc <HAL_TIM_IC_Start+0x9c>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d104      	bne.n	8003cb4 <HAL_TIM_IC_Start+0x94>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_IC_Start+0x9c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cc4:	7bbb      	ldrb	r3, [r7, #14]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e092      	b.n	8003df4 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_IC_Start+0xbe>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cdc:	e023      	b.n	8003d26 <HAL_TIM_IC_Start+0x106>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_IC_Start+0xce>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cec:	e01b      	b.n	8003d26 <HAL_TIM_IC_Start+0x106>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_IC_Start+0xde>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_IC_Start+0x106>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Start+0xee>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_IC_Start+0x106>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start+0xfe>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_IC_Start+0x106>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_IC_Start+0x116>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d34:	e013      	b.n	8003d5e <HAL_TIM_IC_Start+0x13e>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Start+0x126>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_IC_Start+0x13e>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_IC_Start+0x136>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_IC_Start+0x13e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff86 	bl	8004c78 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <HAL_TIM_IC_Start+0x1dc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_TIM_IC_Start+0x1e0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <HAL_TIM_IC_Start+0x1e4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <HAL_TIM_IC_Start+0x1e8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <HAL_TIM_IC_Start+0x1ec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_IC_Start+0x192>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_IC_Start+0x1f0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d115      	bne.n	8003dde <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_TIM_IC_Start+0x1f4>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d015      	beq.n	8003df0 <HAL_TIM_IC_Start+0x1d0>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d011      	beq.n	8003df0 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	e008      	b.n	8003df0 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	00010007 	.word	0x00010007

08003e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fae3 	bl	8004426 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fad5 	bl	8004412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fae6 	bl	800443a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d122      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0204 	mvn.w	r2, #4
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fab9 	bl	8004426 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 faab 	bl	8004412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fabc 	bl	800443a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d122      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d11b      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0208 	mvn.w	r2, #8
 8003eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa8f 	bl	8004426 <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa81 	bl	8004412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa92 	bl	800443a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0210 	mvn.w	r2, #16
 8003f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2208      	movs	r2, #8
 8003f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa65 	bl	8004426 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa57 	bl	8004412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa68 	bl	800443a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10e      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0201 	mvn.w	r2, #1
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f870 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d10e      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 ff10 	bl	8004de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d107      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 ff03 	bl	8004dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d10e      	bne.n	8004022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d107      	bne.n	8004022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800401a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa16 	bl	800444e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b20      	cmp	r3, #32
 800402e:	d10e      	bne.n	800404e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b20      	cmp	r3, #32
 800403c:	d107      	bne.n	800404e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0220 	mvn.w	r2, #32
 8004046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fec3 	bl	8004dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004072:	2302      	movs	r3, #2
 8004074:	e0ff      	b.n	8004276 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b14      	cmp	r3, #20
 8004082:	f200 80f0 	bhi.w	8004266 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040e1 	.word	0x080040e1
 8004090:	08004267 	.word	0x08004267
 8004094:	08004267 	.word	0x08004267
 8004098:	08004267 	.word	0x08004267
 800409c:	08004121 	.word	0x08004121
 80040a0:	08004267 	.word	0x08004267
 80040a4:	08004267 	.word	0x08004267
 80040a8:	08004267 	.word	0x08004267
 80040ac:	08004163 	.word	0x08004163
 80040b0:	08004267 	.word	0x08004267
 80040b4:	08004267 	.word	0x08004267
 80040b8:	08004267 	.word	0x08004267
 80040bc:	080041a3 	.word	0x080041a3
 80040c0:	08004267 	.word	0x08004267
 80040c4:	08004267 	.word	0x08004267
 80040c8:	08004267 	.word	0x08004267
 80040cc:	080041e5 	.word	0x080041e5
 80040d0:	08004267 	.word	0x08004267
 80040d4:	08004267 	.word	0x08004267
 80040d8:	08004267 	.word	0x08004267
 80040dc:	08004225 	.word	0x08004225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fa56 	bl	8004598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0204 	bic.w	r2, r2, #4
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	619a      	str	r2, [r3, #24]
      break;
 800411e:	e0a5      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fac6 	bl	80046b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	619a      	str	r2, [r3, #24]
      break;
 8004160:	e084      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fb2f 	bl	80047cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0208 	orr.w	r2, r2, #8
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0204 	bic.w	r2, r2, #4
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	61da      	str	r2, [r3, #28]
      break;
 80041a0:	e064      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fb97 	bl	80048dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69d9      	ldr	r1, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	021a      	lsls	r2, r3, #8
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	61da      	str	r2, [r3, #28]
      break;
 80041e2:	e043      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fbe0 	bl	80049b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004222:	e023      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fc24 	bl	8004a78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004264:	e002      	b.n	800426c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
      break;
 800426a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIM_ConfigClockSource+0x1c>
 8004298:	2302      	movs	r3, #2
 800429a:	e0b6      	b.n	800440a <HAL_TIM_ConfigClockSource+0x18a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d03e      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0xd8>
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	f200 8087 	bhi.w	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	f000 8086 	beq.w	80043f6 <HAL_TIM_ConfigClockSource+0x176>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ee:	d87f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 80042f0:	2b70      	cmp	r3, #112	; 0x70
 80042f2:	d01a      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xaa>
 80042f4:	2b70      	cmp	r3, #112	; 0x70
 80042f6:	d87b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 80042f8:	2b60      	cmp	r3, #96	; 0x60
 80042fa:	d050      	beq.n	800439e <HAL_TIM_ConfigClockSource+0x11e>
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d877      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 8004300:	2b50      	cmp	r3, #80	; 0x50
 8004302:	d03c      	beq.n	800437e <HAL_TIM_ConfigClockSource+0xfe>
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d873      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d058      	beq.n	80043be <HAL_TIM_ConfigClockSource+0x13e>
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d86f      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 8004310:	2b30      	cmp	r3, #48	; 0x30
 8004312:	d064      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15e>
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d86b      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d060      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15e>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d867      	bhi.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d05c      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15e>
 8004324:	2b10      	cmp	r3, #16
 8004326:	d05a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0x15e>
 8004328:	e062      	b.n	80043f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6899      	ldr	r1, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f000 fc7d 	bl	8004c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800434c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	609a      	str	r2, [r3, #8]
      break;
 8004356:	e04f      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f000 fc66 	bl	8004c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437a:	609a      	str	r2, [r3, #8]
      break;
 800437c:	e03c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	461a      	mov	r2, r3
 800438c:	f000 fbda 	bl	8004b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2150      	movs	r1, #80	; 0x50
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fc33 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800439c:	e02c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f000 fbf9 	bl	8004ba2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2160      	movs	r1, #96	; 0x60
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fc23 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80043bc:	e01c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f000 fbba 	bl	8004b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2140      	movs	r1, #64	; 0x40
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc13 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80043dc:	e00c      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	4610      	mov	r0, r2
 80043ea:	f000 fc0a 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e003      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a40      	ldr	r2, [pc, #256]	; (8004578 <TIM_Base_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d013      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d00f      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3d      	ldr	r2, [pc, #244]	; (800457c <TIM_Base_SetConfig+0x118>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00b      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3c      	ldr	r2, [pc, #240]	; (8004580 <TIM_Base_SetConfig+0x11c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d007      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <TIM_Base_SetConfig+0x120>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <TIM_Base_SetConfig+0x124>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	; (8004578 <TIM_Base_SetConfig+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2c      	ldr	r2, [pc, #176]	; (800457c <TIM_Base_SetConfig+0x118>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <TIM_Base_SetConfig+0x11c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <TIM_Base_SetConfig+0x120>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <TIM_Base_SetConfig+0x124>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a28      	ldr	r2, [pc, #160]	; (800458c <TIM_Base_SetConfig+0x128>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <TIM_Base_SetConfig+0x12c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <TIM_Base_SetConfig+0x130>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <TIM_Base_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <TIM_Base_SetConfig+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a11      	ldr	r2, [pc, #68]	; (800458c <TIM_Base_SetConfig+0x128>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <TIM_Base_SetConfig+0x12c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0xf8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a0f      	ldr	r2, [pc, #60]	; (8004594 <TIM_Base_SetConfig+0x130>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d103      	bne.n	8004564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	40014400 	.word	0x40014400
 8004594:	40014800 	.word	0x40014800

08004598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 0302 	bic.w	r3, r3, #2
 80045e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a2c      	ldr	r2, [pc, #176]	; (80046a4 <TIM_OC1_SetConfig+0x10c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_OC1_SetConfig+0x80>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a2b      	ldr	r2, [pc, #172]	; (80046a8 <TIM_OC1_SetConfig+0x110>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00b      	beq.n	8004618 <TIM_OC1_SetConfig+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <TIM_OC1_SetConfig+0x114>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_OC1_SetConfig+0x80>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <TIM_OC1_SetConfig+0x118>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC1_SetConfig+0x80>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a28      	ldr	r2, [pc, #160]	; (80046b4 <TIM_OC1_SetConfig+0x11c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10c      	bne.n	8004632 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0308 	bic.w	r3, r3, #8
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <TIM_OC1_SetConfig+0x10c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00f      	beq.n	800465a <TIM_OC1_SetConfig+0xc2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <TIM_OC1_SetConfig+0x110>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00b      	beq.n	800465a <TIM_OC1_SetConfig+0xc2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a19      	ldr	r2, [pc, #100]	; (80046ac <TIM_OC1_SetConfig+0x114>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <TIM_OC1_SetConfig+0xc2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <TIM_OC1_SetConfig+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d003      	beq.n	800465a <TIM_OC1_SetConfig+0xc2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <TIM_OC1_SetConfig+0x11c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800

080046b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0210 	bic.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0320 	bic.w	r3, r3, #32
 8004706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <TIM_OC2_SetConfig+0x100>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_OC2_SetConfig+0x6c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a27      	ldr	r2, [pc, #156]	; (80047bc <TIM_OC2_SetConfig+0x104>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10d      	bne.n	8004740 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <TIM_OC2_SetConfig+0x100>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00f      	beq.n	8004768 <TIM_OC2_SetConfig+0xb0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <TIM_OC2_SetConfig+0x104>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00b      	beq.n	8004768 <TIM_OC2_SetConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <TIM_OC2_SetConfig+0x108>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <TIM_OC2_SetConfig+0xb0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <TIM_OC2_SetConfig+0x10c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC2_SetConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <TIM_OC2_SetConfig+0x110>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_OC3_SetConfig+0xfc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC3_SetConfig+0x6a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <TIM_OC3_SetConfig+0x100>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10d      	bne.n	8004852 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC3_SetConfig+0xfc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00f      	beq.n	800487a <TIM_OC3_SetConfig+0xae>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <TIM_OC3_SetConfig+0x100>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00b      	beq.n	800487a <TIM_OC3_SetConfig+0xae>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <TIM_OC3_SetConfig+0x104>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d007      	beq.n	800487a <TIM_OC3_SetConfig+0xae>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <TIM_OC3_SetConfig+0x108>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d003      	beq.n	800487a <TIM_OC3_SetConfig+0xae>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <TIM_OC3_SetConfig+0x10c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d113      	bne.n	80048a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40013400 	.word	0x40013400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800

080048dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800492a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <TIM_OC4_SetConfig+0xc0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00f      	beq.n	8004960 <TIM_OC4_SetConfig+0x84>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <TIM_OC4_SetConfig+0xc4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_OC4_SetConfig+0x84>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <TIM_OC4_SetConfig+0xc8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_OC4_SetConfig+0x84>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <TIM_OC4_SetConfig+0xcc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_OC4_SetConfig+0x84>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <TIM_OC4_SetConfig+0xd0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d109      	bne.n	8004974 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <TIM_OC5_SetConfig+0xb4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_OC5_SetConfig+0x7a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <TIM_OC5_SetConfig+0xb8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_OC5_SetConfig+0x7a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <TIM_OC5_SetConfig+0xbc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_OC5_SetConfig+0x7a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <TIM_OC5_SetConfig+0xc0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_OC5_SetConfig+0x7a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <TIM_OC5_SetConfig+0xc4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d109      	bne.n	8004a3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	621a      	str	r2, [r3, #32]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <TIM_OC6_SetConfig+0xb8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00f      	beq.n	8004af4 <TIM_OC6_SetConfig+0x7c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <TIM_OC6_SetConfig+0xbc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_OC6_SetConfig+0x7c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <TIM_OC6_SetConfig+0xc0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_OC6_SetConfig+0x7c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <TIM_OC6_SetConfig+0xc4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC6_SetConfig+0x7c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <TIM_OC6_SetConfig+0xc8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d109      	bne.n	8004b08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	029b      	lsls	r3, r3, #10
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40013400 	.word	0x40013400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800

08004b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 030a 	bic.w	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f023 0210 	bic.w	r2, r3, #16
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	031b      	lsls	r3, r3, #12
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f043 0307 	orr.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e068      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2d      	ldr	r2, [pc, #180]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d018      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40013400 	.word	0x40013400
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014000 	.word	0x40014000

08004dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e040      	b.n	8004ea4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fd10 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f82c 	bl	8004eac <UART_SetConfig>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fad8 	bl	800541c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fb5f 	bl	8005560 <UART_CheckIdleState>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb0:	b08a      	sub	sp, #40	; 0x28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4ba4      	ldr	r3, [pc, #656]	; (800516c <UART_SetConfig+0x2c0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	6812      	ldr	r2, [r2, #0]
 8004ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a99      	ldr	r2, [pc, #612]	; (8005170 <UART_SetConfig+0x2c4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	4313      	orrs	r3, r2
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a90      	ldr	r2, [pc, #576]	; (8005174 <UART_SetConfig+0x2c8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d126      	bne.n	8004f84 <UART_SetConfig+0xd8>
 8004f36:	4b90      	ldr	r3, [pc, #576]	; (8005178 <UART_SetConfig+0x2cc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d81b      	bhi.n	8004f7c <UART_SetConfig+0xd0>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0xa0>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	08004f65 	.word	0x08004f65
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e116      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004f64:	2302      	movs	r3, #2
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e112      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e10e      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004f74:	2308      	movs	r3, #8
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e10a      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e106      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a7c      	ldr	r2, [pc, #496]	; (800517c <UART_SetConfig+0x2d0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d138      	bne.n	8005000 <UART_SetConfig+0x154>
 8004f8e:	4b7a      	ldr	r3, [pc, #488]	; (8005178 <UART_SetConfig+0x2cc>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d82d      	bhi.n	8004ff8 <UART_SetConfig+0x14c>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xf8>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004ff9 	.word	0x08004ff9
 8004fac:	08004ff9 	.word	0x08004ff9
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08004ff9 	.word	0x08004ff9
 8004fc0:	08004ff9 	.word	0x08004ff9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004ff9 	.word	0x08004ff9
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0d8      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0d4      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0d0      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e0cc      	b.n	8005192 <UART_SetConfig+0x2e6>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e0c8      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a5e      	ldr	r2, [pc, #376]	; (8005180 <UART_SetConfig+0x2d4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d125      	bne.n	8005056 <UART_SetConfig+0x1aa>
 800500a:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <UART_SetConfig+0x2cc>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d016      	beq.n	8005046 <UART_SetConfig+0x19a>
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d818      	bhi.n	800504e <UART_SetConfig+0x1a2>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d00a      	beq.n	8005036 <UART_SetConfig+0x18a>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d814      	bhi.n	800504e <UART_SetConfig+0x1a2>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <UART_SetConfig+0x182>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d008      	beq.n	800503e <UART_SetConfig+0x192>
 800502c:	e00f      	b.n	800504e <UART_SetConfig+0x1a2>
 800502e:	2300      	movs	r3, #0
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005034:	e0ad      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005036:	2302      	movs	r3, #2
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0a9      	b.n	8005192 <UART_SetConfig+0x2e6>
 800503e:	2304      	movs	r3, #4
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e0a5      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005046:	2308      	movs	r3, #8
 8005048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504c:	e0a1      	b.n	8005192 <UART_SetConfig+0x2e6>
 800504e:	2310      	movs	r3, #16
 8005050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005054:	e09d      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a4a      	ldr	r2, [pc, #296]	; (8005184 <UART_SetConfig+0x2d8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d125      	bne.n	80050ac <UART_SetConfig+0x200>
 8005060:	4b45      	ldr	r3, [pc, #276]	; (8005178 <UART_SetConfig+0x2cc>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800506a:	2bc0      	cmp	r3, #192	; 0xc0
 800506c:	d016      	beq.n	800509c <UART_SetConfig+0x1f0>
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d818      	bhi.n	80050a4 <UART_SetConfig+0x1f8>
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d00a      	beq.n	800508c <UART_SetConfig+0x1e0>
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d814      	bhi.n	80050a4 <UART_SetConfig+0x1f8>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <UART_SetConfig+0x1d8>
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d008      	beq.n	8005094 <UART_SetConfig+0x1e8>
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x1f8>
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e082      	b.n	8005192 <UART_SetConfig+0x2e6>
 800508c:	2302      	movs	r3, #2
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e07e      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e07a      	b.n	8005192 <UART_SetConfig+0x2e6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e076      	b.n	8005192 <UART_SetConfig+0x2e6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e072      	b.n	8005192 <UART_SetConfig+0x2e6>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a35      	ldr	r2, [pc, #212]	; (8005188 <UART_SetConfig+0x2dc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d12a      	bne.n	800510c <UART_SetConfig+0x260>
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <UART_SetConfig+0x2cc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c4:	d01a      	beq.n	80050fc <UART_SetConfig+0x250>
 80050c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ca:	d81b      	bhi.n	8005104 <UART_SetConfig+0x258>
 80050cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d0:	d00c      	beq.n	80050ec <UART_SetConfig+0x240>
 80050d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d6:	d815      	bhi.n	8005104 <UART_SetConfig+0x258>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <UART_SetConfig+0x238>
 80050dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e0:	d008      	beq.n	80050f4 <UART_SetConfig+0x248>
 80050e2:	e00f      	b.n	8005104 <UART_SetConfig+0x258>
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e052      	b.n	8005192 <UART_SetConfig+0x2e6>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e04e      	b.n	8005192 <UART_SetConfig+0x2e6>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e04a      	b.n	8005192 <UART_SetConfig+0x2e6>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e046      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e042      	b.n	8005192 <UART_SetConfig+0x2e6>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <UART_SetConfig+0x2c4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d13a      	bne.n	800518c <UART_SetConfig+0x2e0>
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <UART_SetConfig+0x2cc>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005124:	d01a      	beq.n	800515c <UART_SetConfig+0x2b0>
 8005126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512a:	d81b      	bhi.n	8005164 <UART_SetConfig+0x2b8>
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d00c      	beq.n	800514c <UART_SetConfig+0x2a0>
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d815      	bhi.n	8005164 <UART_SetConfig+0x2b8>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <UART_SetConfig+0x298>
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d008      	beq.n	8005154 <UART_SetConfig+0x2a8>
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x2b8>
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e022      	b.n	8005192 <UART_SetConfig+0x2e6>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e01e      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005154:	2304      	movs	r3, #4
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e01a      	b.n	8005192 <UART_SetConfig+0x2e6>
 800515c:	2308      	movs	r3, #8
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e016      	b.n	8005192 <UART_SetConfig+0x2e6>
 8005164:	2310      	movs	r3, #16
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e012      	b.n	8005192 <UART_SetConfig+0x2e6>
 800516c:	efff69f3 	.word	0xefff69f3
 8005170:	40008000 	.word	0x40008000
 8005174:	40013800 	.word	0x40013800
 8005178:	40021000 	.word	0x40021000
 800517c:	40004400 	.word	0x40004400
 8005180:	40004800 	.word	0x40004800
 8005184:	40004c00 	.word	0x40004c00
 8005188:	40005000 	.word	0x40005000
 800518c:	2310      	movs	r3, #16
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a9f      	ldr	r2, [pc, #636]	; (8005414 <UART_SetConfig+0x568>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d17a      	bne.n	8005292 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800519c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d824      	bhi.n	80051ee <UART_SetConfig+0x342>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x300>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051ef 	.word	0x080051ef
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051ef 	.word	0x080051ef
 80051bc:	080051df 	.word	0x080051df
 80051c0:	080051ef 	.word	0x080051ef
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	080051ef 	.word	0x080051ef
 80051cc:	080051e7 	.word	0x080051e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fd fdc4 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 80051d4:	61f8      	str	r0, [r7, #28]
        break;
 80051d6:	e010      	b.n	80051fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d8:	4b8f      	ldr	r3, [pc, #572]	; (8005418 <UART_SetConfig+0x56c>)
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e00d      	b.n	80051fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7fd fd25 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80051e2:	61f8      	str	r0, [r7, #28]
        break;
 80051e4:	e009      	b.n	80051fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ea:	61fb      	str	r3, [r7, #28]
        break;
 80051ec:	e005      	b.n	80051fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80fb 	beq.w	80053f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	429a      	cmp	r2, r3
 8005210:	d305      	bcc.n	800521e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	429a      	cmp	r2, r3
 800521c:	d903      	bls.n	8005226 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005224:	e0e8      	b.n	80053f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2200      	movs	r2, #0
 800522a:	461c      	mov	r4, r3
 800522c:	4615      	mov	r5, r2
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	022b      	lsls	r3, r5, #8
 8005238:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800523c:	0222      	lsls	r2, r4, #8
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	6849      	ldr	r1, [r1, #4]
 8005242:	0849      	lsrs	r1, r1, #1
 8005244:	2000      	movs	r0, #0
 8005246:	4688      	mov	r8, r1
 8005248:	4681      	mov	r9, r0
 800524a:	eb12 0a08 	adds.w	sl, r2, r8
 800524e:	eb43 0b09 	adc.w	fp, r3, r9
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005260:	4650      	mov	r0, sl
 8005262:	4659      	mov	r1, fp
 8005264:	f7fb f804 	bl	8000270 <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005276:	d308      	bcc.n	800528a <UART_SetConfig+0x3de>
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527e:	d204      	bcs.n	800528a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e0b6      	b.n	80053f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005290:	e0b2      	b.n	80053f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529a:	d15e      	bne.n	800535a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800529c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d828      	bhi.n	80052f6 <UART_SetConfig+0x44a>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x400>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fd fd44 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 80052d4:	61f8      	str	r0, [r7, #28]
        break;
 80052d6:	e014      	b.n	8005302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fd fd56 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 80052dc:	61f8      	str	r0, [r7, #28]
        break;
 80052de:	e010      	b.n	8005302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <UART_SetConfig+0x56c>)
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e00d      	b.n	8005302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fd fca1 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80052ea:	61f8      	str	r0, [r7, #28]
        break;
 80052ec:	e009      	b.n	8005302 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	61fb      	str	r3, [r7, #28]
        break;
 80052f4:	e005      	b.n	8005302 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d077      	beq.n	80053f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	005a      	lsls	r2, r3, #1
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	441a      	add	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b0f      	cmp	r3, #15
 8005322:	d916      	bls.n	8005352 <UART_SetConfig+0x4a6>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532a:	d212      	bcs.n	8005352 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f023 030f 	bic.w	r3, r3, #15
 8005334:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	b29b      	uxth	r3, r3
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	b29a      	uxth	r2, r3
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	4313      	orrs	r3, r2
 8005346:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	8afa      	ldrh	r2, [r7, #22]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	e052      	b.n	80053f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005358:	e04e      	b.n	80053f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535e:	2b08      	cmp	r3, #8
 8005360:	d827      	bhi.n	80053b2 <UART_SetConfig+0x506>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x4bc>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	0800538d 	.word	0x0800538d
 800536c:	08005395 	.word	0x08005395
 8005370:	0800539d 	.word	0x0800539d
 8005374:	080053b3 	.word	0x080053b3
 8005378:	080053a3 	.word	0x080053a3
 800537c:	080053b3 	.word	0x080053b3
 8005380:	080053b3 	.word	0x080053b3
 8005384:	080053b3 	.word	0x080053b3
 8005388:	080053ab 	.word	0x080053ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800538c:	f7fd fce6 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8005390:	61f8      	str	r0, [r7, #28]
        break;
 8005392:	e014      	b.n	80053be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005394:	f7fd fcf8 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8005398:	61f8      	str	r0, [r7, #28]
        break;
 800539a:	e010      	b.n	80053be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800539c:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <UART_SetConfig+0x56c>)
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e00d      	b.n	80053be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a2:	f7fd fc43 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80053a6:	61f8      	str	r0, [r7, #28]
        break;
 80053a8:	e009      	b.n	80053be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ae:	61fb      	str	r3, [r7, #28]
        break;
 80053b0:	e005      	b.n	80053be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053bc:	bf00      	nop
    }

    if (pclk != 0U)
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d019      	beq.n	80053f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	085a      	lsrs	r2, r3, #1
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	d909      	bls.n	80053f2 <UART_SetConfig+0x546>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d205      	bcs.n	80053f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	e002      	b.n	80053f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	; 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005412:	bf00      	nop
 8005414:	40008000 	.word	0x40008000
 8005418:	00f42400 	.word	0x00f42400

0800541c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01a      	beq.n	8005532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d10a      	bne.n	8005532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005570:	f7fc fb54 	bl	8001c1c <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b08      	cmp	r3, #8
 8005582:	d10e      	bne.n	80055a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f82d 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e023      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d10e      	bne.n	80055ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f817 	bl	80055f2 <UART_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00d      	b.n	80055ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b09c      	sub	sp, #112	; 0x70
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	603b      	str	r3, [r7, #0]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005602:	e0a5      	b.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	f000 80a1 	beq.w	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fc fb05 	bl	8001c1c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
 800561e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13e      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005638:	667b      	str	r3, [r7, #100]	; 0x64
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005644:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3308      	adds	r3, #8
 8005674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005676:	64ba      	str	r2, [r7, #72]	; 0x48
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800567c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e067      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04f      	beq.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056be:	d147      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e6      	bne.n	80056ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	613b      	str	r3, [r7, #16]
   return(result);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800571c:	623a      	str	r2, [r7, #32]
 800571e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	69f9      	ldr	r1, [r7, #28]
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	61bb      	str	r3, [r7, #24]
   return(result);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e010      	b.n	8005772 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	429a      	cmp	r2, r3
 800576c:	f43f af4a 	beq.w	8005604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3770      	adds	r7, #112	; 0x70
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <__NVIC_SetPriority>:
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	6039      	str	r1, [r7, #0]
 8005786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db0a      	blt.n	80057a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	490c      	ldr	r1, [pc, #48]	; (80057c8 <__NVIC_SetPriority+0x4c>)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	440b      	add	r3, r1
 80057a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057a4:	e00a      	b.n	80057bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <__NVIC_SetPriority+0x50>)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3b04      	subs	r3, #4
 80057b4:	0112      	lsls	r2, r2, #4
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	440b      	add	r3, r1
 80057ba:	761a      	strb	r2, [r3, #24]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	e000e100 	.word	0xe000e100
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <SysTick_Handler+0x1c>)
 80057d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057d8:	f001 fd28 	bl	800722c <xTaskGetSchedulerState>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057e2:	f002 fb11 	bl	8007e08 <xPortSysTickHandler>
  }
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	e000e010 	.word	0xe000e010

080057f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057f4:	2100      	movs	r1, #0
 80057f6:	f06f 0004 	mvn.w	r0, #4
 80057fa:	f7ff ffbf 	bl	800577c <__NVIC_SetPriority>
#endif
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580a:	f3ef 8305 	mrs	r3, IPSR
 800580e:	603b      	str	r3, [r7, #0]
  return(result);
 8005810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e00c      	b.n	8005838 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <osKernelInitialize+0x44>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <osKernelInitialize+0x44>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800582c:	2300      	movs	r3, #0
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	e002      	b.n	8005838 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005838:	687b      	ldr	r3, [r7, #4]
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	2000030c 	.word	0x2000030c

0800584c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005852:	f3ef 8305 	mrs	r3, IPSR
 8005856:	603b      	str	r3, [r7, #0]
  return(result);
 8005858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800585e:	f06f 0305 	mvn.w	r3, #5
 8005862:	607b      	str	r3, [r7, #4]
 8005864:	e010      	b.n	8005888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <osKernelStart+0x48>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d109      	bne.n	8005882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800586e:	f7ff ffbf 	bl	80057f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <osKernelStart+0x48>)
 8005874:	2202      	movs	r2, #2
 8005876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005878:	f001 f87c 	bl	8006974 <vTaskStartScheduler>
      stat = osOK;
 800587c:	2300      	movs	r3, #0
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e002      	b.n	8005888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000030c 	.word	0x2000030c

08005898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b08e      	sub	sp, #56	; 0x38
 800589c:	af04      	add	r7, sp, #16
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a8:	f3ef 8305 	mrs	r3, IPSR
 80058ac:	617b      	str	r3, [r7, #20]
  return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d17e      	bne.n	80059b2 <osThreadNew+0x11a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d07b      	beq.n	80059b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058be:	2318      	movs	r3, #24
 80058c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d045      	beq.n	800595e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <osThreadNew+0x48>
        name = attr->name;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <osThreadNew+0x6e>
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b38      	cmp	r3, #56	; 0x38
 80058f8:	d805      	bhi.n	8005906 <osThreadNew+0x6e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <osThreadNew+0x72>
        return (NULL);
 8005906:	2300      	movs	r3, #0
 8005908:	e054      	b.n	80059b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <osThreadNew+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2bbb      	cmp	r3, #187	; 0xbb
 8005928:	d90a      	bls.n	8005940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <osThreadNew+0xa8>
        mem = 1;
 800593a:	2301      	movs	r3, #1
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e010      	b.n	8005962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <osThreadNew+0xca>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <osThreadNew+0xca>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <osThreadNew+0xca>
          mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e001      	b.n	8005962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d110      	bne.n	800598a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005970:	9202      	str	r2, [sp, #8]
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fe0c 	bl	800659c <xTaskCreateStatic>
 8005984:	4603      	mov	r3, r0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e013      	b.n	80059b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d110      	bne.n	80059b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	b29a      	uxth	r2, r3
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fe57 	bl	8006656 <xTaskCreate>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d001      	beq.n	80059b2 <osThreadNew+0x11a>
            hTask = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059b2:	693b      	ldr	r3, [r7, #16]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c4:	f3ef 8305 	mrs	r3, IPSR
 80059c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <osDelay+0x1c>
    stat = osErrorISR;
 80059d0:	f06f 0305 	mvn.w	r3, #5
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e007      	b.n	80059e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 ff92 	bl	800690c <vTaskDelay>
    }
  }

  return (stat);
 80059e8:	68fb      	ldr	r3, [r7, #12]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4a06      	ldr	r2, [pc, #24]	; (8005a24 <vApplicationGetIdleTaskMemory+0x30>)
 8005a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2280      	movs	r2, #128	; 0x80
 8005a10:	601a      	str	r2, [r3, #0]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000310 	.word	0x20000310
 8005a24:	200003cc 	.word	0x200003cc

08005a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a07      	ldr	r2, [pc, #28]	; (8005a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4a06      	ldr	r2, [pc, #24]	; (8005a58 <vApplicationGetTimerTaskMemory+0x30>)
 8005a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	200005cc 	.word	0x200005cc
 8005a58:	20000688 	.word	0x20000688

08005a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f103 0208 	add.w	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0208 	add.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d103      	bne.n	8005b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e00c      	b.n	8005b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3308      	adds	r3, #8
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e002      	b.n	8005b2c <vListInsert+0x2e>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d2f6      	bcs.n	8005b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6892      	ldr	r2, [r2, #8]
 8005b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d103      	bne.n	8005ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bee:	f002 f879 	bl	8007ce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bfe:	fb01 f303 	mul.w	r3, r1, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d114      	bne.n	8005c6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3310      	adds	r3, #16
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f929 	bl	8006ea8 <xTaskRemoveFromEventList>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d012      	beq.n	8005c82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xQueueGenericReset+0xcc>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	e009      	b.n	8005c82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3310      	adds	r3, #16
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fef2 	bl	8005a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff feed 	bl	8005a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c82:	f002 f85f 	bl	8007d44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08e      	sub	sp, #56	; 0x38
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <xQueueGenericCreateStatic+0x52>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <xQueueGenericCreateStatic+0x56>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <xQueueGenericCreateStatic+0x58>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	623b      	str	r3, [r7, #32]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <xQueueGenericCreateStatic+0x7e>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueGenericCreateStatic+0x82>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueGenericCreateStatic+0x84>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61fb      	str	r3, [r7, #28]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d32:	2350      	movs	r3, #80	; 0x50
 8005d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b50      	cmp	r3, #80	; 0x50
 8005d3a:	d00a      	beq.n	8005d52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61bb      	str	r3, [r7, #24]
}
 8005d4e:	bf00      	nop
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f805 	bl	8005d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e002      	b.n	8005da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005db2:	2101      	movs	r1, #1
 8005db4:	69b8      	ldr	r0, [r7, #24]
 8005db6:	f7ff ff05 	bl	8005bc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08e      	sub	sp, #56	; 0x38
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericSend+0x32>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <xQueueGenericSend+0x40>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xQueueGenericSend+0x44>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <xQueueGenericSend+0x46>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <xQueueGenericSend+0x60>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d103      	bne.n	8005e3a <xQueueGenericSend+0x6e>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <xQueueGenericSend+0x72>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <xQueueGenericSend+0x74>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericSend+0x8e>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	623b      	str	r3, [r7, #32]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5a:	f001 f9e7 	bl	800722c <xTaskGetSchedulerState>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <xQueueGenericSend+0x9e>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericSend+0xa2>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericSend+0xa4>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61fb      	str	r3, [r7, #28]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e8a:	f001 ff2b 	bl	8007ce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d302      	bcc.n	8005ea0 <xQueueGenericSend+0xd4>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d129      	bne.n	8005ef4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea6:	f000 fa0b 	bl	80062c0 <prvCopyDataToQueue>
 8005eaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	3324      	adds	r3, #36	; 0x24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fff5 	bl	8006ea8 <xTaskRemoveFromEventList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ec4:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <xQueueGenericSend+0x1f8>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	e00a      	b.n	8005eec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005edc:	4b39      	ldr	r3, [pc, #228]	; (8005fc4 <xQueueGenericSend+0x1f8>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005eec:	f001 ff2a 	bl	8007d44 <vPortExitCritical>
				return pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e063      	b.n	8005fbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005efa:	f001 ff23 	bl	8007d44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e05c      	b.n	8005fbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 f82f 	bl	8006f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f12:	2301      	movs	r3, #1
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f16:	f001 ff15 	bl	8007d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f1a:	f000 fd9b 	bl	8006a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1e:	f001 fee1 	bl	8007ce4 <vPortEnterCritical>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d103      	bne.n	8005f38 <xQueueGenericSend+0x16c>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <xQueueGenericSend+0x182>
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f4e:	f001 fef9 	bl	8007d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f52:	1d3a      	adds	r2, r7, #4
 8005f54:	f107 0314 	add.w	r3, r7, #20
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f81e 	bl	8006f9c <xTaskCheckForTimeOut>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d124      	bne.n	8005fb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f68:	f000 faa2 	bl	80064b0 <prvIsQueueFull>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	3310      	adds	r3, #16
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 ff44 	bl	8006e08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f82:	f000 fa2d 	bl	80063e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f86:	f000 fd73 	bl	8006a70 <xTaskResumeAll>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f47f af7c 	bne.w	8005e8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <xQueueGenericSend+0x1f8>)
 8005f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	e772      	b.n	8005e8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa6:	f000 fa1b 	bl	80063e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005faa:	f000 fd61 	bl	8006a70 <xTaskResumeAll>
 8005fae:	e76c      	b.n	8005e8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fb2:	f000 fa15 	bl	80063e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb6:	f000 fd5b 	bl	8006a70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3738      	adds	r7, #56	; 0x38
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b090      	sub	sp, #64	; 0x40
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <xQueueGenericSendFromISR+0x3c>
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <xQueueGenericSendFromISR+0x40>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <xQueueGenericSendFromISR+0x42>
 8006008:	2300      	movs	r3, #0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d103      	bne.n	8006032 <xQueueGenericSendFromISR+0x6a>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <xQueueGenericSendFromISR+0x6e>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <xQueueGenericSendFromISR+0x70>
 8006036:	2300      	movs	r3, #0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	623b      	str	r3, [r7, #32]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006052:	f001 ff29 	bl	8007ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006056:	f3ef 8211 	mrs	r2, BASEPRI
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61fa      	str	r2, [r7, #28]
 800606c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800606e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	429a      	cmp	r2, r3
 800607c:	d302      	bcc.n	8006084 <xQueueGenericSendFromISR+0xbc>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d12f      	bne.n	80060e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800609a:	f000 f911 	bl	80062c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800609e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d112      	bne.n	80060ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d016      	beq.n	80060de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fef7 	bl	8006ea8 <xTaskRemoveFromEventList>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00e      	beq.n	80060de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e007      	b.n	80060de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060d2:	3301      	adds	r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	b25a      	sxtb	r2, r3
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060de:	2301      	movs	r3, #1
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060e2:	e001      	b.n	80060e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3740      	adds	r7, #64	; 0x40
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08c      	sub	sp, #48	; 0x30
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <xQueueReceive+0x30>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	623b      	str	r3, [r7, #32]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueReceive+0x3e>
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueReceive+0x42>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueReceive+0x44>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueReceive+0x5e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61fb      	str	r3, [r7, #28]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615e:	f001 f865 	bl	800722c <xTaskGetSchedulerState>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <xQueueReceive+0x6e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <xQueueReceive+0x72>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueReceive+0x74>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueReceive+0x8e>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61bb      	str	r3, [r7, #24]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618e:	f001 fda9 	bl	8007ce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a2:	f000 f8f7 	bl	8006394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1e5a      	subs	r2, r3, #1
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00f      	beq.n	80061d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	3310      	adds	r3, #16
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fe74 	bl	8006ea8 <xTaskRemoveFromEventList>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061c6:	4b3d      	ldr	r3, [pc, #244]	; (80062bc <xQueueReceive+0x1bc>)
 80061c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061d6:	f001 fdb5 	bl	8007d44 <vPortExitCritical>
				return pdPASS;
 80061da:	2301      	movs	r3, #1
 80061dc:	e069      	b.n	80062b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d103      	bne.n	80061ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061e4:	f001 fdae 	bl	8007d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e062      	b.n	80062b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061f2:	f107 0310 	add.w	r3, r7, #16
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 feba 	bl	8006f70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006200:	f001 fda0 	bl	8007d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006204:	f000 fc26 	bl	8006a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006208:	f001 fd6c 	bl	8007ce4 <vPortEnterCritical>
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006212:	b25b      	sxtb	r3, r3
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d103      	bne.n	8006222 <xQueueReceive+0x122>
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006228:	b25b      	sxtb	r3, r3
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d103      	bne.n	8006238 <xQueueReceive+0x138>
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006238:	f001 fd84 	bl	8007d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800623c:	1d3a      	adds	r2, r7, #4
 800623e:	f107 0310 	add.w	r3, r7, #16
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fea9 	bl	8006f9c <xTaskCheckForTimeOut>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d123      	bne.n	8006298 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006252:	f000 f917 	bl	8006484 <prvIsQueueEmpty>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fdcf 	bl	8006e08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800626a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626c:	f000 f8b8 	bl	80063e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006270:	f000 fbfe 	bl	8006a70 <xTaskResumeAll>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d189      	bne.n	800618e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <xQueueReceive+0x1bc>)
 800627c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	e780      	b.n	800618e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800628c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800628e:	f000 f8a7 	bl	80063e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006292:	f000 fbed 	bl	8006a70 <xTaskResumeAll>
 8006296:	e77a      	b.n	800618e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800629a:	f000 f8a1 	bl	80063e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800629e:	f000 fbe7 	bl	8006a70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a4:	f000 f8ee 	bl	8006484 <prvIsQueueEmpty>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f43f af6f 	beq.w	800618e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3730      	adds	r7, #48	; 0x30
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10d      	bne.n	80062fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d14d      	bne.n	8006382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 ffbc 	bl	8007268 <xTaskPriorityDisinherit>
 80062f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e043      	b.n	8006382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d119      	bne.n	8006334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6858      	ldr	r0, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	461a      	mov	r2, r3
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	f002 f822 	bl	8008354 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	441a      	add	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d32b      	bcc.n	8006382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e026      	b.n	8006382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68d8      	ldr	r0, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	461a      	mov	r2, r3
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	f002 f808 	bl	8008354 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	425b      	negs	r3, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d207      	bcs.n	8006370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	425b      	negs	r3, r3
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d105      	bne.n	8006382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	3b01      	subs	r3, #1
 8006380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800638a:	697b      	ldr	r3, [r7, #20]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d018      	beq.n	80063d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	441a      	add	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d303      	bcc.n	80063c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68d9      	ldr	r1, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	461a      	mov	r2, r3
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	f001 ffbe 	bl	8008354 <memcpy>
	}
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063e8:	f001 fc7c 	bl	8007ce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063f4:	e011      	b.n	800641a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d012      	beq.n	8006424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fd50 	bl	8006ea8 <xTaskRemoveFromEventList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800640e:	f000 fe27 	bl	8007060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	3b01      	subs	r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800641a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	dce9      	bgt.n	80063f6 <prvUnlockQueue+0x16>
 8006422:	e000      	b.n	8006426 <prvUnlockQueue+0x46>
					break;
 8006424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800642e:	f001 fc89 	bl	8007d44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006432:	f001 fc57 	bl	8007ce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800643e:	e011      	b.n	8006464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d012      	beq.n	800646e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3310      	adds	r3, #16
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fd2b 	bl	8006ea8 <xTaskRemoveFromEventList>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006458:	f000 fe02 	bl	8007060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	3b01      	subs	r3, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	dce9      	bgt.n	8006440 <prvUnlockQueue+0x60>
 800646c:	e000      	b.n	8006470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800646e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	22ff      	movs	r2, #255	; 0xff
 8006474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006478:	f001 fc64 	bl	8007d44 <vPortExitCritical>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800648c:	f001 fc2a 	bl	8007ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e001      	b.n	80064a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064a2:	f001 fc4f 	bl	8007d44 <vPortExitCritical>

	return xReturn;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064b8:	f001 fc14 	bl	8007ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d102      	bne.n	80064ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e001      	b.n	80064d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064d2:	f001 fc37 	bl	8007d44 <vPortExitCritical>

	return xReturn;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e014      	b.n	800651a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064f0:	4a0f      	ldr	r2, [pc, #60]	; (8006530 <vQueueAddToRegistry+0x50>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064fc:	490c      	ldr	r1, [pc, #48]	; (8006530 <vQueueAddToRegistry+0x50>)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006506:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <vQueueAddToRegistry+0x50>)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	4413      	add	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006512:	e006      	b.n	8006522 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b07      	cmp	r3, #7
 800651e:	d9e7      	bls.n	80064f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000a88 	.word	0x20000a88

08006534 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006544:	f001 fbce 	bl	8007ce4 <vPortEnterCritical>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800654e:	b25b      	sxtb	r3, r3
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d103      	bne.n	800655e <vQueueWaitForMessageRestricted+0x2a>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006564:	b25b      	sxtb	r3, r3
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d103      	bne.n	8006574 <vQueueWaitForMessageRestricted+0x40>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006574:	f001 fbe6 	bl	8007d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fc61 	bl	8006e50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800658e:	6978      	ldr	r0, [r7, #20]
 8006590:	f7ff ff26 	bl	80063e0 <prvUnlockQueue>
	}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08e      	sub	sp, #56	; 0x38
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	623b      	str	r3, [r7, #32]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	61fb      	str	r3, [r7, #28]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065e2:	23bc      	movs	r3, #188	; 0xbc
 80065e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2bbc      	cmp	r3, #188	; 0xbc
 80065ea:	d00a      	beq.n	8006602 <xTaskCreateStatic+0x66>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	61bb      	str	r3, [r7, #24]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006602:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01e      	beq.n	8006648 <xTaskCreateStatic+0xac>
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2202      	movs	r2, #2
 800661e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006622:	2300      	movs	r3, #0
 8006624:	9303      	str	r3, [sp, #12]
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	9302      	str	r3, [sp, #8]
 800662a:	f107 0314 	add.w	r3, r7, #20
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f850 	bl	80066e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006642:	f000 f8f3 	bl	800682c <prvAddNewTaskToReadyList>
 8006646:	e001      	b.n	800664c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800664c:	697b      	ldr	r3, [r7, #20]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3728      	adds	r7, #40	; 0x28
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006656:	b580      	push	{r7, lr}
 8006658:	b08c      	sub	sp, #48	; 0x30
 800665a:	af04      	add	r7, sp, #16
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	603b      	str	r3, [r7, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fc5c 	bl	8007f28 <pvPortMalloc>
 8006670:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006678:	20bc      	movs	r0, #188	; 0xbc
 800667a:	f001 fc55 	bl	8007f28 <pvPortMalloc>
 800667e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
 800668c:	e005      	b.n	800669a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800668e:	6978      	ldr	r0, [r7, #20]
 8006690:	f001 fd16 	bl	80080c0 <vPortFree>
 8006694:	e001      	b.n	800669a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	2300      	movs	r3, #0
 80066ac:	9303      	str	r3, [sp, #12]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	9302      	str	r3, [sp, #8]
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f80e 	bl	80066e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c4:	69f8      	ldr	r0, [r7, #28]
 80066c6:	f000 f8b1 	bl	800682c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066ca:	2301      	movs	r3, #1
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e002      	b.n	80066d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066d6:	69bb      	ldr	r3, [r7, #24]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	21a5      	movs	r1, #165	; 0xa5
 80066fa:	f001 fe39 	bl	8008370 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006708:	3b01      	subs	r3, #1
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f023 0307 	bic.w	r3, r3, #7
 8006716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	617b      	str	r3, [r7, #20]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01f      	beq.n	800677e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	e012      	b.n	800676a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4413      	add	r3, r2
 800674a:	7819      	ldrb	r1, [r3, #0]
 800674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	3334      	adds	r3, #52	; 0x34
 8006754:	460a      	mov	r2, r1
 8006756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d9e9      	bls.n	8006744 <prvInitialiseNewTask+0x64>
 8006770:	e000      	b.n	8006774 <prvInitialiseNewTask+0x94>
			{
				break;
 8006772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677c:	e003      	b.n	8006786 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	2b37      	cmp	r3, #55	; 0x37
 800678a:	d901      	bls.n	8006790 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800678c:	2337      	movs	r3, #55	; 0x37
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	2200      	movs	r2, #0
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	3304      	adds	r3, #4
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f978 	bl	8005a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	3318      	adds	r3, #24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff f973 	bl	8005a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	3354      	adds	r3, #84	; 0x54
 80067e0:	2260      	movs	r2, #96	; 0x60
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fdc3 	bl	8008370 <memset>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	4a0c      	ldr	r2, [pc, #48]	; (8006820 <prvInitialiseNewTask+0x140>)
 80067ee:	659a      	str	r2, [r3, #88]	; 0x58
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <prvInitialiseNewTask+0x144>)
 80067f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <prvInitialiseNewTask+0x148>)
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	69b8      	ldr	r0, [r7, #24]
 8006802:	f001 f941 	bl	8007a88 <pxPortInitialiseStack>
 8006806:	4602      	mov	r2, r0
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	0800903c 	.word	0x0800903c
 8006824:	0800905c 	.word	0x0800905c
 8006828:	0800901c 	.word	0x0800901c

0800682c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006834:	f001 fa56 	bl	8007ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <prvAddNewTaskToReadyList+0xc4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3301      	adds	r3, #1
 800683e:	4a2c      	ldr	r2, [pc, #176]	; (80068f0 <prvAddNewTaskToReadyList+0xc4>)
 8006840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006842:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800684a:	4a2a      	ldr	r2, [pc, #168]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006850:	4b27      	ldr	r3, [pc, #156]	; (80068f0 <prvAddNewTaskToReadyList+0xc4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d110      	bne.n	800687a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006858:	f000 fc26 	bl	80070a8 <prvInitialiseTaskLists>
 800685c:	e00d      	b.n	800687a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006866:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d802      	bhi.n	800687a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006874:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <prvAddNewTaskToReadyList+0xd0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <prvAddNewTaskToReadyList+0xd0>)
 8006882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <prvAddNewTaskToReadyList+0xd0>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <prvAddNewTaskToReadyList+0xd4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d903      	bls.n	80068a0 <prvAddNewTaskToReadyList+0x74>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4a18      	ldr	r2, [pc, #96]	; (8006900 <prvAddNewTaskToReadyList+0xd4>)
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a15      	ldr	r2, [pc, #84]	; (8006904 <prvAddNewTaskToReadyList+0xd8>)
 80068ae:	441a      	add	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7ff f8fd 	bl	8005ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068bc:	f001 fa42 	bl	8007d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <prvAddNewTaskToReadyList+0xcc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvAddNewTaskToReadyList+0xc8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d207      	bcs.n	80068e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <prvAddNewTaskToReadyList+0xdc>)
 80068d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000f9c 	.word	0x20000f9c
 80068f4:	20000ac8 	.word	0x20000ac8
 80068f8:	20000fa8 	.word	0x20000fa8
 80068fc:	20000fb8 	.word	0x20000fb8
 8006900:	20000fa4 	.word	0x20000fa4
 8006904:	20000acc 	.word	0x20000acc
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d017      	beq.n	800694e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800691e:	4b13      	ldr	r3, [pc, #76]	; (800696c <vTaskDelay+0x60>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <vTaskDelay+0x30>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60bb      	str	r3, [r7, #8]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800693c:	f000 f88a 	bl	8006a54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fcfe 	bl	8007344 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006948:	f000 f892 	bl	8006a70 <xTaskResumeAll>
 800694c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <vTaskDelay+0x64>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000fc4 	.word	0x20000fc4
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	; 0x28
 8006978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006982:	463a      	mov	r2, r7
 8006984:	1d39      	adds	r1, r7, #4
 8006986:	f107 0308 	add.w	r3, r7, #8
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f832 	bl	80059f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	9202      	str	r2, [sp, #8]
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2300      	movs	r3, #0
 80069a0:	460a      	mov	r2, r1
 80069a2:	4924      	ldr	r1, [pc, #144]	; (8006a34 <vTaskStartScheduler+0xc0>)
 80069a4:	4824      	ldr	r0, [pc, #144]	; (8006a38 <vTaskStartScheduler+0xc4>)
 80069a6:	f7ff fdf9 	bl	800659c <xTaskCreateStatic>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a23      	ldr	r2, [pc, #140]	; (8006a3c <vTaskStartScheduler+0xc8>)
 80069ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069b0:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <vTaskStartScheduler+0xc8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069b8:	2301      	movs	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	e001      	b.n	80069c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d102      	bne.n	80069ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069c8:	f000 fd10 	bl	80073ec <xTimerCreateTimerTask>
 80069cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d11b      	bne.n	8006a0c <vTaskStartScheduler+0x98>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
}
 80069e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <vTaskStartScheduler+0xcc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3354      	adds	r3, #84	; 0x54
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <vTaskStartScheduler+0xd0>)
 80069f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <vTaskStartScheduler+0xd4>)
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <vTaskStartScheduler+0xd8>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a00:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <vTaskStartScheduler+0xdc>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a06:	f001 f8cb 	bl	8007ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a0a:	e00e      	b.n	8006a2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d10a      	bne.n	8006a2a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <vTaskStartScheduler+0xb4>
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	08008f1c 	.word	0x08008f1c
 8006a38:	08007079 	.word	0x08007079
 8006a3c:	20000fc0 	.word	0x20000fc0
 8006a40:	20000ac8 	.word	0x20000ac8
 8006a44:	20000064 	.word	0x20000064
 8006a48:	20000fbc 	.word	0x20000fbc
 8006a4c:	20000fa8 	.word	0x20000fa8
 8006a50:	20000fa0 	.word	0x20000fa0

08006a54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a58:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <vTaskSuspendAll+0x18>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a03      	ldr	r2, [pc, #12]	; (8006a6c <vTaskSuspendAll+0x18>)
 8006a60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a62:	bf00      	nop
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	20000fc4 	.word	0x20000fc4

08006a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a7e:	4b42      	ldr	r3, [pc, #264]	; (8006b88 <xTaskResumeAll+0x118>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	603b      	str	r3, [r7, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a9c:	f001 f922 	bl	8007ce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006aa0:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <xTaskResumeAll+0x118>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	4a38      	ldr	r2, [pc, #224]	; (8006b88 <xTaskResumeAll+0x118>)
 8006aa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aaa:	4b37      	ldr	r3, [pc, #220]	; (8006b88 <xTaskResumeAll+0x118>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d162      	bne.n	8006b78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ab2:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <xTaskResumeAll+0x11c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d05e      	beq.n	8006b78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aba:	e02f      	b.n	8006b1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006abc:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <xTaskResumeAll+0x120>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3318      	adds	r3, #24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff f851 	bl	8005b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f84c 	bl	8005b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4b2d      	ldr	r3, [pc, #180]	; (8006b94 <xTaskResumeAll+0x124>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <xTaskResumeAll+0x7c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a2a      	ldr	r2, [pc, #168]	; (8006b94 <xTaskResumeAll+0x124>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <xTaskResumeAll+0x128>)
 8006afa:	441a      	add	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe ffd7 	bl	8005ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <xTaskResumeAll+0x12c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006b16:	4b22      	ldr	r3, [pc, #136]	; (8006ba0 <xTaskResumeAll+0x130>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b1c:	4b1c      	ldr	r3, [pc, #112]	; (8006b90 <xTaskResumeAll+0x120>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1cb      	bne.n	8006abc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b2a:	f000 fb5f 	bl	80071ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <xTaskResumeAll+0x134>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b3a:	f000 f847 	bl	8006bcc <xTaskIncrementTick>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <xTaskResumeAll+0x130>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f1      	bne.n	8006b3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <xTaskResumeAll+0x134>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b5c:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <xTaskResumeAll+0x130>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <xTaskResumeAll+0x138>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b78:	f001 f8e4 	bl	8007d44 <vPortExitCritical>

	return xAlreadyYielded;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000fc4 	.word	0x20000fc4
 8006b8c:	20000f9c 	.word	0x20000f9c
 8006b90:	20000f5c 	.word	0x20000f5c
 8006b94:	20000fa4 	.word	0x20000fa4
 8006b98:	20000acc 	.word	0x20000acc
 8006b9c:	20000ac8 	.word	0x20000ac8
 8006ba0:	20000fb0 	.word	0x20000fb0
 8006ba4:	20000fac 	.word	0x20000fac
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <xTaskGetTickCount+0x1c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bb8:	687b      	ldr	r3, [r7, #4]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000fa0 	.word	0x20000fa0

08006bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bd6:	4b4f      	ldr	r3, [pc, #316]	; (8006d14 <xTaskIncrementTick+0x148>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f040 808f 	bne.w	8006cfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006be0:	4b4d      	ldr	r3, [pc, #308]	; (8006d18 <xTaskIncrementTick+0x14c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006be8:	4a4b      	ldr	r2, [pc, #300]	; (8006d18 <xTaskIncrementTick+0x14c>)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d120      	bne.n	8006c36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bf4:	4b49      	ldr	r3, [pc, #292]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	603b      	str	r3, [r7, #0]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <xTaskIncrementTick+0x46>
 8006c14:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	4b41      	ldr	r3, [pc, #260]	; (8006d20 <xTaskIncrementTick+0x154>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a3f      	ldr	r2, [pc, #252]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4a3f      	ldr	r2, [pc, #252]	; (8006d20 <xTaskIncrementTick+0x154>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	4b3e      	ldr	r3, [pc, #248]	; (8006d24 <xTaskIncrementTick+0x158>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	4a3d      	ldr	r2, [pc, #244]	; (8006d24 <xTaskIncrementTick+0x158>)
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	f000 fadb 	bl	80071ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c36:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <xTaskIncrementTick+0x15c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d349      	bcc.n	8006cd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c40:	4b36      	ldr	r3, [pc, #216]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4a:	4b37      	ldr	r3, [pc, #220]	; (8006d28 <xTaskIncrementTick+0x15c>)
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	601a      	str	r2, [r3, #0]
					break;
 8006c52:	e03f      	b.n	8006cd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <xTaskIncrementTick+0x150>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d203      	bcs.n	8006c74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c6c:	4a2e      	ldr	r2, [pc, #184]	; (8006d28 <xTaskIncrementTick+0x15c>)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c72:	e02f      	b.n	8006cd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe ff79 	bl	8005b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3318      	adds	r3, #24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe ff70 	bl	8005b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4b25      	ldr	r3, [pc, #148]	; (8006d2c <xTaskIncrementTick+0x160>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d903      	bls.n	8006ca4 <xTaskIncrementTick+0xd8>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <xTaskIncrementTick+0x160>)
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <xTaskIncrementTick+0x164>)
 8006cb2:	441a      	add	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7fe fefb 	bl	8005ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <xTaskIncrementTick+0x168>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d3b8      	bcc.n	8006c40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd2:	e7b5      	b.n	8006c40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <xTaskIncrementTick+0x168>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4915      	ldr	r1, [pc, #84]	; (8006d30 <xTaskIncrementTick+0x164>)
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d901      	bls.n	8006cf0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cec:	2301      	movs	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <xTaskIncrementTick+0x16c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e004      	b.n	8006d08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cfe:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <xTaskIncrementTick+0x170>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a0d      	ldr	r2, [pc, #52]	; (8006d3c <xTaskIncrementTick+0x170>)
 8006d06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d08:	697b      	ldr	r3, [r7, #20]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000fc4 	.word	0x20000fc4
 8006d18:	20000fa0 	.word	0x20000fa0
 8006d1c:	20000f54 	.word	0x20000f54
 8006d20:	20000f58 	.word	0x20000f58
 8006d24:	20000fb4 	.word	0x20000fb4
 8006d28:	20000fbc 	.word	0x20000fbc
 8006d2c:	20000fa4 	.word	0x20000fa4
 8006d30:	20000acc 	.word	0x20000acc
 8006d34:	20000ac8 	.word	0x20000ac8
 8006d38:	20000fb0 	.word	0x20000fb0
 8006d3c:	20000fac 	.word	0x20000fac

08006d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <vTaskSwitchContext+0xb0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d4e:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <vTaskSwitchContext+0xb4>)
 8006d50:	2201      	movs	r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d54:	e046      	b.n	8006de4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <vTaskSwitchContext+0xb4>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5c:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <vTaskSwitchContext+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e010      	b.n	8006d86 <vTaskSwitchContext+0x46>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	607b      	str	r3, [r7, #4]
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <vTaskSwitchContext+0x3e>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	491d      	ldr	r1, [pc, #116]	; (8006dfc <vTaskSwitchContext+0xbc>)
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0e4      	beq.n	8006d64 <vTaskSwitchContext+0x24>
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <vTaskSwitchContext+0xbc>)
 8006da6:	4413      	add	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	3308      	adds	r3, #8
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d104      	bne.n	8006dca <vTaskSwitchContext+0x8a>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	605a      	str	r2, [r3, #4]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4a0b      	ldr	r2, [pc, #44]	; (8006e00 <vTaskSwitchContext+0xc0>)
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	4a08      	ldr	r2, [pc, #32]	; (8006df8 <vTaskSwitchContext+0xb8>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <vTaskSwitchContext+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3354      	adds	r3, #84	; 0x54
 8006de0:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <vTaskSwitchContext+0xc4>)
 8006de2:	6013      	str	r3, [r2, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000fc4 	.word	0x20000fc4
 8006df4:	20000fb0 	.word	0x20000fb0
 8006df8:	20000fa4 	.word	0x20000fa4
 8006dfc:	20000acc 	.word	0x20000acc
 8006e00:	20000ac8 	.word	0x20000ac8
 8006e04:	20000064 	.word	0x20000064

08006e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e2e:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <vTaskPlaceOnEventList+0x44>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3318      	adds	r3, #24
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fe fe61 	bl	8005afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	6838      	ldr	r0, [r7, #0]
 8006e40:	f000 fa80 	bl	8007344 <prvAddCurrentTaskToDelayedList>
}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000ac8 	.word	0x20000ac8

08006e50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	617b      	str	r3, [r7, #20]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3318      	adds	r3, #24
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7fe fe18 	bl	8005ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f000 fa55 	bl	8007344 <prvAddCurrentTaskToDelayedList>
	}
 8006e9a:	bf00      	nop
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000ac8 	.word	0x20000ac8

08006ea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3318      	adds	r3, #24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fe49 	bl	8005b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ede:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <xTaskRemoveFromEventList+0xb0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d11d      	bne.n	8006f22 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fe40 	bl	8005b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <xTaskRemoveFromEventList+0xb4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d903      	bls.n	8006f04 <xTaskRemoveFromEventList+0x5c>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a16      	ldr	r2, [pc, #88]	; (8006f5c <xTaskRemoveFromEventList+0xb4>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <xTaskRemoveFromEventList+0xb8>)
 8006f12:	441a      	add	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fe fdcb 	bl	8005ab6 <vListInsertEnd>
 8006f20:	e005      	b.n	8006f2e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3318      	adds	r3, #24
 8006f26:	4619      	mov	r1, r3
 8006f28:	480e      	ldr	r0, [pc, #56]	; (8006f64 <xTaskRemoveFromEventList+0xbc>)
 8006f2a:	f7fe fdc4 	bl	8005ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <xTaskRemoveFromEventList+0xc0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d905      	bls.n	8006f48 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <xTaskRemoveFromEventList+0xc4>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e001      	b.n	8006f4c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f4c:	697b      	ldr	r3, [r7, #20]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000fc4 	.word	0x20000fc4
 8006f5c:	20000fa4 	.word	0x20000fa4
 8006f60:	20000acc 	.word	0x20000acc
 8006f64:	20000f5c 	.word	0x20000f5c
 8006f68:	20000ac8 	.word	0x20000ac8
 8006f6c:	20000fb0 	.word	0x20000fb0

08006f70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <vTaskInternalSetTimeOutState+0x24>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <vTaskInternalSetTimeOutState+0x28>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	20000fb4 	.word	0x20000fb4
 8006f98:	20000fa0 	.word	0x20000fa0

08006f9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	613b      	str	r3, [r7, #16]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	60fb      	str	r3, [r7, #12]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fde:	f000 fe81 	bl	8007ce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <xTaskCheckForTimeOut+0xbc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d102      	bne.n	8007002 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e023      	b.n	800704a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <xTaskCheckForTimeOut+0xc0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d007      	beq.n	800701e <xTaskCheckForTimeOut+0x82>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	429a      	cmp	r2, r3
 8007016:	d302      	bcc.n	800701e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	e015      	b.n	800704a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	429a      	cmp	r2, r3
 8007026:	d20b      	bcs.n	8007040 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff9b 	bl	8006f70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e004      	b.n	800704a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007046:	2301      	movs	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800704a:	f000 fe7b 	bl	8007d44 <vPortExitCritical>

	return xReturn;
 800704e:	69fb      	ldr	r3, [r7, #28]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000fa0 	.word	0x20000fa0
 800705c:	20000fb4 	.word	0x20000fb4

08007060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <vTaskMissedYield+0x14>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	bf00      	nop
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	20000fb0 	.word	0x20000fb0

08007078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007080:	f000 f852 	bl	8007128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <prvIdleTask+0x28>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d9f9      	bls.n	8007080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <prvIdleTask+0x2c>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800709c:	e7f0      	b.n	8007080 <prvIdleTask+0x8>
 800709e:	bf00      	nop
 80070a0:	20000acc 	.word	0x20000acc
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	e00c      	b.n	80070ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a12      	ldr	r2, [pc, #72]	; (8007108 <prvInitialiseTaskLists+0x60>)
 80070c0:	4413      	add	r3, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fcca 	bl	8005a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3301      	adds	r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b37      	cmp	r3, #55	; 0x37
 80070d2:	d9ef      	bls.n	80070b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070d4:	480d      	ldr	r0, [pc, #52]	; (800710c <prvInitialiseTaskLists+0x64>)
 80070d6:	f7fe fcc1 	bl	8005a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <prvInitialiseTaskLists+0x68>)
 80070dc:	f7fe fcbe 	bl	8005a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070e0:	480c      	ldr	r0, [pc, #48]	; (8007114 <prvInitialiseTaskLists+0x6c>)
 80070e2:	f7fe fcbb 	bl	8005a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070e6:	480c      	ldr	r0, [pc, #48]	; (8007118 <prvInitialiseTaskLists+0x70>)
 80070e8:	f7fe fcb8 	bl	8005a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070ec:	480b      	ldr	r0, [pc, #44]	; (800711c <prvInitialiseTaskLists+0x74>)
 80070ee:	f7fe fcb5 	bl	8005a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <prvInitialiseTaskLists+0x78>)
 80070f4:	4a05      	ldr	r2, [pc, #20]	; (800710c <prvInitialiseTaskLists+0x64>)
 80070f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <prvInitialiseTaskLists+0x7c>)
 80070fa:	4a05      	ldr	r2, [pc, #20]	; (8007110 <prvInitialiseTaskLists+0x68>)
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000acc 	.word	0x20000acc
 800710c:	20000f2c 	.word	0x20000f2c
 8007110:	20000f40 	.word	0x20000f40
 8007114:	20000f5c 	.word	0x20000f5c
 8007118:	20000f70 	.word	0x20000f70
 800711c:	20000f88 	.word	0x20000f88
 8007120:	20000f54 	.word	0x20000f54
 8007124:	20000f58 	.word	0x20000f58

08007128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800712e:	e019      	b.n	8007164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007130:	f000 fdd8 	bl	8007ce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007134:	4b10      	ldr	r3, [pc, #64]	; (8007178 <prvCheckTasksWaitingTermination+0x50>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fd15 	bl	8005b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007146:	4b0d      	ldr	r3, [pc, #52]	; (800717c <prvCheckTasksWaitingTermination+0x54>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3b01      	subs	r3, #1
 800714c:	4a0b      	ldr	r2, [pc, #44]	; (800717c <prvCheckTasksWaitingTermination+0x54>)
 800714e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <prvCheckTasksWaitingTermination+0x58>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	4a0a      	ldr	r2, [pc, #40]	; (8007180 <prvCheckTasksWaitingTermination+0x58>)
 8007158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800715a:	f000 fdf3 	bl	8007d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f810 	bl	8007184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007164:	4b06      	ldr	r3, [pc, #24]	; (8007180 <prvCheckTasksWaitingTermination+0x58>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e1      	bne.n	8007130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000f70 	.word	0x20000f70
 800717c:	20000f9c 	.word	0x20000f9c
 8007180:	20000f84 	.word	0x20000f84

08007184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3354      	adds	r3, #84	; 0x54
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f997 	bl	80084c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 ff8b 	bl	80080c0 <vPortFree>
				vPortFree( pxTCB );
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 ff88 	bl	80080c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071b0:	e018      	b.n	80071e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d103      	bne.n	80071c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 ff7f 	bl	80080c0 <vPortFree>
	}
 80071c2:	e00f      	b.n	80071e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d00a      	beq.n	80071e4 <prvDeleteTCB+0x60>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	60fb      	str	r3, [r7, #12]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <prvDeleteTCB+0x5e>
	}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <prvResetNextTaskUnblockTime+0x38>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <prvResetNextTaskUnblockTime+0x3c>)
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007204:	e008      	b.n	8007218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <prvResetNextTaskUnblockTime+0x38>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4a04      	ldr	r2, [pc, #16]	; (8007228 <prvResetNextTaskUnblockTime+0x3c>)
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000f54 	.word	0x20000f54
 8007228:	20000fbc 	.word	0x20000fbc

0800722c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <xTaskGetSchedulerState+0x34>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800723a:	2301      	movs	r3, #1
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	e008      	b.n	8007252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <xTaskGetSchedulerState+0x38>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007248:	2302      	movs	r3, #2
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	e001      	b.n	8007252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007252:	687b      	ldr	r3, [r7, #4]
	}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	20000fa8 	.word	0x20000fa8
 8007264:	20000fc4 	.word	0x20000fc4

08007268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d056      	beq.n	800732c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800727e:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <xTaskPriorityDisinherit+0xd0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	429a      	cmp	r2, r3
 8007286:	d00a      	beq.n	800729e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d02c      	beq.n	800732c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d128      	bne.n	800732c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fc46 	bl	8005b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <xTaskPriorityDisinherit+0xd4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <xTaskPriorityDisinherit+0xa4>
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a0c      	ldr	r2, [pc, #48]	; (800733c <xTaskPriorityDisinherit+0xd4>)
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4a09      	ldr	r2, [pc, #36]	; (8007340 <xTaskPriorityDisinherit+0xd8>)
 800731a:	441a      	add	r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7fe fbc7 	bl	8005ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800732c:	697b      	ldr	r3, [r7, #20]
	}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	20000ac8 	.word	0x20000ac8
 800733c:	20000fa4 	.word	0x20000fa4
 8007340:	20000acc 	.word	0x20000acc

08007344 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800734e:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007354:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3304      	adds	r3, #4
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fc08 	bl	8005b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d10a      	bne.n	800737e <prvAddCurrentTaskToDelayedList+0x3a>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4819      	ldr	r0, [pc, #100]	; (80073dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007378:	f7fe fb9d 	bl	8005ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800737c:	e026      	b.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d209      	bcs.n	80073aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fbab 	bl	8005afe <vListInsert>
}
 80073a8:	e010      	b.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7fe fba1 	bl	8005afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d202      	bcs.n	80073cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073c6:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000fa0 	.word	0x20000fa0
 80073d8:	20000ac8 	.word	0x20000ac8
 80073dc:	20000f88 	.word	0x20000f88
 80073e0:	20000f58 	.word	0x20000f58
 80073e4:	20000f54 	.word	0x20000f54
 80073e8:	20000fbc 	.word	0x20000fbc

080073ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073f6:	f000 fb07 	bl	8007a08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <xTimerCreateTimerTask+0x80>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d021      	beq.n	8007446 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800740a:	1d3a      	adds	r2, r7, #4
 800740c:	f107 0108 	add.w	r1, r7, #8
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fb07 	bl	8005a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	2302      	movs	r3, #2
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	460a      	mov	r2, r1
 800742c:	4910      	ldr	r1, [pc, #64]	; (8007470 <xTimerCreateTimerTask+0x84>)
 800742e:	4811      	ldr	r0, [pc, #68]	; (8007474 <xTimerCreateTimerTask+0x88>)
 8007430:	f7ff f8b4 	bl	800659c <xTaskCreateStatic>
 8007434:	4603      	mov	r3, r0
 8007436:	4a10      	ldr	r2, [pc, #64]	; (8007478 <xTimerCreateTimerTask+0x8c>)
 8007438:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <xTimerCreateTimerTask+0x8c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	613b      	str	r3, [r7, #16]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007462:	697b      	ldr	r3, [r7, #20]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000ff8 	.word	0x20000ff8
 8007470:	08008f24 	.word	0x08008f24
 8007474:	080075b1 	.word	0x080075b1
 8007478:	20000ffc 	.word	0x20000ffc

0800747c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800748a:	2300      	movs	r3, #0
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	623b      	str	r3, [r7, #32]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <xTimerGenericCommand+0x98>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02a      	beq.n	8007508 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	dc18      	bgt.n	80074f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074c4:	f7ff feb2 	bl	800722c <xTaskGetSchedulerState>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d109      	bne.n	80074e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <xTimerGenericCommand+0x98>)
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	f107 0110 	add.w	r1, r7, #16
 80074d6:	2300      	movs	r3, #0
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	f7fe fc77 	bl	8005dcc <xQueueGenericSend>
 80074de:	6278      	str	r0, [r7, #36]	; 0x24
 80074e0:	e012      	b.n	8007508 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <xTimerGenericCommand+0x98>)
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f107 0110 	add.w	r1, r7, #16
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	f7fe fc6d 	bl	8005dcc <xQueueGenericSend>
 80074f2:	6278      	str	r0, [r7, #36]	; 0x24
 80074f4:	e008      	b.n	8007508 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <xTimerGenericCommand+0x98>)
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	f107 0110 	add.w	r1, r7, #16
 80074fe:	2300      	movs	r3, #0
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	f7fe fd61 	bl	8005fc8 <xQueueGenericSendFromISR>
 8007506:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800750a:	4618      	mov	r0, r3
 800750c:	3728      	adds	r7, #40	; 0x28
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000ff8 	.word	0x20000ff8

08007518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007522:	4b22      	ldr	r3, [pc, #136]	; (80075ac <prvProcessExpiredTimer+0x94>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fb1d 	bl	8005b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d022      	beq.n	800758a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	18d1      	adds	r1, r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	6978      	ldr	r0, [r7, #20]
 8007552:	f000 f8d1 	bl	80076f8 <prvInsertTimerInActiveList>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01f      	beq.n	800759c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800755c:	2300      	movs	r3, #0
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	2300      	movs	r3, #0
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	2100      	movs	r1, #0
 8007566:	6978      	ldr	r0, [r7, #20]
 8007568:	f7ff ff88 	bl	800747c <xTimerGenericCommand>
 800756c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d113      	bne.n	800759c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	60fb      	str	r3, [r7, #12]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007590:	f023 0301 	bic.w	r3, r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	6978      	ldr	r0, [r7, #20]
 80075a2:	4798      	blx	r3
}
 80075a4:	bf00      	nop
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000ff0 	.word	0x20000ff0

080075b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f857 	bl	8007670 <prvGetNextExpireTime>
 80075c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4619      	mov	r1, r3
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f803 	bl	80075d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075ce:	f000 f8d5 	bl	800777c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075d2:	e7f1      	b.n	80075b8 <prvTimerTask+0x8>

080075d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075de:	f7ff fa39 	bl	8006a54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f866 	bl	80076b8 <prvSampleTimeNow>
 80075ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d130      	bne.n	8007656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <prvProcessTimerOrBlockTask+0x3c>
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d806      	bhi.n	8007610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007602:	f7ff fa35 	bl	8006a70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff85 	bl	8007518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800760e:	e024      	b.n	800765a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007616:	4b13      	ldr	r3, [pc, #76]	; (8007664 <prvProcessTimerOrBlockTask+0x90>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <prvProcessTimerOrBlockTask+0x50>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <prvProcessTimerOrBlockTask+0x52>
 8007624:	2300      	movs	r3, #0
 8007626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <prvProcessTimerOrBlockTask+0x94>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4619      	mov	r1, r3
 8007636:	f7fe ff7d 	bl	8006534 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800763a:	f7ff fa19 	bl	8006a70 <xTaskResumeAll>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <prvProcessTimerOrBlockTask+0x98>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
}
 8007654:	e001      	b.n	800765a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007656:	f7ff fa0b 	bl	8006a70 <xTaskResumeAll>
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000ff4 	.word	0x20000ff4
 8007668:	20000ff8 	.word	0x20000ff8
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <prvGetNextExpireTime+0x44>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <prvGetNextExpireTime+0x16>
 8007682:	2201      	movs	r2, #1
 8007684:	e000      	b.n	8007688 <prvGetNextExpireTime+0x18>
 8007686:	2200      	movs	r2, #0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <prvGetNextExpireTime+0x44>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e001      	b.n	80076a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076a4:	68fb      	ldr	r3, [r7, #12]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000ff0 	.word	0x20000ff0

080076b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076c0:	f7ff fa74 	bl	8006bac <xTaskGetTickCount>
 80076c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <prvSampleTimeNow+0x3c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d205      	bcs.n	80076dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076d0:	f000 f936 	bl	8007940 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e002      	b.n	80076e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076e2:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <prvSampleTimeNow+0x3c>)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076e8:	68fb      	ldr	r3, [r7, #12]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20001000 	.word	0x20001000

080076f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d812      	bhi.n	8007744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e01b      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <prvInsertTimerInActiveList+0x7c>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3304      	adds	r3, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7fe f9de 	bl	8005afe <vListInsert>
 8007742:	e012      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d206      	bcs.n	800775a <prvInsertTimerInActiveList+0x62>
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d302      	bcc.n	800775a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007754:	2301      	movs	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e007      	b.n	800776a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <prvInsertTimerInActiveList+0x80>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7fe f9ca 	bl	8005afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800776a:	697b      	ldr	r3, [r7, #20]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000ff4 	.word	0x20000ff4
 8007778:	20000ff0 	.word	0x20000ff0

0800777c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08e      	sub	sp, #56	; 0x38
 8007780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007782:	e0ca      	b.n	800791a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da18      	bge.n	80077bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	3304      	adds	r3, #4
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	61fb      	str	r3, [r7, #28]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b2:	6850      	ldr	r0, [r2, #4]
 80077b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b6:	6892      	ldr	r2, [r2, #8]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f2c0 80aa 	blt.w	8007918 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe f9cb 	bl	8005b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077da:	463b      	mov	r3, r7
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ff6b 	bl	80076b8 <prvSampleTimeNow>
 80077e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b09      	cmp	r3, #9
 80077e8:	f200 8097 	bhi.w	800791a <prvProcessReceivedCommands+0x19e>
 80077ec:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <prvProcessReceivedCommands+0x78>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	08007891 	.word	0x08007891
 8007804:	080078a5 	.word	0x080078a5
 8007808:	080078ef 	.word	0x080078ef
 800780c:	0800781d 	.word	0x0800781d
 8007810:	0800781d 	.word	0x0800781d
 8007814:	08007891 	.word	0x08007891
 8007818:	080078a5 	.word	0x080078a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	18d1      	adds	r1, r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783c:	f7ff ff5c 	bl	80076f8 <prvInsertTimerInActiveList>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d069      	beq.n	800791a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800784c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d05e      	beq.n	800791a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	441a      	add	r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	2300      	movs	r3, #0
 800786a:	2100      	movs	r1, #0
 800786c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800786e:	f7ff fe05 	bl	800747c <xTimerGenericCommand>
 8007872:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d14f      	bne.n	800791a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	61bb      	str	r3, [r7, #24]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	b2da      	uxtb	r2, r3
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078a2:	e03a      	b.n	800791a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	617b      	str	r3, [r7, #20]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	18d1      	adds	r1, r2, r3
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e8:	f7ff ff06 	bl	80076f8 <prvInsertTimerInActiveList>
					break;
 80078ec:	e015      	b.n	800791a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d103      	bne.n	8007904 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fe:	f000 fbdf 	bl	80080c0 <vPortFree>
 8007902:	e00a      	b.n	800791a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007916:	e000      	b.n	800791a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007918:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <prvProcessReceivedCommands+0x1c0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1d39      	adds	r1, r7, #4
 8007920:	2200      	movs	r2, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fbec 	bl	8006100 <xQueueReceive>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	f47f af2a 	bne.w	8007784 <prvProcessReceivedCommands+0x8>
	}
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	3730      	adds	r7, #48	; 0x30
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000ff8 	.word	0x20000ff8

08007940 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007946:	e048      	b.n	80079da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007948:	4b2d      	ldr	r3, [pc, #180]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007952:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3304      	adds	r3, #4
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe f905 	bl	8005b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02e      	beq.n	80079da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4413      	add	r3, r2
 8007984:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	429a      	cmp	r2, r3
 800798c:	d90e      	bls.n	80079ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800799a:	4b19      	ldr	r3, [pc, #100]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fe f8aa 	bl	8005afe <vListInsert>
 80079aa:	e016      	b.n	80079da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079ac:	2300      	movs	r3, #0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	2300      	movs	r3, #0
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	2100      	movs	r1, #0
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f7ff fd60 	bl	800747c <xTimerGenericCommand>
 80079bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	603b      	str	r3, [r7, #0]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1b1      	bne.n	8007948 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ea:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <prvSwitchTimerLists+0xc4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <prvSwitchTimerLists+0xc0>)
 80079f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079f2:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <prvSwitchTimerLists+0xc4>)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	6013      	str	r3, [r2, #0]
}
 80079f8:	bf00      	nop
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000ff0 	.word	0x20000ff0
 8007a04:	20000ff4 	.word	0x20000ff4

08007a08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a0e:	f000 f969 	bl	8007ce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d120      	bne.n	8007a5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a1a:	4814      	ldr	r0, [pc, #80]	; (8007a6c <prvCheckForValidListAndQueue+0x64>)
 8007a1c:	f7fe f81e 	bl	8005a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a20:	4813      	ldr	r0, [pc, #76]	; (8007a70 <prvCheckForValidListAndQueue+0x68>)
 8007a22:	f7fe f81b 	bl	8005a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a26:	4b13      	ldr	r3, [pc, #76]	; (8007a74 <prvCheckForValidListAndQueue+0x6c>)
 8007a28:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <prvCheckForValidListAndQueue+0x64>)
 8007a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <prvCheckForValidListAndQueue+0x70>)
 8007a2e:	4a10      	ldr	r2, [pc, #64]	; (8007a70 <prvCheckForValidListAndQueue+0x68>)
 8007a30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a32:	2300      	movs	r3, #0
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <prvCheckForValidListAndQueue+0x74>)
 8007a38:	4a11      	ldr	r2, [pc, #68]	; (8007a80 <prvCheckForValidListAndQueue+0x78>)
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	200a      	movs	r0, #10
 8007a3e:	f7fe f929 	bl	8005c94 <xQueueGenericCreateStatic>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <prvCheckForValidListAndQueue+0x60>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	490b      	ldr	r1, [pc, #44]	; (8007a84 <prvCheckForValidListAndQueue+0x7c>)
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fd42 	bl	80064e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5c:	f000 f972 	bl	8007d44 <vPortExitCritical>
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000ff8 	.word	0x20000ff8
 8007a6c:	20000fc8 	.word	0x20000fc8
 8007a70:	20000fdc 	.word	0x20000fdc
 8007a74:	20000ff0 	.word	0x20000ff0
 8007a78:	20000ff4 	.word	0x20000ff4
 8007a7c:	200010a4 	.word	0x200010a4
 8007a80:	20001004 	.word	0x20001004
 8007a84:	08008f2c 	.word	0x08008f2c

08007a88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3b04      	subs	r3, #4
 8007a98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0201 	bic.w	r2, r3, #1
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ab8:	4a0c      	ldr	r2, [pc, #48]	; (8007aec <pxPortInitialiseStack+0x64>)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b14      	subs	r3, #20
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f06f 0202 	mvn.w	r2, #2
 8007ad6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3b20      	subs	r3, #32
 8007adc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	08007af1 	.word	0x08007af1

08007af0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007afa:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <prvTaskExitError+0x54>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b02:	d00a      	beq.n	8007b1a <prvTaskExitError+0x2a>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	60fb      	str	r3, [r7, #12]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <prvTaskExitError+0x28>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	60bb      	str	r3, [r7, #8]
}
 8007b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b2e:	bf00      	nop
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0fc      	beq.n	8007b30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20000060 	.word	0x20000060
	...

08007b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <pxCurrentTCBConst2>)
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f380 8809 	msr	PSP, r0
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	4770      	bx	lr
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst2>:
 8007b70:	20000ac8 	.word	0x20000ac8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b78:	4808      	ldr	r0, [pc, #32]	; (8007b9c <prvPortStartFirstTask+0x24>)
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f380 8808 	msr	MSP, r0
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8814 	msr	CONTROL, r0
 8007b8a:	b662      	cpsie	i
 8007b8c:	b661      	cpsie	f
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	df00      	svc	0
 8007b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b9a:	bf00      	nop
 8007b9c:	e000ed08 	.word	0xe000ed08

08007ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ba6:	4b46      	ldr	r3, [pc, #280]	; (8007cc0 <xPortStartScheduler+0x120>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a46      	ldr	r2, [pc, #280]	; (8007cc4 <xPortStartScheduler+0x124>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d10a      	bne.n	8007bc6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	613b      	str	r3, [r7, #16]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bc6:	4b3e      	ldr	r3, [pc, #248]	; (8007cc0 <xPortStartScheduler+0x120>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a3f      	ldr	r2, [pc, #252]	; (8007cc8 <xPortStartScheduler+0x128>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10a      	bne.n	8007be6 <xPortStartScheduler+0x46>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60fb      	str	r3, [r7, #12]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007be6:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <xPortStartScheduler+0x12c>)
 8007be8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	22ff      	movs	r2, #255	; 0xff
 8007bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <xPortStartScheduler+0x130>)
 8007c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c0e:	4b31      	ldr	r3, [pc, #196]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c14:	e009      	b.n	8007c2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c16:	4b2f      	ldr	r3, [pc, #188]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	4a2d      	ldr	r2, [pc, #180]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d0ef      	beq.n	8007c16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c36:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1c3 0307 	rsb	r3, r3, #7
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d00a      	beq.n	8007c58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60bb      	str	r3, [r7, #8]
}
 8007c54:	bf00      	nop
 8007c56:	e7fe      	b.n	8007c56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c58:	4b1e      	ldr	r3, [pc, #120]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c62:	4b1c      	ldr	r3, [pc, #112]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c6a:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <xPortStartScheduler+0x134>)
 8007c6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <xPortStartScheduler+0x138>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <xPortStartScheduler+0x138>)
 8007c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <xPortStartScheduler+0x138>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a14      	ldr	r2, [pc, #80]	; (8007cd8 <xPortStartScheduler+0x138>)
 8007c88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c8e:	f000 f8dd 	bl	8007e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c92:	4b12      	ldr	r3, [pc, #72]	; (8007cdc <xPortStartScheduler+0x13c>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c98:	f000 f8fc 	bl	8007e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c9c:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <xPortStartScheduler+0x140>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0f      	ldr	r2, [pc, #60]	; (8007ce0 <xPortStartScheduler+0x140>)
 8007ca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ca8:	f7ff ff66 	bl	8007b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cac:	f7ff f848 	bl	8006d40 <vTaskSwitchContext>
	prvTaskExitError();
 8007cb0:	f7ff ff1e 	bl	8007af0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed00 	.word	0xe000ed00
 8007cc4:	410fc271 	.word	0x410fc271
 8007cc8:	410fc270 	.word	0x410fc270
 8007ccc:	e000e400 	.word	0xe000e400
 8007cd0:	200010f4 	.word	0x200010f4
 8007cd4:	200010f8 	.word	0x200010f8
 8007cd8:	e000ed20 	.word	0xe000ed20
 8007cdc:	20000060 	.word	0x20000060
 8007ce0:	e000ef34 	.word	0xe000ef34

08007ce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	607b      	str	r3, [r7, #4]
}
 8007cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <vPortEnterCritical+0x58>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3301      	adds	r3, #1
 8007d04:	4a0d      	ldr	r2, [pc, #52]	; (8007d3c <vPortEnterCritical+0x58>)
 8007d06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <vPortEnterCritical+0x58>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d10f      	bne.n	8007d30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <vPortEnterCritical+0x5c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	603b      	str	r3, [r7, #0]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <vPortEnterCritical+0x4a>
	}
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20000060 	.word	0x20000060
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <vPortExitCritical+0x50>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <vPortExitCritical+0x24>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	607b      	str	r3, [r7, #4]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d68:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <vPortExitCritical+0x50>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	4a09      	ldr	r2, [pc, #36]	; (8007d94 <vPortExitCritical+0x50>)
 8007d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <vPortExitCritical+0x50>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <vPortExitCritical+0x42>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	f383 8811 	msr	BASEPRI, r3
}
 8007d84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20000060 	.word	0x20000060
	...

08007da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007da0:	f3ef 8009 	mrs	r0, PSP
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <pxCurrentTCBConst>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	f01e 0f10 	tst.w	lr, #16
 8007db0:	bf08      	it	eq
 8007db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dba:	6010      	str	r0, [r2, #0]
 8007dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007dc4:	f380 8811 	msr	BASEPRI, r0
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f7fe ffb6 	bl	8006d40 <vTaskSwitchContext>
 8007dd4:	f04f 0000 	mov.w	r0, #0
 8007dd8:	f380 8811 	msr	BASEPRI, r0
 8007ddc:	bc09      	pop	{r0, r3}
 8007dde:	6819      	ldr	r1, [r3, #0]
 8007de0:	6808      	ldr	r0, [r1, #0]
 8007de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de6:	f01e 0f10 	tst.w	lr, #16
 8007dea:	bf08      	it	eq
 8007dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007df0:	f380 8809 	msr	PSP, r0
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	f3af 8000 	nop.w

08007e00 <pxCurrentTCBConst>:
 8007e00:	20000ac8 	.word	0x20000ac8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop

08007e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
}
 8007e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e22:	f7fe fed3 	bl	8006bcc <xTaskIncrementTick>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <xPortSysTickHandler+0x40>)
 8007e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	2300      	movs	r3, #0
 8007e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
}
 8007e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <vPortSetupTimerInterrupt+0x34>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e56:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <vPortSetupTimerInterrupt+0x38>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <vPortSetupTimerInterrupt+0x3c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <vPortSetupTimerInterrupt+0x40>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <vPortSetupTimerInterrupt+0x44>)
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e6e:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <vPortSetupTimerInterrupt+0x34>)
 8007e70:	2207      	movs	r2, #7
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	e000e010 	.word	0xe000e010
 8007e84:	e000e018 	.word	0xe000e018
 8007e88:	20000054 	.word	0x20000054
 8007e8c:	10624dd3 	.word	0x10624dd3
 8007e90:	e000e014 	.word	0xe000e014

08007e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ea4 <vPortEnableVFP+0x10>
 8007e98:	6801      	ldr	r1, [r0, #0]
 8007e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e9e:	6001      	str	r1, [r0, #0]
 8007ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ea2:	bf00      	nop
 8007ea4:	e000ed88 	.word	0xe000ed88

08007ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007eae:	f3ef 8305 	mrs	r3, IPSR
 8007eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d914      	bls.n	8007ee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <vPortValidateInterruptPriority+0x70>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ec4:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <vPortValidateInterruptPriority+0x74>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	7afa      	ldrb	r2, [r7, #11]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d20a      	bcs.n	8007ee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	607b      	str	r3, [r7, #4]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ee4:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <vPortValidateInterruptPriority+0x78>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eec:	4b0d      	ldr	r3, [pc, #52]	; (8007f24 <vPortValidateInterruptPriority+0x7c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d90a      	bls.n	8007f0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	603b      	str	r3, [r7, #0]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <vPortValidateInterruptPriority+0x60>
	}
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	e000e3f0 	.word	0xe000e3f0
 8007f1c:	200010f4 	.word	0x200010f4
 8007f20:	e000ed0c 	.word	0xe000ed0c
 8007f24:	200010f8 	.word	0x200010f8

08007f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	; 0x28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f34:	f7fe fd8e 	bl	8006a54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f38:	4b5b      	ldr	r3, [pc, #364]	; (80080a8 <pvPortMalloc+0x180>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f40:	f000 f920 	bl	8008184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f44:	4b59      	ldr	r3, [pc, #356]	; (80080ac <pvPortMalloc+0x184>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f040 8093 	bne.w	8008078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01d      	beq.n	8007f94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f58:	2208      	movs	r2, #8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d014      	beq.n	8007f94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	3308      	adds	r3, #8
 8007f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <pvPortMalloc+0x6c>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	617b      	str	r3, [r7, #20]
}
 8007f90:	bf00      	nop
 8007f92:	e7fe      	b.n	8007f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d06e      	beq.n	8008078 <pvPortMalloc+0x150>
 8007f9a:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <pvPortMalloc+0x188>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d869      	bhi.n	8008078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fa4:	4b43      	ldr	r3, [pc, #268]	; (80080b4 <pvPortMalloc+0x18c>)
 8007fa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fa8:	4b42      	ldr	r3, [pc, #264]	; (80080b4 <pvPortMalloc+0x18c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fae:	e004      	b.n	8007fba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d903      	bls.n	8007fcc <pvPortMalloc+0xa4>
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f1      	bne.n	8007fb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <pvPortMalloc+0x180>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d050      	beq.n	8008078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	4413      	add	r3, r2
 8007fde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d91f      	bls.n	8008038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <pvPortMalloc+0xf8>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	613b      	str	r3, [r7, #16]
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008032:	69b8      	ldr	r0, [r7, #24]
 8008034:	f000 f908 	bl	8008248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008038:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <pvPortMalloc+0x188>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	4a1b      	ldr	r2, [pc, #108]	; (80080b0 <pvPortMalloc+0x188>)
 8008044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008046:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <pvPortMalloc+0x188>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b1b      	ldr	r3, [pc, #108]	; (80080b8 <pvPortMalloc+0x190>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d203      	bcs.n	800805a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008052:	4b17      	ldr	r3, [pc, #92]	; (80080b0 <pvPortMalloc+0x188>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <pvPortMalloc+0x190>)
 8008058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <pvPortMalloc+0x184>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	431a      	orrs	r2, r3
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <pvPortMalloc+0x194>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	4a11      	ldr	r2, [pc, #68]	; (80080bc <pvPortMalloc+0x194>)
 8008076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008078:	f7fe fcfa 	bl	8006a70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <pvPortMalloc+0x174>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	60fb      	str	r3, [r7, #12]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <pvPortMalloc+0x172>
	return pvReturn;
 800809c:	69fb      	ldr	r3, [r7, #28]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3728      	adds	r7, #40	; 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20003814 	.word	0x20003814
 80080ac:	20003828 	.word	0x20003828
 80080b0:	20003818 	.word	0x20003818
 80080b4:	2000380c 	.word	0x2000380c
 80080b8:	2000381c 	.word	0x2000381c
 80080bc:	20003820 	.word	0x20003820

080080c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d04d      	beq.n	800816e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080d2:	2308      	movs	r3, #8
 80080d4:	425b      	negs	r3, r3
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4413      	add	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	4b24      	ldr	r3, [pc, #144]	; (8008178 <vPortFree+0xb8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <vPortFree+0x44>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60fb      	str	r3, [r7, #12]
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <vPortFree+0x62>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60bb      	str	r3, [r7, #8]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	4b14      	ldr	r3, [pc, #80]	; (8008178 <vPortFree+0xb8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01e      	beq.n	800816e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11a      	bne.n	800816e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <vPortFree+0xb8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008148:	f7fe fc84 	bl	8006a54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <vPortFree+0xbc>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4413      	add	r3, r2
 8008156:	4a09      	ldr	r2, [pc, #36]	; (800817c <vPortFree+0xbc>)
 8008158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800815a:	6938      	ldr	r0, [r7, #16]
 800815c:	f000 f874 	bl	8008248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <vPortFree+0xc0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3301      	adds	r3, #1
 8008166:	4a06      	ldr	r2, [pc, #24]	; (8008180 <vPortFree+0xc0>)
 8008168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800816a:	f7fe fc81 	bl	8006a70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800816e:	bf00      	nop
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20003828 	.word	0x20003828
 800817c:	20003818 	.word	0x20003818
 8008180:	20003824 	.word	0x20003824

08008184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800818a:	f242 7310 	movw	r3, #10000	; 0x2710
 800818e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008190:	4b27      	ldr	r3, [pc, #156]	; (8008230 <prvHeapInit+0xac>)
 8008192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3307      	adds	r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0307 	bic.w	r3, r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <prvHeapInit+0xac>)
 80081b4:	4413      	add	r3, r2
 80081b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081bc:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <prvHeapInit+0xb0>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <prvHeapInit+0xb0>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081d0:	2208      	movs	r2, #8
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a15      	ldr	r2, [pc, #84]	; (8008238 <prvHeapInit+0xb4>)
 80081e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <prvHeapInit+0xb4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2200      	movs	r2, #0
 80081ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <prvHeapInit+0xb4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	1ad2      	subs	r2, r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008204:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <prvHeapInit+0xb4>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <prvHeapInit+0xb8>)
 8008212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <prvHeapInit+0xbc>)
 800821a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <prvHeapInit+0xc0>)
 800821e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	200010fc 	.word	0x200010fc
 8008234:	2000380c 	.word	0x2000380c
 8008238:	20003814 	.word	0x20003814
 800823c:	2000381c 	.word	0x2000381c
 8008240:	20003818 	.word	0x20003818
 8008244:	20003828 	.word	0x20003828

08008248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008250:	4b28      	ldr	r3, [pc, #160]	; (80082f4 <prvInsertBlockIntoFreeList+0xac>)
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e002      	b.n	800825c <prvInsertBlockIntoFreeList+0x14>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d8f7      	bhi.n	8008256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d108      	bne.n	800828a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	441a      	add	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d118      	bne.n	80082d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d00d      	beq.n	80082c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	441a      	add	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	e008      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvInsertBlockIntoFreeList+0xb0>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e003      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d002      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	2000380c 	.word	0x2000380c
 80082f8:	20003814 	.word	0x20003814

080082fc <__errno>:
 80082fc:	4b01      	ldr	r3, [pc, #4]	; (8008304 <__errno+0x8>)
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000064 	.word	0x20000064

08008308 <__libc_init_array>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	4d0d      	ldr	r5, [pc, #52]	; (8008340 <__libc_init_array+0x38>)
 800830c:	4c0d      	ldr	r4, [pc, #52]	; (8008344 <__libc_init_array+0x3c>)
 800830e:	1b64      	subs	r4, r4, r5
 8008310:	10a4      	asrs	r4, r4, #2
 8008312:	2600      	movs	r6, #0
 8008314:	42a6      	cmp	r6, r4
 8008316:	d109      	bne.n	800832c <__libc_init_array+0x24>
 8008318:	4d0b      	ldr	r5, [pc, #44]	; (8008348 <__libc_init_array+0x40>)
 800831a:	4c0c      	ldr	r4, [pc, #48]	; (800834c <__libc_init_array+0x44>)
 800831c:	f000 fcf8 	bl	8008d10 <_init>
 8008320:	1b64      	subs	r4, r4, r5
 8008322:	10a4      	asrs	r4, r4, #2
 8008324:	2600      	movs	r6, #0
 8008326:	42a6      	cmp	r6, r4
 8008328:	d105      	bne.n	8008336 <__libc_init_array+0x2e>
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008330:	4798      	blx	r3
 8008332:	3601      	adds	r6, #1
 8008334:	e7ee      	b.n	8008314 <__libc_init_array+0xc>
 8008336:	f855 3b04 	ldr.w	r3, [r5], #4
 800833a:	4798      	blx	r3
 800833c:	3601      	adds	r6, #1
 800833e:	e7f2      	b.n	8008326 <__libc_init_array+0x1e>
 8008340:	080090b8 	.word	0x080090b8
 8008344:	080090b8 	.word	0x080090b8
 8008348:	080090b8 	.word	0x080090b8
 800834c:	080090bc 	.word	0x080090bc

08008350 <__retarget_lock_acquire_recursive>:
 8008350:	4770      	bx	lr

08008352 <__retarget_lock_release_recursive>:
 8008352:	4770      	bx	lr

08008354 <memcpy>:
 8008354:	440a      	add	r2, r1
 8008356:	4291      	cmp	r1, r2
 8008358:	f100 33ff 	add.w	r3, r0, #4294967295
 800835c:	d100      	bne.n	8008360 <memcpy+0xc>
 800835e:	4770      	bx	lr
 8008360:	b510      	push	{r4, lr}
 8008362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836a:	4291      	cmp	r1, r2
 800836c:	d1f9      	bne.n	8008362 <memcpy+0xe>
 800836e:	bd10      	pop	{r4, pc}

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <sbrk_aligned>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4e0e      	ldr	r6, [pc, #56]	; (80083bc <sbrk_aligned+0x3c>)
 8008384:	460c      	mov	r4, r1
 8008386:	6831      	ldr	r1, [r6, #0]
 8008388:	4605      	mov	r5, r0
 800838a:	b911      	cbnz	r1, 8008392 <sbrk_aligned+0x12>
 800838c:	f000 f8f6 	bl	800857c <_sbrk_r>
 8008390:	6030      	str	r0, [r6, #0]
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	f000 f8f1 	bl	800857c <_sbrk_r>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d00a      	beq.n	80083b4 <sbrk_aligned+0x34>
 800839e:	1cc4      	adds	r4, r0, #3
 80083a0:	f024 0403 	bic.w	r4, r4, #3
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d007      	beq.n	80083b8 <sbrk_aligned+0x38>
 80083a8:	1a21      	subs	r1, r4, r0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f8e6 	bl	800857c <_sbrk_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d101      	bne.n	80083b8 <sbrk_aligned+0x38>
 80083b4:	f04f 34ff 	mov.w	r4, #4294967295
 80083b8:	4620      	mov	r0, r4
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
 80083bc:	20003834 	.word	0x20003834

080083c0 <_malloc_r>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	1ccd      	adds	r5, r1, #3
 80083c6:	f025 0503 	bic.w	r5, r5, #3
 80083ca:	3508      	adds	r5, #8
 80083cc:	2d0c      	cmp	r5, #12
 80083ce:	bf38      	it	cc
 80083d0:	250c      	movcc	r5, #12
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	4607      	mov	r7, r0
 80083d6:	db01      	blt.n	80083dc <_malloc_r+0x1c>
 80083d8:	42a9      	cmp	r1, r5
 80083da:	d905      	bls.n	80083e8 <_malloc_r+0x28>
 80083dc:	230c      	movs	r3, #12
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	2600      	movs	r6, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e8:	4e2e      	ldr	r6, [pc, #184]	; (80084a4 <_malloc_r+0xe4>)
 80083ea:	f000 f8f7 	bl	80085dc <__malloc_lock>
 80083ee:	6833      	ldr	r3, [r6, #0]
 80083f0:	461c      	mov	r4, r3
 80083f2:	bb34      	cbnz	r4, 8008442 <_malloc_r+0x82>
 80083f4:	4629      	mov	r1, r5
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff ffc2 	bl	8008380 <sbrk_aligned>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	4604      	mov	r4, r0
 8008400:	d14d      	bne.n	800849e <_malloc_r+0xde>
 8008402:	6834      	ldr	r4, [r6, #0]
 8008404:	4626      	mov	r6, r4
 8008406:	2e00      	cmp	r6, #0
 8008408:	d140      	bne.n	800848c <_malloc_r+0xcc>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4631      	mov	r1, r6
 800840e:	4638      	mov	r0, r7
 8008410:	eb04 0803 	add.w	r8, r4, r3
 8008414:	f000 f8b2 	bl	800857c <_sbrk_r>
 8008418:	4580      	cmp	r8, r0
 800841a:	d13a      	bne.n	8008492 <_malloc_r+0xd2>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	3503      	adds	r5, #3
 8008420:	1a6d      	subs	r5, r5, r1
 8008422:	f025 0503 	bic.w	r5, r5, #3
 8008426:	3508      	adds	r5, #8
 8008428:	2d0c      	cmp	r5, #12
 800842a:	bf38      	it	cc
 800842c:	250c      	movcc	r5, #12
 800842e:	4629      	mov	r1, r5
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff ffa5 	bl	8008380 <sbrk_aligned>
 8008436:	3001      	adds	r0, #1
 8008438:	d02b      	beq.n	8008492 <_malloc_r+0xd2>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	442b      	add	r3, r5
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	e00e      	b.n	8008460 <_malloc_r+0xa0>
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	1b52      	subs	r2, r2, r5
 8008446:	d41e      	bmi.n	8008486 <_malloc_r+0xc6>
 8008448:	2a0b      	cmp	r2, #11
 800844a:	d916      	bls.n	800847a <_malloc_r+0xba>
 800844c:	1961      	adds	r1, r4, r5
 800844e:	42a3      	cmp	r3, r4
 8008450:	6025      	str	r5, [r4, #0]
 8008452:	bf18      	it	ne
 8008454:	6059      	strne	r1, [r3, #4]
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	bf08      	it	eq
 800845a:	6031      	streq	r1, [r6, #0]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4638      	mov	r0, r7
 8008462:	f104 060b 	add.w	r6, r4, #11
 8008466:	f000 f8bf 	bl	80085e8 <__malloc_unlock>
 800846a:	f026 0607 	bic.w	r6, r6, #7
 800846e:	1d23      	adds	r3, r4, #4
 8008470:	1af2      	subs	r2, r6, r3
 8008472:	d0b6      	beq.n	80083e2 <_malloc_r+0x22>
 8008474:	1b9b      	subs	r3, r3, r6
 8008476:	50a3      	str	r3, [r4, r2]
 8008478:	e7b3      	b.n	80083e2 <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	6032      	streq	r2, [r6, #0]
 8008482:	605a      	strne	r2, [r3, #4]
 8008484:	e7ec      	b.n	8008460 <_malloc_r+0xa0>
 8008486:	4623      	mov	r3, r4
 8008488:	6864      	ldr	r4, [r4, #4]
 800848a:	e7b2      	b.n	80083f2 <_malloc_r+0x32>
 800848c:	4634      	mov	r4, r6
 800848e:	6876      	ldr	r6, [r6, #4]
 8008490:	e7b9      	b.n	8008406 <_malloc_r+0x46>
 8008492:	230c      	movs	r3, #12
 8008494:	603b      	str	r3, [r7, #0]
 8008496:	4638      	mov	r0, r7
 8008498:	f000 f8a6 	bl	80085e8 <__malloc_unlock>
 800849c:	e7a1      	b.n	80083e2 <_malloc_r+0x22>
 800849e:	6025      	str	r5, [r4, #0]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa0>
 80084a2:	bf00      	nop
 80084a4:	20003830 	.word	0x20003830

080084a8 <cleanup_glue>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	460c      	mov	r4, r1
 80084ac:	6809      	ldr	r1, [r1, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	b109      	cbz	r1, 80084b6 <cleanup_glue+0xe>
 80084b2:	f7ff fff9 	bl	80084a8 <cleanup_glue>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084be:	f000 b899 	b.w	80085f4 <_free_r>
	...

080084c4 <_reclaim_reent>:
 80084c4:	4b2c      	ldr	r3, [pc, #176]	; (8008578 <_reclaim_reent+0xb4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4283      	cmp	r3, r0
 80084ca:	b570      	push	{r4, r5, r6, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	d051      	beq.n	8008574 <_reclaim_reent+0xb0>
 80084d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80084d2:	b143      	cbz	r3, 80084e6 <_reclaim_reent+0x22>
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d14a      	bne.n	8008570 <_reclaim_reent+0xac>
 80084da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084dc:	6819      	ldr	r1, [r3, #0]
 80084de:	b111      	cbz	r1, 80084e6 <_reclaim_reent+0x22>
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f887 	bl	80085f4 <_free_r>
 80084e6:	6961      	ldr	r1, [r4, #20]
 80084e8:	b111      	cbz	r1, 80084f0 <_reclaim_reent+0x2c>
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f882 	bl	80085f4 <_free_r>
 80084f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084f2:	b111      	cbz	r1, 80084fa <_reclaim_reent+0x36>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 f87d 	bl	80085f4 <_free_r>
 80084fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084fc:	b111      	cbz	r1, 8008504 <_reclaim_reent+0x40>
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f878 	bl	80085f4 <_free_r>
 8008504:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008506:	b111      	cbz	r1, 800850e <_reclaim_reent+0x4a>
 8008508:	4620      	mov	r0, r4
 800850a:	f000 f873 	bl	80085f4 <_free_r>
 800850e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008510:	b111      	cbz	r1, 8008518 <_reclaim_reent+0x54>
 8008512:	4620      	mov	r0, r4
 8008514:	f000 f86e 	bl	80085f4 <_free_r>
 8008518:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800851a:	b111      	cbz	r1, 8008522 <_reclaim_reent+0x5e>
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f869 	bl	80085f4 <_free_r>
 8008522:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008524:	b111      	cbz	r1, 800852c <_reclaim_reent+0x68>
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f864 	bl	80085f4 <_free_r>
 800852c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800852e:	b111      	cbz	r1, 8008536 <_reclaim_reent+0x72>
 8008530:	4620      	mov	r0, r4
 8008532:	f000 f85f 	bl	80085f4 <_free_r>
 8008536:	69a3      	ldr	r3, [r4, #24]
 8008538:	b1e3      	cbz	r3, 8008574 <_reclaim_reent+0xb0>
 800853a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800853c:	4620      	mov	r0, r4
 800853e:	4798      	blx	r3
 8008540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008542:	b1b9      	cbz	r1, 8008574 <_reclaim_reent+0xb0>
 8008544:	4620      	mov	r0, r4
 8008546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800854a:	f7ff bfad 	b.w	80084a8 <cleanup_glue>
 800854e:	5949      	ldr	r1, [r1, r5]
 8008550:	b941      	cbnz	r1, 8008564 <_reclaim_reent+0xa0>
 8008552:	3504      	adds	r5, #4
 8008554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008556:	2d80      	cmp	r5, #128	; 0x80
 8008558:	68d9      	ldr	r1, [r3, #12]
 800855a:	d1f8      	bne.n	800854e <_reclaim_reent+0x8a>
 800855c:	4620      	mov	r0, r4
 800855e:	f000 f849 	bl	80085f4 <_free_r>
 8008562:	e7ba      	b.n	80084da <_reclaim_reent+0x16>
 8008564:	680e      	ldr	r6, [r1, #0]
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f844 	bl	80085f4 <_free_r>
 800856c:	4631      	mov	r1, r6
 800856e:	e7ef      	b.n	8008550 <_reclaim_reent+0x8c>
 8008570:	2500      	movs	r5, #0
 8008572:	e7ef      	b.n	8008554 <_reclaim_reent+0x90>
 8008574:	bd70      	pop	{r4, r5, r6, pc}
 8008576:	bf00      	nop
 8008578:	20000064 	.word	0x20000064

0800857c <_sbrk_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d06      	ldr	r5, [pc, #24]	; (8008598 <_sbrk_r+0x1c>)
 8008580:	2300      	movs	r3, #0
 8008582:	4604      	mov	r4, r0
 8008584:	4608      	mov	r0, r1
 8008586:	602b      	str	r3, [r5, #0]
 8008588:	f7f9 fa5c 	bl	8001a44 <_sbrk>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_sbrk_r+0x1a>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	b103      	cbz	r3, 8008596 <_sbrk_r+0x1a>
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	20003838 	.word	0x20003838

0800859c <siprintf>:
 800859c:	b40e      	push	{r1, r2, r3}
 800859e:	b500      	push	{lr}
 80085a0:	b09c      	sub	sp, #112	; 0x70
 80085a2:	ab1d      	add	r3, sp, #116	; 0x74
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	9006      	str	r0, [sp, #24]
 80085a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <siprintf+0x38>)
 80085ae:	9107      	str	r1, [sp, #28]
 80085b0:	9104      	str	r1, [sp, #16]
 80085b2:	4909      	ldr	r1, [pc, #36]	; (80085d8 <siprintf+0x3c>)
 80085b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b8:	9105      	str	r1, [sp, #20]
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	a902      	add	r1, sp, #8
 80085c0:	f000 f8c0 	bl	8008744 <_svfiprintf_r>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	b01c      	add	sp, #112	; 0x70
 80085cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085d0:	b003      	add	sp, #12
 80085d2:	4770      	bx	lr
 80085d4:	20000064 	.word	0x20000064
 80085d8:	ffff0208 	.word	0xffff0208

080085dc <__malloc_lock>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__malloc_lock+0x8>)
 80085de:	f7ff beb7 	b.w	8008350 <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	2000382c 	.word	0x2000382c

080085e8 <__malloc_unlock>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__malloc_unlock+0x8>)
 80085ea:	f7ff beb2 	b.w	8008352 <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	2000382c 	.word	0x2000382c

080085f4 <_free_r>:
 80085f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d044      	beq.n	8008684 <_free_r+0x90>
 80085fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fe:	9001      	str	r0, [sp, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f1a1 0404 	sub.w	r4, r1, #4
 8008606:	bfb8      	it	lt
 8008608:	18e4      	addlt	r4, r4, r3
 800860a:	f7ff ffe7 	bl	80085dc <__malloc_lock>
 800860e:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <_free_r+0x94>)
 8008610:	9801      	ldr	r0, [sp, #4]
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	b933      	cbnz	r3, 8008624 <_free_r+0x30>
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	6014      	str	r4, [r2, #0]
 800861a:	b003      	add	sp, #12
 800861c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008620:	f7ff bfe2 	b.w	80085e8 <__malloc_unlock>
 8008624:	42a3      	cmp	r3, r4
 8008626:	d908      	bls.n	800863a <_free_r+0x46>
 8008628:	6825      	ldr	r5, [r4, #0]
 800862a:	1961      	adds	r1, r4, r5
 800862c:	428b      	cmp	r3, r1
 800862e:	bf01      	itttt	eq
 8008630:	6819      	ldreq	r1, [r3, #0]
 8008632:	685b      	ldreq	r3, [r3, #4]
 8008634:	1949      	addeq	r1, r1, r5
 8008636:	6021      	streq	r1, [r4, #0]
 8008638:	e7ed      	b.n	8008616 <_free_r+0x22>
 800863a:	461a      	mov	r2, r3
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b10b      	cbz	r3, 8008644 <_free_r+0x50>
 8008640:	42a3      	cmp	r3, r4
 8008642:	d9fa      	bls.n	800863a <_free_r+0x46>
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	1855      	adds	r5, r2, r1
 8008648:	42a5      	cmp	r5, r4
 800864a:	d10b      	bne.n	8008664 <_free_r+0x70>
 800864c:	6824      	ldr	r4, [r4, #0]
 800864e:	4421      	add	r1, r4
 8008650:	1854      	adds	r4, r2, r1
 8008652:	42a3      	cmp	r3, r4
 8008654:	6011      	str	r1, [r2, #0]
 8008656:	d1e0      	bne.n	800861a <_free_r+0x26>
 8008658:	681c      	ldr	r4, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	6053      	str	r3, [r2, #4]
 800865e:	4421      	add	r1, r4
 8008660:	6011      	str	r1, [r2, #0]
 8008662:	e7da      	b.n	800861a <_free_r+0x26>
 8008664:	d902      	bls.n	800866c <_free_r+0x78>
 8008666:	230c      	movs	r3, #12
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	e7d6      	b.n	800861a <_free_r+0x26>
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	1961      	adds	r1, r4, r5
 8008670:	428b      	cmp	r3, r1
 8008672:	bf04      	itt	eq
 8008674:	6819      	ldreq	r1, [r3, #0]
 8008676:	685b      	ldreq	r3, [r3, #4]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	bf04      	itt	eq
 800867c:	1949      	addeq	r1, r1, r5
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	6054      	str	r4, [r2, #4]
 8008682:	e7ca      	b.n	800861a <_free_r+0x26>
 8008684:	b003      	add	sp, #12
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	20003830 	.word	0x20003830

0800868c <__ssputs_r>:
 800868c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008690:	688e      	ldr	r6, [r1, #8]
 8008692:	429e      	cmp	r6, r3
 8008694:	4682      	mov	sl, r0
 8008696:	460c      	mov	r4, r1
 8008698:	4690      	mov	r8, r2
 800869a:	461f      	mov	r7, r3
 800869c:	d838      	bhi.n	8008710 <__ssputs_r+0x84>
 800869e:	898a      	ldrh	r2, [r1, #12]
 80086a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086a4:	d032      	beq.n	800870c <__ssputs_r+0x80>
 80086a6:	6825      	ldr	r5, [r4, #0]
 80086a8:	6909      	ldr	r1, [r1, #16]
 80086aa:	eba5 0901 	sub.w	r9, r5, r1
 80086ae:	6965      	ldr	r5, [r4, #20]
 80086b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086b8:	3301      	adds	r3, #1
 80086ba:	444b      	add	r3, r9
 80086bc:	106d      	asrs	r5, r5, #1
 80086be:	429d      	cmp	r5, r3
 80086c0:	bf38      	it	cc
 80086c2:	461d      	movcc	r5, r3
 80086c4:	0553      	lsls	r3, r2, #21
 80086c6:	d531      	bpl.n	800872c <__ssputs_r+0xa0>
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7ff fe79 	bl	80083c0 <_malloc_r>
 80086ce:	4606      	mov	r6, r0
 80086d0:	b950      	cbnz	r0, 80086e8 <__ssputs_r+0x5c>
 80086d2:	230c      	movs	r3, #12
 80086d4:	f8ca 3000 	str.w	r3, [sl]
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	6921      	ldr	r1, [r4, #16]
 80086ea:	464a      	mov	r2, r9
 80086ec:	f7ff fe32 	bl	8008354 <memcpy>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	6126      	str	r6, [r4, #16]
 80086fe:	6165      	str	r5, [r4, #20]
 8008700:	444e      	add	r6, r9
 8008702:	eba5 0509 	sub.w	r5, r5, r9
 8008706:	6026      	str	r6, [r4, #0]
 8008708:	60a5      	str	r5, [r4, #8]
 800870a:	463e      	mov	r6, r7
 800870c:	42be      	cmp	r6, r7
 800870e:	d900      	bls.n	8008712 <__ssputs_r+0x86>
 8008710:	463e      	mov	r6, r7
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	4632      	mov	r2, r6
 8008716:	4641      	mov	r1, r8
 8008718:	f000 faa8 	bl	8008c6c <memmove>
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	1b9b      	subs	r3, r3, r6
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4433      	add	r3, r6
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	2000      	movs	r0, #0
 800872a:	e7db      	b.n	80086e4 <__ssputs_r+0x58>
 800872c:	462a      	mov	r2, r5
 800872e:	f000 fab7 	bl	8008ca0 <_realloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	2800      	cmp	r0, #0
 8008736:	d1e1      	bne.n	80086fc <__ssputs_r+0x70>
 8008738:	6921      	ldr	r1, [r4, #16]
 800873a:	4650      	mov	r0, sl
 800873c:	f7ff ff5a 	bl	80085f4 <_free_r>
 8008740:	e7c7      	b.n	80086d2 <__ssputs_r+0x46>
	...

08008744 <_svfiprintf_r>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	4698      	mov	r8, r3
 800874a:	898b      	ldrh	r3, [r1, #12]
 800874c:	061b      	lsls	r3, r3, #24
 800874e:	b09d      	sub	sp, #116	; 0x74
 8008750:	4607      	mov	r7, r0
 8008752:	460d      	mov	r5, r1
 8008754:	4614      	mov	r4, r2
 8008756:	d50e      	bpl.n	8008776 <_svfiprintf_r+0x32>
 8008758:	690b      	ldr	r3, [r1, #16]
 800875a:	b963      	cbnz	r3, 8008776 <_svfiprintf_r+0x32>
 800875c:	2140      	movs	r1, #64	; 0x40
 800875e:	f7ff fe2f 	bl	80083c0 <_malloc_r>
 8008762:	6028      	str	r0, [r5, #0]
 8008764:	6128      	str	r0, [r5, #16]
 8008766:	b920      	cbnz	r0, 8008772 <_svfiprintf_r+0x2e>
 8008768:	230c      	movs	r3, #12
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e0d1      	b.n	8008916 <_svfiprintf_r+0x1d2>
 8008772:	2340      	movs	r3, #64	; 0x40
 8008774:	616b      	str	r3, [r5, #20]
 8008776:	2300      	movs	r3, #0
 8008778:	9309      	str	r3, [sp, #36]	; 0x24
 800877a:	2320      	movs	r3, #32
 800877c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008780:	f8cd 800c 	str.w	r8, [sp, #12]
 8008784:	2330      	movs	r3, #48	; 0x30
 8008786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008930 <_svfiprintf_r+0x1ec>
 800878a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800878e:	f04f 0901 	mov.w	r9, #1
 8008792:	4623      	mov	r3, r4
 8008794:	469a      	mov	sl, r3
 8008796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879a:	b10a      	cbz	r2, 80087a0 <_svfiprintf_r+0x5c>
 800879c:	2a25      	cmp	r2, #37	; 0x25
 800879e:	d1f9      	bne.n	8008794 <_svfiprintf_r+0x50>
 80087a0:	ebba 0b04 	subs.w	fp, sl, r4
 80087a4:	d00b      	beq.n	80087be <_svfiprintf_r+0x7a>
 80087a6:	465b      	mov	r3, fp
 80087a8:	4622      	mov	r2, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff ff6d 	bl	800868c <__ssputs_r>
 80087b2:	3001      	adds	r0, #1
 80087b4:	f000 80aa 	beq.w	800890c <_svfiprintf_r+0x1c8>
 80087b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ba:	445a      	add	r2, fp
 80087bc:	9209      	str	r2, [sp, #36]	; 0x24
 80087be:	f89a 3000 	ldrb.w	r3, [sl]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80a2 	beq.w	800890c <_svfiprintf_r+0x1c8>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d2:	f10a 0a01 	add.w	sl, sl, #1
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	9307      	str	r3, [sp, #28]
 80087da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087de:	931a      	str	r3, [sp, #104]	; 0x68
 80087e0:	4654      	mov	r4, sl
 80087e2:	2205      	movs	r2, #5
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	4851      	ldr	r0, [pc, #324]	; (8008930 <_svfiprintf_r+0x1ec>)
 80087ea:	f7f7 fcf1 	bl	80001d0 <memchr>
 80087ee:	9a04      	ldr	r2, [sp, #16]
 80087f0:	b9d8      	cbnz	r0, 800882a <_svfiprintf_r+0xe6>
 80087f2:	06d0      	lsls	r0, r2, #27
 80087f4:	bf44      	itt	mi
 80087f6:	2320      	movmi	r3, #32
 80087f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fc:	0711      	lsls	r1, r2, #28
 80087fe:	bf44      	itt	mi
 8008800:	232b      	movmi	r3, #43	; 0x2b
 8008802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008806:	f89a 3000 	ldrb.w	r3, [sl]
 800880a:	2b2a      	cmp	r3, #42	; 0x2a
 800880c:	d015      	beq.n	800883a <_svfiprintf_r+0xf6>
 800880e:	9a07      	ldr	r2, [sp, #28]
 8008810:	4654      	mov	r4, sl
 8008812:	2000      	movs	r0, #0
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4621      	mov	r1, r4
 800881a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881e:	3b30      	subs	r3, #48	; 0x30
 8008820:	2b09      	cmp	r3, #9
 8008822:	d94e      	bls.n	80088c2 <_svfiprintf_r+0x17e>
 8008824:	b1b0      	cbz	r0, 8008854 <_svfiprintf_r+0x110>
 8008826:	9207      	str	r2, [sp, #28]
 8008828:	e014      	b.n	8008854 <_svfiprintf_r+0x110>
 800882a:	eba0 0308 	sub.w	r3, r0, r8
 800882e:	fa09 f303 	lsl.w	r3, r9, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	46a2      	mov	sl, r4
 8008838:	e7d2      	b.n	80087e0 <_svfiprintf_r+0x9c>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	1d19      	adds	r1, r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	9103      	str	r1, [sp, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	bfbb      	ittet	lt
 8008846:	425b      	neglt	r3, r3
 8008848:	f042 0202 	orrlt.w	r2, r2, #2
 800884c:	9307      	strge	r3, [sp, #28]
 800884e:	9307      	strlt	r3, [sp, #28]
 8008850:	bfb8      	it	lt
 8008852:	9204      	strlt	r2, [sp, #16]
 8008854:	7823      	ldrb	r3, [r4, #0]
 8008856:	2b2e      	cmp	r3, #46	; 0x2e
 8008858:	d10c      	bne.n	8008874 <_svfiprintf_r+0x130>
 800885a:	7863      	ldrb	r3, [r4, #1]
 800885c:	2b2a      	cmp	r3, #42	; 0x2a
 800885e:	d135      	bne.n	80088cc <_svfiprintf_r+0x188>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	9203      	str	r2, [sp, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfb8      	it	lt
 800886c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008870:	3402      	adds	r4, #2
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008940 <_svfiprintf_r+0x1fc>
 8008878:	7821      	ldrb	r1, [r4, #0]
 800887a:	2203      	movs	r2, #3
 800887c:	4650      	mov	r0, sl
 800887e:	f7f7 fca7 	bl	80001d0 <memchr>
 8008882:	b140      	cbz	r0, 8008896 <_svfiprintf_r+0x152>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	eba0 000a 	sub.w	r0, r0, sl
 800888a:	fa03 f000 	lsl.w	r0, r3, r0
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	4303      	orrs	r3, r0
 8008892:	3401      	adds	r4, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	4826      	ldr	r0, [pc, #152]	; (8008934 <_svfiprintf_r+0x1f0>)
 800889c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a0:	2206      	movs	r2, #6
 80088a2:	f7f7 fc95 	bl	80001d0 <memchr>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d038      	beq.n	800891c <_svfiprintf_r+0x1d8>
 80088aa:	4b23      	ldr	r3, [pc, #140]	; (8008938 <_svfiprintf_r+0x1f4>)
 80088ac:	bb1b      	cbnz	r3, 80088f6 <_svfiprintf_r+0x1b2>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	3307      	adds	r3, #7
 80088b2:	f023 0307 	bic.w	r3, r3, #7
 80088b6:	3308      	adds	r3, #8
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	4433      	add	r3, r6
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	e767      	b.n	8008792 <_svfiprintf_r+0x4e>
 80088c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c6:	460c      	mov	r4, r1
 80088c8:	2001      	movs	r0, #1
 80088ca:	e7a5      	b.n	8008818 <_svfiprintf_r+0xd4>
 80088cc:	2300      	movs	r3, #0
 80088ce:	3401      	adds	r4, #1
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	4619      	mov	r1, r3
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4620      	mov	r0, r4
 80088da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088de:	3a30      	subs	r2, #48	; 0x30
 80088e0:	2a09      	cmp	r2, #9
 80088e2:	d903      	bls.n	80088ec <_svfiprintf_r+0x1a8>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0c5      	beq.n	8008874 <_svfiprintf_r+0x130>
 80088e8:	9105      	str	r1, [sp, #20]
 80088ea:	e7c3      	b.n	8008874 <_svfiprintf_r+0x130>
 80088ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f0:	4604      	mov	r4, r0
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7f0      	b.n	80088d8 <_svfiprintf_r+0x194>
 80088f6:	ab03      	add	r3, sp, #12
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <_svfiprintf_r+0x1f8>)
 80088fe:	a904      	add	r1, sp, #16
 8008900:	4638      	mov	r0, r7
 8008902:	f3af 8000 	nop.w
 8008906:	1c42      	adds	r2, r0, #1
 8008908:	4606      	mov	r6, r0
 800890a:	d1d6      	bne.n	80088ba <_svfiprintf_r+0x176>
 800890c:	89ab      	ldrh	r3, [r5, #12]
 800890e:	065b      	lsls	r3, r3, #25
 8008910:	f53f af2c 	bmi.w	800876c <_svfiprintf_r+0x28>
 8008914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008916:	b01d      	add	sp, #116	; 0x74
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891c:	ab03      	add	r3, sp, #12
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	462a      	mov	r2, r5
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <_svfiprintf_r+0x1f8>)
 8008924:	a904      	add	r1, sp, #16
 8008926:	4638      	mov	r0, r7
 8008928:	f000 f87a 	bl	8008a20 <_printf_i>
 800892c:	e7eb      	b.n	8008906 <_svfiprintf_r+0x1c2>
 800892e:	bf00      	nop
 8008930:	0800907c 	.word	0x0800907c
 8008934:	08009086 	.word	0x08009086
 8008938:	00000000 	.word	0x00000000
 800893c:	0800868d 	.word	0x0800868d
 8008940:	08009082 	.word	0x08009082

08008944 <_printf_common>:
 8008944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008948:	4616      	mov	r6, r2
 800894a:	4699      	mov	r9, r3
 800894c:	688a      	ldr	r2, [r1, #8]
 800894e:	690b      	ldr	r3, [r1, #16]
 8008950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008954:	4293      	cmp	r3, r2
 8008956:	bfb8      	it	lt
 8008958:	4613      	movlt	r3, r2
 800895a:	6033      	str	r3, [r6, #0]
 800895c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008960:	4607      	mov	r7, r0
 8008962:	460c      	mov	r4, r1
 8008964:	b10a      	cbz	r2, 800896a <_printf_common+0x26>
 8008966:	3301      	adds	r3, #1
 8008968:	6033      	str	r3, [r6, #0]
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	0699      	lsls	r1, r3, #26
 800896e:	bf42      	ittt	mi
 8008970:	6833      	ldrmi	r3, [r6, #0]
 8008972:	3302      	addmi	r3, #2
 8008974:	6033      	strmi	r3, [r6, #0]
 8008976:	6825      	ldr	r5, [r4, #0]
 8008978:	f015 0506 	ands.w	r5, r5, #6
 800897c:	d106      	bne.n	800898c <_printf_common+0x48>
 800897e:	f104 0a19 	add.w	sl, r4, #25
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	6832      	ldr	r2, [r6, #0]
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	42ab      	cmp	r3, r5
 800898a:	dc26      	bgt.n	80089da <_printf_common+0x96>
 800898c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008990:	1e13      	subs	r3, r2, #0
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	bf18      	it	ne
 8008996:	2301      	movne	r3, #1
 8008998:	0692      	lsls	r2, r2, #26
 800899a:	d42b      	bmi.n	80089f4 <_printf_common+0xb0>
 800899c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089a0:	4649      	mov	r1, r9
 80089a2:	4638      	mov	r0, r7
 80089a4:	47c0      	blx	r8
 80089a6:	3001      	adds	r0, #1
 80089a8:	d01e      	beq.n	80089e8 <_printf_common+0xa4>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	68e5      	ldr	r5, [r4, #12]
 80089ae:	6832      	ldr	r2, [r6, #0]
 80089b0:	f003 0306 	and.w	r3, r3, #6
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	bf08      	it	eq
 80089b8:	1aad      	subeq	r5, r5, r2
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	6922      	ldr	r2, [r4, #16]
 80089be:	bf0c      	ite	eq
 80089c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089c4:	2500      	movne	r5, #0
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bfc4      	itt	gt
 80089ca:	1a9b      	subgt	r3, r3, r2
 80089cc:	18ed      	addgt	r5, r5, r3
 80089ce:	2600      	movs	r6, #0
 80089d0:	341a      	adds	r4, #26
 80089d2:	42b5      	cmp	r5, r6
 80089d4:	d11a      	bne.n	8008a0c <_printf_common+0xc8>
 80089d6:	2000      	movs	r0, #0
 80089d8:	e008      	b.n	80089ec <_printf_common+0xa8>
 80089da:	2301      	movs	r3, #1
 80089dc:	4652      	mov	r2, sl
 80089de:	4649      	mov	r1, r9
 80089e0:	4638      	mov	r0, r7
 80089e2:	47c0      	blx	r8
 80089e4:	3001      	adds	r0, #1
 80089e6:	d103      	bne.n	80089f0 <_printf_common+0xac>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f0:	3501      	adds	r5, #1
 80089f2:	e7c6      	b.n	8008982 <_printf_common+0x3e>
 80089f4:	18e1      	adds	r1, r4, r3
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	2030      	movs	r0, #48	; 0x30
 80089fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089fe:	4422      	add	r2, r4
 8008a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a08:	3302      	adds	r3, #2
 8008a0a:	e7c7      	b.n	800899c <_printf_common+0x58>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4649      	mov	r1, r9
 8008a12:	4638      	mov	r0, r7
 8008a14:	47c0      	blx	r8
 8008a16:	3001      	adds	r0, #1
 8008a18:	d0e6      	beq.n	80089e8 <_printf_common+0xa4>
 8008a1a:	3601      	adds	r6, #1
 8008a1c:	e7d9      	b.n	80089d2 <_printf_common+0x8e>
	...

08008a20 <_printf_i>:
 8008a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	7e0f      	ldrb	r7, [r1, #24]
 8008a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a28:	2f78      	cmp	r7, #120	; 0x78
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	469a      	mov	sl, r3
 8008a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a36:	d807      	bhi.n	8008a48 <_printf_i+0x28>
 8008a38:	2f62      	cmp	r7, #98	; 0x62
 8008a3a:	d80a      	bhi.n	8008a52 <_printf_i+0x32>
 8008a3c:	2f00      	cmp	r7, #0
 8008a3e:	f000 80d8 	beq.w	8008bf2 <_printf_i+0x1d2>
 8008a42:	2f58      	cmp	r7, #88	; 0x58
 8008a44:	f000 80a3 	beq.w	8008b8e <_printf_i+0x16e>
 8008a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a50:	e03a      	b.n	8008ac8 <_printf_i+0xa8>
 8008a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a56:	2b15      	cmp	r3, #21
 8008a58:	d8f6      	bhi.n	8008a48 <_printf_i+0x28>
 8008a5a:	a101      	add	r1, pc, #4	; (adr r1, 8008a60 <_printf_i+0x40>)
 8008a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a60:	08008ab9 	.word	0x08008ab9
 8008a64:	08008acd 	.word	0x08008acd
 8008a68:	08008a49 	.word	0x08008a49
 8008a6c:	08008a49 	.word	0x08008a49
 8008a70:	08008a49 	.word	0x08008a49
 8008a74:	08008a49 	.word	0x08008a49
 8008a78:	08008acd 	.word	0x08008acd
 8008a7c:	08008a49 	.word	0x08008a49
 8008a80:	08008a49 	.word	0x08008a49
 8008a84:	08008a49 	.word	0x08008a49
 8008a88:	08008a49 	.word	0x08008a49
 8008a8c:	08008bd9 	.word	0x08008bd9
 8008a90:	08008afd 	.word	0x08008afd
 8008a94:	08008bbb 	.word	0x08008bbb
 8008a98:	08008a49 	.word	0x08008a49
 8008a9c:	08008a49 	.word	0x08008a49
 8008aa0:	08008bfb 	.word	0x08008bfb
 8008aa4:	08008a49 	.word	0x08008a49
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008a49 	.word	0x08008a49
 8008ab0:	08008a49 	.word	0x08008a49
 8008ab4:	08008bc3 	.word	0x08008bc3
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	602a      	str	r2, [r5, #0]
 8008ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e0a3      	b.n	8008c14 <_printf_i+0x1f4>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	6829      	ldr	r1, [r5, #0]
 8008ad0:	0606      	lsls	r6, r0, #24
 8008ad2:	f101 0304 	add.w	r3, r1, #4
 8008ad6:	d50a      	bpl.n	8008aee <_printf_i+0xce>
 8008ad8:	680e      	ldr	r6, [r1, #0]
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	da03      	bge.n	8008ae8 <_printf_i+0xc8>
 8008ae0:	232d      	movs	r3, #45	; 0x2d
 8008ae2:	4276      	negs	r6, r6
 8008ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ae8:	485e      	ldr	r0, [pc, #376]	; (8008c64 <_printf_i+0x244>)
 8008aea:	230a      	movs	r3, #10
 8008aec:	e019      	b.n	8008b22 <_printf_i+0x102>
 8008aee:	680e      	ldr	r6, [r1, #0]
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008af6:	bf18      	it	ne
 8008af8:	b236      	sxthne	r6, r6
 8008afa:	e7ef      	b.n	8008adc <_printf_i+0xbc>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	6820      	ldr	r0, [r4, #0]
 8008b00:	1d19      	adds	r1, r3, #4
 8008b02:	6029      	str	r1, [r5, #0]
 8008b04:	0601      	lsls	r1, r0, #24
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0xec>
 8008b08:	681e      	ldr	r6, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <_printf_i+0xf2>
 8008b0c:	0646      	lsls	r6, r0, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0xe8>
 8008b10:	881e      	ldrh	r6, [r3, #0]
 8008b12:	4854      	ldr	r0, [pc, #336]	; (8008c64 <_printf_i+0x244>)
 8008b14:	2f6f      	cmp	r7, #111	; 0x6f
 8008b16:	bf0c      	ite	eq
 8008b18:	2308      	moveq	r3, #8
 8008b1a:	230a      	movne	r3, #10
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b22:	6865      	ldr	r5, [r4, #4]
 8008b24:	60a5      	str	r5, [r4, #8]
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	bfa2      	ittt	ge
 8008b2a:	6821      	ldrge	r1, [r4, #0]
 8008b2c:	f021 0104 	bicge.w	r1, r1, #4
 8008b30:	6021      	strge	r1, [r4, #0]
 8008b32:	b90e      	cbnz	r6, 8008b38 <_printf_i+0x118>
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	d04d      	beq.n	8008bd4 <_printf_i+0x1b4>
 8008b38:	4615      	mov	r5, r2
 8008b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b42:	5dc7      	ldrb	r7, [r0, r7]
 8008b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b48:	4637      	mov	r7, r6
 8008b4a:	42bb      	cmp	r3, r7
 8008b4c:	460e      	mov	r6, r1
 8008b4e:	d9f4      	bls.n	8008b3a <_printf_i+0x11a>
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d10b      	bne.n	8008b6c <_printf_i+0x14c>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	07de      	lsls	r6, r3, #31
 8008b58:	d508      	bpl.n	8008b6c <_printf_i+0x14c>
 8008b5a:	6923      	ldr	r3, [r4, #16]
 8008b5c:	6861      	ldr	r1, [r4, #4]
 8008b5e:	4299      	cmp	r1, r3
 8008b60:	bfde      	ittt	le
 8008b62:	2330      	movle	r3, #48	; 0x30
 8008b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b6c:	1b52      	subs	r2, r2, r5
 8008b6e:	6122      	str	r2, [r4, #16]
 8008b70:	f8cd a000 	str.w	sl, [sp]
 8008b74:	464b      	mov	r3, r9
 8008b76:	aa03      	add	r2, sp, #12
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f7ff fee2 	bl	8008944 <_printf_common>
 8008b80:	3001      	adds	r0, #1
 8008b82:	d14c      	bne.n	8008c1e <_printf_i+0x1fe>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	b004      	add	sp, #16
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	4835      	ldr	r0, [pc, #212]	; (8008c64 <_printf_i+0x244>)
 8008b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008b94:	6829      	ldr	r1, [r5, #0]
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b9c:	6029      	str	r1, [r5, #0]
 8008b9e:	061d      	lsls	r5, r3, #24
 8008ba0:	d514      	bpl.n	8008bcc <_printf_i+0x1ac>
 8008ba2:	07df      	lsls	r7, r3, #31
 8008ba4:	bf44      	itt	mi
 8008ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8008baa:	6023      	strmi	r3, [r4, #0]
 8008bac:	b91e      	cbnz	r6, 8008bb6 <_printf_i+0x196>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f023 0320 	bic.w	r3, r3, #32
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	2310      	movs	r3, #16
 8008bb8:	e7b0      	b.n	8008b1c <_printf_i+0xfc>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f043 0320 	orr.w	r3, r3, #32
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	2378      	movs	r3, #120	; 0x78
 8008bc4:	4828      	ldr	r0, [pc, #160]	; (8008c68 <_printf_i+0x248>)
 8008bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bca:	e7e3      	b.n	8008b94 <_printf_i+0x174>
 8008bcc:	0659      	lsls	r1, r3, #25
 8008bce:	bf48      	it	mi
 8008bd0:	b2b6      	uxthmi	r6, r6
 8008bd2:	e7e6      	b.n	8008ba2 <_printf_i+0x182>
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	e7bb      	b.n	8008b50 <_printf_i+0x130>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	6826      	ldr	r6, [r4, #0]
 8008bdc:	6961      	ldr	r1, [r4, #20]
 8008bde:	1d18      	adds	r0, r3, #4
 8008be0:	6028      	str	r0, [r5, #0]
 8008be2:	0635      	lsls	r5, r6, #24
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	d501      	bpl.n	8008bec <_printf_i+0x1cc>
 8008be8:	6019      	str	r1, [r3, #0]
 8008bea:	e002      	b.n	8008bf2 <_printf_i+0x1d2>
 8008bec:	0670      	lsls	r0, r6, #25
 8008bee:	d5fb      	bpl.n	8008be8 <_printf_i+0x1c8>
 8008bf0:	8019      	strh	r1, [r3, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	4615      	mov	r5, r2
 8008bf8:	e7ba      	b.n	8008b70 <_printf_i+0x150>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	6862      	ldr	r2, [r4, #4]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7f7 fae2 	bl	80001d0 <memchr>
 8008c0c:	b108      	cbz	r0, 8008c12 <_printf_i+0x1f2>
 8008c0e:	1b40      	subs	r0, r0, r5
 8008c10:	6060      	str	r0, [r4, #4]
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	6123      	str	r3, [r4, #16]
 8008c16:	2300      	movs	r3, #0
 8008c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c1c:	e7a8      	b.n	8008b70 <_printf_i+0x150>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	462a      	mov	r2, r5
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	47d0      	blx	sl
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d0ab      	beq.n	8008b84 <_printf_i+0x164>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	079b      	lsls	r3, r3, #30
 8008c30:	d413      	bmi.n	8008c5a <_printf_i+0x23a>
 8008c32:	68e0      	ldr	r0, [r4, #12]
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	4298      	cmp	r0, r3
 8008c38:	bfb8      	it	lt
 8008c3a:	4618      	movlt	r0, r3
 8008c3c:	e7a4      	b.n	8008b88 <_printf_i+0x168>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4632      	mov	r2, r6
 8008c42:	4649      	mov	r1, r9
 8008c44:	4640      	mov	r0, r8
 8008c46:	47d0      	blx	sl
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d09b      	beq.n	8008b84 <_printf_i+0x164>
 8008c4c:	3501      	adds	r5, #1
 8008c4e:	68e3      	ldr	r3, [r4, #12]
 8008c50:	9903      	ldr	r1, [sp, #12]
 8008c52:	1a5b      	subs	r3, r3, r1
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dcf2      	bgt.n	8008c3e <_printf_i+0x21e>
 8008c58:	e7eb      	b.n	8008c32 <_printf_i+0x212>
 8008c5a:	2500      	movs	r5, #0
 8008c5c:	f104 0619 	add.w	r6, r4, #25
 8008c60:	e7f5      	b.n	8008c4e <_printf_i+0x22e>
 8008c62:	bf00      	nop
 8008c64:	0800908d 	.word	0x0800908d
 8008c68:	0800909e 	.word	0x0800909e

08008c6c <memmove>:
 8008c6c:	4288      	cmp	r0, r1
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	eb01 0402 	add.w	r4, r1, r2
 8008c74:	d902      	bls.n	8008c7c <memmove+0x10>
 8008c76:	4284      	cmp	r4, r0
 8008c78:	4623      	mov	r3, r4
 8008c7a:	d807      	bhi.n	8008c8c <memmove+0x20>
 8008c7c:	1e43      	subs	r3, r0, #1
 8008c7e:	42a1      	cmp	r1, r4
 8008c80:	d008      	beq.n	8008c94 <memmove+0x28>
 8008c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c8a:	e7f8      	b.n	8008c7e <memmove+0x12>
 8008c8c:	4402      	add	r2, r0
 8008c8e:	4601      	mov	r1, r0
 8008c90:	428a      	cmp	r2, r1
 8008c92:	d100      	bne.n	8008c96 <memmove+0x2a>
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c9e:	e7f7      	b.n	8008c90 <memmove+0x24>

08008ca0 <_realloc_r>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4614      	mov	r4, r2
 8008ca8:	460e      	mov	r6, r1
 8008caa:	b921      	cbnz	r1, 8008cb6 <_realloc_r+0x16>
 8008cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	f7ff bb85 	b.w	80083c0 <_malloc_r>
 8008cb6:	b92a      	cbnz	r2, 8008cc4 <_realloc_r+0x24>
 8008cb8:	f7ff fc9c 	bl	80085f4 <_free_r>
 8008cbc:	4625      	mov	r5, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	f000 f81b 	bl	8008cfe <_malloc_usable_size_r>
 8008cc8:	4284      	cmp	r4, r0
 8008cca:	4607      	mov	r7, r0
 8008ccc:	d802      	bhi.n	8008cd4 <_realloc_r+0x34>
 8008cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cd2:	d812      	bhi.n	8008cfa <_realloc_r+0x5a>
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4640      	mov	r0, r8
 8008cd8:	f7ff fb72 	bl	80083c0 <_malloc_r>
 8008cdc:	4605      	mov	r5, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0ed      	beq.n	8008cbe <_realloc_r+0x1e>
 8008ce2:	42bc      	cmp	r4, r7
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	bf28      	it	cs
 8008cea:	463a      	movcs	r2, r7
 8008cec:	f7ff fb32 	bl	8008354 <memcpy>
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	f7ff fc7e 	bl	80085f4 <_free_r>
 8008cf8:	e7e1      	b.n	8008cbe <_realloc_r+0x1e>
 8008cfa:	4635      	mov	r5, r6
 8008cfc:	e7df      	b.n	8008cbe <_realloc_r+0x1e>

08008cfe <_malloc_usable_size_r>:
 8008cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d02:	1f18      	subs	r0, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfbc      	itt	lt
 8008d08:	580b      	ldrlt	r3, [r1, r0]
 8008d0a:	18c0      	addlt	r0, r0, r3
 8008d0c:	4770      	bx	lr
	...

08008d10 <_init>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	bf00      	nop
 8008d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d16:	bc08      	pop	{r3}
 8008d18:	469e      	mov	lr, r3
 8008d1a:	4770      	bx	lr

08008d1c <_fini>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr
